
senior_design_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  0800da60  0800da60  0001da60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e87c  0800e87c  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800e87c  0800e87c  0001e87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e884  0800e884  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e884  0800e884  0001e884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e888  0800e888  0001e888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800e88c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020214  2**0
                  CONTENTS
 10 .bss          000009e8  20000214  20000214  00020214  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bfc  20000bfc  00020214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002307a  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044d8  00000000  00000000  000432be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a98  00000000  00000000  00047798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001918  00000000  00000000  00049230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a20  00000000  00000000  0004ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f311  00000000  00000000  00071568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7a94  00000000  00000000  00090879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016830d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000834c  00000000  00000000  00168360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da44 	.word	0x0800da44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	0800da44 	.word	0x0800da44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LTC6813_init_reg_limits>:

/* Helper function to initialize register limits. */
void LTC6813_init_reg_limits(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic // A two dimensional array that will store the data
							 )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
    for(uint8_t cic=0; cic<total_ic; cic++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e038      	b.n	8000f30 <LTC6813_init_reg_limits+0x84>
    {
        ic[cic].ic_reg.cell_channels=18;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	22e8      	movs	r2, #232	; 0xe8
 8000ec2:	fb02 f303 	mul.w	r3, r2, r3
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	2212      	movs	r2, #18
 8000ecc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ic[cic].ic_reg.stat_channels=4;
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	22e8      	movs	r2, #232	; 0xe8
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	2204      	movs	r2, #4
 8000ede:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        ic[cic].ic_reg.aux_channels=9;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	22e8      	movs	r2, #232	; 0xe8
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	2209      	movs	r2, #9
 8000ef0:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
        ic[cic].ic_reg.num_cv_reg=6;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	22e8      	movs	r2, #232	; 0xe8
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	2206      	movs	r2, #6
 8000f02:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
        ic[cic].ic_reg.num_gpio_reg=4;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	22e8      	movs	r2, #232	; 0xe8
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	2204      	movs	r2, #4
 8000f14:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
        ic[cic].ic_reg.num_stat_reg=2;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	22e8      	movs	r2, #232	; 0xe8
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	2202      	movs	r2, #2
 8000f26:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    for(uint8_t cic=0; cic<total_ic; cic++)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3c2      	bcc.n	8000ebe <LTC6813_init_reg_limits+0x12>
    }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LTC6813_adcv>:
/* Starts cell voltage conversion */
void LTC6813_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				 )
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	460b      	mov	r3, r1
 8000f52:	71bb      	strb	r3, [r7, #6]
 8000f54:	4613      	mov	r3, r2
 8000f56:	717b      	strb	r3, [r7, #5]
    LTC681x_adcv(MD,DCP,CH);
 8000f58:	797a      	ldrb	r2, [r7, #5]
 8000f5a:	79b9      	ldrb	r1, [r7, #6]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fb6a 	bl	8001638 <LTC681x_adcv>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <LTC6813_rdcv>:
/*  Reads and parses the LTC6813 cell voltage registers */
uint8_t LTC6813_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	603a      	str	r2, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
	pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8000f80:	79b9      	ldrb	r1, [r7, #6]
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fb81 	bl	800168e <LTC681x_rdcv>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
	return(pec_error);
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <LTC6813_pollAdc>:
	return(LTC681x_pladc());
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6813_pollAdc()
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
	return(LTC681x_pollAdc());
 8000f9e:	f000 fcfb 	bl	8001998 <LTC681x_pollAdc>
 8000fa2:	4603      	mov	r3, r0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LTC6813_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6813_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic // A two dimensional array that will store the data
							 )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
	LTC681x_reset_crc_count(total_ic,ic);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	6839      	ldr	r1, [r7, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 febb 	bl	8001d34 <LTC681x_reset_crc_count>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <LTC6813_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC6813_init_cfg(uint8_t total_ic, cell_asic *ic)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	6039      	str	r1, [r7, #0]
 8000fd0:	71fb      	strb	r3, [r7, #7]
   LTC681x_init_cfg(total_ic,ic);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	6839      	ldr	r1, [r7, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 ff12 	bl	8001e00 <LTC681x_init_cfg>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <LTC6813_set_cfgr>:

/* Helper function to set CFGR variable */
void LTC6813_set_cfgr(uint8_t nIC, cell_asic *ic, uint8_t refon, uint8_t adcopt, uint8_t gpio[5],uint8_t dcc[12],uint8_t dcto[4], uint16_t uv, uint16_t  ov)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6039      	str	r1, [r7, #0]
 8000fec:	4611      	mov	r1, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	71bb      	strb	r3, [r7, #6]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC,ic,refon);
 8000ffc:	79ba      	ldrb	r2, [r7, #6]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	6839      	ldr	r1, [r7, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 ff26 	bl	8001e54 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8001008:	797a      	ldrb	r2, [r7, #5]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	6839      	ldr	r1, [r7, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 ff54 	bl	8001ebc <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	6839      	ldr	r1, [r7, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 ff82 	bl	8001f24 <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 ffcc 	bl	8001fc4 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	6839      	ldr	r1, [r7, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f855 	bl	80020e2 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8001038:	8bba      	ldrh	r2, [r7, #28]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 f89f 	bl	8002182 <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 8001044:	8c3a      	ldrh	r2, [r7, #32]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	6839      	ldr	r1, [r7, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f001 f8df 	bl	800220e <LTC681x_set_cfgr_ov>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <LTC6813_init_cfgb>:
    LTC681x_set_cfgr_ov( nIC, ic, ov);
}

/* Helper Function to initialize the CFGRB data structures */
void LTC6813_init_cfgb(uint8_t total_ic,cell_asic *ic)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e016      	b.n	8001098 <LTC6813_init_cfgb+0x40>
    {
		for(int j =0; j<6;j++)
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	e00d      	b.n	800108c <LTC6813_init_cfgb+0x34>
        {
            ic[current_ic].configb.tx_data[j] = 0;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	22e8      	movs	r2, #232	; 0xe8
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	441a      	add	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4413      	add	r3, r2
 8001080:	330f      	adds	r3, #15
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
		for(int j =0; j<6;j++)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	3301      	adds	r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b05      	cmp	r3, #5
 8001090:	ddee      	ble.n	8001070 <LTC6813_init_cfgb+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3301      	adds	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3e4      	bcc.n	800106a <LTC6813_init_cfgb+0x12>
        }
    }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LTC6813_set_cfgrb>:

/* Helper Function to set the configuration register B */
void LTC6813_set_cfgrb(uint8_t nIC, cell_asic *ic,uint8_t fdrf,uint8_t dtmen,uint8_t ps[2],uint8_t gpiobits[4],uint8_t dccbits[7])
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	4611      	mov	r1, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	460b      	mov	r3, r1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	4613      	mov	r3, r2
 80010c4:	717b      	strb	r3, [r7, #5]
    LTC6813_set_cfgrb_fdrf(nIC,ic,fdrf);
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f81c 	bl	800110a <LTC6813_set_cfgrb_fdrf>
    LTC6813_set_cfgrb_dtmen(nIC,ic,dtmen);
 80010d2:	797a      	ldrb	r2, [r7, #5]
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f84a 	bl	8001172 <LTC6813_set_cfgrb_dtmen>
    LTC6813_set_cfgrb_ps(nIC,ic,ps);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	6839      	ldr	r1, [r7, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f878 	bl	80011da <LTC6813_set_cfgrb_ps>
    LTC6813_set_cfgrb_gpio_b(nIC,ic,gpiobits);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f8c2 	bl	800127a <LTC6813_set_cfgrb_gpio_b>
	LTC6813_set_cfgrb_dcc_b(nIC,ic,dccbits);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f90a 	bl	8001316 <LTC6813_set_cfgrb_dcc_b>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <LTC6813_set_cfgrb_fdrf>:

/* Helper function to set the FDRF bit */
void LTC6813_set_cfgrb_fdrf(uint8_t nIC, cell_asic *ic, uint8_t fdrf)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	6039      	str	r1, [r7, #0]
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	4613      	mov	r3, r2
 8001118:	71bb      	strb	r3, [r7, #6]
	if(fdrf) ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x40;
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d011      	beq.n	8001144 <LTC6813_set_cfgrb_fdrf+0x3a>
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	22e8      	movs	r2, #232	; 0xe8
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	7c1a      	ldrb	r2, [r3, #16]
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	21e8      	movs	r1, #232	; 0xe8
 8001132:	fb01 f303 	mul.w	r3, r1, r3
 8001136:	6839      	ldr	r1, [r7, #0]
 8001138:	440b      	add	r3, r1
 800113a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	741a      	strb	r2, [r3, #16]
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xBF;
}
 8001142:	e010      	b.n	8001166 <LTC6813_set_cfgrb_fdrf+0x5c>
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xBF;
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	22e8      	movs	r2, #232	; 0xe8
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	4413      	add	r3, r2
 8001150:	7c1a      	ldrb	r2, [r3, #16]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	21e8      	movs	r1, #232	; 0xe8
 8001156:	fb01 f303 	mul.w	r3, r1, r3
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	440b      	add	r3, r1
 800115e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	741a      	strb	r2, [r3, #16]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LTC6813_set_cfgrb_dtmen>:

/* Helper function to set the DTMEN bit */
void LTC6813_set_cfgrb_dtmen(uint8_t nIC, cell_asic *ic, uint8_t dtmen)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	6039      	str	r1, [r7, #0]
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	4613      	mov	r3, r2
 8001180:	71bb      	strb	r3, [r7, #6]
	if(dtmen) ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x08;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d011      	beq.n	80011ac <LTC6813_set_cfgrb_dtmen+0x3a>
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	22e8      	movs	r2, #232	; 0xe8
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	7c1a      	ldrb	r2, [r3, #16]
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	21e8      	movs	r1, #232	; 0xe8
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	440b      	add	r3, r1
 80011a2:	f042 0208 	orr.w	r2, r2, #8
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	741a      	strb	r2, [r3, #16]
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xF7;
}
 80011aa:	e010      	b.n	80011ce <LTC6813_set_cfgrb_dtmen+0x5c>
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xF7;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	22e8      	movs	r2, #232	; 0xe8
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	7c1a      	ldrb	r2, [r3, #16]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	21e8      	movs	r1, #232	; 0xe8
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	440b      	add	r3, r1
 80011c6:	f022 0208 	bic.w	r2, r2, #8
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	741a      	strb	r2, [r3, #16]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LTC6813_set_cfgrb_ps>:

/* Helper function to set the PATH SELECT bit */
void LTC6813_set_cfgrb_ps(uint8_t nIC, cell_asic *ic, uint8_t ps[])
{
 80011da:	b480      	push	{r7}
 80011dc:	b087      	sub	sp, #28
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<2;i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e03b      	b.n	8001266 <LTC6813_set_cfgrb_ps+0x8c>
	{
	  if(ps[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|(0x01<<(i+4));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d018      	beq.n	800122c <LTC6813_set_cfgrb_ps+0x52>
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	22e8      	movs	r2, #232	; 0xe8
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	7c1b      	ldrb	r3, [r3, #16]
 8001208:	b25a      	sxtb	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3304      	adds	r3, #4
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	b25b      	sxtb	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b259      	sxtb	r1, r3
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	22e8      	movs	r2, #232	; 0xe8
 800121e:	fb02 f303 	mul.w	r3, r2, r3
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	b2ca      	uxtb	r2, r1
 8001228:	741a      	strb	r2, [r3, #16]
 800122a:	e019      	b.n	8001260 <LTC6813_set_cfgrb_ps+0x86>
	  else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&(~(0x01<<(i+4)));
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	22e8      	movs	r2, #232	; 0xe8
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	4413      	add	r3, r2
 8001238:	7c1b      	ldrb	r3, [r3, #16]
 800123a:	b25a      	sxtb	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3304      	adds	r3, #4
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	b25b      	sxtb	r3, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	b25b      	sxtb	r3, r3
 800124c:	4013      	ands	r3, r2
 800124e:	b259      	sxtb	r1, r3
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	22e8      	movs	r2, #232	; 0xe8
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	b2ca      	uxtb	r2, r1
 800125e:	741a      	strb	r2, [r3, #16]
	for(int i =0;i<2;i++)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b01      	cmp	r3, #1
 800126a:	ddc0      	ble.n	80011ee <LTC6813_set_cfgrb_ps+0x14>
	}
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LTC6813_set_cfgrb_gpio_b>:

/*  Helper function to set the gpio bits in configb b register  */
void LTC6813_set_cfgrb_gpio_b(uint8_t nIC, cell_asic *ic, uint8_t gpiobits[])
{
 800127a:	b480      	push	{r7}
 800127c:	b087      	sub	sp, #28
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e039      	b.n	8001302 <LTC6813_set_cfgrb_gpio_b+0x88>
	{
	  if(gpiobits[i])ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]|(0x01<<i);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d017      	beq.n	80012ca <LTC6813_set_cfgrb_gpio_b+0x50>
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	22e8      	movs	r2, #232	; 0xe8
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	4413      	add	r3, r2
 80012a6:	7bdb      	ldrb	r3, [r3, #15]
 80012a8:	b25a      	sxtb	r2, r3
 80012aa:	2101      	movs	r1, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b259      	sxtb	r1, r3
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	22e8      	movs	r2, #232	; 0xe8
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	b2ca      	uxtb	r2, r1
 80012c6:	73da      	strb	r2, [r3, #15]
 80012c8:	e018      	b.n	80012fc <LTC6813_set_cfgrb_gpio_b+0x82>
	  else ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]&(~(0x01<<i));
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	22e8      	movs	r2, #232	; 0xe8
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	4413      	add	r3, r2
 80012d6:	7bdb      	ldrb	r3, [r3, #15]
 80012d8:	b25a      	sxtb	r2, r3
 80012da:	2101      	movs	r1, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	4013      	ands	r3, r2
 80012ea:	b259      	sxtb	r1, r3
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	22e8      	movs	r2, #232	; 0xe8
 80012f0:	fb02 f303 	mul.w	r3, r2, r3
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2ca      	uxtb	r2, r1
 80012fa:	73da      	strb	r2, [r3, #15]
	for(int i =0;i<4;i++)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b03      	cmp	r3, #3
 8001306:	ddc2      	ble.n	800128e <LTC6813_set_cfgrb_gpio_b+0x14>
	}
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LTC6813_set_cfgrb_dcc_b>:

/*  Helper function to set the dcc bits in configb b register */
void LTC6813_set_cfgrb_dcc_b(uint8_t nIC, cell_asic *ic, uint8_t dccbits[])
{
 8001316:	b480      	push	{r7}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<7;i++)
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	e0ac      	b.n	8001484 <LTC6813_set_cfgrb_dcc_b+0x16e>
	{
		if(i==0)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d128      	bne.n	8001382 <LTC6813_set_cfgrb_dcc_b+0x6c>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x04;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d011      	beq.n	8001360 <LTC6813_set_cfgrb_dcc_b+0x4a>
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	22e8      	movs	r2, #232	; 0xe8
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	7c1a      	ldrb	r2, [r3, #16]
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	21e8      	movs	r1, #232	; 0xe8
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	440b      	add	r3, r1
 8001356:	f042 0204 	orr.w	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	741a      	strb	r2, [r3, #16]
 800135e:	e010      	b.n	8001382 <LTC6813_set_cfgrb_dcc_b+0x6c>
			else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xFB;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	22e8      	movs	r2, #232	; 0xe8
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	4413      	add	r3, r2
 800136c:	7c1a      	ldrb	r2, [r3, #16]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	21e8      	movs	r1, #232	; 0xe8
 8001372:	fb01 f303 	mul.w	r3, r1, r3
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	440b      	add	r3, r1
 800137a:	f022 0204 	bic.w	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	741a      	strb	r2, [r3, #16]
		}
		if(i>0 && i<5)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2b00      	cmp	r3, #0
 8001386:	dd3b      	ble.n	8001400 <LTC6813_set_cfgrb_dcc_b+0xea>
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b04      	cmp	r3, #4
 800138c:	dc38      	bgt.n	8001400 <LTC6813_set_cfgrb_dcc_b+0xea>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]|(0x01<<(i+3));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d018      	beq.n	80013cc <LTC6813_set_cfgrb_dcc_b+0xb6>
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	22e8      	movs	r2, #232	; 0xe8
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	4413      	add	r3, r2
 80013a6:	7bdb      	ldrb	r3, [r3, #15]
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3303      	adds	r3, #3
 80013ae:	2101      	movs	r1, #1
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b259      	sxtb	r1, r3
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	22e8      	movs	r2, #232	; 0xe8
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	4413      	add	r3, r2
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	73da      	strb	r2, [r3, #15]
 80013ca:	e019      	b.n	8001400 <LTC6813_set_cfgrb_dcc_b+0xea>
			else ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]&(~(0x01<<(i+3)));
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	22e8      	movs	r2, #232	; 0xe8
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	4413      	add	r3, r2
 80013d8:	7bdb      	ldrb	r3, [r3, #15]
 80013da:	b25a      	sxtb	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3303      	adds	r3, #3
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	b259      	sxtb	r1, r3
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	22e8      	movs	r2, #232	; 0xe8
 80013f4:	fb02 f303 	mul.w	r3, r2, r3
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	4413      	add	r3, r2
 80013fc:	b2ca      	uxtb	r2, r1
 80013fe:	73da      	strb	r2, [r3, #15]
		}
		if(i>4 && i<7)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2b04      	cmp	r3, #4
 8001404:	dd3b      	ble.n	800147e <LTC6813_set_cfgrb_dcc_b+0x168>
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b06      	cmp	r3, #6
 800140a:	dc38      	bgt.n	800147e <LTC6813_set_cfgrb_dcc_b+0x168>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|(0x01<<(i-5));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d018      	beq.n	800144a <LTC6813_set_cfgrb_dcc_b+0x134>
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	22e8      	movs	r2, #232	; 0xe8
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	4413      	add	r3, r2
 8001424:	7c1b      	ldrb	r3, [r3, #16]
 8001426:	b25a      	sxtb	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3b05      	subs	r3, #5
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	b25b      	sxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b259      	sxtb	r1, r3
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	22e8      	movs	r2, #232	; 0xe8
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4413      	add	r3, r2
 8001444:	b2ca      	uxtb	r2, r1
 8001446:	741a      	strb	r2, [r3, #16]
 8001448:	e019      	b.n	800147e <LTC6813_set_cfgrb_dcc_b+0x168>
			else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&(~(0x01<<(i-5)));
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	22e8      	movs	r2, #232	; 0xe8
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	4413      	add	r3, r2
 8001456:	7c1b      	ldrb	r3, [r3, #16]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3b05      	subs	r3, #5
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	b25b      	sxtb	r3, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4013      	ands	r3, r2
 800146c:	b259      	sxtb	r1, r3
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	22e8      	movs	r2, #232	; 0xe8
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4413      	add	r3, r2
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	741a      	strb	r2, [r3, #16]
	for(int i =0;i<7;i++)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b06      	cmp	r3, #6
 8001488:	f77f af4f 	ble.w	800132a <LTC6813_set_cfgrb_dcc_b+0x14>
		}
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <init_app_data_6813>:

void init_app_data_6813(app_data *app_data_init)
{
 800149c:	b5b0      	push	{r4, r5, r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	6078      	str	r0, [r7, #4]
	a_d = *app_data_init;
 80014a4:	4a2d      	ldr	r2, [pc, #180]	; (800155c <init_app_data_6813+0xc0>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4614      	mov	r4, r2
 80014aa:	461d      	mov	r5, r3
 80014ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014b4:	e884 0003 	stmia.w	r4, {r0, r1}
	if(a_d.debug==1){
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <init_app_data_6813+0xc0>)
 80014ba:	7d1b      	ldrb	r3, [r3, #20]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d145      	bne.n	800154c <init_app_data_6813+0xb0>
		printf("prescaler: %u\r\n",a_d.hspi1->Init.BaudRatePrescaler);
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <init_app_data_6813+0xc0>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4825      	ldr	r0, [pc, #148]	; (8001560 <init_app_data_6813+0xc4>)
 80014ca:	f00a fa0d 	bl	800b8e8 <iprintf>
		printf("\r\nDebugging init_app_data_681x\r\n");
 80014ce:	4825      	ldr	r0, [pc, #148]	; (8001564 <init_app_data_6813+0xc8>)
 80014d0:	f00a faa6 	bl	800ba20 <puts>
		uint8_t data[3],sent[3];
		sent[0]=0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	723b      	strb	r3, [r7, #8]
		while (sent[0]<3){
 80014d8:	e035      	b.n	8001546 <init_app_data_6813+0xaa>
			sent[0] +=1;
 80014da:	7a3b      	ldrb	r3, [r7, #8]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	723b      	strb	r3, [r7, #8]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2110      	movs	r1, #16
 80014e6:	4820      	ldr	r0, [pc, #128]	; (8001568 <init_app_data_6813+0xcc>)
 80014e8:	f002 fc0a 	bl	8003d00 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(a_d.hspi1, (uint8_t *) sent,(uint8_t *) data,1,100);
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <init_app_data_6813+0xc0>)
 80014ee:	6858      	ldr	r0, [r3, #4]
 80014f0:	f107 020c 	add.w	r2, r7, #12
 80014f4:	f107 0108 	add.w	r1, r7, #8
 80014f8:	2364      	movs	r3, #100	; 0x64
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2301      	movs	r3, #1
 80014fe:	f004 fe80 	bl	8006202 <HAL_SPI_TransmitReceive>
			printf("data sent %d :: data in init: %d \r\n",sent[0],data[0]);
 8001502:	7a3b      	ldrb	r3, [r7, #8]
 8001504:	4619      	mov	r1, r3
 8001506:	7b3b      	ldrb	r3, [r7, #12]
 8001508:	461a      	mov	r2, r3
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <init_app_data_6813+0xd0>)
 800150c:	f00a f9ec 	bl	800b8e8 <iprintf>
			HAL_SPI_TransmitReceive(app_data_init->hspi1, (uint8_t *) sent,(uint8_t *) data,1,100);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6858      	ldr	r0, [r3, #4]
 8001514:	f107 020c 	add.w	r2, r7, #12
 8001518:	f107 0108 	add.w	r1, r7, #8
 800151c:	2364      	movs	r3, #100	; 0x64
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	f004 fe6e 	bl	8006202 <HAL_SPI_TransmitReceive>
			printf("data sent %d :: data in init: %d \r\n",sent[0],data[0]);
 8001526:	7a3b      	ldrb	r3, [r7, #8]
 8001528:	4619      	mov	r1, r3
 800152a:	7b3b      	ldrb	r3, [r7, #12]
 800152c:	461a      	mov	r2, r3
 800152e:	480f      	ldr	r0, [pc, #60]	; (800156c <init_app_data_6813+0xd0>)
 8001530:	f00a f9da 	bl	800b8e8 <iprintf>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	2110      	movs	r1, #16
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <init_app_data_6813+0xcc>)
 800153a:	f002 fbe1 	bl	8003d00 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800153e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001542:	f002 f80f 	bl	8003564 <HAL_Delay>
		while (sent[0]<3){
 8001546:	7a3b      	ldrb	r3, [r7, #8]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d9c6      	bls.n	80014da <init_app_data_6813+0x3e>
		}
	}
	init_app_data_681x(&a_d);
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <init_app_data_6813+0xc0>)
 800154e:	f000 ff3d 	bl	80023cc <init_app_data_681x>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bdb0      	pop	{r4, r5, r7, pc}
 800155a:	bf00      	nop
 800155c:	20000230 	.word	0x20000230
 8001560:	0800da60 	.word	0x0800da60
 8001564:	0800da70 	.word	0x0800da70
 8001568:	40020000 	.word	0x40020000
 800156c:	0800da90 	.word	0x0800da90

08001570 <cmd_68>:
	}
}

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4619      	mov	r1, r3
 800158a:	2002      	movs	r0, #2
 800158c:	f000 f820 	bl	80015d0 <pec15_calc>
 8001590:	4603      	mov	r3, r0
 8001592:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001594:	89fb      	ldrh	r3, [r7, #14]
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	b29b      	uxth	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
 80015a8:	4808      	ldr	r0, [pc, #32]	; (80015cc <cmd_68+0x5c>)
 80015aa:	f002 fba9 	bl	8003d00 <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4619      	mov	r1, r3
 80015b4:	2004      	movs	r0, #4
 80015b6:	f000 fe6d 	bl	8002294 <spi_write_array>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2110      	movs	r1, #16
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <cmd_68+0x5c>)
 80015c0:	f002 fb9e 	bl	8003d00 <HAL_GPIO_WritePin>
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020000 	.word	0x40020000

080015d0 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 80015dc:	2310      	movs	r3, #16
 80015de:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80015e0:	2300      	movs	r3, #0
 80015e2:	737b      	strb	r3, [r7, #13]
 80015e4:	e019      	b.n	800161a <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	09db      	lsrs	r3, r3, #7
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	7b7b      	ldrb	r3, [r7, #13]
 80015ee:	6839      	ldr	r1, [r7, #0]
 80015f0:	440b      	add	r3, r1
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4053      	eors	r3, r2
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	817b      	strh	r3, [r7, #10]
			remainder = (remainder<<8)^crc15Table[addr];
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	897b      	ldrh	r3, [r7, #10]
 8001606:	490b      	ldr	r1, [pc, #44]	; (8001634 <pec15_calc+0x64>)
 8001608:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800160c:	b21b      	sxth	r3, r3
 800160e:	4053      	eors	r3, r2
 8001610:	b21b      	sxth	r3, r3
 8001612:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8001614:	7b7b      	ldrb	r3, [r7, #13]
 8001616:	3301      	adds	r3, #1
 8001618:	737b      	strb	r3, [r7, #13]
 800161a:	7b7a      	ldrb	r2, [r7, #13]
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	429a      	cmp	r2, r3
 8001620:	d3e1      	bcc.n	80015e6 <pec15_calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	b29b      	uxth	r3, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	0800e288 	.word	0x0800e288

08001638 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	460b      	mov	r3, r1
 8001644:	71bb      	strb	r3, [r7, #6]
 8001646:	4613      	mov	r3, r2
 8001648:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	105b      	asrs	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3302      	adds	r3, #2
 800165a:	b2db      	uxtb	r3, r3
 800165c:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	01db      	lsls	r3, r3, #7
 8001662:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	b2da      	uxtb	r2, r3
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	4413      	add	r3, r2
 800166e:	b2da      	uxtb	r2, r3
 8001670:	797b      	ldrb	r3, [r7, #5]
 8001672:	4413      	add	r3, r2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	3360      	adds	r3, #96	; 0x60
 8001678:	b2db      	uxtb	r3, r3
 800167a:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff75 	bl	8001570 <cmd_68>
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 800168e:	b5b0      	push	{r4, r5, r7, lr}
 8001690:	b088      	sub	sp, #32
 8001692:	af02      	add	r7, sp, #8
 8001694:	4603      	mov	r3, r0
 8001696:	603a      	str	r2, [r7, #0]
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	460b      	mov	r3, r1
 800169c:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f009 fbba 	bl	800ae24 <malloc>
 80016b0:	4603      	mov	r3, r0
 80016b2:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d148      	bne.n	800174c <LTC681x_rdcv+0xbe>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 80016ba:	2301      	movs	r3, #1
 80016bc:	757b      	strb	r3, [r7, #21]
 80016be:	e03e      	b.n	800173e <LTC681x_rdcv+0xb0>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 80016c0:	79b9      	ldrb	r1, [r7, #6]
 80016c2:	7d7b      	ldrb	r3, [r7, #21]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f890 	bl	80017ec <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	e02e      	b.n	8001730 <LTC681x_rdcv+0xa2>
			{
			if (ic->isospi_reverse == 0)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <LTC681x_rdcv+0x54>
			{
			  c_ic = current_ic;
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	75bb      	strb	r3, [r7, #22]
 80016e0:	e006      	b.n	80016f0 <LTC681x_rdcv+0x62>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	79ba      	ldrb	r2, [r7, #6]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 80016f4:	7dbb      	ldrb	r3, [r7, #22]
 80016f6:	22e8      	movs	r2, #232	; 0xe8
 80016f8:	fb02 f303 	mul.w	r3, r2, r3
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001700:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 8001704:	7dbb      	ldrb	r3, [r7, #22]
 8001706:	22e8      	movs	r2, #232	; 0xe8
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001710:	3342      	adds	r3, #66	; 0x42
 8001712:	7d79      	ldrb	r1, [r7, #21]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	4623      	mov	r3, r4
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	f000 f8cb 	bl	80018b4 <parse_cells>
 800171e:	4603      	mov	r3, r0
 8001720:	b2da      	uxtb	r2, r3
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	4413      	add	r3, r2
 8001726:	b2db      	uxtb	r3, r3
 8001728:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	3301      	adds	r3, #1
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	dbcc      	blt.n	80016d2 <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8001738:	7d7b      	ldrb	r3, [r7, #21]
 800173a:	3301      	adds	r3, #1
 800173c:	757b      	strb	r3, [r7, #21]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8001744:	7d7a      	ldrb	r2, [r7, #21]
 8001746:	429a      	cmp	r2, r3
 8001748:	d9ba      	bls.n	80016c0 <LTC681x_rdcv+0x32>
 800174a:	e040      	b.n	80017ce <LTC681x_rdcv+0x140>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 800174c:	79b9      	ldrb	r1, [r7, #6]
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f84a 	bl	80017ec <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e033      	b.n	80017c6 <LTC681x_rdcv+0x138>
		{
			if (ic->isospi_reverse == 0)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <LTC681x_rdcv+0xe0>
			{
			c_ic = current_ic;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	75bb      	strb	r3, [r7, #22]
 800176c:	e006      	b.n	800177c <LTC681x_rdcv+0xee>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	79ba      	ldrb	r2, [r7, #6]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	b2d8      	uxtb	r0, r3
 8001780:	7dbb      	ldrb	r3, [r7, #22]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 800178a:	7dbb      	ldrb	r3, [r7, #22]
 800178c:	22e8      	movs	r2, #232	; 0xe8
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8001796:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 800179a:	7dbb      	ldrb	r3, [r7, #22]
 800179c:	22e8      	movs	r2, #232	; 0xe8
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 80017a6:	3342      	adds	r3, #66	; 0x42
 80017a8:	79f9      	ldrb	r1, [r7, #7]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	462b      	mov	r3, r5
 80017ae:	4622      	mov	r2, r4
 80017b0:	f000 f880 	bl	80018b4 <parse_cells>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbc7      	blt.n	800175e <LTC681x_rdcv+0xd0>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	2101      	movs	r1, #1
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 f909 	bl	80019ec <LTC681x_check_pec>
	free(cell_data);
 80017da:	68b8      	ldr	r0, [r7, #8]
 80017dc:	f009 fb2a 	bl	800ae34 <free>

	return(pec_error);
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080017ec <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	603a      	str	r2, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	460b      	mov	r3, r1
 80017fa:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 80017fc:	2308      	movs	r3, #8
 80017fe:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d104      	bne.n	8001810 <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 8001806:	2304      	movs	r3, #4
 8001808:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	723b      	strb	r3, [r7, #8]
 800180e:	e026      	b.n	800185e <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d104      	bne.n	8001820 <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 8001816:	2306      	movs	r3, #6
 8001818:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800181a:	2300      	movs	r3, #0
 800181c:	723b      	strb	r3, [r7, #8]
 800181e:	e01e      	b.n	800185e <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d104      	bne.n	8001830 <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 8001826:	2308      	movs	r3, #8
 8001828:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	723b      	strb	r3, [r7, #8]
 800182e:	e016      	b.n	800185e <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d104      	bne.n	8001840 <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 8001836:	230a      	movs	r3, #10
 8001838:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800183a:	2300      	movs	r3, #0
 800183c:	723b      	strb	r3, [r7, #8]
 800183e:	e00e      	b.n	800185e <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b05      	cmp	r3, #5
 8001844:	d104      	bne.n	8001850 <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 8001846:	2309      	movs	r3, #9
 8001848:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800184a:	2300      	movs	r3, #0
 800184c:	723b      	strb	r3, [r7, #8]
 800184e:	e006      	b.n	800185e <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	2b06      	cmp	r3, #6
 8001854:	d103      	bne.n	800185e <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 8001856:	230b      	movs	r3, #11
 8001858:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 800185a:	2300      	movs	r3, #0
 800185c:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	4619      	mov	r1, r3
 8001864:	2002      	movs	r0, #2
 8001866:	f7ff feb3 	bl	80015d0 <pec15_calc>
 800186a:	4603      	mov	r3, r0
 800186c:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800186e:	89bb      	ldrh	r3, [r7, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b29b      	uxth	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001878:	89bb      	ldrh	r3, [r7, #12]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	2110      	movs	r1, #16
 8001882:	480b      	ldr	r0, [pc, #44]	; (80018b0 <LTC681x_rdcv_reg+0xc4>)
 8001884:	f002 fa3c 	bl	8003d00 <HAL_GPIO_WritePin>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	79bb      	ldrb	r3, [r7, #6]
 800188c:	fb12 f303 	smulbb	r3, r2, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f107 0008 	add.w	r0, r7, #8
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	2104      	movs	r1, #4
 800189a:	f000 fd2f 	bl	80022fc <spi_write_read>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	2110      	movs	r1, #16
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <LTC681x_rdcv_reg+0xc4>)
 80018a4:	f002 fa2c 	bl	8003d00 <HAL_GPIO_WritePin>
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40020000 	.word	0x40020000

080018b4 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60ba      	str	r2, [r7, #8]
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4603      	mov	r3, r0
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	460b      	mov	r3, r1
 80018c4:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 80018c6:	2306      	movs	r3, #6
 80018c8:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 80018ca:	2303      	movs	r3, #3
 80018cc:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80018d8:	2300      	movs	r3, #0
 80018da:	777b      	strb	r3, [r7, #29]
 80018dc:	e020      	b.n	8001920 <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 80018de:	7fbb      	ldrb	r3, [r7, #30]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	4413      	add	r3, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	7fbb      	ldrb	r3, [r7, #30]
 80018ea:	3301      	adds	r3, #1
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	440b      	add	r3, r1
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80018fc:	7f7a      	ldrb	r2, [r7, #29]
 80018fe:	7bbb      	ldrb	r3, [r7, #14]
 8001900:	3b01      	subs	r3, #1
 8001902:	7ef9      	ldrb	r1, [r7, #27]
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	4413      	add	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	8aba      	ldrh	r2, [r7, #20]
 8001912:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 8001914:	7fbb      	ldrb	r3, [r7, #30]
 8001916:	3302      	adds	r3, #2
 8001918:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 800191a:	7f7b      	ldrb	r3, [r7, #29]
 800191c:	3301      	adds	r3, #1
 800191e:	777b      	strb	r3, [r7, #29]
 8001920:	7f7a      	ldrb	r2, [r7, #29]
 8001922:	7efb      	ldrb	r3, [r7, #27]
 8001924:	429a      	cmp	r2, r3
 8001926:	d3da      	bcc.n	80018de <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001928:	7fbb      	ldrb	r3, [r7, #30]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	4413      	add	r3, r2
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b21a      	sxth	r2, r3
 8001934:	7fbb      	ldrb	r3, [r7, #30]
 8001936:	3301      	adds	r3, #1
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	440b      	add	r3, r1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b21b      	sxth	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b21b      	sxth	r3, r3
 8001944:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	461a      	mov	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	441a      	add	r2, r3
 8001950:	7f3b      	ldrb	r3, [r7, #28]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fe3b 	bl	80015d0 <pec15_calc>
 800195a:	4603      	mov	r3, r0
 800195c:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 800195e:	8b3a      	ldrh	r2, [r7, #24]
 8001960:	8afb      	ldrh	r3, [r7, #22]
 8001962:	429a      	cmp	r2, r3
 8001964:	d008      	beq.n	8001978 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8001966:	2301      	movs	r3, #1
 8001968:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 800196a:	7bbb      	ldrb	r3, [r7, #14]
 800196c:	3b01      	subs	r3, #1
 800196e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001970:	4413      	add	r3, r2
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	e005      	b.n	8001984 <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8001978:	7bbb      	ldrb	r3, [r7, #14]
 800197a:	3b01      	subs	r3, #1
 800197c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800197e:	4413      	add	r3, r2
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8001984:	7fbb      	ldrb	r3, [r7, #30]
 8001986:	3302      	adds	r3, #2
 8001988:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 800198a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 80019aa:	2307      	movs	r3, #7
 80019ac:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 80019ae:	2314      	movs	r3, #20
 80019b0:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7ff fe0a 	bl	80015d0 <pec15_calc>
 80019bc:	4603      	mov	r3, r0
 80019be:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80019c0:	893b      	ldrh	r3, [r7, #8]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 80019ca:	893b      	ldrh	r3, [r7, #8]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2110      	movs	r1, #16
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <LTC681x_pollAdc+0x50>)
 80019d6:	f002 f993 	bl	8003d00 <HAL_GPIO_WritePin>
	while(1){
	spi_write_array(4,cmd);
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	2004      	movs	r0, #4
 80019e0:	f000 fc58 	bl	8002294 <spi_write_array>
 80019e4:	e7f9      	b.n	80019da <LTC681x_pollAdc+0x42>
 80019e6:	bf00      	nop
 80019e8:	40020000 	.word	0x40020000

080019ec <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 80019ec:	b480      	push	{r7}
 80019ee:	b08b      	sub	sp, #44	; 0x2c
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	603a      	str	r2, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	460b      	mov	r3, r1
 80019fa:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	f200 8191 	bhi.w	8001d26 <LTC681x_check_pec+0x33a>
 8001a04:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <LTC681x_check_pec+0x20>)
 8001a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0a:	bf00      	nop
 8001a0c:	08001a21 	.word	0x08001a21
 8001a10:	08001b1d 	.word	0x08001b1d
 8001a14:	08001bcf 	.word	0x08001bcf
 8001a18:	08001c7b 	.word	0x08001c7b
 8001a1c:	08001a9f 	.word	0x08001a9f
	{
		case CFGRR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	e036      	b.n	8001a94 <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	22e8      	movs	r2, #232	; 0xe8
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	22e8      	movs	r2, #232	; 0xe8
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	7b9b      	ldrb	r3, [r3, #14]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	20e8      	movs	r0, #232	; 0xe8
 8001a4a:	fb00 f303 	mul.w	r3, r0, r3
 8001a4e:	6838      	ldr	r0, [r7, #0]
 8001a50:	4403      	add	r3, r0
 8001a52:	440a      	add	r2, r1
 8001a54:	b292      	uxth	r2, r2
 8001a56:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	22e8      	movs	r2, #232	; 0xe8
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	22e8      	movs	r2, #232	; 0xe8
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	7b9b      	ldrb	r3, [r3, #14]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	20e8      	movs	r0, #232	; 0xe8
 8001a7e:	fb00 f303 	mul.w	r3, r0, r3
 8001a82:	6838      	ldr	r0, [r7, #0]
 8001a84:	4403      	add	r3, r0
 8001a86:	440a      	add	r2, r1
 8001a88:	b292      	uxth	r2, r2
 8001a8a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbc4      	blt.n	8001a26 <LTC681x_check_pec+0x3a>
		  }
		break;
 8001a9c:	e144      	b.n	8001d28 <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	e036      	b.n	8001b12 <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	22e8      	movs	r2, #232	; 0xe8
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	22e8      	movs	r2, #232	; 0xe8
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	7f5b      	ldrb	r3, [r3, #29]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	20e8      	movs	r0, #232	; 0xe8
 8001ac8:	fb00 f303 	mul.w	r3, r0, r3
 8001acc:	6838      	ldr	r0, [r7, #0]
 8001ace:	4403      	add	r3, r0
 8001ad0:	440a      	add	r2, r1
 8001ad2:	b292      	uxth	r2, r2
 8001ad4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	22e8      	movs	r2, #232	; 0xe8
 8001adc:	fb02 f303 	mul.w	r3, r2, r3
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	22e8      	movs	r2, #232	; 0xe8
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	7f5b      	ldrb	r3, [r3, #29]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	20e8      	movs	r0, #232	; 0xe8
 8001afc:	fb00 f303 	mul.w	r3, r0, r3
 8001b00:	6838      	ldr	r0, [r7, #0]
 8001b02:	4403      	add	r3, r0
 8001b04:	440a      	add	r2, r1
 8001b06:	b292      	uxth	r2, r2
 8001b08:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	623b      	str	r3, [r7, #32]
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	6a3a      	ldr	r2, [r7, #32]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	dbc4      	blt.n	8001aa4 <LTC681x_check_pec+0xb8>
		  }
		break;
 8001b1a:	e105      	b.n	8001d28 <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e050      	b.n	8001bc4 <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	e043      	b.n	8001bb0 <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	22e8      	movs	r2, #232	; 0xe8
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	22e8      	movs	r2, #232	; 0xe8
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	441a      	add	r2, r3
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	4413      	add	r3, r2
 8001b48:	3342      	adds	r3, #66	; 0x42
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	20e8      	movs	r0, #232	; 0xe8
 8001b52:	fb00 f303 	mul.w	r3, r0, r3
 8001b56:	6838      	ldr	r0, [r7, #0]
 8001b58:	4403      	add	r3, r0
 8001b5a:	440a      	add	r2, r1
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	22e8      	movs	r2, #232	; 0xe8
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	441a      	add	r2, r3
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	3360      	adds	r3, #96	; 0x60
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	8899      	ldrh	r1, [r3, #4]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	22e8      	movs	r2, #232	; 0xe8
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	441a      	add	r2, r3
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	4413      	add	r3, r2
 8001b88:	3342      	adds	r3, #66	; 0x42
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	20e8      	movs	r0, #232	; 0xe8
 8001b92:	fb00 f202 	mul.w	r2, r0, r2
 8001b96:	6838      	ldr	r0, [r7, #0]
 8001b98:	4402      	add	r2, r0
 8001b9a:	440b      	add	r3, r1
 8001b9c:	b299      	uxth	r1, r3
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	3360      	adds	r3, #96	; 0x60
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	460a      	mov	r2, r1
 8001ba8:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	dbb4      	blt.n	8001b28 <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbaa      	blt.n	8001b22 <LTC681x_check_pec+0x136>
			}
		  }
		break;
 8001bcc:	e0ac      	b.n	8001d28 <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	e04d      	b.n	8001c70 <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	e040      	b.n	8001c5c <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	22e8      	movs	r2, #232	; 0xe8
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	22e8      	movs	r2, #232	; 0xe8
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	441a      	add	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	335a      	adds	r3, #90	; 0x5a
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	20e8      	movs	r0, #232	; 0xe8
 8001c04:	fb00 f303 	mul.w	r3, r0, r3
 8001c08:	6838      	ldr	r0, [r7, #0]
 8001c0a:	4403      	add	r3, r0
 8001c0c:	440a      	add	r2, r1
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	22e8      	movs	r2, #232	; 0xe8
 8001c18:	fb02 f303 	mul.w	r3, r2, r3
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	3268      	adds	r2, #104	; 0x68
 8001c24:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	22e8      	movs	r2, #232	; 0xe8
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	441a      	add	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	335a      	adds	r3, #90	; 0x5a
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	20e8      	movs	r0, #232	; 0xe8
 8001c42:	fb00 f303 	mul.w	r3, r0, r3
 8001c46:	6838      	ldr	r0, [r7, #0]
 8001c48:	4403      	add	r3, r0
 8001c4a:	440a      	add	r2, r1
 8001c4c:	b291      	uxth	r1, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	3268      	adds	r2, #104	; 0x68
 8001c52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8001c62:	461a      	mov	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4293      	cmp	r3, r2
 8001c68:	dbb7      	blt.n	8001bda <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbad      	blt.n	8001bd4 <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 8001c78:	e056      	b.n	8001d28 <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	e04d      	b.n	8001d1c <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	e040      	b.n	8001d08 <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	22e8      	movs	r2, #232	; 0xe8
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	4413      	add	r3, r2
 8001c92:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	22e8      	movs	r2, #232	; 0xe8
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	441a      	add	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	336b      	adds	r3, #107	; 0x6b
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	20e8      	movs	r0, #232	; 0xe8
 8001cb0:	fb00 f303 	mul.w	r3, r0, r3
 8001cb4:	6838      	ldr	r0, [r7, #0]
 8001cb6:	4403      	add	r3, r0
 8001cb8:	440a      	add	r2, r1
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	22e8      	movs	r2, #232	; 0xe8
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	326c      	adds	r2, #108	; 0x6c
 8001cd0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	22e8      	movs	r2, #232	; 0xe8
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	441a      	add	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	336b      	adds	r3, #107	; 0x6b
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	20e8      	movs	r0, #232	; 0xe8
 8001cee:	fb00 f303 	mul.w	r3, r0, r3
 8001cf2:	6838      	ldr	r0, [r7, #0]
 8001cf4:	4403      	add	r3, r0
 8001cf6:	440a      	add	r2, r1
 8001cf8:	b291      	uxth	r1, r2
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	326c      	adds	r2, #108	; 0x6c
 8001cfe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dbb7      	blt.n	8001c86 <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbad      	blt.n	8001c80 <LTC681x_check_pec+0x294>
			}
		  }
		break;
 8001d24:	e000      	b.n	8001d28 <LTC681x_check_pec+0x33c>
		default:
		break;
 8001d26:	bf00      	nop
	}
}
 8001d28:	bf00      	nop
 8001d2a:	372c      	adds	r7, #44	; 0x2c
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e051      	b.n	8001dea <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	22e8      	movs	r2, #232	; 0xe8
 8001d4a:	fb02 f303 	mul.w	r3, r2, r3
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	2200      	movs	r2, #0
 8001d54:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	22e8      	movs	r2, #232	; 0xe8
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	2200      	movs	r2, #0
 8001d66:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	e00e      	b.n	8001d8e <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	22e8      	movs	r2, #232	; 0xe8
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	441a      	add	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	3360      	adds	r3, #96	; 0x60
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	2200      	movs	r2, #0
 8001d86:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	dded      	ble.n	8001d70 <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e00d      	b.n	8001db6 <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	22e8      	movs	r2, #232	; 0xe8
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	3268      	adds	r2, #104	; 0x68
 8001daa:	2100      	movs	r1, #0
 8001dac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	ddee      	ble.n	8001d9a <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	e00d      	b.n	8001dde <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	22e8      	movs	r2, #232	; 0xe8
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	326c      	adds	r2, #108	; 0x6c
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	ddee      	ble.n	8001dc2 <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dba9      	blt.n	8001d46 <LTC681x_reset_crc_count+0x12>
		}
	}
}
 8001df2:	bf00      	nop
 8001df4:	bf00      	nop
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e015      	b.n	8001e3e <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	e00c      	b.n	8001e32 <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	22e8      	movs	r2, #232	; 0xe8
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	441a      	add	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4413      	add	r3, r2
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	ddef      	ble.n	8001e18 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d3e5      	bcc.n	8001e12 <LTC681x_init_cfg+0x12>
		}
	}
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LTC681x_set_cfgr_refon>:
	LTC681x_set_cfgr_ov(nIC, ic, ov);
}

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, uint8_t refon)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	4613      	mov	r3, r2
 8001e62:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8001e64:	79bb      	ldrb	r3, [r7, #6]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d011      	beq.n	8001e8e <LTC681x_set_cfgr_refon+0x3a>
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	22e8      	movs	r2, #232	; 0xe8
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	21e8      	movs	r1, #232	; 0xe8
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	440b      	add	r3, r1
 8001e84:	f042 0204 	orr.w	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8001e8c:	e010      	b.n	8001eb0 <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	22e8      	movs	r2, #232	; 0xe8
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	21e8      	movs	r1, #232	; 0xe8
 8001ea0:	fb01 f303 	mul.w	r3, r1, r3
 8001ea4:	6839      	ldr	r1, [r7, #0]
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f022 0204 	bic.w	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, uint8_t adcopt)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 8001ecc:	79bb      	ldrb	r3, [r7, #6]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d011      	beq.n	8001ef6 <LTC681x_set_cfgr_adcopt+0x3a>
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	22e8      	movs	r2, #232	; 0xe8
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	4413      	add	r3, r2
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	21e8      	movs	r1, #232	; 0xe8
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	6839      	ldr	r1, [r7, #0]
 8001eea:	440b      	add	r3, r1
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8001ef4:	e010      	b.n	8001f18 <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	22e8      	movs	r2, #232	; 0xe8
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	21e8      	movs	r1, #232	; 0xe8
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	6839      	ldr	r1, [r7, #0]
 8001f0e:	440b      	add	r3, r1
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	701a      	strb	r2, [r3, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,uint8_t gpio[5])
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e03b      	b.n	8001fb0 <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d018      	beq.n	8001f76 <LTC681x_set_cfgr_gpio+0x52>
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	22e8      	movs	r2, #232	; 0xe8
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	b25a      	sxtb	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3303      	adds	r3, #3
 8001f58:	2101      	movs	r1, #1
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b259      	sxtb	r1, r3
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	22e8      	movs	r2, #232	; 0xe8
 8001f68:	fb02 f303 	mul.w	r3, r2, r3
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	4413      	add	r3, r2
 8001f70:	b2ca      	uxtb	r2, r1
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	e019      	b.n	8001faa <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	22e8      	movs	r2, #232	; 0xe8
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b25a      	sxtb	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3303      	adds	r3, #3
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	4013      	ands	r3, r2
 8001f98:	b259      	sxtb	r1, r3
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	22e8      	movs	r2, #232	; 0xe8
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b2ca      	uxtb	r2, r1
 8001fa8:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	ddc0      	ble.n	8001f38 <LTC681x_set_cfgr_gpio+0x14>
	}
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,uint8_t dcc[12])
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e039      	b.n	800204c <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d017      	beq.n	8002014 <LTC681x_set_cfgr_dis+0x50>
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	22e8      	movs	r2, #232	; 0xe8
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	4413      	add	r3, r2
 8001ff0:	791b      	ldrb	r3, [r3, #4]
 8001ff2:	b25a      	sxtb	r2, r3
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b259      	sxtb	r1, r3
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	22e8      	movs	r2, #232	; 0xe8
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	4413      	add	r3, r2
 800200e:	b2ca      	uxtb	r2, r1
 8002010:	711a      	strb	r2, [r3, #4]
 8002012:	e018      	b.n	8002046 <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	22e8      	movs	r2, #232	; 0xe8
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	4413      	add	r3, r2
 8002020:	791b      	ldrb	r3, [r3, #4]
 8002022:	b25a      	sxtb	r2, r3
 8002024:	2101      	movs	r1, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	b25b      	sxtb	r3, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	b25b      	sxtb	r3, r3
 8002032:	4013      	ands	r3, r2
 8002034:	b259      	sxtb	r1, r3
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	22e8      	movs	r2, #232	; 0xe8
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	4413      	add	r3, r2
 8002042:	b2ca      	uxtb	r2, r1
 8002044:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b07      	cmp	r3, #7
 8002050:	ddc2      	ble.n	8001fd8 <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	e03a      	b.n	80020ce <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	3308      	adds	r3, #8
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d017      	beq.n	8002096 <LTC681x_set_cfgr_dis+0xd2>
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	22e8      	movs	r2, #232	; 0xe8
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	4413      	add	r3, r2
 8002072:	795b      	ldrb	r3, [r3, #5]
 8002074:	b25a      	sxtb	r2, r3
 8002076:	2101      	movs	r1, #1
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	b25b      	sxtb	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b259      	sxtb	r1, r3
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	22e8      	movs	r2, #232	; 0xe8
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	4413      	add	r3, r2
 8002090:	b2ca      	uxtb	r2, r1
 8002092:	715a      	strb	r2, [r3, #5]
 8002094:	e018      	b.n	80020c8 <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	22e8      	movs	r2, #232	; 0xe8
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	4413      	add	r3, r2
 80020a2:	795b      	ldrb	r3, [r3, #5]
 80020a4:	b25a      	sxtb	r2, r3
 80020a6:	2101      	movs	r1, #1
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	b25b      	sxtb	r3, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	b25b      	sxtb	r3, r3
 80020b4:	4013      	ands	r3, r2
 80020b6:	b259      	sxtb	r1, r3
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	22e8      	movs	r2, #232	; 0xe8
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4413      	add	r3, r2
 80020c4:	b2ca      	uxtb	r2, r1
 80020c6:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	3301      	adds	r3, #1
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	ddc1      	ble.n	8002058 <LTC681x_set_cfgr_dis+0x94>
	}
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,uint8_t dcto[4])
{
 80020e2:	b480      	push	{r7}
 80020e4:	b087      	sub	sp, #28
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e03b      	b.n	800216e <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d018      	beq.n	8002134 <LTC681x_set_cfgr_dcto+0x52>
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	22e8      	movs	r2, #232	; 0xe8
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	795b      	ldrb	r3, [r3, #5]
 8002110:	b25a      	sxtb	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3304      	adds	r3, #4
 8002116:	2101      	movs	r1, #1
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	b25b      	sxtb	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b259      	sxtb	r1, r3
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	22e8      	movs	r2, #232	; 0xe8
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4413      	add	r3, r2
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	715a      	strb	r2, [r3, #5]
 8002132:	e019      	b.n	8002168 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	22e8      	movs	r2, #232	; 0xe8
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	4413      	add	r3, r2
 8002140:	795b      	ldrb	r3, [r3, #5]
 8002142:	b25a      	sxtb	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3304      	adds	r3, #4
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	b25b      	sxtb	r3, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	b25b      	sxtb	r3, r3
 8002154:	4013      	ands	r3, r2
 8002156:	b259      	sxtb	r1, r3
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	22e8      	movs	r2, #232	; 0xe8
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	4413      	add	r3, r2
 8002164:	b2ca      	uxtb	r2, r1
 8002166:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b03      	cmp	r3, #3
 8002172:	ddc0      	ble.n	80020f6 <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	6039      	str	r1, [r7, #0]
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	4613      	mov	r3, r2
 8002190:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 8002192:	88bb      	ldrh	r3, [r7, #4]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	22e8      	movs	r2, #232	; 0xe8
 80021a0:	fb02 f303 	mul.w	r3, r2, r3
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	89fa      	ldrh	r2, [r7, #14]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	22e8      	movs	r2, #232	; 0xe8
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	789a      	ldrb	r2, [r3, #2]
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	21e8      	movs	r1, #232	; 0xe8
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	440b      	add	r3, r1
 80021c8:	f022 020f 	bic.w	r2, r2, #15
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	22e8      	movs	r2, #232	; 0xe8
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	789b      	ldrb	r3, [r3, #2]
 80021de:	b25a      	sxtb	r2, r3
 80021e0:	89fb      	ldrh	r3, [r7, #14]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b259      	sxtb	r1, r3
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	22e8      	movs	r2, #232	; 0xe8
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	b2ca      	uxtb	r2, r1
 8002200:	709a      	strb	r2, [r3, #2]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	6039      	str	r1, [r7, #0]
 8002218:	71fb      	strb	r3, [r7, #7]
 800221a:	4613      	mov	r3, r2
 800221c:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 800221e:	88bb      	ldrh	r3, [r7, #4]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	b299      	uxth	r1, r3
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	22e8      	movs	r2, #232	; 0xe8
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	4413      	add	r3, r2
 8002236:	b2ca      	uxtb	r2, r1
 8002238:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	22e8      	movs	r2, #232	; 0xe8
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4413      	add	r3, r2
 8002246:	789a      	ldrb	r2, [r3, #2]
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	21e8      	movs	r1, #232	; 0xe8
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	6839      	ldr	r1, [r7, #0]
 8002252:	440b      	add	r3, r1
 8002254:	f002 020f 	and.w	r2, r2, #15
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	22e8      	movs	r2, #232	; 0xe8
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	4413      	add	r3, r2
 8002268:	789b      	ldrb	r3, [r3, #2]
 800226a:	b25a      	sxtb	r2, r3
 800226c:	89fb      	ldrh	r3, [r7, #14]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	b25b      	sxtb	r3, r3
 8002272:	4313      	orrs	r3, r2
 8002274:	b259      	sxtb	r1, r3
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	22e8      	movs	r2, #232	; 0xe8
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4413      	add	r3, r2
 8002282:	b2ca      	uxtb	r2, r1
 8002284:	709a      	strb	r2, [r3, #2]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <spi_write_array>:
Writes an array of bytes out of the SPI port
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[] //Array of bytes to be written on the SPI port
                    )
{printf("spi write\r\n");
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	4812      	ldr	r0, [pc, #72]	; (80022ec <spi_write_array+0x58>)
 80022a2:	f009 fbbd 	bl	800ba20 <puts>
  for (uint8_t i = 0; i < len; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e014      	b.n	80022d6 <spi_write_array+0x42>
  {
    //SPI.transfer((int8_t)data[i]);
    HAL_SPI_Transmit(&a_d.hspi1, data[i],1,100);
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4619      	mov	r1, r3
 80022b6:	2364      	movs	r3, #100	; 0x64
 80022b8:	2201      	movs	r2, #1
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <spi_write_array+0x5c>)
 80022bc:	f003 fe65 	bl	8005f8a <HAL_SPI_Transmit>
    printf("%x ",data[i]);
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	480a      	ldr	r0, [pc, #40]	; (80022f4 <spi_write_array+0x60>)
 80022cc:	f009 fb0c 	bl	800b8e8 <iprintf>
  for (uint8_t i = 0; i < len; i++)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	3301      	adds	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d3e6      	bcc.n	80022ac <spi_write_array+0x18>
  }
  printf("\r\n");
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <spi_write_array+0x64>)
 80022e0:	f009 fb9e 	bl	800ba20 <puts>
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	0800db48 	.word	0x0800db48
 80022f0:	2000024c 	.word	0x2000024c
 80022f4:	0800db54 	.word	0x0800db54
 80022f8:	0800db44 	.word	0x0800db44

080022fc <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
                    uint8_t tx_len, //length of the tx data arry
                    uint8_t *rx_data,//Input: array that will store the data read by the SPI port
                    uint8_t rx_len //Option: number of bytes to be read from the SPI port
                   )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	461a      	mov	r2, r3
 8002308:	460b      	mov	r3, r1
 800230a:	72fb      	strb	r3, [r7, #11]
 800230c:	4613      	mov	r3, r2
 800230e:	72bb      	strb	r3, [r7, #10]
  for (uint8_t i = 0; i < tx_len; i++)
 8002310:	2300      	movs	r3, #0
 8002312:	75fb      	strb	r3, [r7, #23]
 8002314:	e00c      	b.n	8002330 <spi_write_read+0x34>
  {
    //SPI.transfer(tx_Data[i]);
    HAL_SPI_Transmit(&a_d.hspi1, tx_Data[i],1,100);
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4619      	mov	r1, r3
 8002320:	2364      	movs	r3, #100	; 0x64
 8002322:	2201      	movs	r2, #1
 8002324:	4826      	ldr	r0, [pc, #152]	; (80023c0 <spi_write_read+0xc4>)
 8002326:	f003 fe30 	bl	8005f8a <HAL_SPI_Transmit>
  for (uint8_t i = 0; i < tx_len; i++)
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	3301      	adds	r3, #1
 800232e:	75fb      	strb	r3, [r7, #23]
 8002330:	7dfa      	ldrb	r2, [r7, #23]
 8002332:	7afb      	ldrb	r3, [r7, #11]
 8002334:	429a      	cmp	r2, r3
 8002336:	d3ee      	bcc.n	8002316 <spi_write_read+0x1a>
  }
  for(uint8_t i = 0; i<tx_len; i++){
 8002338:	2300      	movs	r3, #0
 800233a:	75bb      	strb	r3, [r7, #22]
 800233c:	e00a      	b.n	8002354 <spi_write_read+0x58>
  	printf("%x\r\n",tx_Data[i]);
 800233e:	7dbb      	ldrb	r3, [r7, #22]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4619      	mov	r1, r3
 8002348:	481e      	ldr	r0, [pc, #120]	; (80023c4 <spi_write_read+0xc8>)
 800234a:	f009 facd 	bl	800b8e8 <iprintf>
  for(uint8_t i = 0; i<tx_len; i++){
 800234e:	7dbb      	ldrb	r3, [r7, #22]
 8002350:	3301      	adds	r3, #1
 8002352:	75bb      	strb	r3, [r7, #22]
 8002354:	7dba      	ldrb	r2, [r7, #22]
 8002356:	7afb      	ldrb	r3, [r7, #11]
 8002358:	429a      	cmp	r2, r3
 800235a:	d3f0      	bcc.n	800233e <spi_write_read+0x42>
  }
  printf("next cell\r\n");
 800235c:	481a      	ldr	r0, [pc, #104]	; (80023c8 <spi_write_read+0xcc>)
 800235e:	f009 fb5f 	bl	800ba20 <puts>
  for (uint8_t i = 0; i < rx_len; i++)
 8002362:	2300      	movs	r3, #0
 8002364:	757b      	strb	r3, [r7, #21]
 8002366:	e00e      	b.n	8002386 <spi_write_read+0x8a>
  {

    //rx_data[i] = (uint8_t)SPI.transfer(0xFF);
    HAL_SPI_TransmitReceive(&a_d.hspi1, 0xFF,rx_data[i],1,100);
 8002368:	7d7b      	ldrb	r3, [r7, #21]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	2364      	movs	r3, #100	; 0x64
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2301      	movs	r3, #1
 8002378:	21ff      	movs	r1, #255	; 0xff
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <spi_write_read+0xc4>)
 800237c:	f003 ff41 	bl	8006202 <HAL_SPI_TransmitReceive>
  for (uint8_t i = 0; i < rx_len; i++)
 8002380:	7d7b      	ldrb	r3, [r7, #21]
 8002382:	3301      	adds	r3, #1
 8002384:	757b      	strb	r3, [r7, #21]
 8002386:	7d7a      	ldrb	r2, [r7, #21]
 8002388:	7abb      	ldrb	r3, [r7, #10]
 800238a:	429a      	cmp	r2, r3
 800238c:	d3ec      	bcc.n	8002368 <spi_write_read+0x6c>
    //rx_data[i] = rx_data[i];
  }
  for(uint8_t i = 0; i<rx_len; i++){
 800238e:	2300      	movs	r3, #0
 8002390:	753b      	strb	r3, [r7, #20]
 8002392:	e00a      	b.n	80023aa <spi_write_read+0xae>
  	printf("%x\r\n",rx_data[i]);
 8002394:	7d3b      	ldrb	r3, [r7, #20]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	4809      	ldr	r0, [pc, #36]	; (80023c4 <spi_write_read+0xc8>)
 80023a0:	f009 faa2 	bl	800b8e8 <iprintf>
  for(uint8_t i = 0; i<rx_len; i++){
 80023a4:	7d3b      	ldrb	r3, [r7, #20]
 80023a6:	3301      	adds	r3, #1
 80023a8:	753b      	strb	r3, [r7, #20]
 80023aa:	7d3a      	ldrb	r2, [r7, #20]
 80023ac:	7abb      	ldrb	r3, [r7, #10]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3f0      	bcc.n	8002394 <spi_write_read+0x98>
  }
  printf("next cell\r\n");
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <spi_write_read+0xcc>)
 80023b4:	f009 fb34 	bl	800ba20 <puts>

}
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	2000024c 	.word	0x2000024c
 80023c4:	0800db58 	.word	0x0800db58
 80023c8:	0800db60 	.word	0x0800db60

080023cc <init_app_data_681x>:
  printf("%x\r\n",data);
  return(data);
}

void init_app_data_681x(app_data *app_data_init)
{
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	6078      	str	r0, [r7, #4]
	a_d = *app_data_init;
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <init_app_data_681x+0x88>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4614      	mov	r4, r2
 80023da:	461d      	mov	r5, r3
 80023dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023e4:	e884 0003 	stmia.w	r4, {r0, r1}
	if(a_d.debug==1){
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <init_app_data_681x+0x88>)
 80023ea:	7d1b      	ldrb	r3, [r3, #20]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d12c      	bne.n	800244a <init_app_data_681x+0x7e>
		printf("\r\nDebugging init_app_data_681x\r\n");
 80023f0:	4819      	ldr	r0, [pc, #100]	; (8002458 <init_app_data_681x+0x8c>)
 80023f2:	f009 fb15 	bl	800ba20 <puts>
		uint8_t data[3],sent[3];
		sent[0]=0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	723b      	strb	r3, [r7, #8]
		while (sent[0]<3){
 80023fa:	e023      	b.n	8002444 <init_app_data_681x+0x78>
			sent[0] +=1;
 80023fc:	7a3b      	ldrb	r3, [r7, #8]
 80023fe:	3301      	adds	r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	723b      	strb	r3, [r7, #8]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	2110      	movs	r1, #16
 8002408:	4814      	ldr	r0, [pc, #80]	; (800245c <init_app_data_681x+0x90>)
 800240a:	f001 fc79 	bl	8003d00 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(a_d.hspi1, (uint8_t *) sent,(uint8_t *) data,1,100);
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <init_app_data_681x+0x88>)
 8002410:	6858      	ldr	r0, [r3, #4]
 8002412:	f107 020c 	add.w	r2, r7, #12
 8002416:	f107 0108 	add.w	r1, r7, #8
 800241a:	2364      	movs	r3, #100	; 0x64
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2301      	movs	r3, #1
 8002420:	f003 feef 	bl	8006202 <HAL_SPI_TransmitReceive>
			printf("data sent %d :: data in init: %d \r\n",sent[0],data[0]);
 8002424:	7a3b      	ldrb	r3, [r7, #8]
 8002426:	4619      	mov	r1, r3
 8002428:	7b3b      	ldrb	r3, [r7, #12]
 800242a:	461a      	mov	r2, r3
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <init_app_data_681x+0x94>)
 800242e:	f009 fa5b 	bl	800b8e8 <iprintf>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002432:	2201      	movs	r2, #1
 8002434:	2110      	movs	r1, #16
 8002436:	4809      	ldr	r0, [pc, #36]	; (800245c <init_app_data_681x+0x90>)
 8002438:	f001 fc62 	bl	8003d00 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800243c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002440:	f001 f890 	bl	8003564 <HAL_Delay>
		while (sent[0]<3){
 8002444:	7a3b      	ldrb	r3, [r7, #8]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d9d8      	bls.n	80023fc <init_app_data_681x+0x30>
		}
	}
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bdb0      	pop	{r4, r5, r7, pc}
 8002452:	bf00      	nop
 8002454:	20000248 	.word	0x20000248
 8002458:	0800db6c 	.word	0x0800db6c
 800245c:	40020000 	.word	0x40020000
 8002460:	0800db8c 	.word	0x0800db8c

08002464 <init_app_data_help>:
	  /* Delay till end */
	  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
}

void init_app_data_help(app_data *app_data_init)
{
 8002464:	b5b0      	push	{r4, r5, r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af02      	add	r7, sp, #8
 800246a:	6078      	str	r0, [r7, #4]
	a_d = *app_data_init;
 800246c:	4a28      	ldr	r2, [pc, #160]	; (8002510 <init_app_data_help+0xac>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4614      	mov	r4, r2
 8002472:	461d      	mov	r5, r3
 8002474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002478:	e895 0003 	ldmia.w	r5, {r0, r1}
 800247c:	e884 0003 	stmia.w	r4, {r0, r1}
	if(a_d.debug==1){
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <init_app_data_help+0xac>)
 8002482:	7d1b      	ldrb	r3, [r3, #20]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d13e      	bne.n	8002506 <init_app_data_help+0xa2>
		printf("\r\nDebugging init_app_data_help\r\n");
 8002488:	4822      	ldr	r0, [pc, #136]	; (8002514 <init_app_data_help+0xb0>)
 800248a:	f009 fac9 	bl	800ba20 <puts>
		uint8_t data[3],sent[3];
		sent[0]=0;
 800248e:	2300      	movs	r3, #0
 8002490:	723b      	strb	r3, [r7, #8]
		while (sent[0]<3){
 8002492:	e035      	b.n	8002500 <init_app_data_help+0x9c>
			sent[0] +=1;
 8002494:	7a3b      	ldrb	r3, [r7, #8]
 8002496:	3301      	adds	r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	723b      	strb	r3, [r7, #8]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	2110      	movs	r1, #16
 80024a0:	481d      	ldr	r0, [pc, #116]	; (8002518 <init_app_data_help+0xb4>)
 80024a2:	f001 fc2d 	bl	8003d00 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(a_d.hspi1, (uint8_t *) sent,(uint8_t *) data,1,100);
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <init_app_data_help+0xac>)
 80024a8:	6858      	ldr	r0, [r3, #4]
 80024aa:	f107 020c 	add.w	r2, r7, #12
 80024ae:	f107 0108 	add.w	r1, r7, #8
 80024b2:	2364      	movs	r3, #100	; 0x64
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	2301      	movs	r3, #1
 80024b8:	f003 fea3 	bl	8006202 <HAL_SPI_TransmitReceive>
			printf("data sent %d :: data in init: %d \r\n",sent[0],data[0]);
 80024bc:	7a3b      	ldrb	r3, [r7, #8]
 80024be:	4619      	mov	r1, r3
 80024c0:	7b3b      	ldrb	r3, [r7, #12]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4815      	ldr	r0, [pc, #84]	; (800251c <init_app_data_help+0xb8>)
 80024c6:	f009 fa0f 	bl	800b8e8 <iprintf>
			HAL_SPI_TransmitReceive(app_data_init->hspi1, (uint8_t *) sent,(uint8_t *) data,1,100);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6858      	ldr	r0, [r3, #4]
 80024ce:	f107 020c 	add.w	r2, r7, #12
 80024d2:	f107 0108 	add.w	r1, r7, #8
 80024d6:	2364      	movs	r3, #100	; 0x64
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	f003 fe91 	bl	8006202 <HAL_SPI_TransmitReceive>
			printf("data sent %d :: data in init: %d \r\n",sent[0],data[0]);
 80024e0:	7a3b      	ldrb	r3, [r7, #8]
 80024e2:	4619      	mov	r1, r3
 80024e4:	7b3b      	ldrb	r3, [r7, #12]
 80024e6:	461a      	mov	r2, r3
 80024e8:	480c      	ldr	r0, [pc, #48]	; (800251c <init_app_data_help+0xb8>)
 80024ea:	f009 f9fd 	bl	800b8e8 <iprintf>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80024ee:	2201      	movs	r2, #1
 80024f0:	2110      	movs	r1, #16
 80024f2:	4809      	ldr	r0, [pc, #36]	; (8002518 <init_app_data_help+0xb4>)
 80024f4:	f001 fc04 	bl	8003d00 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80024f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024fc:	f001 f832 	bl	8003564 <HAL_Delay>
		while (sent[0]<3){
 8002500:	7a3b      	ldrb	r3, [r7, #8]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d9c6      	bls.n	8002494 <init_app_data_help+0x30>
		}
	}
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bdb0      	pop	{r4, r5, r7, pc}
 800250e:	bf00      	nop
 8002510:	20000260 	.word	0x20000260
 8002514:	0800dbb0 	.word	0x0800dbb0
 8002518:	40020000 	.word	0x40020000
 800251c:	0800dbd0 	.word	0x0800dbd0

08002520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8002526:	af06      	add	r7, sp, #24
  char uart_buf[50];
  int uart_buf_len;
  char spi_buf[20];
  char spi_tx_buffer[200];
  char spi_rx_buffer[200];
  uint16_t spi_transfer_size = 200;
 8002528:	23c8      	movs	r3, #200	; 0xc8
 800252a:	f8a7 31f6 	strh.w	r3, [r7, #502]	; 0x1f6
  uint8_t addr;
  uint8_t wip;
  app_data a_d;
  a_d.hcan1 = &hcan1;
 800252e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002532:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002536:	4a6d      	ldr	r2, [pc, #436]	; (80026ec <main+0x1cc>)
 8002538:	601a      	str	r2, [r3, #0]
  a_d.hspi1 = &hspi1;
 800253a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800253e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002542:	4a6b      	ldr	r2, [pc, #428]	; (80026f0 <main+0x1d0>)
 8002544:	605a      	str	r2, [r3, #4]
  a_d.hspi2 = &hspi2;
 8002546:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800254a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800254e:	4a69      	ldr	r2, [pc, #420]	; (80026f4 <main+0x1d4>)
 8002550:	609a      	str	r2, [r3, #8]
  a_d.huart2 = &huart2;
 8002552:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002556:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800255a:	4a67      	ldr	r2, [pc, #412]	; (80026f8 <main+0x1d8>)
 800255c:	60da      	str	r2, [r3, #12]
  a_d.htim1 = &htim1;
 800255e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002562:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002566:	4a65      	ldr	r2, [pc, #404]	; (80026fc <main+0x1dc>)
 8002568:	611a      	str	r2, [r3, #16]
  a_d.debug = debug;
 800256a:	4b65      	ldr	r3, [pc, #404]	; (8002700 <main+0x1e0>)
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002572:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002576:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002578:	f000 ff82 	bl	8003480 <HAL_Init>

  /* USER CODE BEGIN Init */
  LTC6813_init_cfg(TOTAL_IC, BMS_IC);
 800257c:	4961      	ldr	r1, [pc, #388]	; (8002704 <main+0x1e4>)
 800257e:	2001      	movs	r0, #1
 8002580:	f7fe fd21 	bl	8000fc6 <LTC6813_init_cfg>
  LTC6813_init_cfgb(TOTAL_IC,BMS_IC);
 8002584:	495f      	ldr	r1, [pc, #380]	; (8002704 <main+0x1e4>)
 8002586:	2001      	movs	r0, #1
 8002588:	f7fe fd66 	bl	8001058 <LTC6813_init_cfgb>
  for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++)
 800258c:	2300      	movs	r3, #0
 800258e:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
 8002592:	e02a      	b.n	80025ea <main+0xca>
  {
    LTC6813_set_cfgr(current_ic,BMS_IC,REFON,ADCOPT,GPIOBITS_A,DCCBITS_A, DCTOBITS, UV, OV);
 8002594:	4b5c      	ldr	r3, [pc, #368]	; (8002708 <main+0x1e8>)
 8002596:	7819      	ldrb	r1, [r3, #0]
 8002598:	4b5c      	ldr	r3, [pc, #368]	; (800270c <main+0x1ec>)
 800259a:	781c      	ldrb	r4, [r3, #0]
 800259c:	4b5c      	ldr	r3, [pc, #368]	; (8002710 <main+0x1f0>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	4a5c      	ldr	r2, [pc, #368]	; (8002714 <main+0x1f4>)
 80025a2:	8812      	ldrh	r2, [r2, #0]
 80025a4:	f897 01f5 	ldrb.w	r0, [r7, #501]	; 0x1f5
 80025a8:	9204      	str	r2, [sp, #16]
 80025aa:	9303      	str	r3, [sp, #12]
 80025ac:	4b5a      	ldr	r3, [pc, #360]	; (8002718 <main+0x1f8>)
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	4b5a      	ldr	r3, [pc, #360]	; (800271c <main+0x1fc>)
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	4b5a      	ldr	r3, [pc, #360]	; (8002720 <main+0x200>)
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4623      	mov	r3, r4
 80025ba:	460a      	mov	r2, r1
 80025bc:	4951      	ldr	r1, [pc, #324]	; (8002704 <main+0x1e4>)
 80025be:	f7fe fd11 	bl	8000fe4 <LTC6813_set_cfgr>
    LTC6813_set_cfgrb(current_ic,BMS_IC,FDRF,DTMEN,PSBITS,GPIOBITS_B,DCCBITS_B);
 80025c2:	4b58      	ldr	r3, [pc, #352]	; (8002724 <main+0x204>)
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	4b58      	ldr	r3, [pc, #352]	; (8002728 <main+0x208>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	f897 01f5 	ldrb.w	r0, [r7, #501]	; 0x1f5
 80025ce:	4957      	ldr	r1, [pc, #348]	; (800272c <main+0x20c>)
 80025d0:	9102      	str	r1, [sp, #8]
 80025d2:	4957      	ldr	r1, [pc, #348]	; (8002730 <main+0x210>)
 80025d4:	9101      	str	r1, [sp, #4]
 80025d6:	4957      	ldr	r1, [pc, #348]	; (8002734 <main+0x214>)
 80025d8:	9100      	str	r1, [sp, #0]
 80025da:	494a      	ldr	r1, [pc, #296]	; (8002704 <main+0x1e4>)
 80025dc:	f7fe fd67 	bl	80010ae <LTC6813_set_cfgrb>
  for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++)
 80025e0:	f897 31f5 	ldrb.w	r3, [r7, #501]	; 0x1f5
 80025e4:	3301      	adds	r3, #1
 80025e6:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
 80025ea:	f897 31f5 	ldrb.w	r3, [r7, #501]	; 0x1f5
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0d0      	beq.n	8002594 <main+0x74>
  }
  LTC6813_reset_crc_count(TOTAL_IC,BMS_IC);
 80025f2:	4944      	ldr	r1, [pc, #272]	; (8002704 <main+0x1e4>)
 80025f4:	2001      	movs	r0, #1
 80025f6:	f7fe fcd7 	bl	8000fa8 <LTC6813_reset_crc_count>
  LTC6813_init_reg_limits(TOTAL_IC,BMS_IC);
 80025fa:	4942      	ldr	r1, [pc, #264]	; (8002704 <main+0x1e4>)
 80025fc:	2001      	movs	r0, #1
 80025fe:	f7fe fc55 	bl	8000eac <LTC6813_init_reg_limits>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002602:	f000 f8a7 	bl	8002754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002606:	f000 fa2b 	bl	8002a60 <MX_GPIO_Init>
  MX_CAN1_Init();
 800260a:	f000 f90d 	bl	8002828 <MX_CAN1_Init>
  MX_SPI1_Init();
 800260e:	f000 f941 	bl	8002894 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002612:	f000 f975 	bl	8002900 <MX_SPI2_Init>
  MX_USB_HOST_Init();
 8002616:	f008 f8d3 	bl	800a7c0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800261a:	f000 f9f7 	bl	8002a0c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800261e:	f000 f9a5 	bl	800296c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init_appdata(&a_d);
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fc17 	bl	8002e58 <init_appdata>
  printf("\r\nStarting Code\r\n");
 800262a:	4843      	ldr	r0, [pc, #268]	; (8002738 <main+0x218>)
 800262c:	f009 f9f8 	bl	800ba20 <puts>
  while (0)
 8002630:	bf00      	nop

         HAL_Delay(1000);
    /* USER CODE END WHILE */	
	}
  // CS pin should default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002632:	2201      	movs	r2, #1
 8002634:	2140      	movs	r1, #64	; 0x40
 8002636:	4841      	ldr	r0, [pc, #260]	; (800273c <main+0x21c>)
 8002638:	f001 fb62 	bl	8003d00 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800263c:	2201      	movs	r2, #1
 800263e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002642:	483f      	ldr	r0, [pc, #252]	; (8002740 <main+0x220>)
 8002644:	f001 fb5c 	bl	8003d00 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8002648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800264c:	f000 ff8a 	bl	8003564 <HAL_Delay>
  //turn off rgb leds
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002656:	483a      	ldr	r0, [pc, #232]	; (8002740 <main+0x220>)
 8002658:	f001 fb52 	bl	8003d00 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800265c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002660:	f000 ff80 	bl	8003564 <HAL_Delay>
  while (1)
  {
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	  //HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) spi_tx_buffer,(uint8_t *) spi_rx_buffer,spi_transfer_size,100);
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	  printf("starting cell voltage reading loop\r\n");
 8002664:	4837      	ldr	r0, [pc, #220]	; (8002744 <main+0x224>)
 8002666:	f009 f9db 	bl	800ba20 <puts>
	  //wakeup_sleep(TOTAL_IC);
	  //printf("pass1\r\n");
	  LTC6813_adcv(ADC_CONVERSION_MODE,ADC_DCP,CELL_CH_TO_CONVERT);
 800266a:	2302      	movs	r3, #2
 800266c:	2100      	movs	r1, #0
 800266e:	2200      	movs	r2, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fc68 	bl	8000f46 <LTC6813_adcv>
	  //printf("pass2\r\n");
	  conv_time = LTC6813_pollAdc();
 8002676:	f7fe fc90 	bl	8000f9a <LTC6813_pollAdc>
 800267a:	4603      	mov	r3, r0
 800267c:	4a32      	ldr	r2, [pc, #200]	; (8002748 <main+0x228>)
 800267e:	6013      	str	r3, [r2, #0]
	  printf("start ADC\r\n");
 8002680:	4832      	ldr	r0, [pc, #200]	; (800274c <main+0x22c>)
 8002682:	f009 f9cd 	bl	800ba20 <puts>
	  HAL_Delay(1000);
 8002686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800268a:	f000 ff6b 	bl	8003564 <HAL_Delay>

	  //printf("pass3\r\n");
	  print_conv_time(conv_time);
 800268e:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <main+0x228>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fb28 	bl	8002ce8 <print_conv_time>
	  //printf("Cell Voltages:\r\n");

      //wakeup_sleep(TOTAL_IC);
      error = LTC6813_rdcv(SEL_ALL_REG,TOTAL_IC,BMS_IC); // Set to read back all cell voltage registers
 8002698:	2300      	movs	r3, #0
 800269a:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <main+0x1e4>)
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fc64 	bl	8000f6c <LTC6813_rdcv>
 80026a4:	4603      	mov	r3, r0
 80026a6:	b25a      	sxtb	r2, r3
 80026a8:	4b29      	ldr	r3, [pc, #164]	; (8002750 <main+0x230>)
 80026aa:	701a      	strb	r2, [r3, #0]
      check_error(error);
 80026ac:	4b28      	ldr	r3, [pc, #160]	; (8002750 <main+0x230>)
 80026ae:	f993 3000 	ldrsb.w	r3, [r3]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fb3a 	bl	8002d2c <check_error>
      print_cells(DATALOG_DISABLED);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f000 fb49 	bl	8002d50 <print_cells>

      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80026be:	2201      	movs	r2, #1
 80026c0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80026c4:	481e      	ldr	r0, [pc, #120]	; (8002740 <main+0x220>)
 80026c6:	f001 fb1b 	bl	8003d00 <HAL_GPIO_WritePin>
      HAL_Delay(10000);
 80026ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80026ce:	f000 ff49 	bl	8003564 <HAL_Delay>
      //turn off rgb leds
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80026d2:	2200      	movs	r2, #0
 80026d4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80026d8:	4819      	ldr	r0, [pc, #100]	; (8002740 <main+0x220>)
 80026da:	f001 fb11 	bl	8003d00 <HAL_GPIO_WritePin>
      HAL_Delay(10000);
 80026de:	f242 7010 	movw	r0, #10000	; 0x2710
 80026e2:	f000 ff3f 	bl	8003564 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80026e6:	f008 f891 	bl	800a80c <MX_USB_HOST_Process>
	  printf("starting cell voltage reading loop\r\n");
 80026ea:	e7bb      	b.n	8002664 <main+0x144>
 80026ec:	20000278 	.word	0x20000278
 80026f0:	200002a0 	.word	0x200002a0
 80026f4:	200002f8 	.word	0x200002f8
 80026f8:	20000398 	.word	0x20000398
 80026fc:	20000350 	.word	0x20000350
 8002700:	200003dc 	.word	0x200003dc
 8002704:	200003e4 	.word	0x200003e4
 8002708:	20000000 	.word	0x20000000
 800270c:	200004cc 	.word	0x200004cc
 8002710:	2000000a 	.word	0x2000000a
 8002714:	2000000c 	.word	0x2000000c
 8002718:	20000010 	.word	0x20000010
 800271c:	200004d4 	.word	0x200004d4
 8002720:	20000004 	.word	0x20000004
 8002724:	200004e7 	.word	0x200004e7
 8002728:	20000014 	.word	0x20000014
 800272c:	200004e0 	.word	0x200004e0
 8002730:	200004d0 	.word	0x200004d0
 8002734:	200004e8 	.word	0x200004e8
 8002738:	0800dbf4 	.word	0x0800dbf4
 800273c:	40020400 	.word	0x40020400
 8002740:	40020c00 	.word	0x40020c00
 8002744:	0800dc08 	.word	0x0800dc08
 8002748:	200003e0 	.word	0x200003e0
 800274c:	0800dc2c 	.word	0x0800dc2c
 8002750:	200003dd 	.word	0x200003dd

08002754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b094      	sub	sp, #80	; 0x50
 8002758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275a:	f107 0320 	add.w	r3, r7, #32
 800275e:	2230      	movs	r2, #48	; 0x30
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f008 fb6e 	bl	800ae44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <SystemClock_Config+0xcc>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	4a27      	ldr	r2, [pc, #156]	; (8002820 <SystemClock_Config+0xcc>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002786:	6413      	str	r3, [r2, #64]	; 0x40
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <SystemClock_Config+0xcc>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002794:	2300      	movs	r3, #0
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <SystemClock_Config+0xd0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a21      	ldr	r2, [pc, #132]	; (8002824 <SystemClock_Config+0xd0>)
 800279e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <SystemClock_Config+0xd0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ba:	2302      	movs	r3, #2
 80027bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027c4:	2308      	movs	r3, #8
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80027c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80027cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027ce:	2302      	movs	r3, #2
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027d2:	2307      	movs	r3, #7
 80027d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d6:	f107 0320 	add.w	r3, r7, #32
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 feb4 	bl	8005548 <HAL_RCC_OscConfig>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80027e6:	f000 fb97 	bl	8002f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ea:	230f      	movs	r3, #15
 80027ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ee:	2302      	movs	r3, #2
 80027f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002800:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	2105      	movs	r1, #5
 8002808:	4618      	mov	r0, r3
 800280a:	f003 f915 	bl	8005a38 <HAL_RCC_ClockConfig>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002814:	f000 fb80 	bl	8002f18 <Error_Handler>
  }
}
 8002818:	bf00      	nop
 800281a:	3750      	adds	r7, #80	; 0x50
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40023800 	.word	0x40023800
 8002824:	40007000 	.word	0x40007000

08002828 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <MX_CAN1_Init+0x64>)
 800282e:	4a18      	ldr	r2, [pc, #96]	; (8002890 <MX_CAN1_Init+0x68>)
 8002830:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <MX_CAN1_Init+0x64>)
 8002834:	2206      	movs	r2, #6
 8002836:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <MX_CAN1_Init+0x64>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <MX_CAN1_Init+0x64>)
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_CAN1_Init+0x64>)
 8002846:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800284a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_CAN1_Init+0x64>)
 800284e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002852:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <MX_CAN1_Init+0x64>)
 8002856:	2200      	movs	r2, #0
 8002858:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <MX_CAN1_Init+0x64>)
 800285c:	2201      	movs	r2, #1
 800285e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <MX_CAN1_Init+0x64>)
 8002862:	2201      	movs	r2, #1
 8002864:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <MX_CAN1_Init+0x64>)
 8002868:	2200      	movs	r2, #0
 800286a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <MX_CAN1_Init+0x64>)
 800286e:	2200      	movs	r2, #0
 8002870:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <MX_CAN1_Init+0x64>)
 8002874:	2200      	movs	r2, #0
 8002876:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002878:	4804      	ldr	r0, [pc, #16]	; (800288c <MX_CAN1_Init+0x64>)
 800287a:	f000 fe97 	bl	80035ac <HAL_CAN_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002884:	f000 fb48 	bl	8002f18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000278 	.word	0x20000278
 8002890:	40006400 	.word	0x40006400

08002894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <MX_SPI1_Init+0x64>)
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <MX_SPI1_Init+0x68>)
 800289c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028a6:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028c8:	2238      	movs	r2, #56	; 0x38
 80028ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028e0:	220a      	movs	r2, #10
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028e6:	f003 fac7 	bl	8005e78 <HAL_SPI_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028f0:	f000 fb12 	bl	8002f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200002a0 	.word	0x200002a0
 80028fc:	40013000 	.word	0x40013000

08002900 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <MX_SPI2_Init+0x64>)
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <MX_SPI2_Init+0x68>)
 8002908:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <MX_SPI2_Init+0x64>)
 800290c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002910:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <MX_SPI2_Init+0x64>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <MX_SPI2_Init+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <MX_SPI2_Init+0x64>)
 8002920:	2202      	movs	r2, #2
 8002922:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <MX_SPI2_Init+0x64>)
 8002926:	2201      	movs	r2, #1
 8002928:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <MX_SPI2_Init+0x64>)
 800292c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002930:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <MX_SPI2_Init+0x64>)
 8002934:	2200      	movs	r2, #0
 8002936:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <MX_SPI2_Init+0x64>)
 800293a:	2200      	movs	r2, #0
 800293c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <MX_SPI2_Init+0x64>)
 8002940:	2200      	movs	r2, #0
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <MX_SPI2_Init+0x64>)
 8002946:	2200      	movs	r2, #0
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <MX_SPI2_Init+0x64>)
 800294c:	220a      	movs	r2, #10
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002950:	4804      	ldr	r0, [pc, #16]	; (8002964 <MX_SPI2_Init+0x64>)
 8002952:	f003 fa91 	bl	8005e78 <HAL_SPI_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800295c:	f000 fadc 	bl	8002f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200002f8 	.word	0x200002f8
 8002968:	40003800 	.word	0x40003800

0800296c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002972:	f107 0308 	add.w	r3, r7, #8
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002980:	463b      	mov	r3, r7
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002988:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <MX_TIM1_Init+0x98>)
 800298a:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <MX_TIM1_Init+0x9c>)
 800298c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <MX_TIM1_Init+0x98>)
 8002990:	22a7      	movs	r2, #167	; 0xa7
 8002992:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <MX_TIM1_Init+0x98>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_TIM1_Init+0x98>)
 800299c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <MX_TIM1_Init+0x98>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <MX_TIM1_Init+0x98>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <MX_TIM1_Init+0x98>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029b4:	4813      	ldr	r0, [pc, #76]	; (8002a04 <MX_TIM1_Init+0x98>)
 80029b6:	f003 fe91 	bl	80066dc <HAL_TIM_Base_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80029c0:	f000 faaa 	bl	8002f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029ca:	f107 0308 	add.w	r3, r7, #8
 80029ce:	4619      	mov	r1, r3
 80029d0:	480c      	ldr	r0, [pc, #48]	; (8002a04 <MX_TIM1_Init+0x98>)
 80029d2:	f003 fed2 	bl	800677a <HAL_TIM_ConfigClockSource>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80029dc:	f000 fa9c 	bl	8002f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e0:	2300      	movs	r3, #0
 80029e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029e8:	463b      	mov	r3, r7
 80029ea:	4619      	mov	r1, r3
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_TIM1_Init+0x98>)
 80029ee:	f004 f8c5 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80029f8:	f000 fa8e 	bl	8002f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000350 	.word	0x20000350
 8002a08:	40010000 	.word	0x40010000

08002a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <MX_USART2_UART_Init+0x50>)
 8002a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a32:	220c      	movs	r2, #12
 8002a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a44:	f004 f916 	bl	8006c74 <HAL_UART_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a4e:	f000 fa63 	bl	8002f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000398 	.word	0x20000398
 8002a5c:	40004400 	.word	0x40004400

08002a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	4b8c      	ldr	r3, [pc, #560]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a8b      	ldr	r2, [pc, #556]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002a80:	f043 0310 	orr.w	r3, r3, #16
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b89      	ldr	r3, [pc, #548]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	4b85      	ldr	r3, [pc, #532]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a84      	ldr	r2, [pc, #528]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b82      	ldr	r3, [pc, #520]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	4b7e      	ldr	r3, [pc, #504]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a7d      	ldr	r2, [pc, #500]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b7b      	ldr	r3, [pc, #492]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b77      	ldr	r3, [pc, #476]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a76      	ldr	r2, [pc, #472]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b74      	ldr	r3, [pc, #464]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	4b70      	ldr	r3, [pc, #448]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a6f      	ldr	r2, [pc, #444]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b6d      	ldr	r3, [pc, #436]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	4b69      	ldr	r3, [pc, #420]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a68      	ldr	r2, [pc, #416]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b66      	ldr	r3, [pc, #408]	; (8002cac <MX_GPIO_Init+0x24c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2108      	movs	r1, #8
 8002b22:	4863      	ldr	r0, [pc, #396]	; (8002cb0 <MX_GPIO_Init+0x250>)
 8002b24:	f001 f8ec 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4861      	ldr	r0, [pc, #388]	; (8002cb4 <MX_GPIO_Init+0x254>)
 8002b2e:	f001 f8e7 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_CS_GPIO_Port, GPIO_CS_Pin, GPIO_PIN_RESET);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2110      	movs	r1, #16
 8002b36:	4860      	ldr	r0, [pc, #384]	; (8002cb8 <MX_GPIO_Init+0x258>)
 8002b38:	f001 f8e2 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002b42:	485e      	ldr	r0, [pc, #376]	; (8002cbc <MX_GPIO_Init+0x25c>)
 8002b44:	f001 f8dc 	bl	8003d00 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002b58:	f107 031c 	add.w	r3, r7, #28
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4854      	ldr	r0, [pc, #336]	; (8002cb0 <MX_GPIO_Init+0x250>)
 8002b60:	f000 ff32 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002b64:	2301      	movs	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	4619      	mov	r1, r3
 8002b7a:	484e      	ldr	r0, [pc, #312]	; (8002cb4 <MX_GPIO_Init+0x254>)
 8002b7c:	f000 ff24 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002b80:	2308      	movs	r3, #8
 8002b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b90:	2305      	movs	r3, #5
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4846      	ldr	r0, [pc, #280]	; (8002cb4 <MX_GPIO_Init+0x254>)
 8002b9c:	f000 ff14 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ba4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bae:	f107 031c 	add.w	r3, r7, #28
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4840      	ldr	r0, [pc, #256]	; (8002cb8 <MX_GPIO_Init+0x258>)
 8002bb6:	f000 ff07 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_CS_Pin;
 8002bba:	2310      	movs	r3, #16
 8002bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIO_CS_GPIO_Port, &GPIO_InitStruct);
 8002bca:	f107 031c 	add.w	r3, r7, #28
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4839      	ldr	r0, [pc, #228]	; (8002cb8 <MX_GPIO_Init+0x258>)
 8002bd2:	f000 fef9 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	4835      	ldr	r0, [pc, #212]	; (8002cc0 <MX_GPIO_Init+0x260>)
 8002bea:	f000 feed 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c00:	2305      	movs	r3, #5
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002c04:	f107 031c 	add.w	r3, r7, #28
 8002c08:	4619      	mov	r1, r3
 8002c0a:	482d      	ldr	r0, [pc, #180]	; (8002cc0 <MX_GPIO_Init+0x260>)
 8002c0c:	f000 fedc 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002c10:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002c14:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c16:	2301      	movs	r3, #1
 8002c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c22:	f107 031c 	add.w	r3, r7, #28
 8002c26:	4619      	mov	r1, r3
 8002c28:	4824      	ldr	r0, [pc, #144]	; (8002cbc <MX_GPIO_Init+0x25c>)
 8002c2a:	f000 fecd 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002c2e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c40:	2306      	movs	r3, #6
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	481a      	ldr	r0, [pc, #104]	; (8002cb4 <MX_GPIO_Init+0x254>)
 8002c4c:	f000 febc 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002c50:	2320      	movs	r3, #32
 8002c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c54:	2300      	movs	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c5c:	f107 031c 	add.w	r3, r7, #28
 8002c60:	4619      	mov	r1, r3
 8002c62:	4816      	ldr	r0, [pc, #88]	; (8002cbc <MX_GPIO_Init+0x25c>)
 8002c64:	f000 feb0 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002c68:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c6e:	2312      	movs	r3, #18
 8002c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c72:	2301      	movs	r3, #1
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	f107 031c 	add.w	r3, r7, #28
 8002c82:	4619      	mov	r1, r3
 8002c84:	480e      	ldr	r0, [pc, #56]	; (8002cc0 <MX_GPIO_Init+0x260>)
 8002c86:	f000 fe9f 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002c98:	f107 031c 	add.w	r3, r7, #28
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4804      	ldr	r0, [pc, #16]	; (8002cb0 <MX_GPIO_Init+0x250>)
 8002ca0:	f000 fe92 	bl	80039c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ca4:	bf00      	nop
 8002ca6:	3730      	adds	r7, #48	; 0x30
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020c00 	.word	0x40020c00
 8002cc0:	40020400 	.word	0x40020400

08002cc4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002ccc:	1d39      	adds	r1, r7, #4
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <__io_putchar+0x20>)
 8002cd6:	f004 f81a 	bl	8006d0e <HAL_UART_Transmit>
  return ch;
 8002cda:	687b      	ldr	r3, [r7, #4]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000398 	.word	0x20000398

08002ce8 <print_conv_time>:

	}
}

void print_conv_time(uint32_t conv_time)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint16_t m_factor=1000;  // to print in ms
 8002cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf4:	81fb      	strh	r3, [r7, #14]

  //Serial.print(F("Conversion completed in:"));
  //Serial.print(((float)conv_time/m_factor), 1);
  //Serial.println(F("ms \n"));
  printf("Conversion completed in %f ms\r\n",(float)conv_time/m_factor);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	ee07 3a90 	vmov	s15, r3
 8002cfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d00:	89fb      	ldrh	r3, [r7, #14]
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d0e:	ee16 0a90 	vmov	r0, s13
 8002d12:	f7fd fc19 	bl	8000548 <__aeabi_f2d>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4803      	ldr	r0, [pc, #12]	; (8002d28 <print_conv_time+0x40>)
 8002d1c:	f008 fde4 	bl	800b8e8 <iprintf>
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	0800dc38 	.word	0x0800dc38

08002d2c <check_error>:

void check_error(int error)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if (error == -1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d102      	bne.n	8002d42 <check_error+0x16>
  {
    printf("A PEC error was detected in the received data\r\n");
 8002d3c:	4803      	ldr	r0, [pc, #12]	; (8002d4c <check_error+0x20>)
 8002d3e:	f008 fe6f 	bl	800ba20 <puts>
  }
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	0800dc58 	.word	0x0800dc58

08002d50 <print_cells>:

void print_cells(uint8_t datalog_en)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  for (int current_ic = 0 ; current_ic < TOTAL_IC; current_ic++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e05f      	b.n	8002e20 <print_cells+0xd0>
  {
    if (datalog_en == 0)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d131      	bne.n	8002dca <print_cells+0x7a>
    {
      //Serial.print(" IC ");
      //Serial.print(current_ic+1,DEC);
      //Serial.print(", ");
      printf(" IC %d,",current_ic+1);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4834      	ldr	r0, [pc, #208]	; (8002e40 <print_cells+0xf0>)
 8002d6e:	f008 fdbb 	bl	800b8e8 <iprintf>
      for (int i=0; i<BMS_IC[0].ic_reg.cell_channels; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	e01d      	b.n	8002db4 <print_cells+0x64>
        //Serial.print(" C");
        //Serial.print(i+1,DEC);
        //Serial.print(":");
        //Serial.print(BMS_IC[current_ic].cells.c_codes[i]*0.0001,4);
        //Serial.print(",");
        printf(" C %d:%f,",i+1,BMS_IC[current_ic].cells.c_codes[i]*0.0001);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1c5c      	adds	r4, r3, #1
 8002d7c:	4931      	ldr	r1, [pc, #196]	; (8002e44 <print_cells+0xf4>)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2274      	movs	r2, #116	; 0x74
 8002d82:	fb03 f202 	mul.w	r2, r3, r2
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	330c      	adds	r3, #12
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	440b      	add	r3, r1
 8002d90:	88db      	ldrh	r3, [r3, #6]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fbc6 	bl	8000524 <__aeabi_i2d>
 8002d98:	a327      	add	r3, pc, #156	; (adr r3, 8002e38 <print_cells+0xe8>)
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	f7fd fc2b 	bl	80005f8 <__aeabi_dmul>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4621      	mov	r1, r4
 8002da8:	4827      	ldr	r0, [pc, #156]	; (8002e48 <print_cells+0xf8>)
 8002daa:	f008 fd9d 	bl	800b8e8 <iprintf>
      for (int i=0; i<BMS_IC[0].ic_reg.cell_channels; i++)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	3301      	adds	r3, #1
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <print_cells+0xf4>)
 8002db6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002dba:	461a      	mov	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	dbda      	blt.n	8002d78 <print_cells+0x28>
      }
      //Serial.println();
      printf("\r\n");
 8002dc2:	4822      	ldr	r0, [pc, #136]	; (8002e4c <print_cells+0xfc>)
 8002dc4:	f008 fe2c 	bl	800ba20 <puts>
 8002dc8:	e027      	b.n	8002e1a <print_cells+0xca>
    }
    else
    {
      //Serial.print(" Cells, ");
      printf(" Cells, ");
 8002dca:	4821      	ldr	r0, [pc, #132]	; (8002e50 <print_cells+0x100>)
 8002dcc:	f008 fd8c 	bl	800b8e8 <iprintf>
      for (int i=0; i<BMS_IC[0].ic_reg.cell_channels; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e01a      	b.n	8002e0c <print_cells+0xbc>
      {
        //Serial.print(BMS_IC[current_ic].cells.c_codes[i]*0.0001,4);
        //Serial.print(",");
        printf("%f,",BMS_IC[current_ic].cells.c_codes[i]*0.0001);
 8002dd6:	491b      	ldr	r1, [pc, #108]	; (8002e44 <print_cells+0xf4>)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2274      	movs	r2, #116	; 0x74
 8002ddc:	fb03 f202 	mul.w	r2, r3, r2
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	330c      	adds	r3, #12
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	440b      	add	r3, r1
 8002dea:	88db      	ldrh	r3, [r3, #6]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fb99 	bl	8000524 <__aeabi_i2d>
 8002df2:	a311      	add	r3, pc, #68	; (adr r3, 8002e38 <print_cells+0xe8>)
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f7fd fbfe 	bl	80005f8 <__aeabi_dmul>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4814      	ldr	r0, [pc, #80]	; (8002e54 <print_cells+0x104>)
 8002e02:	f008 fd71 	bl	800b8e8 <iprintf>
      for (int i=0; i<BMS_IC[0].ic_reg.cell_channels; i++)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <print_cells+0xf4>)
 8002e0e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4293      	cmp	r3, r2
 8002e18:	dbdd      	blt.n	8002dd6 <print_cells+0x86>
  for (int current_ic = 0 ; current_ic < TOTAL_IC; current_ic++)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	dd9c      	ble.n	8002d60 <print_cells+0x10>
      }
    }
  }
  //Serial.println("\n");
  printf("\r\n");
 8002e26:	4809      	ldr	r0, [pc, #36]	; (8002e4c <print_cells+0xfc>)
 8002e28:	f008 fdfa 	bl	800ba20 <puts>
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd90      	pop	{r4, r7, pc}
 8002e34:	f3af 8000 	nop.w
 8002e38:	eb1c432d 	.word	0xeb1c432d
 8002e3c:	3f1a36e2 	.word	0x3f1a36e2
 8002e40:	0800dc88 	.word	0x0800dc88
 8002e44:	200003e4 	.word	0x200003e4
 8002e48:	0800dc90 	.word	0x0800dc90
 8002e4c:	0800dc9c 	.word	0x0800dc9c
 8002e50:	0800dca0 	.word	0x0800dca0
 8002e54:	0800dcac 	.word	0x0800dcac

08002e58 <init_appdata>:

void init_appdata(app_data *app_data_init)
{
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	6078      	str	r0, [r7, #4]
	//printf("blahblah\r\n");
	//printf("%u",app_data_init->hspi1->Init.BaudRatePrescaler);
	static app_data a_dd;
	a_dd = *app_data_init;//placed in because pointers if not saved will not be able to be passed to other files
 8002e60:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <init_appdata+0xac>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4614      	mov	r4, r2
 8002e66:	461d      	mov	r5, r3
 8002e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e70:	e884 0003 	stmia.w	r4, {r0, r1}

	if(a_dd.debug==1){
 8002e74:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <init_appdata+0xac>)
 8002e76:	7d1b      	ldrb	r3, [r3, #20]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d138      	bne.n	8002eee <init_appdata+0x96>
		printf("\r\nDebugging init_appdata(main)\r\n");
 8002e7c:	4822      	ldr	r0, [pc, #136]	; (8002f08 <init_appdata+0xb0>)
 8002e7e:	f008 fdcf 	bl	800ba20 <puts>
		int data[3],sent[3];
		sent[0]=0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
		while (sent[0]<3){
 8002e86:	e02f      	b.n	8002ee8 <init_appdata+0x90>
			printf("prescaler: %u\r\n",app_data_init->hspi1->Init.BaudRatePrescaler);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	481e      	ldr	r0, [pc, #120]	; (8002f0c <init_appdata+0xb4>)
 8002e92:	f008 fd29 	bl	800b8e8 <iprintf>
			printf("prescaler: %u\r\n",a_dd.hspi1->Init.BaudRatePrescaler);
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <init_appdata+0xac>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481b      	ldr	r0, [pc, #108]	; (8002f0c <init_appdata+0xb4>)
 8002ea0:	f008 fd22 	bl	800b8e8 <iprintf>
			sent[0] +=1;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	60bb      	str	r3, [r7, #8]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2110      	movs	r1, #16
 8002eae:	4818      	ldr	r0, [pc, #96]	; (8002f10 <init_appdata+0xb8>)
 8002eb0:	f000 ff26 	bl	8003d00 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(app_data_init->hspi1, (uint8_t *) sent,(uint8_t *) data,1,100);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6858      	ldr	r0, [r3, #4]
 8002eb8:	f107 0214 	add.w	r2, r7, #20
 8002ebc:	f107 0108 	add.w	r1, r7, #8
 8002ec0:	2364      	movs	r3, #100	; 0x64
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f003 f99c 	bl	8006202 <HAL_SPI_TransmitReceive>
			printf("data sent %d :: data in init: %d \r\n",sent[0],data[0]);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4810      	ldr	r0, [pc, #64]	; (8002f14 <init_appdata+0xbc>)
 8002ed2:	f008 fd09 	bl	800b8e8 <iprintf>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2110      	movs	r1, #16
 8002eda:	480d      	ldr	r0, [pc, #52]	; (8002f10 <init_appdata+0xb8>)
 8002edc:	f000 ff10 	bl	8003d00 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8002ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ee4:	f000 fb3e 	bl	8003564 <HAL_Delay>
		while (sent[0]<3){
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	ddcc      	ble.n	8002e88 <init_appdata+0x30>
		}
	}
	init_app_data_6813(&a_dd);
 8002eee:	4805      	ldr	r0, [pc, #20]	; (8002f04 <init_appdata+0xac>)
 8002ef0:	f7fe fad4 	bl	800149c <init_app_data_6813>
	init_app_data_help(&a_dd);
 8002ef4:	4803      	ldr	r0, [pc, #12]	; (8002f04 <init_appdata+0xac>)
 8002ef6:	f7ff fab5 	bl	8002464 <init_app_data_help>
}
 8002efa:	bf00      	nop
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bdb0      	pop	{r4, r5, r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200004ec 	.word	0x200004ec
 8002f08:	0800dcb0 	.word	0x0800dcb0
 8002f0c:	0800dcd0 	.word	0x0800dcd0
 8002f10:	40020000 	.word	0x40020000
 8002f14:	0800dce0 	.word	0x0800dce0

08002f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f1c:	b672      	cpsid	i
}
 8002f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f20:	e7fe      	b.n	8002f20 <Error_Handler+0x8>
	...

08002f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a0f      	ldr	r2, [pc, #60]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f62:	2007      	movs	r0, #7
 8002f64:	f000 fcee 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800

08002f74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <HAL_CAN_MspInit+0x84>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d12b      	bne.n	8002fee <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_CAN_MspInit+0x88>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_CAN_MspInit+0x88>)
 8002fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_CAN_MspInit+0x88>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_CAN_MspInit+0x88>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_CAN_MspInit+0x88>)
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_CAN_MspInit+0x88>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002fde:	2309      	movs	r3, #9
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4805      	ldr	r0, [pc, #20]	; (8003000 <HAL_CAN_MspInit+0x8c>)
 8002fea:	f000 fced 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002fee:	bf00      	nop
 8002ff0:	3728      	adds	r7, #40	; 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40006400 	.word	0x40006400
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020c00 	.word	0x40020c00

08003004 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a41      	ldr	r2, [pc, #260]	; (8003128 <HAL_SPI_MspInit+0x124>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d12c      	bne.n	8003080 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	4b40      	ldr	r3, [pc, #256]	; (800312c <HAL_SPI_MspInit+0x128>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	4a3f      	ldr	r2, [pc, #252]	; (800312c <HAL_SPI_MspInit+0x128>)
 8003030:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003034:	6453      	str	r3, [r2, #68]	; 0x44
 8003036:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_SPI_MspInit+0x128>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800303e:	61bb      	str	r3, [r7, #24]
 8003040:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_SPI_MspInit+0x128>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a38      	ldr	r2, [pc, #224]	; (800312c <HAL_SPI_MspInit+0x128>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b36      	ldr	r3, [pc, #216]	; (800312c <HAL_SPI_MspInit+0x128>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800305e:	23e0      	movs	r3, #224	; 0xe0
 8003060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800306e:	2305      	movs	r3, #5
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003072:	f107 031c 	add.w	r3, r7, #28
 8003076:	4619      	mov	r1, r3
 8003078:	482d      	ldr	r0, [pc, #180]	; (8003130 <HAL_SPI_MspInit+0x12c>)
 800307a:	f000 fca5 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800307e:	e04f      	b.n	8003120 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <HAL_SPI_MspInit+0x130>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d14a      	bne.n	8003120 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_SPI_MspInit+0x128>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a26      	ldr	r2, [pc, #152]	; (800312c <HAL_SPI_MspInit+0x128>)
 8003094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
 800309a:	4b24      	ldr	r3, [pc, #144]	; (800312c <HAL_SPI_MspInit+0x128>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <HAL_SPI_MspInit+0x128>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a1f      	ldr	r2, [pc, #124]	; (800312c <HAL_SPI_MspInit+0x128>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_SPI_MspInit+0x128>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_SPI_MspInit+0x128>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_SPI_MspInit+0x128>)
 80030cc:	f043 0302 	orr.w	r3, r3, #2
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <HAL_SPI_MspInit+0x128>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030de:	2304      	movs	r3, #4
 80030e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ea:	2303      	movs	r3, #3
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030ee:	2305      	movs	r3, #5
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f2:	f107 031c 	add.w	r3, r7, #28
 80030f6:	4619      	mov	r1, r3
 80030f8:	480f      	ldr	r0, [pc, #60]	; (8003138 <HAL_SPI_MspInit+0x134>)
 80030fa:	f000 fc65 	bl	80039c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80030fe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003110:	2305      	movs	r3, #5
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003114:	f107 031c 	add.w	r3, r7, #28
 8003118:	4619      	mov	r1, r3
 800311a:	4808      	ldr	r0, [pc, #32]	; (800313c <HAL_SPI_MspInit+0x138>)
 800311c:	f000 fc54 	bl	80039c8 <HAL_GPIO_Init>
}
 8003120:	bf00      	nop
 8003122:	3730      	adds	r7, #48	; 0x30
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40013000 	.word	0x40013000
 800312c:	40023800 	.word	0x40023800
 8003130:	40020000 	.word	0x40020000
 8003134:	40003800 	.word	0x40003800
 8003138:	40020800 	.word	0x40020800
 800313c:	40020400 	.word	0x40020400

08003140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0b      	ldr	r2, [pc, #44]	; (800317c <HAL_TIM_Base_MspInit+0x3c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10d      	bne.n	800316e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_TIM_Base_MspInit+0x40>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_TIM_Base_MspInit+0x40>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6453      	str	r3, [r2, #68]	; 0x44
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <HAL_TIM_Base_MspInit+0x40>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40010000 	.word	0x40010000
 8003180:	40023800 	.word	0x40023800

08003184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_UART_MspInit+0x84>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d12b      	bne.n	80031fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_UART_MspInit+0x88>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a17      	ldr	r2, [pc, #92]	; (800320c <HAL_UART_MspInit+0x88>)
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_UART_MspInit+0x88>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_UART_MspInit+0x88>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a10      	ldr	r2, [pc, #64]	; (800320c <HAL_UART_MspInit+0x88>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_UART_MspInit+0x88>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031de:	230c      	movs	r3, #12
 80031e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ea:	2303      	movs	r3, #3
 80031ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ee:	2307      	movs	r3, #7
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	4619      	mov	r1, r3
 80031f8:	4805      	ldr	r0, [pc, #20]	; (8003210 <HAL_UART_MspInit+0x8c>)
 80031fa:	f000 fbe5 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031fe:	bf00      	nop
 8003200:	3728      	adds	r7, #40	; 0x28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40004400 	.word	0x40004400
 800320c:	40023800 	.word	0x40023800
 8003210:	40020000 	.word	0x40020000

08003214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003218:	e7fe      	b.n	8003218 <NMI_Handler+0x4>

0800321a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800321e:	e7fe      	b.n	800321e <HardFault_Handler+0x4>

08003220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003224:	e7fe      	b.n	8003224 <MemManage_Handler+0x4>

08003226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800322a:	e7fe      	b.n	800322a <BusFault_Handler+0x4>

0800322c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003230:	e7fe      	b.n	8003230 <UsageFault_Handler+0x4>

08003232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003260:	f000 f960 	bl	8003524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}

08003268 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800326c:	4802      	ldr	r0, [pc, #8]	; (8003278 <OTG_FS_IRQHandler+0x10>)
 800326e:	f000 ffcb 	bl	8004208 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200008e8 	.word	0x200008e8

0800327c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return 1;
 8003280:	2301      	movs	r3, #1
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_kill>:

int _kill(int pid, int sig)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003296:	f007 fd9b 	bl	800add0 <__errno>
 800329a:	4603      	mov	r3, r0
 800329c:	2216      	movs	r2, #22
 800329e:	601a      	str	r2, [r3, #0]
  return -1;
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_exit>:

void _exit (int status)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032b4:	f04f 31ff 	mov.w	r1, #4294967295
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ffe7 	bl	800328c <_kill>
  while (1) {}    /* Make sure we hang here */
 80032be:	e7fe      	b.n	80032be <_exit+0x12>

080032c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	e00a      	b.n	80032e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032d2:	f3af 8000 	nop.w
 80032d6:	4601      	mov	r1, r0
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	60ba      	str	r2, [r7, #8]
 80032de:	b2ca      	uxtb	r2, r1
 80032e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	3301      	adds	r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	dbf0      	blt.n	80032d2 <_read+0x12>
  }

  return len;
 80032f0:	687b      	ldr	r3, [r7, #4]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e009      	b.n	8003320 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	60ba      	str	r2, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fcd5 	bl	8002cc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3301      	adds	r3, #1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	429a      	cmp	r2, r3
 8003326:	dbf1      	blt.n	800330c <_write+0x12>
  }
  return len;
 8003328:	687b      	ldr	r3, [r7, #4]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_close>:

int _close(int file)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800333a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800335a:	605a      	str	r2, [r3, #4]
  return 0;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_isatty>:

int _isatty(int file)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003372:	2301      	movs	r3, #1
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a4:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <_sbrk+0x5c>)
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <_sbrk+0x60>)
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <_sbrk+0x64>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b8:	4b11      	ldr	r3, [pc, #68]	; (8003400 <_sbrk+0x64>)
 80033ba:	4a12      	ldr	r2, [pc, #72]	; (8003404 <_sbrk+0x68>)
 80033bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <_sbrk+0x64>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d207      	bcs.n	80033dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033cc:	f007 fd00 	bl	800add0 <__errno>
 80033d0:	4603      	mov	r3, r0
 80033d2:	220c      	movs	r2, #12
 80033d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295
 80033da:	e009      	b.n	80033f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <_sbrk+0x64>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <_sbrk+0x64>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	4a05      	ldr	r2, [pc, #20]	; (8003400 <_sbrk+0x64>)
 80033ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20020000 	.word	0x20020000
 80033fc:	00000400 	.word	0x00000400
 8003400:	20000504 	.word	0x20000504
 8003404:	20000c00 	.word	0x20000c00

08003408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <SystemInit+0x20>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <SystemInit+0x20>)
 8003414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800342c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003464 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003430:	480d      	ldr	r0, [pc, #52]	; (8003468 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003432:	490e      	ldr	r1, [pc, #56]	; (800346c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003434:	4a0e      	ldr	r2, [pc, #56]	; (8003470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003438:	e002      	b.n	8003440 <LoopCopyDataInit>

0800343a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800343a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800343c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343e:	3304      	adds	r3, #4

08003440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003444:	d3f9      	bcc.n	800343a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003446:	4a0b      	ldr	r2, [pc, #44]	; (8003474 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003448:	4c0b      	ldr	r4, [pc, #44]	; (8003478 <LoopFillZerobss+0x26>)
  movs r3, #0
 800344a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800344c:	e001      	b.n	8003452 <LoopFillZerobss>

0800344e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003450:	3204      	adds	r2, #4

08003452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003454:	d3fb      	bcc.n	800344e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003456:	f7ff ffd7 	bl	8003408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800345a:	f007 fcbf 	bl	800addc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800345e:	f7ff f85f 	bl	8002520 <main>
  bx  lr    
 8003462:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800346c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003470:	0800e88c 	.word	0x0800e88c
  ldr r2, =_sbss
 8003474:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8003478:	20000bfc 	.word	0x20000bfc

0800347c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800347c:	e7fe      	b.n	800347c <ADC_IRQHandler>
	...

08003480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_Init+0x40>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_Init+0x40>)
 800348a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800348e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_Init+0x40>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <HAL_Init+0x40>)
 8003496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800349a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_Init+0x40>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <HAL_Init+0x40>)
 80034a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a8:	2003      	movs	r0, #3
 80034aa:	f000 fa4b 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ae:	2000      	movs	r0, #0
 80034b0:	f000 f808 	bl	80034c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b4:	f7ff fd36 	bl	8002f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40023c00 	.word	0x40023c00

080034c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_InitTick+0x54>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_InitTick+0x58>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034da:	fbb3 f3f1 	udiv	r3, r3, r1
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fa63 	bl	80039ae <HAL_SYSTICK_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00e      	b.n	8003510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b0f      	cmp	r3, #15
 80034f6:	d80a      	bhi.n	800350e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f8:	2200      	movs	r2, #0
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f000 fa2b 	bl	800395a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003504:	4a06      	ldr	r2, [pc, #24]	; (8003520 <HAL_InitTick+0x5c>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000018 	.word	0x20000018
 800351c:	20000020 	.word	0x20000020
 8003520:	2000001c 	.word	0x2000001c

08003524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_IncTick+0x20>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_IncTick+0x24>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_IncTick+0x24>)
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000020 	.word	0x20000020
 8003548:	20000508 	.word	0x20000508

0800354c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return uwTick;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_GetTick+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000508 	.word	0x20000508

08003564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff ffee 	bl	800354c <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d005      	beq.n	800358a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_Delay+0x44>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800358a:	bf00      	nop
 800358c:	f7ff ffde 	bl	800354c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	429a      	cmp	r2, r3
 800359a:	d8f7      	bhi.n	800358c <HAL_Delay+0x28>
  {
  }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000020 	.word	0x20000020

080035ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0ed      	b.n	800379a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fcd2 	bl	8002f74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e0:	f7ff ffb4 	bl	800354c <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035e6:	e012      	b.n	800360e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035e8:	f7ff ffb0 	bl	800354c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b0a      	cmp	r3, #10
 80035f4:	d90b      	bls.n	800360e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2205      	movs	r2, #5
 8003606:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0c5      	b.n	800379a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0e5      	beq.n	80035e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0202 	bic.w	r2, r2, #2
 800362a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800362c:	f7ff ff8e 	bl	800354c <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003632:	e012      	b.n	800365a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003634:	f7ff ff8a 	bl	800354c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b0a      	cmp	r3, #10
 8003640:	d90b      	bls.n	800365a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2205      	movs	r2, #5
 8003652:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e09f      	b.n	800379a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7e1b      	ldrb	r3, [r3, #24]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d108      	bne.n	8003682 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e007      	b.n	8003692 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	7e5b      	ldrb	r3, [r3, #25]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d108      	bne.n	80036ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e007      	b.n	80036bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	7e9b      	ldrb	r3, [r3, #26]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d108      	bne.n	80036d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0220 	orr.w	r2, r2, #32
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e007      	b.n	80036e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0220 	bic.w	r2, r2, #32
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7edb      	ldrb	r3, [r3, #27]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d108      	bne.n	8003700 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0210 	bic.w	r2, r2, #16
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e007      	b.n	8003710 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0210 	orr.w	r2, r2, #16
 800370e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7f1b      	ldrb	r3, [r3, #28]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d108      	bne.n	800372a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0208 	orr.w	r2, r2, #8
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	e007      	b.n	800373a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0208 	bic.w	r2, r2, #8
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7f5b      	ldrb	r3, [r3, #29]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d108      	bne.n	8003754 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0204 	orr.w	r2, r2, #4
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e007      	b.n	8003764 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0204 	bic.w	r2, r2, #4
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	ea42 0103 	orr.w	r1, r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	210f      	movs	r1, #15
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800396c:	f7ff ff3e 	bl	80037ec <__NVIC_GetPriorityGrouping>
 8003970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f7ff ff8e 	bl	8003898 <NVIC_EncodePriority>
 800397c:	4602      	mov	r2, r0
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff5d 	bl	8003844 <__NVIC_SetPriority>
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff31 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffa2 	bl	8003900 <SysTick_Config>
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	e16b      	b.n	8003cbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e4:	2201      	movs	r2, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	f040 815a 	bne.w	8003cb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d005      	beq.n	8003a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d130      	bne.n	8003a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	2203      	movs	r2, #3
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a50:	2201      	movs	r2, #1
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 0201 	and.w	r2, r3, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d017      	beq.n	8003ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	2203      	movs	r2, #3
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d123      	bne.n	8003b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	08da      	lsrs	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3208      	adds	r2, #8
 8003acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	220f      	movs	r2, #15
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	08da      	lsrs	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3208      	adds	r2, #8
 8003b06:	69b9      	ldr	r1, [r7, #24]
 8003b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2203      	movs	r2, #3
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0203 	and.w	r2, r3, #3
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80b4 	beq.w	8003cb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b60      	ldr	r3, [pc, #384]	; (8003cd4 <HAL_GPIO_Init+0x30c>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	4a5f      	ldr	r2, [pc, #380]	; (8003cd4 <HAL_GPIO_Init+0x30c>)
 8003b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5e:	4b5d      	ldr	r3, [pc, #372]	; (8003cd4 <HAL_GPIO_Init+0x30c>)
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	; (8003cd8 <HAL_GPIO_Init+0x310>)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	3302      	adds	r3, #2
 8003b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	220f      	movs	r2, #15
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <HAL_GPIO_Init+0x314>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d02b      	beq.n	8003bee <HAL_GPIO_Init+0x226>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a51      	ldr	r2, [pc, #324]	; (8003ce0 <HAL_GPIO_Init+0x318>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d025      	beq.n	8003bea <HAL_GPIO_Init+0x222>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a50      	ldr	r2, [pc, #320]	; (8003ce4 <HAL_GPIO_Init+0x31c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d01f      	beq.n	8003be6 <HAL_GPIO_Init+0x21e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a4f      	ldr	r2, [pc, #316]	; (8003ce8 <HAL_GPIO_Init+0x320>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d019      	beq.n	8003be2 <HAL_GPIO_Init+0x21a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a4e      	ldr	r2, [pc, #312]	; (8003cec <HAL_GPIO_Init+0x324>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_GPIO_Init+0x216>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a4d      	ldr	r2, [pc, #308]	; (8003cf0 <HAL_GPIO_Init+0x328>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00d      	beq.n	8003bda <HAL_GPIO_Init+0x212>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a4c      	ldr	r2, [pc, #304]	; (8003cf4 <HAL_GPIO_Init+0x32c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d007      	beq.n	8003bd6 <HAL_GPIO_Init+0x20e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a4b      	ldr	r2, [pc, #300]	; (8003cf8 <HAL_GPIO_Init+0x330>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_GPIO_Init+0x20a>
 8003bce:	2307      	movs	r3, #7
 8003bd0:	e00e      	b.n	8003bf0 <HAL_GPIO_Init+0x228>
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	e00c      	b.n	8003bf0 <HAL_GPIO_Init+0x228>
 8003bd6:	2306      	movs	r3, #6
 8003bd8:	e00a      	b.n	8003bf0 <HAL_GPIO_Init+0x228>
 8003bda:	2305      	movs	r3, #5
 8003bdc:	e008      	b.n	8003bf0 <HAL_GPIO_Init+0x228>
 8003bde:	2304      	movs	r3, #4
 8003be0:	e006      	b.n	8003bf0 <HAL_GPIO_Init+0x228>
 8003be2:	2303      	movs	r3, #3
 8003be4:	e004      	b.n	8003bf0 <HAL_GPIO_Init+0x228>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e002      	b.n	8003bf0 <HAL_GPIO_Init+0x228>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_GPIO_Init+0x228>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	f002 0203 	and.w	r2, r2, #3
 8003bf6:	0092      	lsls	r2, r2, #2
 8003bf8:	4093      	lsls	r3, r2
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c00:	4935      	ldr	r1, [pc, #212]	; (8003cd8 <HAL_GPIO_Init+0x310>)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	089b      	lsrs	r3, r3, #2
 8003c06:	3302      	adds	r3, #2
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <HAL_GPIO_Init+0x334>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c32:	4a32      	ldr	r2, [pc, #200]	; (8003cfc <HAL_GPIO_Init+0x334>)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c38:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <HAL_GPIO_Init+0x334>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c5c:	4a27      	ldr	r2, [pc, #156]	; (8003cfc <HAL_GPIO_Init+0x334>)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <HAL_GPIO_Init+0x334>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c86:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <HAL_GPIO_Init+0x334>)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_GPIO_Init+0x334>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cb0:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <HAL_GPIO_Init+0x334>)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b0f      	cmp	r3, #15
 8003cc0:	f67f ae90 	bls.w	80039e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	3724      	adds	r7, #36	; 0x24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40013800 	.word	0x40013800
 8003cdc:	40020000 	.word	0x40020000
 8003ce0:	40020400 	.word	0x40020400
 8003ce4:	40020800 	.word	0x40020800
 8003ce8:	40020c00 	.word	0x40020c00
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40021400 	.word	0x40021400
 8003cf4:	40021800 	.word	0x40021800
 8003cf8:	40021c00 	.word	0x40021c00
 8003cfc:	40013c00 	.word	0x40013c00

08003d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d10:	787b      	ldrb	r3, [r7, #1]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d1c:	e003      	b.n	8003d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d1e:	887b      	ldrh	r3, [r7, #2]
 8003d20:	041a      	lsls	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	619a      	str	r2, [r3, #24]
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d34:	b08f      	sub	sp, #60	; 0x3c
 8003d36:	af0a      	add	r7, sp, #40	; 0x28
 8003d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e054      	b.n	8003dee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f006 fd8c 	bl	800a87c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2203      	movs	r2, #3
 8003d68:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f003 fbaa 	bl	80074dc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	687e      	ldr	r6, [r7, #4]
 8003d90:	466d      	mov	r5, sp
 8003d92:	f106 0410 	add.w	r4, r6, #16
 8003d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003da2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003da6:	1d33      	adds	r3, r6, #4
 8003da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003daa:	6838      	ldr	r0, [r7, #0]
 8003dac:	f003 fb24 	bl	80073f8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 fba1 	bl	80074fe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	687e      	ldr	r6, [r7, #4]
 8003dc4:	466d      	mov	r5, sp
 8003dc6:	f106 0410 	add.w	r4, r6, #16
 8003dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dda:	1d33      	adds	r3, r6, #4
 8003ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dde:	6838      	ldr	r0, [r7, #0]
 8003de0:	f003 fd2a 	bl	8007838 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003df6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003df6:	b590      	push	{r4, r7, lr}
 8003df8:	b089      	sub	sp, #36	; 0x24
 8003dfa:	af04      	add	r7, sp, #16
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	4608      	mov	r0, r1
 8003e00:	4611      	mov	r1, r2
 8003e02:	461a      	mov	r2, r3
 8003e04:	4603      	mov	r3, r0
 8003e06:	70fb      	strb	r3, [r7, #3]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70bb      	strb	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_HCD_HC_Init+0x28>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e076      	b.n	8003f0c <HAL_HCD_HC_Init+0x116>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	212c      	movs	r1, #44	; 0x2c
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	333d      	adds	r3, #61	; 0x3d
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	3338      	adds	r3, #56	; 0x38
 8003e46:	787a      	ldrb	r2, [r7, #1]
 8003e48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	3340      	adds	r3, #64	; 0x40
 8003e58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e5a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	212c      	movs	r1, #44	; 0x2c
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	3339      	adds	r3, #57	; 0x39
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	333f      	adds	r3, #63	; 0x3f
 8003e7c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	78ba      	ldrb	r2, [r7, #2]
 8003e86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e8a:	b2d0      	uxtb	r0, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	333a      	adds	r3, #58	; 0x3a
 8003e98:	4602      	mov	r2, r0
 8003e9a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003e9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	da09      	bge.n	8003eb8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	212c      	movs	r1, #44	; 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	333b      	adds	r3, #59	; 0x3b
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e008      	b.n	8003eca <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	333b      	adds	r3, #59	; 0x3b
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	212c      	movs	r1, #44	; 0x2c
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	333c      	adds	r3, #60	; 0x3c
 8003ed8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003edc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	787c      	ldrb	r4, [r7, #1]
 8003ee4:	78ba      	ldrb	r2, [r7, #2]
 8003ee6:	78f9      	ldrb	r1, [r7, #3]
 8003ee8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003eea:	9302      	str	r3, [sp, #8]
 8003eec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	4623      	mov	r3, r4
 8003efa:	f003 fe23 	bl	8007b44 <USB_HC_Init>
 8003efe:	4603      	mov	r3, r0
 8003f00:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd90      	pop	{r4, r7, pc}

08003f14 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_HCD_HC_Halt+0x1e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e00f      	b.n	8003f52 <HAL_HCD_HC_Halt+0x3e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f004 f873 	bl	800802e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	4608      	mov	r0, r1
 8003f66:	4611      	mov	r1, r2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	70fb      	strb	r3, [r7, #3]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	70bb      	strb	r3, [r7, #2]
 8003f72:	4613      	mov	r3, r2
 8003f74:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	212c      	movs	r1, #44	; 0x2c
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	4413      	add	r3, r2
 8003f82:	333b      	adds	r3, #59	; 0x3b
 8003f84:	78ba      	ldrb	r2, [r7, #2]
 8003f86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	212c      	movs	r1, #44	; 0x2c
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	4413      	add	r3, r2
 8003f94:	333f      	adds	r3, #63	; 0x3f
 8003f96:	787a      	ldrb	r2, [r7, #1]
 8003f98:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f9a:	7c3b      	ldrb	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d112      	bne.n	8003fc6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	3342      	adds	r3, #66	; 0x42
 8003fae:	2203      	movs	r2, #3
 8003fb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	212c      	movs	r1, #44	; 0x2c
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	333d      	adds	r3, #61	; 0x3d
 8003fc0:	7f3a      	ldrb	r2, [r7, #28]
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	e008      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fc6:	78fb      	ldrb	r3, [r7, #3]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3342      	adds	r3, #66	; 0x42
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003fd8:	787b      	ldrb	r3, [r7, #1]
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	f200 80c6 	bhi.w	800416c <HAL_HCD_HC_SubmitRequest+0x210>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	08003ff9 	.word	0x08003ff9
 8003fec:	08004159 	.word	0x08004159
 8003ff0:	0800405d 	.word	0x0800405d
 8003ff4:	080040db 	.word	0x080040db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003ff8:	7c3b      	ldrb	r3, [r7, #16]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	f040 80b8 	bne.w	8004170 <HAL_HCD_HC_SubmitRequest+0x214>
 8004000:	78bb      	ldrb	r3, [r7, #2]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 80b4 	bne.w	8004170 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004008:	8b3b      	ldrh	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d108      	bne.n	8004020 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	212c      	movs	r1, #44	; 0x2c
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	4413      	add	r3, r2
 800401a:	3355      	adds	r3, #85	; 0x55
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	212c      	movs	r1, #44	; 0x2c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4413      	add	r3, r2
 800402c:	3355      	adds	r3, #85	; 0x55
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	3342      	adds	r3, #66	; 0x42
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004046:	e093      	b.n	8004170 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	212c      	movs	r1, #44	; 0x2c
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	3342      	adds	r3, #66	; 0x42
 8004056:	2202      	movs	r2, #2
 8004058:	701a      	strb	r2, [r3, #0]
      break;
 800405a:	e089      	b.n	8004170 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800405c:	78bb      	ldrb	r3, [r7, #2]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d11d      	bne.n	800409e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	212c      	movs	r1, #44	; 0x2c
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	4413      	add	r3, r2
 800406e:	3355      	adds	r3, #85	; 0x55
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	212c      	movs	r1, #44	; 0x2c
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	3342      	adds	r3, #66	; 0x42
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004088:	e073      	b.n	8004172 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	212c      	movs	r1, #44	; 0x2c
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	4413      	add	r3, r2
 8004096:	3342      	adds	r3, #66	; 0x42
 8004098:	2202      	movs	r2, #2
 800409a:	701a      	strb	r2, [r3, #0]
      break;
 800409c:	e069      	b.n	8004172 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	3354      	adds	r3, #84	; 0x54
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	212c      	movs	r1, #44	; 0x2c
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	3342      	adds	r3, #66	; 0x42
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
      break;
 80040c4:	e055      	b.n	8004172 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	212c      	movs	r1, #44	; 0x2c
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	3342      	adds	r3, #66	; 0x42
 80040d4:	2202      	movs	r2, #2
 80040d6:	701a      	strb	r2, [r3, #0]
      break;
 80040d8:	e04b      	b.n	8004172 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80040da:	78bb      	ldrb	r3, [r7, #2]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d11d      	bne.n	800411c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	3355      	adds	r3, #85	; 0x55
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	212c      	movs	r1, #44	; 0x2c
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	4413      	add	r3, r2
 8004100:	3342      	adds	r3, #66	; 0x42
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004106:	e034      	b.n	8004172 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	212c      	movs	r1, #44	; 0x2c
 800410e:	fb01 f303 	mul.w	r3, r1, r3
 8004112:	4413      	add	r3, r2
 8004114:	3342      	adds	r3, #66	; 0x42
 8004116:	2202      	movs	r2, #2
 8004118:	701a      	strb	r2, [r3, #0]
      break;
 800411a:	e02a      	b.n	8004172 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	212c      	movs	r1, #44	; 0x2c
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	4413      	add	r3, r2
 8004128:	3354      	adds	r3, #84	; 0x54
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	212c      	movs	r1, #44	; 0x2c
 8004136:	fb01 f303 	mul.w	r3, r1, r3
 800413a:	4413      	add	r3, r2
 800413c:	3342      	adds	r3, #66	; 0x42
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]
      break;
 8004142:	e016      	b.n	8004172 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	212c      	movs	r1, #44	; 0x2c
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	4413      	add	r3, r2
 8004150:	3342      	adds	r3, #66	; 0x42
 8004152:	2202      	movs	r2, #2
 8004154:	701a      	strb	r2, [r3, #0]
      break;
 8004156:	e00c      	b.n	8004172 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	3342      	adds	r3, #66	; 0x42
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]
      break;
 800416a:	e002      	b.n	8004172 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800416c:	bf00      	nop
 800416e:	e000      	b.n	8004172 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004170:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	4413      	add	r3, r2
 800417e:	3344      	adds	r3, #68	; 0x44
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	8b3a      	ldrh	r2, [r7, #24]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	202c      	movs	r0, #44	; 0x2c
 800418c:	fb00 f303 	mul.w	r3, r0, r3
 8004190:	440b      	add	r3, r1
 8004192:	334c      	adds	r3, #76	; 0x4c
 8004194:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	212c      	movs	r1, #44	; 0x2c
 800419c:	fb01 f303 	mul.w	r3, r1, r3
 80041a0:	4413      	add	r3, r2
 80041a2:	3360      	adds	r3, #96	; 0x60
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	212c      	movs	r1, #44	; 0x2c
 80041ae:	fb01 f303 	mul.w	r3, r1, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	3350      	adds	r3, #80	; 0x50
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	212c      	movs	r1, #44	; 0x2c
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	3339      	adds	r3, #57	; 0x39
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3361      	adds	r3, #97	; 0x61
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	222c      	movs	r2, #44	; 0x2c
 80041e6:	fb02 f303 	mul.w	r3, r2, r3
 80041ea:	3338      	adds	r3, #56	; 0x38
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	18d1      	adds	r1, r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	f003 fdc6 	bl	8007d88 <USB_HC_StartXfer>
 80041fc:	4603      	mov	r3, r0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop

08004208 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f003 fac7 	bl	80077b2 <USB_GetMode>
 8004224:	4603      	mov	r3, r0
 8004226:	2b01      	cmp	r3, #1
 8004228:	f040 80f6 	bne.w	8004418 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f003 faab 	bl	800778c <USB_ReadInterrupts>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80ec 	beq.w	8004416 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f003 faa2 	bl	800778c <USB_ReadInterrupts>
 8004248:	4603      	mov	r3, r0
 800424a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800424e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004252:	d104      	bne.n	800425e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800425c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f003 fa92 	bl	800778c <USB_ReadInterrupts>
 8004268:	4603      	mov	r3, r0
 800426a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004272:	d104      	bne.n	800427e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800427c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f003 fa82 	bl	800778c <USB_ReadInterrupts>
 8004288:	4603      	mov	r3, r0
 800428a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800428e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004292:	d104      	bne.n	800429e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800429c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 fa72 	bl	800778c <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d103      	bne.n	80042ba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2202      	movs	r2, #2
 80042b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f003 fa64 	bl	800778c <USB_ReadInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ce:	d11c      	bne.n	800430a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80042d8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80042ea:	2110      	movs	r1, #16
 80042ec:	6938      	ldr	r0, [r7, #16]
 80042ee:	f003 f953 	bl	8007598 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80042f2:	6938      	ldr	r0, [r7, #16]
 80042f4:	f003 f984 	bl	8007600 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f003 fb5a 	bl	80079b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f006 fb37 	bl	800a978 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f003 fa3c 	bl	800778c <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800431a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800431e:	d102      	bne.n	8004326 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f001 f89e 	bl	8005462 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f003 fa2e 	bl	800778c <USB_ReadInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b08      	cmp	r3, #8
 8004338:	d106      	bne.n	8004348 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f006 fb00 	bl	800a940 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2208      	movs	r2, #8
 8004346:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f003 fa1d 	bl	800778c <USB_ReadInterrupts>
 8004352:	4603      	mov	r3, r0
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b10      	cmp	r3, #16
 800435a:	d101      	bne.n	8004360 <HAL_HCD_IRQHandler+0x158>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <HAL_HCD_IRQHandler+0x15a>
 8004360:	2300      	movs	r3, #0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d012      	beq.n	800438c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0210 	bic.w	r2, r2, #16
 8004374:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 ffa1 	bl	80052be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0210 	orr.w	r2, r2, #16
 800438a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f003 f9fb 	bl	800778c <USB_ReadInterrupts>
 8004396:	4603      	mov	r3, r0
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043a0:	d13a      	bne.n	8004418 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f003 fe30 	bl	800800c <USB_HC_ReadInterrupt>
 80043ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e025      	b.n	8004400 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d018      	beq.n	80043fa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043de:	d106      	bne.n	80043ee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8ab 	bl	8004542 <HCD_HC_IN_IRQHandler>
 80043ec:	e005      	b.n	80043fa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fbf9 	bl	8004bec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	3301      	adds	r3, #1
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	429a      	cmp	r2, r3
 8004408:	d3d4      	bcc.n	80043b4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004412:	615a      	str	r2, [r3, #20]
 8004414:	e000      	b.n	8004418 <HAL_HCD_IRQHandler+0x210>
      return;
 8004416:	bf00      	nop
    }
  }
}
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_HCD_Start+0x16>
 8004430:	2302      	movs	r3, #2
 8004432:	e013      	b.n	800445c <HAL_HCD_Start+0x3e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f003 fb1c 	bl	8007a80 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f003 f834 	bl	80074ba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_HCD_Stop+0x16>
 8004476:	2302      	movs	r3, #2
 8004478:	e00d      	b.n	8004496 <HAL_HCD_Stop+0x32>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f003 ff0a 	bl	80082a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f003 fabe 	bl	8007a2c <USB_ResetPort>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	460b      	mov	r3, r1
 80044c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	3360      	adds	r3, #96	; 0x60
 80044d4:	781b      	ldrb	r3, [r3, #0]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	212c      	movs	r1, #44	; 0x2c
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	3350      	adds	r3, #80	; 0x50
 80044fc:	681b      	ldr	r3, [r3, #0]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f003 fb02 	bl	8007b20 <USB_GetCurrentFrame>
 800451c:	4603      	mov	r3, r0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f003 fadd 	bl	8007af2 <USB_GetHostSpeed>
 8004538:	4603      	mov	r3, r0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b086      	sub	sp, #24
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	460b      	mov	r3, r1
 800454c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4413      	add	r3, r2
 8004564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b04      	cmp	r3, #4
 8004570:	d11a      	bne.n	80045a8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	461a      	mov	r2, r3
 8004580:	2304      	movs	r3, #4
 8004582:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	3361      	adds	r3, #97	; 0x61
 8004592:	2206      	movs	r2, #6
 8004594:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f003 fd44 	bl	800802e <USB_HC_Halt>
 80045a6:	e0af      	b.n	8004708 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045be:	d11b      	bne.n	80045f8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045cc:	461a      	mov	r2, r3
 80045ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	212c      	movs	r1, #44	; 0x2c
 80045da:	fb01 f303 	mul.w	r3, r1, r3
 80045de:	4413      	add	r3, r2
 80045e0:	3361      	adds	r3, #97	; 0x61
 80045e2:	2207      	movs	r2, #7
 80045e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f003 fd1c 	bl	800802e <USB_HC_Halt>
 80045f6:	e087      	b.n	8004708 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b20      	cmp	r3, #32
 800460c:	d109      	bne.n	8004622 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461a:	461a      	mov	r2, r3
 800461c:	2320      	movs	r3, #32
 800461e:	6093      	str	r3, [r2, #8]
 8004620:	e072      	b.n	8004708 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b08      	cmp	r3, #8
 8004636:	d11a      	bne.n	800466e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4413      	add	r3, r2
 8004640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004644:	461a      	mov	r2, r3
 8004646:	2308      	movs	r3, #8
 8004648:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	3361      	adds	r3, #97	; 0x61
 8004658:	2205      	movs	r2, #5
 800465a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f003 fce1 	bl	800802e <USB_HC_Halt>
 800466c:	e04c      	b.n	8004708 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4413      	add	r3, r2
 8004676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004684:	d11b      	bne.n	80046be <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4413      	add	r3, r2
 800468e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004692:	461a      	mov	r2, r3
 8004694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004698:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	212c      	movs	r1, #44	; 0x2c
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	4413      	add	r3, r2
 80046a6:	3361      	adds	r3, #97	; 0x61
 80046a8:	2208      	movs	r2, #8
 80046aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f003 fcb9 	bl	800802e <USB_HC_Halt>
 80046bc:	e024      	b.n	8004708 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d119      	bne.n	8004708 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e0:	461a      	mov	r2, r3
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3361      	adds	r3, #97	; 0x61
 80046f4:	2206      	movs	r2, #6
 80046f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	4611      	mov	r1, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f003 fc93 	bl	800802e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4413      	add	r3, r2
 8004710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471e:	d112      	bne.n	8004746 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	4611      	mov	r1, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f003 fc7f 	bl	800802e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473c:	461a      	mov	r2, r3
 800473e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004742:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004744:	e24e      	b.n	8004be4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4413      	add	r3, r2
 800474e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 80df 	bne.w	800491c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d019      	beq.n	800479a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	3348      	adds	r3, #72	; 0x48
 8004774:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	0159      	lsls	r1, r3, #5
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	440b      	add	r3, r1
 800477e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004788:	1ad2      	subs	r2, r2, r3
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	202c      	movs	r0, #44	; 0x2c
 8004790:	fb00 f303 	mul.w	r3, r0, r3
 8004794:	440b      	add	r3, r1
 8004796:	3350      	adds	r3, #80	; 0x50
 8004798:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	212c      	movs	r1, #44	; 0x2c
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	3361      	adds	r3, #97	; 0x61
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	212c      	movs	r1, #44	; 0x2c
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	4413      	add	r3, r2
 80047b8:	335c      	adds	r3, #92	; 0x5c
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ca:	461a      	mov	r2, r3
 80047cc:	2301      	movs	r3, #1
 80047ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	212c      	movs	r1, #44	; 0x2c
 80047d6:	fb01 f303 	mul.w	r3, r1, r3
 80047da:	4413      	add	r3, r2
 80047dc:	333f      	adds	r3, #63	; 0x3f
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d009      	beq.n	80047f8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	212c      	movs	r1, #44	; 0x2c
 80047ea:	fb01 f303 	mul.w	r3, r1, r3
 80047ee:	4413      	add	r3, r2
 80047f0:	333f      	adds	r3, #63	; 0x3f
 80047f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d111      	bne.n	800481c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f003 fc13 	bl	800802e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004814:	461a      	mov	r2, r3
 8004816:	2310      	movs	r3, #16
 8004818:	6093      	str	r3, [r2, #8]
 800481a:	e03a      	b.n	8004892 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	212c      	movs	r1, #44	; 0x2c
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	4413      	add	r3, r2
 8004828:	333f      	adds	r3, #63	; 0x3f
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b03      	cmp	r3, #3
 800482e:	d009      	beq.n	8004844 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	212c      	movs	r1, #44	; 0x2c
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	4413      	add	r3, r2
 800483c:	333f      	adds	r3, #63	; 0x3f
 800483e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004840:	2b01      	cmp	r3, #1
 8004842:	d126      	bne.n	8004892 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4413      	add	r3, r2
 800484c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	0151      	lsls	r1, r2, #5
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	440a      	add	r2, r1
 800485a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800485e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004862:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	212c      	movs	r1, #44	; 0x2c
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	3360      	adds	r3, #96	; 0x60
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	b2d9      	uxtb	r1, r3
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	202c      	movs	r0, #44	; 0x2c
 8004880:	fb00 f303 	mul.w	r3, r0, r3
 8004884:	4413      	add	r3, r2
 8004886:	3360      	adds	r3, #96	; 0x60
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f006 f881 	bl	800a994 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d12b      	bne.n	80048f2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	3348      	adds	r3, #72	; 0x48
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	202c      	movs	r0, #44	; 0x2c
 80048b0:	fb00 f202 	mul.w	r2, r0, r2
 80048b4:	440a      	add	r2, r1
 80048b6:	3240      	adds	r2, #64	; 0x40
 80048b8:	8812      	ldrh	r2, [r2, #0]
 80048ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 818e 	beq.w	8004be4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	212c      	movs	r1, #44	; 0x2c
 80048ce:	fb01 f303 	mul.w	r3, r1, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	3354      	adds	r3, #84	; 0x54
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	f083 0301 	eor.w	r3, r3, #1
 80048dc:	b2d8      	uxtb	r0, r3
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	212c      	movs	r1, #44	; 0x2c
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	4413      	add	r3, r2
 80048ea:	3354      	adds	r3, #84	; 0x54
 80048ec:	4602      	mov	r2, r0
 80048ee:	701a      	strb	r2, [r3, #0]
}
 80048f0:	e178      	b.n	8004be4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	212c      	movs	r1, #44	; 0x2c
 80048f8:	fb01 f303 	mul.w	r3, r1, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	3354      	adds	r3, #84	; 0x54
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	f083 0301 	eor.w	r3, r3, #1
 8004906:	b2d8      	uxtb	r0, r3
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	212c      	movs	r1, #44	; 0x2c
 800490e:	fb01 f303 	mul.w	r3, r1, r3
 8004912:	4413      	add	r3, r2
 8004914:	3354      	adds	r3, #84	; 0x54
 8004916:	4602      	mov	r2, r0
 8004918:	701a      	strb	r2, [r3, #0]
}
 800491a:	e163      	b.n	8004be4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4413      	add	r3, r2
 8004924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	f040 80f6 	bne.w	8004b20 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	212c      	movs	r1, #44	; 0x2c
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	4413      	add	r3, r2
 8004940:	3361      	adds	r3, #97	; 0x61
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d109      	bne.n	800495c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	212c      	movs	r1, #44	; 0x2c
 800494e:	fb01 f303 	mul.w	r3, r1, r3
 8004952:	4413      	add	r3, r2
 8004954:	3360      	adds	r3, #96	; 0x60
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	e0c9      	b.n	8004af0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	212c      	movs	r1, #44	; 0x2c
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	4413      	add	r3, r2
 8004968:	3361      	adds	r3, #97	; 0x61
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b05      	cmp	r3, #5
 800496e:	d109      	bne.n	8004984 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	212c      	movs	r1, #44	; 0x2c
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	4413      	add	r3, r2
 800497c:	3360      	adds	r3, #96	; 0x60
 800497e:	2205      	movs	r2, #5
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	e0b5      	b.n	8004af0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	212c      	movs	r1, #44	; 0x2c
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	4413      	add	r3, r2
 8004990:	3361      	adds	r3, #97	; 0x61
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2b06      	cmp	r3, #6
 8004996:	d009      	beq.n	80049ac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	212c      	movs	r1, #44	; 0x2c
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	3361      	adds	r3, #97	; 0x61
 80049a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d150      	bne.n	8004a4e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	212c      	movs	r1, #44	; 0x2c
 80049b2:	fb01 f303 	mul.w	r3, r1, r3
 80049b6:	4413      	add	r3, r2
 80049b8:	335c      	adds	r3, #92	; 0x5c
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	202c      	movs	r0, #44	; 0x2c
 80049c4:	fb00 f303 	mul.w	r3, r0, r3
 80049c8:	440b      	add	r3, r1
 80049ca:	335c      	adds	r3, #92	; 0x5c
 80049cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	212c      	movs	r1, #44	; 0x2c
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	4413      	add	r3, r2
 80049da:	335c      	adds	r3, #92	; 0x5c
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d912      	bls.n	8004a08 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	212c      	movs	r1, #44	; 0x2c
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	335c      	adds	r3, #92	; 0x5c
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	212c      	movs	r1, #44	; 0x2c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	3360      	adds	r3, #96	; 0x60
 8004a02:	2204      	movs	r2, #4
 8004a04:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a06:	e073      	b.n	8004af0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	212c      	movs	r1, #44	; 0x2c
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	3360      	adds	r3, #96	; 0x60
 8004a16:	2202      	movs	r2, #2
 8004a18:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a30:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a38:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a46:	461a      	mov	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a4c:	e050      	b.n	8004af0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	3361      	adds	r3, #97	; 0x61
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d122      	bne.n	8004aa8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3360      	adds	r3, #96	; 0x60
 8004a70:	2202      	movs	r2, #2
 8004a72:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a8a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a92:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e023      	b.n	8004af0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	212c      	movs	r1, #44	; 0x2c
 8004aae:	fb01 f303 	mul.w	r3, r1, r3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3361      	adds	r3, #97	; 0x61
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b07      	cmp	r3, #7
 8004aba:	d119      	bne.n	8004af0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	212c      	movs	r1, #44	; 0x2c
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	335c      	adds	r3, #92	; 0x5c
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	202c      	movs	r0, #44	; 0x2c
 8004ad4:	fb00 f303 	mul.w	r3, r0, r3
 8004ad8:	440b      	add	r3, r1
 8004ada:	335c      	adds	r3, #92	; 0x5c
 8004adc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	212c      	movs	r1, #44	; 0x2c
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	3360      	adds	r3, #96	; 0x60
 8004aec:	2204      	movs	r2, #4
 8004aee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	461a      	mov	r2, r3
 8004afe:	2302      	movs	r3, #2
 8004b00:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	b2d9      	uxtb	r1, r3
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	202c      	movs	r0, #44	; 0x2c
 8004b0c:	fb00 f303 	mul.w	r3, r0, r3
 8004b10:	4413      	add	r3, r2
 8004b12:	3360      	adds	r3, #96	; 0x60
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f005 ff3b 	bl	800a994 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b1e:	e061      	b.n	8004be4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d156      	bne.n	8004be4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	212c      	movs	r1, #44	; 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	333f      	adds	r3, #63	; 0x3f
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d111      	bne.n	8004b6e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	212c      	movs	r1, #44	; 0x2c
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	335c      	adds	r3, #92	; 0x5c
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	4611      	mov	r1, r2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f003 fa61 	bl	800802e <USB_HC_Halt>
 8004b6c:	e031      	b.n	8004bd2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	212c      	movs	r1, #44	; 0x2c
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	333f      	adds	r3, #63	; 0x3f
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	333f      	adds	r3, #63	; 0x3f
 8004b90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d11d      	bne.n	8004bd2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	212c      	movs	r1, #44	; 0x2c
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	335c      	adds	r3, #92	; 0x5c
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d110      	bne.n	8004bd2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	212c      	movs	r1, #44	; 0x2c
 8004bb6:	fb01 f303 	mul.w	r3, r1, r3
 8004bba:	4413      	add	r3, r2
 8004bbc:	3361      	adds	r3, #97	; 0x61
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f003 fa2e 	bl	800802e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bde:	461a      	mov	r2, r3
 8004be0:	2310      	movs	r3, #16
 8004be2:	6093      	str	r3, [r2, #8]
}
 8004be4:	bf00      	nop
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d11a      	bne.n	8004c52 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	212c      	movs	r1, #44	; 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	3361      	adds	r3, #97	; 0x61
 8004c3c:	2206      	movs	r2, #6
 8004c3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f003 f9ef 	bl	800802e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004c50:	e331      	b.n	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d12e      	bne.n	8004cc6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c74:	461a      	mov	r2, r3
 8004c76:	2320      	movs	r3, #32
 8004c78:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	212c      	movs	r1, #44	; 0x2c
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	4413      	add	r3, r2
 8004c86:	333d      	adds	r3, #61	; 0x3d
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	f040 8313 	bne.w	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	212c      	movs	r1, #44	; 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	333d      	adds	r3, #61	; 0x3d
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3360      	adds	r3, #96	; 0x60
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f003 f9b5 	bl	800802e <USB_HC_Halt>
}
 8004cc4:	e2f7      	b.n	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cdc:	d112      	bne.n	8004d04 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cea:	461a      	mov	r2, r3
 8004cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cf0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f003 f996 	bl	800802e <USB_HC_Halt>
}
 8004d02:	e2d8      	b.n	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d140      	bne.n	8004d9c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	335c      	adds	r3, #92	; 0x5c
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d111      	bne.n	8004d66 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	212c      	movs	r1, #44	; 0x2c
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	333d      	adds	r3, #61	; 0x3d
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d60:	461a      	mov	r2, r3
 8004d62:	2340      	movs	r3, #64	; 0x40
 8004d64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d72:	461a      	mov	r2, r3
 8004d74:	2301      	movs	r3, #1
 8004d76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	212c      	movs	r1, #44	; 0x2c
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	3361      	adds	r3, #97	; 0x61
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	4611      	mov	r1, r2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f003 f94a 	bl	800802e <USB_HC_Halt>
}
 8004d9a:	e28c      	b.n	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d12c      	bne.n	8004e0c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	212c      	movs	r1, #44	; 0x2c
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3361      	adds	r3, #97	; 0x61
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	212c      	movs	r1, #44	; 0x2c
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	4413      	add	r3, r2
 8004dd0:	333d      	adds	r3, #61	; 0x3d
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	212c      	movs	r1, #44	; 0x2c
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	4413      	add	r3, r2
 8004de2:	335c      	adds	r3, #92	; 0x5c
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f003 f91b 	bl	800802e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	461a      	mov	r2, r3
 8004e06:	2340      	movs	r3, #64	; 0x40
 8004e08:	6093      	str	r3, [r2, #8]
}
 8004e0a:	e254      	b.n	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d11a      	bne.n	8004e58 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2308      	movs	r3, #8
 8004e32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	212c      	movs	r1, #44	; 0x2c
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	3361      	adds	r3, #97	; 0x61
 8004e42:	2205      	movs	r2, #5
 8004e44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	4611      	mov	r1, r2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f003 f8ec 	bl	800802e <USB_HC_Halt>
}
 8004e56:	e22e      	b.n	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d140      	bne.n	8004ef0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	212c      	movs	r1, #44	; 0x2c
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	4413      	add	r3, r2
 8004e7a:	335c      	adds	r3, #92	; 0x5c
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	212c      	movs	r1, #44	; 0x2c
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	3361      	adds	r3, #97	; 0x61
 8004e8e:	2203      	movs	r2, #3
 8004e90:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	212c      	movs	r1, #44	; 0x2c
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	333d      	adds	r3, #61	; 0x3d
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d112      	bne.n	8004ecc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	212c      	movs	r1, #44	; 0x2c
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	333c      	adds	r3, #60	; 0x3c
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d108      	bne.n	8004ecc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	212c      	movs	r1, #44	; 0x2c
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	333d      	adds	r3, #61	; 0x3d
 8004ec8:	2201      	movs	r2, #1
 8004eca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f003 f8a9 	bl	800802e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2310      	movs	r3, #16
 8004eec:	6093      	str	r3, [r2, #8]
}
 8004eee:	e1e2      	b.n	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d164      	bne.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d111      	bne.n	8004f32 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	212c      	movs	r1, #44	; 0x2c
 8004f14:	fb01 f303 	mul.w	r3, r1, r3
 8004f18:	4413      	add	r3, r2
 8004f1a:	3361      	adds	r3, #97	; 0x61
 8004f1c:	2206      	movs	r2, #6
 8004f1e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f003 f87f 	bl	800802e <USB_HC_Halt>
 8004f30:	e044      	b.n	8004fbc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	212c      	movs	r1, #44	; 0x2c
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	335c      	adds	r3, #92	; 0x5c
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	202c      	movs	r0, #44	; 0x2c
 8004f4a:	fb00 f303 	mul.w	r3, r0, r3
 8004f4e:	440b      	add	r3, r1
 8004f50:	335c      	adds	r3, #92	; 0x5c
 8004f52:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	212c      	movs	r1, #44	; 0x2c
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	335c      	adds	r3, #92	; 0x5c
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d920      	bls.n	8004faa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	212c      	movs	r1, #44	; 0x2c
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	335c      	adds	r3, #92	; 0x5c
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	212c      	movs	r1, #44	; 0x2c
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	3360      	adds	r3, #96	; 0x60
 8004f88:	2204      	movs	r2, #4
 8004f8a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	b2d9      	uxtb	r1, r3
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	202c      	movs	r0, #44	; 0x2c
 8004f96:	fb00 f303 	mul.w	r3, r0, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3360      	adds	r3, #96	; 0x60
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f005 fcf6 	bl	800a994 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004fa8:	e008      	b.n	8004fbc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	212c      	movs	r1, #44	; 0x2c
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3360      	adds	r3, #96	; 0x60
 8004fb8:	2202      	movs	r2, #2
 8004fba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	6093      	str	r3, [r2, #8]
}
 8004fce:	e172      	b.n	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe6:	d11b      	bne.n	8005020 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	212c      	movs	r1, #44	; 0x2c
 8004fee:	fb01 f303 	mul.w	r3, r1, r3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3361      	adds	r3, #97	; 0x61
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f003 f812 	bl	800802e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	4413      	add	r3, r2
 8005012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005016:	461a      	mov	r2, r3
 8005018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501c:	6093      	str	r3, [r2, #8]
}
 800501e:	e14a      	b.n	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	4413      	add	r3, r2
 8005028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b02      	cmp	r3, #2
 8005034:	f040 813f 	bne.w	80052b6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	212c      	movs	r1, #44	; 0x2c
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	4413      	add	r3, r2
 8005044:	3361      	adds	r3, #97	; 0x61
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d17d      	bne.n	8005148 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	212c      	movs	r1, #44	; 0x2c
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	3360      	adds	r3, #96	; 0x60
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	212c      	movs	r1, #44	; 0x2c
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	4413      	add	r3, r2
 800506a:	333f      	adds	r3, #63	; 0x3f
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d00a      	beq.n	8005088 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	212c      	movs	r1, #44	; 0x2c
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	4413      	add	r3, r2
 800507e:	333f      	adds	r3, #63	; 0x3f
 8005080:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005082:	2b03      	cmp	r3, #3
 8005084:	f040 8100 	bne.w	8005288 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d113      	bne.n	80050b8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	212c      	movs	r1, #44	; 0x2c
 8005096:	fb01 f303 	mul.w	r3, r1, r3
 800509a:	4413      	add	r3, r2
 800509c:	3355      	adds	r3, #85	; 0x55
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	f083 0301 	eor.w	r3, r3, #1
 80050a4:	b2d8      	uxtb	r0, r3
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	212c      	movs	r1, #44	; 0x2c
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	4413      	add	r3, r2
 80050b2:	3355      	adds	r3, #85	; 0x55
 80050b4:	4602      	mov	r2, r0
 80050b6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	f040 80e3 	bne.w	8005288 <HCD_HC_OUT_IRQHandler+0x69c>
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	212c      	movs	r1, #44	; 0x2c
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	4413      	add	r3, r2
 80050ce:	334c      	adds	r3, #76	; 0x4c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 80d8 	beq.w	8005288 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	212c      	movs	r1, #44	; 0x2c
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	334c      	adds	r3, #76	; 0x4c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	202c      	movs	r0, #44	; 0x2c
 80050ee:	fb00 f202 	mul.w	r2, r0, r2
 80050f2:	440a      	add	r2, r1
 80050f4:	3240      	adds	r2, #64	; 0x40
 80050f6:	8812      	ldrh	r2, [r2, #0]
 80050f8:	4413      	add	r3, r2
 80050fa:	3b01      	subs	r3, #1
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	202c      	movs	r0, #44	; 0x2c
 8005102:	fb00 f202 	mul.w	r2, r0, r2
 8005106:	440a      	add	r2, r1
 8005108:	3240      	adds	r2, #64	; 0x40
 800510a:	8812      	ldrh	r2, [r2, #0]
 800510c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80b5 	beq.w	8005288 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	212c      	movs	r1, #44	; 0x2c
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	4413      	add	r3, r2
 800512a:	3355      	adds	r3, #85	; 0x55
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	f083 0301 	eor.w	r3, r3, #1
 8005132:	b2d8      	uxtb	r0, r3
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	212c      	movs	r1, #44	; 0x2c
 800513a:	fb01 f303 	mul.w	r3, r1, r3
 800513e:	4413      	add	r3, r2
 8005140:	3355      	adds	r3, #85	; 0x55
 8005142:	4602      	mov	r2, r0
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e09f      	b.n	8005288 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	212c      	movs	r1, #44	; 0x2c
 800514e:	fb01 f303 	mul.w	r3, r1, r3
 8005152:	4413      	add	r3, r2
 8005154:	3361      	adds	r3, #97	; 0x61
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b03      	cmp	r3, #3
 800515a:	d109      	bne.n	8005170 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	212c      	movs	r1, #44	; 0x2c
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	4413      	add	r3, r2
 8005168:	3360      	adds	r3, #96	; 0x60
 800516a:	2202      	movs	r2, #2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	e08b      	b.n	8005288 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	212c      	movs	r1, #44	; 0x2c
 8005176:	fb01 f303 	mul.w	r3, r1, r3
 800517a:	4413      	add	r3, r2
 800517c:	3361      	adds	r3, #97	; 0x61
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d109      	bne.n	8005198 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	212c      	movs	r1, #44	; 0x2c
 800518a:	fb01 f303 	mul.w	r3, r1, r3
 800518e:	4413      	add	r3, r2
 8005190:	3360      	adds	r3, #96	; 0x60
 8005192:	2202      	movs	r2, #2
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e077      	b.n	8005288 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	212c      	movs	r1, #44	; 0x2c
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	4413      	add	r3, r2
 80051a4:	3361      	adds	r3, #97	; 0x61
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d109      	bne.n	80051c0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	212c      	movs	r1, #44	; 0x2c
 80051b2:	fb01 f303 	mul.w	r3, r1, r3
 80051b6:	4413      	add	r3, r2
 80051b8:	3360      	adds	r3, #96	; 0x60
 80051ba:	2205      	movs	r2, #5
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e063      	b.n	8005288 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	212c      	movs	r1, #44	; 0x2c
 80051c6:	fb01 f303 	mul.w	r3, r1, r3
 80051ca:	4413      	add	r3, r2
 80051cc:	3361      	adds	r3, #97	; 0x61
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b06      	cmp	r3, #6
 80051d2:	d009      	beq.n	80051e8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	212c      	movs	r1, #44	; 0x2c
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	4413      	add	r3, r2
 80051e0:	3361      	adds	r3, #97	; 0x61
 80051e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d14f      	bne.n	8005288 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	212c      	movs	r1, #44	; 0x2c
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	335c      	adds	r3, #92	; 0x5c
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	202c      	movs	r0, #44	; 0x2c
 8005200:	fb00 f303 	mul.w	r3, r0, r3
 8005204:	440b      	add	r3, r1
 8005206:	335c      	adds	r3, #92	; 0x5c
 8005208:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	212c      	movs	r1, #44	; 0x2c
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	4413      	add	r3, r2
 8005216:	335c      	adds	r3, #92	; 0x5c
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d912      	bls.n	8005244 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	212c      	movs	r1, #44	; 0x2c
 8005224:	fb01 f303 	mul.w	r3, r1, r3
 8005228:	4413      	add	r3, r2
 800522a:	335c      	adds	r3, #92	; 0x5c
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	212c      	movs	r1, #44	; 0x2c
 8005236:	fb01 f303 	mul.w	r3, r1, r3
 800523a:	4413      	add	r3, r2
 800523c:	3360      	adds	r3, #96	; 0x60
 800523e:	2204      	movs	r2, #4
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e021      	b.n	8005288 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	212c      	movs	r1, #44	; 0x2c
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	4413      	add	r3, r2
 8005250:	3360      	adds	r3, #96	; 0x60
 8005252:	2202      	movs	r2, #2
 8005254:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	4413      	add	r3, r2
 800525e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800526c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005274:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	4413      	add	r3, r2
 800527e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005282:	461a      	mov	r2, r3
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	4413      	add	r3, r2
 8005290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005294:	461a      	mov	r2, r3
 8005296:	2302      	movs	r3, #2
 8005298:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	b2d9      	uxtb	r1, r3
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	202c      	movs	r0, #44	; 0x2c
 80052a4:	fb00 f303 	mul.w	r3, r0, r3
 80052a8:	4413      	add	r3, r2
 80052aa:	3360      	adds	r3, #96	; 0x60
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f005 fb6f 	bl	800a994 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80052b6:	bf00      	nop
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b08a      	sub	sp, #40	; 0x28
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	0c5b      	lsrs	r3, r3, #17
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d004      	beq.n	8005304 <HCD_RXQLVL_IRQHandler+0x46>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b05      	cmp	r3, #5
 80052fe:	f000 80a9 	beq.w	8005454 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005302:	e0aa      	b.n	800545a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80a6 	beq.w	8005458 <HCD_RXQLVL_IRQHandler+0x19a>
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	212c      	movs	r1, #44	; 0x2c
 8005312:	fb01 f303 	mul.w	r3, r1, r3
 8005316:	4413      	add	r3, r2
 8005318:	3344      	adds	r3, #68	; 0x44
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 809b 	beq.w	8005458 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	212c      	movs	r1, #44	; 0x2c
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	4413      	add	r3, r2
 800532e:	3350      	adds	r3, #80	; 0x50
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	441a      	add	r2, r3
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	202c      	movs	r0, #44	; 0x2c
 800533c:	fb00 f303 	mul.w	r3, r0, r3
 8005340:	440b      	add	r3, r1
 8005342:	334c      	adds	r3, #76	; 0x4c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d87a      	bhi.n	8005440 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	212c      	movs	r1, #44	; 0x2c
 8005354:	fb01 f303 	mul.w	r3, r1, r3
 8005358:	4413      	add	r3, r2
 800535a:	3344      	adds	r3, #68	; 0x44
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	b292      	uxth	r2, r2
 8005362:	4619      	mov	r1, r3
 8005364:	f002 f9ba 	bl	80076dc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	212c      	movs	r1, #44	; 0x2c
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	4413      	add	r3, r2
 8005374:	3344      	adds	r3, #68	; 0x44
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	441a      	add	r2, r3
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	202c      	movs	r0, #44	; 0x2c
 8005382:	fb00 f303 	mul.w	r3, r0, r3
 8005386:	440b      	add	r3, r1
 8005388:	3344      	adds	r3, #68	; 0x44
 800538a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	212c      	movs	r1, #44	; 0x2c
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	3350      	adds	r3, #80	; 0x50
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	441a      	add	r2, r3
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	202c      	movs	r0, #44	; 0x2c
 80053a6:	fb00 f303 	mul.w	r3, r0, r3
 80053aa:	440b      	add	r3, r1
 80053ac:	3350      	adds	r3, #80	; 0x50
 80053ae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	0cdb      	lsrs	r3, r3, #19
 80053c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053c4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	3340      	adds	r3, #64	; 0x40
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4293      	cmp	r3, r2
 80053dc:	d13c      	bne.n	8005458 <HCD_RXQLVL_IRQHandler+0x19a>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d039      	beq.n	8005458 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053fa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005402:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	4413      	add	r3, r2
 800540c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005410:	461a      	mov	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	212c      	movs	r1, #44	; 0x2c
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	3354      	adds	r3, #84	; 0x54
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	f083 0301 	eor.w	r3, r3, #1
 800542a:	b2d8      	uxtb	r0, r3
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	212c      	movs	r1, #44	; 0x2c
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	4413      	add	r3, r2
 8005438:	3354      	adds	r3, #84	; 0x54
 800543a:	4602      	mov	r2, r0
 800543c:	701a      	strb	r2, [r3, #0]
      break;
 800543e:	e00b      	b.n	8005458 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	212c      	movs	r1, #44	; 0x2c
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	4413      	add	r3, r2
 800544c:	3360      	adds	r3, #96	; 0x60
 800544e:	2204      	movs	r2, #4
 8005450:	701a      	strb	r2, [r3, #0]
      break;
 8005452:	e001      	b.n	8005458 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005454:	bf00      	nop
 8005456:	e000      	b.n	800545a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005458:	bf00      	nop
  }
}
 800545a:	bf00      	nop
 800545c:	3728      	adds	r7, #40	; 0x28
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800548e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b02      	cmp	r3, #2
 8005498:	d10b      	bne.n	80054b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d102      	bne.n	80054aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f005 fa59 	bl	800a95c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f043 0302 	orr.w	r3, r3, #2
 80054b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d132      	bne.n	8005522 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f043 0308 	orr.w	r3, r3, #8
 80054c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d126      	bne.n	800551c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d113      	bne.n	80054fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80054dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054e0:	d106      	bne.n	80054f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2102      	movs	r1, #2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f002 fa65 	bl	80079b8 <USB_InitFSLSPClkSel>
 80054ee:	e011      	b.n	8005514 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2101      	movs	r1, #1
 80054f6:	4618      	mov	r0, r3
 80054f8:	f002 fa5e 	bl	80079b8 <USB_InitFSLSPClkSel>
 80054fc:	e00a      	b.n	8005514 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d106      	bne.n	8005514 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800550c:	461a      	mov	r2, r3
 800550e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005512:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f005 fa4b 	bl	800a9b0 <HAL_HCD_PortEnabled_Callback>
 800551a:	e002      	b.n	8005522 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f005 fa55 	bl	800a9cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b20      	cmp	r3, #32
 800552a:	d103      	bne.n	8005534 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f043 0320 	orr.w	r3, r3, #32
 8005532:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800553a:	461a      	mov	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6013      	str	r3, [r2, #0]
}
 8005540:	bf00      	nop
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e267      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d075      	beq.n	8005652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005566:	4b88      	ldr	r3, [pc, #544]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 030c 	and.w	r3, r3, #12
 800556e:	2b04      	cmp	r3, #4
 8005570:	d00c      	beq.n	800558c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005572:	4b85      	ldr	r3, [pc, #532]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800557a:	2b08      	cmp	r3, #8
 800557c:	d112      	bne.n	80055a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800557e:	4b82      	ldr	r3, [pc, #520]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800558a:	d10b      	bne.n	80055a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800558c:	4b7e      	ldr	r3, [pc, #504]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d05b      	beq.n	8005650 <HAL_RCC_OscConfig+0x108>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d157      	bne.n	8005650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e242      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ac:	d106      	bne.n	80055bc <HAL_RCC_OscConfig+0x74>
 80055ae:	4b76      	ldr	r3, [pc, #472]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a75      	ldr	r2, [pc, #468]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80055b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e01d      	b.n	80055f8 <HAL_RCC_OscConfig+0xb0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055c4:	d10c      	bne.n	80055e0 <HAL_RCC_OscConfig+0x98>
 80055c6:	4b70      	ldr	r3, [pc, #448]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a6f      	ldr	r2, [pc, #444]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80055cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	4b6d      	ldr	r3, [pc, #436]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a6c      	ldr	r2, [pc, #432]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80055d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	e00b      	b.n	80055f8 <HAL_RCC_OscConfig+0xb0>
 80055e0:	4b69      	ldr	r3, [pc, #420]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a68      	ldr	r2, [pc, #416]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80055e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	4b66      	ldr	r3, [pc, #408]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a65      	ldr	r2, [pc, #404]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80055f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d013      	beq.n	8005628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005600:	f7fd ffa4 	bl	800354c <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005608:	f7fd ffa0 	bl	800354c <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b64      	cmp	r3, #100	; 0x64
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e207      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561a:	4b5b      	ldr	r3, [pc, #364]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0xc0>
 8005626:	e014      	b.n	8005652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fd ff90 	bl	800354c <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005630:	f7fd ff8c 	bl	800354c <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b64      	cmp	r3, #100	; 0x64
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e1f3      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005642:	4b51      	ldr	r3, [pc, #324]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0xe8>
 800564e:	e000      	b.n	8005652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d063      	beq.n	8005726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800565e:	4b4a      	ldr	r3, [pc, #296]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800566a:	4b47      	ldr	r3, [pc, #284]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005672:	2b08      	cmp	r3, #8
 8005674:	d11c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005676:	4b44      	ldr	r3, [pc, #272]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d116      	bne.n	80056b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005682:	4b41      	ldr	r3, [pc, #260]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_RCC_OscConfig+0x152>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d001      	beq.n	800569a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e1c7      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569a:	4b3b      	ldr	r3, [pc, #236]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4937      	ldr	r1, [pc, #220]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ae:	e03a      	b.n	8005726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d020      	beq.n	80056fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b8:	4b34      	ldr	r3, [pc, #208]	; (800578c <HAL_RCC_OscConfig+0x244>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fd ff45 	bl	800354c <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056c6:	f7fd ff41 	bl	800354c <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1a8      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d8:	4b2b      	ldr	r3, [pc, #172]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e4:	4b28      	ldr	r3, [pc, #160]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4925      	ldr	r1, [pc, #148]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	600b      	str	r3, [r1, #0]
 80056f8:	e015      	b.n	8005726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056fa:	4b24      	ldr	r3, [pc, #144]	; (800578c <HAL_RCC_OscConfig+0x244>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fd ff24 	bl	800354c <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005708:	f7fd ff20 	bl	800354c <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e187      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800571a:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d036      	beq.n	80057a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d016      	beq.n	8005768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800573a:	4b15      	ldr	r3, [pc, #84]	; (8005790 <HAL_RCC_OscConfig+0x248>)
 800573c:	2201      	movs	r2, #1
 800573e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005740:	f7fd ff04 	bl	800354c <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005748:	f7fd ff00 	bl	800354c <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e167      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <HAL_RCC_OscConfig+0x240>)
 800575c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f0      	beq.n	8005748 <HAL_RCC_OscConfig+0x200>
 8005766:	e01b      	b.n	80057a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005768:	4b09      	ldr	r3, [pc, #36]	; (8005790 <HAL_RCC_OscConfig+0x248>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576e:	f7fd feed 	bl	800354c <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005774:	e00e      	b.n	8005794 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005776:	f7fd fee9 	bl	800354c <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d907      	bls.n	8005794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e150      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
 8005788:	40023800 	.word	0x40023800
 800578c:	42470000 	.word	0x42470000
 8005790:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005794:	4b88      	ldr	r3, [pc, #544]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 8005796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ea      	bne.n	8005776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8097 	beq.w	80058dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ae:	2300      	movs	r3, #0
 80057b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b2:	4b81      	ldr	r3, [pc, #516]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10f      	bne.n	80057de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057be:	2300      	movs	r3, #0
 80057c0:	60bb      	str	r3, [r7, #8]
 80057c2:	4b7d      	ldr	r3, [pc, #500]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	4a7c      	ldr	r2, [pc, #496]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 80057c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057cc:	6413      	str	r3, [r2, #64]	; 0x40
 80057ce:	4b7a      	ldr	r3, [pc, #488]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d6:	60bb      	str	r3, [r7, #8]
 80057d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057de:	4b77      	ldr	r3, [pc, #476]	; (80059bc <HAL_RCC_OscConfig+0x474>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d118      	bne.n	800581c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ea:	4b74      	ldr	r3, [pc, #464]	; (80059bc <HAL_RCC_OscConfig+0x474>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a73      	ldr	r2, [pc, #460]	; (80059bc <HAL_RCC_OscConfig+0x474>)
 80057f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f6:	f7fd fea9 	bl	800354c <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fe:	f7fd fea5 	bl	800354c <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e10c      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005810:	4b6a      	ldr	r3, [pc, #424]	; (80059bc <HAL_RCC_OscConfig+0x474>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d106      	bne.n	8005832 <HAL_RCC_OscConfig+0x2ea>
 8005824:	4b64      	ldr	r3, [pc, #400]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	4a63      	ldr	r2, [pc, #396]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	6713      	str	r3, [r2, #112]	; 0x70
 8005830:	e01c      	b.n	800586c <HAL_RCC_OscConfig+0x324>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b05      	cmp	r3, #5
 8005838:	d10c      	bne.n	8005854 <HAL_RCC_OscConfig+0x30c>
 800583a:	4b5f      	ldr	r3, [pc, #380]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	4a5e      	ldr	r2, [pc, #376]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 8005840:	f043 0304 	orr.w	r3, r3, #4
 8005844:	6713      	str	r3, [r2, #112]	; 0x70
 8005846:	4b5c      	ldr	r3, [pc, #368]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	4a5b      	ldr	r2, [pc, #364]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	6713      	str	r3, [r2, #112]	; 0x70
 8005852:	e00b      	b.n	800586c <HAL_RCC_OscConfig+0x324>
 8005854:	4b58      	ldr	r3, [pc, #352]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 8005856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005858:	4a57      	ldr	r2, [pc, #348]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	6713      	str	r3, [r2, #112]	; 0x70
 8005860:	4b55      	ldr	r3, [pc, #340]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005864:	4a54      	ldr	r2, [pc, #336]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 8005866:	f023 0304 	bic.w	r3, r3, #4
 800586a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d015      	beq.n	80058a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005874:	f7fd fe6a 	bl	800354c <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587a:	e00a      	b.n	8005892 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800587c:	f7fd fe66 	bl	800354c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f241 3288 	movw	r2, #5000	; 0x1388
 800588a:	4293      	cmp	r3, r2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e0cb      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005892:	4b49      	ldr	r3, [pc, #292]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0ee      	beq.n	800587c <HAL_RCC_OscConfig+0x334>
 800589e:	e014      	b.n	80058ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a0:	f7fd fe54 	bl	800354c <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a6:	e00a      	b.n	80058be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a8:	f7fd fe50 	bl	800354c <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e0b5      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058be:	4b3e      	ldr	r3, [pc, #248]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 80058c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ee      	bne.n	80058a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d105      	bne.n	80058dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d0:	4b39      	ldr	r3, [pc, #228]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	4a38      	ldr	r2, [pc, #224]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 80058d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80a1 	beq.w	8005a28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058e6:	4b34      	ldr	r3, [pc, #208]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d05c      	beq.n	80059ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d141      	bne.n	800597e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fa:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <HAL_RCC_OscConfig+0x478>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005900:	f7fd fe24 	bl	800354c <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005908:	f7fd fe20 	bl	800354c <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e087      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591a:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69da      	ldr	r2, [r3, #28]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	019b      	lsls	r3, r3, #6
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	3b01      	subs	r3, #1
 8005940:	041b      	lsls	r3, r3, #16
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	061b      	lsls	r3, r3, #24
 800594a:	491b      	ldr	r1, [pc, #108]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 800594c:	4313      	orrs	r3, r2
 800594e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005950:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <HAL_RCC_OscConfig+0x478>)
 8005952:	2201      	movs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005956:	f7fd fdf9 	bl	800354c <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595e:	f7fd fdf5 	bl	800354c <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e05c      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005970:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x416>
 800597c:	e054      	b.n	8005a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597e:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <HAL_RCC_OscConfig+0x478>)
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005984:	f7fd fde2 	bl	800354c <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800598c:	f7fd fdde 	bl	800354c <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e045      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <HAL_RCC_OscConfig+0x470>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x444>
 80059aa:	e03d      	b.n	8005a28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d107      	bne.n	80059c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e038      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
 80059b8:	40023800 	.word	0x40023800
 80059bc:	40007000 	.word	0x40007000
 80059c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059c4:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <HAL_RCC_OscConfig+0x4ec>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d028      	beq.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059dc:	429a      	cmp	r2, r3
 80059de:	d121      	bne.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d11a      	bne.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059f4:	4013      	ands	r3, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d111      	bne.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d107      	bne.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d001      	beq.n	8005a28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40023800 	.word	0x40023800

08005a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0cc      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b68      	ldr	r3, [pc, #416]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d90c      	bls.n	8005a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b65      	ldr	r3, [pc, #404]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a62:	4b63      	ldr	r3, [pc, #396]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0b8      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d020      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a8c:	4b59      	ldr	r3, [pc, #356]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4a58      	ldr	r2, [pc, #352]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aa4:	4b53      	ldr	r3, [pc, #332]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab0:	4b50      	ldr	r3, [pc, #320]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	494d      	ldr	r1, [pc, #308]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d044      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	4b47      	ldr	r3, [pc, #284]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d119      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e07f      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d003      	beq.n	8005af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af6:	4b3f      	ldr	r3, [pc, #252]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e06f      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b06:	4b3b      	ldr	r3, [pc, #236]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e067      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b16:	4b37      	ldr	r3, [pc, #220]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f023 0203 	bic.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4934      	ldr	r1, [pc, #208]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b28:	f7fd fd10 	bl	800354c <HAL_GetTick>
 8005b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	e00a      	b.n	8005b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b30:	f7fd fd0c 	bl	800354c <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e04f      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	4b2b      	ldr	r3, [pc, #172]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 020c 	and.w	r2, r3, #12
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1eb      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b58:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d20c      	bcs.n	8005b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b22      	ldr	r3, [pc, #136]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6e:	4b20      	ldr	r3, [pc, #128]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e032      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b8c:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4916      	ldr	r1, [pc, #88]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d009      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005baa:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	490e      	ldr	r1, [pc, #56]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bbe:	f000 f821 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	490a      	ldr	r1, [pc, #40]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005bd0:	5ccb      	ldrb	r3, [r1, r3]
 8005bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd6:	4a09      	ldr	r2, [pc, #36]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fd fc70 	bl	80034c4 <HAL_InitTick>

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40023c00 	.word	0x40023c00
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	0800e488 	.word	0x0800e488
 8005bfc:	20000018 	.word	0x20000018
 8005c00:	2000001c 	.word	0x2000001c

08005c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c08:	b094      	sub	sp, #80	; 0x50
 8005c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c10:	2300      	movs	r3, #0
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c14:	2300      	movs	r3, #0
 8005c16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c1c:	4b79      	ldr	r3, [pc, #484]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 030c 	and.w	r3, r3, #12
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d00d      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0x40>
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	f200 80e1 	bhi.w	8005df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0x34>
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d003      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c36:	e0db      	b.n	8005df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c38:	4b73      	ldr	r3, [pc, #460]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c3c:	e0db      	b.n	8005df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c3e:	4b73      	ldr	r3, [pc, #460]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x208>)
 8005c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c42:	e0d8      	b.n	8005df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c44:	4b6f      	ldr	r3, [pc, #444]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c4e:	4b6d      	ldr	r3, [pc, #436]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d063      	beq.n	8005d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c5a:	4b6a      	ldr	r3, [pc, #424]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	099b      	lsrs	r3, r3, #6
 8005c60:	2200      	movs	r2, #0
 8005c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c6e:	2300      	movs	r3, #0
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
 8005c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c76:	4622      	mov	r2, r4
 8005c78:	462b      	mov	r3, r5
 8005c7a:	f04f 0000 	mov.w	r0, #0
 8005c7e:	f04f 0100 	mov.w	r1, #0
 8005c82:	0159      	lsls	r1, r3, #5
 8005c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c88:	0150      	lsls	r0, r2, #5
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4621      	mov	r1, r4
 8005c90:	1a51      	subs	r1, r2, r1
 8005c92:	6139      	str	r1, [r7, #16]
 8005c94:	4629      	mov	r1, r5
 8005c96:	eb63 0301 	sbc.w	r3, r3, r1
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ca8:	4659      	mov	r1, fp
 8005caa:	018b      	lsls	r3, r1, #6
 8005cac:	4651      	mov	r1, sl
 8005cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	018a      	lsls	r2, r1, #6
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8005cbc:	4659      	mov	r1, fp
 8005cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cd6:	4690      	mov	r8, r2
 8005cd8:	4699      	mov	r9, r3
 8005cda:	4623      	mov	r3, r4
 8005cdc:	eb18 0303 	adds.w	r3, r8, r3
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	462b      	mov	r3, r5
 8005ce4:	eb49 0303 	adc.w	r3, r9, r3
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	024b      	lsls	r3, r1, #9
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d00:	4621      	mov	r1, r4
 8005d02:	024a      	lsls	r2, r1, #9
 8005d04:	4610      	mov	r0, r2
 8005d06:	4619      	mov	r1, r3
 8005d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d14:	f7fa ff48 	bl	8000ba8 <__aeabi_uldivmod>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d20:	e058      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d22:	4b38      	ldr	r3, [pc, #224]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	099b      	lsrs	r3, r3, #6
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d32:	623b      	str	r3, [r7, #32]
 8005d34:	2300      	movs	r3, #0
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
 8005d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	464b      	mov	r3, r9
 8005d40:	f04f 0000 	mov.w	r0, #0
 8005d44:	f04f 0100 	mov.w	r1, #0
 8005d48:	0159      	lsls	r1, r3, #5
 8005d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d4e:	0150      	lsls	r0, r2, #5
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4641      	mov	r1, r8
 8005d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d74:	ebb2 040a 	subs.w	r4, r2, sl
 8005d78:	eb63 050b 	sbc.w	r5, r3, fp
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	00eb      	lsls	r3, r5, #3
 8005d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d8a:	00e2      	lsls	r2, r4, #3
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	461d      	mov	r5, r3
 8005d90:	4643      	mov	r3, r8
 8005d92:	18e3      	adds	r3, r4, r3
 8005d94:	603b      	str	r3, [r7, #0]
 8005d96:	464b      	mov	r3, r9
 8005d98:	eb45 0303 	adc.w	r3, r5, r3
 8005d9c:	607b      	str	r3, [r7, #4]
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005daa:	4629      	mov	r1, r5
 8005dac:	028b      	lsls	r3, r1, #10
 8005dae:	4621      	mov	r1, r4
 8005db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005db4:	4621      	mov	r1, r4
 8005db6:	028a      	lsls	r2, r1, #10
 8005db8:	4610      	mov	r0, r2
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	61fa      	str	r2, [r7, #28]
 8005dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dc8:	f7fa feee 	bl	8000ba8 <__aeabi_uldivmod>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	0c1b      	lsrs	r3, r3, #16
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	3301      	adds	r3, #1
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dee:	e002      	b.n	8005df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8005df2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3750      	adds	r7, #80	; 0x50
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800
 8005e08:	00f42400 	.word	0x00f42400
 8005e0c:	007a1200 	.word	0x007a1200

08005e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e14:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e16:	681b      	ldr	r3, [r3, #0]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000018 	.word	0x20000018

08005e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e2c:	f7ff fff0 	bl	8005e10 <HAL_RCC_GetHCLKFreq>
 8005e30:	4602      	mov	r2, r0
 8005e32:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	0a9b      	lsrs	r3, r3, #10
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	4903      	ldr	r1, [pc, #12]	; (8005e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e3e:	5ccb      	ldrb	r3, [r1, r3]
 8005e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	0800e498 	.word	0x0800e498

08005e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e54:	f7ff ffdc 	bl	8005e10 <HAL_RCC_GetHCLKFreq>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	0b5b      	lsrs	r3, r3, #13
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	4903      	ldr	r1, [pc, #12]	; (8005e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e66:	5ccb      	ldrb	r3, [r1, r3]
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40023800 	.word	0x40023800
 8005e74:	0800e498 	.word	0x0800e498

08005e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e07b      	b.n	8005f82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d108      	bne.n	8005ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9a:	d009      	beq.n	8005eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	61da      	str	r2, [r3, #28]
 8005ea2:	e005      	b.n	8005eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fd f89a 	bl	8003004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f34:	ea42 0103 	orr.w	r1, r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	f003 0104 	and.w	r1, r3, #4
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	f003 0210 	and.w	r2, r3, #16
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b088      	sub	sp, #32
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_SPI_Transmit+0x22>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e126      	b.n	80061fa <HAL_SPI_Transmit+0x270>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb4:	f7fd faca 	bl	800354c <HAL_GetTick>
 8005fb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d002      	beq.n	8005fd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fca:	2302      	movs	r3, #2
 8005fcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fce:	e10b      	b.n	80061e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_Transmit+0x52>
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fe0:	e102      	b.n	80061e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006028:	d10f      	bne.n	800604a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006048:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d007      	beq.n	8006068 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006066:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006070:	d14b      	bne.n	800610a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_SPI_Transmit+0xf6>
 800607a:	8afb      	ldrh	r3, [r7, #22]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d13e      	bne.n	80060fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	881a      	ldrh	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	1c9a      	adds	r2, r3, #2
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060a4:	e02b      	b.n	80060fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d112      	bne.n	80060da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	881a      	ldrh	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	1c9a      	adds	r2, r3, #2
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80060d8:	e011      	b.n	80060fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060da:	f7fd fa37 	bl	800354c <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d803      	bhi.n	80060f2 <HAL_SPI_Transmit+0x168>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d102      	bne.n	80060f8 <HAL_SPI_Transmit+0x16e>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060fc:	e074      	b.n	80061e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1ce      	bne.n	80060a6 <HAL_SPI_Transmit+0x11c>
 8006108:	e04c      	b.n	80061a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_SPI_Transmit+0x18e>
 8006112:	8afb      	ldrh	r3, [r7, #22]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d140      	bne.n	800619a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	7812      	ldrb	r2, [r2, #0]
 8006124:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800613e:	e02c      	b.n	800619a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b02      	cmp	r3, #2
 800614c:	d113      	bne.n	8006176 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	7812      	ldrb	r2, [r2, #0]
 800615a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	86da      	strh	r2, [r3, #54]	; 0x36
 8006174:	e011      	b.n	800619a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006176:	f7fd f9e9 	bl	800354c <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d803      	bhi.n	800618e <HAL_SPI_Transmit+0x204>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618c:	d102      	bne.n	8006194 <HAL_SPI_Transmit+0x20a>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d102      	bne.n	800619a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006198:	e026      	b.n	80061e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1cd      	bne.n	8006140 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fa55 	bl	8006658 <SPI_EndRxTxTransaction>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061c2:	2300      	movs	r3, #0
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e000      	b.n	80061e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80061e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3720      	adds	r7, #32
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b08c      	sub	sp, #48	; 0x30
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006210:	2301      	movs	r3, #1
 8006212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x26>
 8006224:	2302      	movs	r3, #2
 8006226:	e18a      	b.n	800653e <HAL_SPI_TransmitReceive+0x33c>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006230:	f7fd f98c 	bl	800354c <HAL_GetTick>
 8006234:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800623c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006246:	887b      	ldrh	r3, [r7, #2]
 8006248:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800624a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800624e:	2b01      	cmp	r3, #1
 8006250:	d00f      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x70>
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006258:	d107      	bne.n	800626a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <HAL_SPI_TransmitReceive+0x68>
 8006262:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006266:	2b04      	cmp	r3, #4
 8006268:	d003      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800626a:	2302      	movs	r3, #2
 800626c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006270:	e15b      	b.n	800652a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x82>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x82>
 800627e:	887b      	ldrh	r3, [r7, #2]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d103      	bne.n	800628c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800628a:	e14e      	b.n	800652a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b04      	cmp	r3, #4
 8006296:	d003      	beq.n	80062a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2205      	movs	r2, #5
 800629c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	887a      	ldrh	r2, [r7, #2]
 80062b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	887a      	ldrh	r2, [r7, #2]
 80062b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	887a      	ldrh	r2, [r7, #2]
 80062c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	887a      	ldrh	r2, [r7, #2]
 80062c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d007      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fc:	d178      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_SPI_TransmitReceive+0x10a>
 8006306:	8b7b      	ldrh	r3, [r7, #26]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d166      	bne.n	80063da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	881a      	ldrh	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	1c9a      	adds	r2, r3, #2
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006330:	e053      	b.n	80063da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b02      	cmp	r3, #2
 800633e:	d11b      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x176>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x176>
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d113      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	881a      	ldrh	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	1c9a      	adds	r2, r3, #2
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b01      	cmp	r3, #1
 8006384:	d119      	bne.n	80063ba <HAL_SPI_TransmitReceive+0x1b8>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d014      	beq.n	80063ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	b292      	uxth	r2, r2
 800639c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063b6:	2301      	movs	r3, #1
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063ba:	f7fd f8c7 	bl	800354c <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d807      	bhi.n	80063da <HAL_SPI_TransmitReceive+0x1d8>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d003      	beq.n	80063da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063d8:	e0a7      	b.n	800652a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1a6      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x130>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1a1      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x130>
 80063ee:	e07c      	b.n	80064ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <HAL_SPI_TransmitReceive+0x1fc>
 80063f8:	8b7b      	ldrh	r3, [r7, #26]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d16b      	bne.n	80064d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	7812      	ldrb	r2, [r2, #0]
 800640a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006424:	e057      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b02      	cmp	r3, #2
 8006432:	d11c      	bne.n	800646e <HAL_SPI_TransmitReceive+0x26c>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d017      	beq.n	800646e <HAL_SPI_TransmitReceive+0x26c>
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	2b01      	cmp	r3, #1
 8006442:	d114      	bne.n	800646e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	7812      	ldrb	r2, [r2, #0]
 8006450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b01      	cmp	r3, #1
 800647a:	d119      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x2ae>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d014      	beq.n	80064b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064ac:	2301      	movs	r3, #1
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064b0:	f7fd f84c 	bl	800354c <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064bc:	429a      	cmp	r2, r3
 80064be:	d803      	bhi.n	80064c8 <HAL_SPI_TransmitReceive+0x2c6>
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c6:	d102      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x2cc>
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064d4:	e029      	b.n	800652a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1a2      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x224>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d19d      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f8b2 	bl	8006658 <SPI_EndRxTxTransaction>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006506:	e010      	b.n	800652a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006510:	2300      	movs	r3, #0
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	e000      	b.n	800652a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006528:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800653a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800653e:	4618      	mov	r0, r3
 8006540:	3730      	adds	r7, #48	; 0x30
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006558:	f7fc fff8 	bl	800354c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	1a9b      	subs	r3, r3, r2
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4413      	add	r3, r2
 8006566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006568:	f7fc fff0 	bl	800354c <HAL_GetTick>
 800656c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800656e:	4b39      	ldr	r3, [pc, #228]	; (8006654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	015b      	lsls	r3, r3, #5
 8006574:	0d1b      	lsrs	r3, r3, #20
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	fb02 f303 	mul.w	r3, r2, r3
 800657c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800657e:	e054      	b.n	800662a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d050      	beq.n	800662a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006588:	f7fc ffe0 	bl	800354c <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	429a      	cmp	r2, r3
 8006596:	d902      	bls.n	800659e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d13d      	bne.n	800661a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b6:	d111      	bne.n	80065dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c0:	d004      	beq.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ca:	d107      	bne.n	80065dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e4:	d10f      	bne.n	8006606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e017      	b.n	800664a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	3b01      	subs	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4013      	ands	r3, r2
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	429a      	cmp	r2, r3
 8006638:	bf0c      	ite	eq
 800663a:	2301      	moveq	r3, #1
 800663c:	2300      	movne	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	429a      	cmp	r2, r3
 8006646:	d19b      	bne.n	8006580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000018 	.word	0x20000018

08006658 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006664:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <SPI_EndRxTxTransaction+0x7c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1b      	ldr	r2, [pc, #108]	; (80066d8 <SPI_EndRxTxTransaction+0x80>)
 800666a:	fba2 2303 	umull	r2, r3, r2, r3
 800666e:	0d5b      	lsrs	r3, r3, #21
 8006670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006674:	fb02 f303 	mul.w	r3, r2, r3
 8006678:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006682:	d112      	bne.n	80066aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2200      	movs	r2, #0
 800668c:	2180      	movs	r1, #128	; 0x80
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff ff5a 	bl	8006548 <SPI_WaitFlagStateUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d016      	beq.n	80066c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	f043 0220 	orr.w	r2, r3, #32
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e00f      	b.n	80066ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c0:	2b80      	cmp	r3, #128	; 0x80
 80066c2:	d0f2      	beq.n	80066aa <SPI_EndRxTxTransaction+0x52>
 80066c4:	e000      	b.n	80066c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80066c6:	bf00      	nop
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000018 	.word	0x20000018
 80066d8:	165e9f81 	.word	0x165e9f81

080066dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e041      	b.n	8006772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d106      	bne.n	8006708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7fc fd1c 	bl	8003140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3304      	adds	r3, #4
 8006718:	4619      	mov	r1, r3
 800671a:	4610      	mov	r0, r2
 800671c:	f000 f8f4 	bl	8006908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_TIM_ConfigClockSource+0x1c>
 8006792:	2302      	movs	r3, #2
 8006794:	e0b4      	b.n	8006900 <HAL_TIM_ConfigClockSource+0x186>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2202      	movs	r2, #2
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ce:	d03e      	beq.n	800684e <HAL_TIM_ConfigClockSource+0xd4>
 80067d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d4:	f200 8087 	bhi.w	80068e6 <HAL_TIM_ConfigClockSource+0x16c>
 80067d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067dc:	f000 8086 	beq.w	80068ec <HAL_TIM_ConfigClockSource+0x172>
 80067e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e4:	d87f      	bhi.n	80068e6 <HAL_TIM_ConfigClockSource+0x16c>
 80067e6:	2b70      	cmp	r3, #112	; 0x70
 80067e8:	d01a      	beq.n	8006820 <HAL_TIM_ConfigClockSource+0xa6>
 80067ea:	2b70      	cmp	r3, #112	; 0x70
 80067ec:	d87b      	bhi.n	80068e6 <HAL_TIM_ConfigClockSource+0x16c>
 80067ee:	2b60      	cmp	r3, #96	; 0x60
 80067f0:	d050      	beq.n	8006894 <HAL_TIM_ConfigClockSource+0x11a>
 80067f2:	2b60      	cmp	r3, #96	; 0x60
 80067f4:	d877      	bhi.n	80068e6 <HAL_TIM_ConfigClockSource+0x16c>
 80067f6:	2b50      	cmp	r3, #80	; 0x50
 80067f8:	d03c      	beq.n	8006874 <HAL_TIM_ConfigClockSource+0xfa>
 80067fa:	2b50      	cmp	r3, #80	; 0x50
 80067fc:	d873      	bhi.n	80068e6 <HAL_TIM_ConfigClockSource+0x16c>
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d058      	beq.n	80068b4 <HAL_TIM_ConfigClockSource+0x13a>
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d86f      	bhi.n	80068e6 <HAL_TIM_ConfigClockSource+0x16c>
 8006806:	2b30      	cmp	r3, #48	; 0x30
 8006808:	d064      	beq.n	80068d4 <HAL_TIM_ConfigClockSource+0x15a>
 800680a:	2b30      	cmp	r3, #48	; 0x30
 800680c:	d86b      	bhi.n	80068e6 <HAL_TIM_ConfigClockSource+0x16c>
 800680e:	2b20      	cmp	r3, #32
 8006810:	d060      	beq.n	80068d4 <HAL_TIM_ConfigClockSource+0x15a>
 8006812:	2b20      	cmp	r3, #32
 8006814:	d867      	bhi.n	80068e6 <HAL_TIM_ConfigClockSource+0x16c>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d05c      	beq.n	80068d4 <HAL_TIM_ConfigClockSource+0x15a>
 800681a:	2b10      	cmp	r3, #16
 800681c:	d05a      	beq.n	80068d4 <HAL_TIM_ConfigClockSource+0x15a>
 800681e:	e062      	b.n	80068e6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	6899      	ldr	r1, [r3, #8]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f000 f984 	bl	8006b3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006842:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	609a      	str	r2, [r3, #8]
      break;
 800684c:	e04f      	b.n	80068ee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6899      	ldr	r1, [r3, #8]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f000 f96d 	bl	8006b3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006870:	609a      	str	r2, [r3, #8]
      break;
 8006872:	e03c      	b.n	80068ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	6859      	ldr	r1, [r3, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	461a      	mov	r2, r3
 8006882:	f000 f8e1 	bl	8006a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2150      	movs	r1, #80	; 0x50
 800688c:	4618      	mov	r0, r3
 800688e:	f000 f93a 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 8006892:	e02c      	b.n	80068ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6859      	ldr	r1, [r3, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	461a      	mov	r2, r3
 80068a2:	f000 f900 	bl	8006aa6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2160      	movs	r1, #96	; 0x60
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 f92a 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 80068b2:	e01c      	b.n	80068ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	6859      	ldr	r1, [r3, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	461a      	mov	r2, r3
 80068c2:	f000 f8c1 	bl	8006a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2140      	movs	r1, #64	; 0x40
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 f91a 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 80068d2:	e00c      	b.n	80068ee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f000 f911 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 80068e4:	e003      	b.n	80068ee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]
      break;
 80068ea:	e000      	b.n	80068ee <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a40      	ldr	r2, [pc, #256]	; (8006a1c <TIM_Base_SetConfig+0x114>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <TIM_Base_SetConfig+0x40>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006926:	d00f      	beq.n	8006948 <TIM_Base_SetConfig+0x40>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a3d      	ldr	r2, [pc, #244]	; (8006a20 <TIM_Base_SetConfig+0x118>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00b      	beq.n	8006948 <TIM_Base_SetConfig+0x40>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a3c      	ldr	r2, [pc, #240]	; (8006a24 <TIM_Base_SetConfig+0x11c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d007      	beq.n	8006948 <TIM_Base_SetConfig+0x40>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a3b      	ldr	r2, [pc, #236]	; (8006a28 <TIM_Base_SetConfig+0x120>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_Base_SetConfig+0x40>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a3a      	ldr	r2, [pc, #232]	; (8006a2c <TIM_Base_SetConfig+0x124>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d108      	bne.n	800695a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2f      	ldr	r2, [pc, #188]	; (8006a1c <TIM_Base_SetConfig+0x114>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d02b      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006968:	d027      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a2c      	ldr	r2, [pc, #176]	; (8006a20 <TIM_Base_SetConfig+0x118>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d023      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a2b      	ldr	r2, [pc, #172]	; (8006a24 <TIM_Base_SetConfig+0x11c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d01f      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a2a      	ldr	r2, [pc, #168]	; (8006a28 <TIM_Base_SetConfig+0x120>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01b      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a29      	ldr	r2, [pc, #164]	; (8006a2c <TIM_Base_SetConfig+0x124>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d017      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a28      	ldr	r2, [pc, #160]	; (8006a30 <TIM_Base_SetConfig+0x128>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d013      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a27      	ldr	r2, [pc, #156]	; (8006a34 <TIM_Base_SetConfig+0x12c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00f      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a26      	ldr	r2, [pc, #152]	; (8006a38 <TIM_Base_SetConfig+0x130>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00b      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a25      	ldr	r2, [pc, #148]	; (8006a3c <TIM_Base_SetConfig+0x134>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d007      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a24      	ldr	r2, [pc, #144]	; (8006a40 <TIM_Base_SetConfig+0x138>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a23      	ldr	r2, [pc, #140]	; (8006a44 <TIM_Base_SetConfig+0x13c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d108      	bne.n	80069cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <TIM_Base_SetConfig+0x114>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_Base_SetConfig+0xf8>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a0c      	ldr	r2, [pc, #48]	; (8006a2c <TIM_Base_SetConfig+0x124>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d103      	bne.n	8006a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	615a      	str	r2, [r3, #20]
}
 8006a0e:	bf00      	nop
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	40010000 	.word	0x40010000
 8006a20:	40000400 	.word	0x40000400
 8006a24:	40000800 	.word	0x40000800
 8006a28:	40000c00 	.word	0x40000c00
 8006a2c:	40010400 	.word	0x40010400
 8006a30:	40014000 	.word	0x40014000
 8006a34:	40014400 	.word	0x40014400
 8006a38:	40014800 	.word	0x40014800
 8006a3c:	40001800 	.word	0x40001800
 8006a40:	40001c00 	.word	0x40001c00
 8006a44:	40002000 	.word	0x40002000

08006a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f023 0201 	bic.w	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f023 030a 	bic.w	r3, r3, #10
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b087      	sub	sp, #28
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f023 0210 	bic.w	r2, r3, #16
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	031b      	lsls	r3, r3, #12
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f043 0307 	orr.w	r3, r3, #7
 8006b28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	609a      	str	r2, [r3, #8]
}
 8006b30:	bf00      	nop
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	021a      	lsls	r2, r3, #8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e05a      	b.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a21      	ldr	r2, [pc, #132]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d022      	beq.n	8006c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be0:	d01d      	beq.n	8006c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1d      	ldr	r2, [pc, #116]	; (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d018      	beq.n	8006c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a1b      	ldr	r2, [pc, #108]	; (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a1a      	ldr	r2, [pc, #104]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00e      	beq.n	8006c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d009      	beq.n	8006c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d004      	beq.n	8006c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d10c      	bne.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	40010000 	.word	0x40010000
 8006c5c:	40000400 	.word	0x40000400
 8006c60:	40000800 	.word	0x40000800
 8006c64:	40000c00 	.word	0x40000c00
 8006c68:	40010400 	.word	0x40010400
 8006c6c:	40014000 	.word	0x40014000
 8006c70:	40001800 	.word	0x40001800

08006c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e03f      	b.n	8006d06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fc fa72 	bl	8003184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2224      	movs	r2, #36	; 0x24
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f929 	bl	8006f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695a      	ldr	r2, [r3, #20]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b08a      	sub	sp, #40	; 0x28
 8006d12:	af02      	add	r7, sp, #8
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	603b      	str	r3, [r7, #0]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	d17c      	bne.n	8006e28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <HAL_UART_Transmit+0x2c>
 8006d34:	88fb      	ldrh	r3, [r7, #6]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e075      	b.n	8006e2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_UART_Transmit+0x3e>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e06e      	b.n	8006e2a <HAL_UART_Transmit+0x11c>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2221      	movs	r2, #33	; 0x21
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d62:	f7fc fbf3 	bl	800354c <HAL_GetTick>
 8006d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	88fa      	ldrh	r2, [r7, #6]
 8006d72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7c:	d108      	bne.n	8006d90 <HAL_UART_Transmit+0x82>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d104      	bne.n	8006d90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	e003      	b.n	8006d98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006da0:	e02a      	b.n	8006df8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2200      	movs	r2, #0
 8006daa:	2180      	movs	r1, #128	; 0x80
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 f840 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e036      	b.n	8006e2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10b      	bne.n	8006dda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	61bb      	str	r3, [r7, #24]
 8006dd8:	e007      	b.n	8006dea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	781a      	ldrb	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	3301      	adds	r3, #1
 8006de8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1cf      	bne.n	8006da2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2140      	movs	r1, #64	; 0x40
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f810 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e006      	b.n	8006e2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	e000      	b.n	8006e2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006e28:	2302      	movs	r3, #2
  }
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3720      	adds	r7, #32
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b090      	sub	sp, #64	; 0x40
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e42:	e050      	b.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d04c      	beq.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d007      	beq.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e52:	f7fc fb7b 	bl	800354c <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d241      	bcs.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	330c      	adds	r3, #12
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e82:	637a      	str	r2, [r7, #52]	; 0x34
 8006e84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e5      	bne.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3314      	adds	r3, #20
 8006e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3314      	adds	r3, #20
 8006eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eb6:	623a      	str	r2, [r7, #32]
 8006eb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	69f9      	ldr	r1, [r7, #28]
 8006ebc:	6a3a      	ldr	r2, [r7, #32]
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e00f      	b.n	8006f06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	bf0c      	ite	eq
 8006ef6:	2301      	moveq	r3, #1
 8006ef8:	2300      	movne	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d09f      	beq.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3740      	adds	r7, #64	; 0x40
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f14:	b0c0      	sub	sp, #256	; 0x100
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2c:	68d9      	ldr	r1, [r3, #12]
 8006f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	ea40 0301 	orr.w	r3, r0, r1
 8006f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f68:	f021 010c 	bic.w	r1, r1, #12
 8006f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f76:	430b      	orrs	r3, r1
 8006f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8a:	6999      	ldr	r1, [r3, #24]
 8006f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	ea40 0301 	orr.w	r3, r0, r1
 8006f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4b8f      	ldr	r3, [pc, #572]	; (80071dc <UART_SetConfig+0x2cc>)
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d005      	beq.n	8006fb0 <UART_SetConfig+0xa0>
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4b8d      	ldr	r3, [pc, #564]	; (80071e0 <UART_SetConfig+0x2d0>)
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d104      	bne.n	8006fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fb0:	f7fe ff4e 	bl	8005e50 <HAL_RCC_GetPCLK2Freq>
 8006fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006fb8:	e003      	b.n	8006fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fba:	f7fe ff35 	bl	8005e28 <HAL_RCC_GetPCLK1Freq>
 8006fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fcc:	f040 810c 	bne.w	80071e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	462b      	mov	r3, r5
 8006fe6:	1891      	adds	r1, r2, r2
 8006fe8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fea:	415b      	adcs	r3, r3
 8006fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	eb12 0801 	adds.w	r8, r2, r1
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	eb43 0901 	adc.w	r9, r3, r1
 8006ffe:	f04f 0200 	mov.w	r2, #0
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800700a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800700e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007012:	4690      	mov	r8, r2
 8007014:	4699      	mov	r9, r3
 8007016:	4623      	mov	r3, r4
 8007018:	eb18 0303 	adds.w	r3, r8, r3
 800701c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007020:	462b      	mov	r3, r5
 8007022:	eb49 0303 	adc.w	r3, r9, r3
 8007026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800702a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007036:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800703a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800703e:	460b      	mov	r3, r1
 8007040:	18db      	adds	r3, r3, r3
 8007042:	653b      	str	r3, [r7, #80]	; 0x50
 8007044:	4613      	mov	r3, r2
 8007046:	eb42 0303 	adc.w	r3, r2, r3
 800704a:	657b      	str	r3, [r7, #84]	; 0x54
 800704c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007054:	f7f9 fda8 	bl	8000ba8 <__aeabi_uldivmod>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4b61      	ldr	r3, [pc, #388]	; (80071e4 <UART_SetConfig+0x2d4>)
 800705e:	fba3 2302 	umull	r2, r3, r3, r2
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	011c      	lsls	r4, r3, #4
 8007066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800706a:	2200      	movs	r2, #0
 800706c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007070:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007078:	4642      	mov	r2, r8
 800707a:	464b      	mov	r3, r9
 800707c:	1891      	adds	r1, r2, r2
 800707e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007080:	415b      	adcs	r3, r3
 8007082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007088:	4641      	mov	r1, r8
 800708a:	eb12 0a01 	adds.w	sl, r2, r1
 800708e:	4649      	mov	r1, r9
 8007090:	eb43 0b01 	adc.w	fp, r3, r1
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	f04f 0300 	mov.w	r3, #0
 800709c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070a8:	4692      	mov	sl, r2
 80070aa:	469b      	mov	fp, r3
 80070ac:	4643      	mov	r3, r8
 80070ae:	eb1a 0303 	adds.w	r3, sl, r3
 80070b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070b6:	464b      	mov	r3, r9
 80070b8:	eb4b 0303 	adc.w	r3, fp, r3
 80070bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80070d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80070d4:	460b      	mov	r3, r1
 80070d6:	18db      	adds	r3, r3, r3
 80070d8:	643b      	str	r3, [r7, #64]	; 0x40
 80070da:	4613      	mov	r3, r2
 80070dc:	eb42 0303 	adc.w	r3, r2, r3
 80070e0:	647b      	str	r3, [r7, #68]	; 0x44
 80070e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80070ea:	f7f9 fd5d 	bl	8000ba8 <__aeabi_uldivmod>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	4b3b      	ldr	r3, [pc, #236]	; (80071e4 <UART_SetConfig+0x2d4>)
 80070f6:	fba3 2301 	umull	r2, r3, r3, r1
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	2264      	movs	r2, #100	; 0x64
 80070fe:	fb02 f303 	mul.w	r3, r2, r3
 8007102:	1acb      	subs	r3, r1, r3
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800710a:	4b36      	ldr	r3, [pc, #216]	; (80071e4 <UART_SetConfig+0x2d4>)
 800710c:	fba3 2302 	umull	r2, r3, r3, r2
 8007110:	095b      	lsrs	r3, r3, #5
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007118:	441c      	add	r4, r3
 800711a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800711e:	2200      	movs	r2, #0
 8007120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007124:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800712c:	4642      	mov	r2, r8
 800712e:	464b      	mov	r3, r9
 8007130:	1891      	adds	r1, r2, r2
 8007132:	63b9      	str	r1, [r7, #56]	; 0x38
 8007134:	415b      	adcs	r3, r3
 8007136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800713c:	4641      	mov	r1, r8
 800713e:	1851      	adds	r1, r2, r1
 8007140:	6339      	str	r1, [r7, #48]	; 0x30
 8007142:	4649      	mov	r1, r9
 8007144:	414b      	adcs	r3, r1
 8007146:	637b      	str	r3, [r7, #52]	; 0x34
 8007148:	f04f 0200 	mov.w	r2, #0
 800714c:	f04f 0300 	mov.w	r3, #0
 8007150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007154:	4659      	mov	r1, fp
 8007156:	00cb      	lsls	r3, r1, #3
 8007158:	4651      	mov	r1, sl
 800715a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800715e:	4651      	mov	r1, sl
 8007160:	00ca      	lsls	r2, r1, #3
 8007162:	4610      	mov	r0, r2
 8007164:	4619      	mov	r1, r3
 8007166:	4603      	mov	r3, r0
 8007168:	4642      	mov	r2, r8
 800716a:	189b      	adds	r3, r3, r2
 800716c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007170:	464b      	mov	r3, r9
 8007172:	460a      	mov	r2, r1
 8007174:	eb42 0303 	adc.w	r3, r2, r3
 8007178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007188:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800718c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007190:	460b      	mov	r3, r1
 8007192:	18db      	adds	r3, r3, r3
 8007194:	62bb      	str	r3, [r7, #40]	; 0x28
 8007196:	4613      	mov	r3, r2
 8007198:	eb42 0303 	adc.w	r3, r2, r3
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80071a6:	f7f9 fcff 	bl	8000ba8 <__aeabi_uldivmod>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <UART_SetConfig+0x2d4>)
 80071b0:	fba3 1302 	umull	r1, r3, r3, r2
 80071b4:	095b      	lsrs	r3, r3, #5
 80071b6:	2164      	movs	r1, #100	; 0x64
 80071b8:	fb01 f303 	mul.w	r3, r1, r3
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	3332      	adds	r3, #50	; 0x32
 80071c2:	4a08      	ldr	r2, [pc, #32]	; (80071e4 <UART_SetConfig+0x2d4>)
 80071c4:	fba2 2303 	umull	r2, r3, r2, r3
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	f003 0207 	and.w	r2, r3, #7
 80071ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4422      	add	r2, r4
 80071d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071d8:	e105      	b.n	80073e6 <UART_SetConfig+0x4d6>
 80071da:	bf00      	nop
 80071dc:	40011000 	.word	0x40011000
 80071e0:	40011400 	.word	0x40011400
 80071e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071fa:	4642      	mov	r2, r8
 80071fc:	464b      	mov	r3, r9
 80071fe:	1891      	adds	r1, r2, r2
 8007200:	6239      	str	r1, [r7, #32]
 8007202:	415b      	adcs	r3, r3
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
 8007206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800720a:	4641      	mov	r1, r8
 800720c:	1854      	adds	r4, r2, r1
 800720e:	4649      	mov	r1, r9
 8007210:	eb43 0501 	adc.w	r5, r3, r1
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	00eb      	lsls	r3, r5, #3
 800721e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007222:	00e2      	lsls	r2, r4, #3
 8007224:	4614      	mov	r4, r2
 8007226:	461d      	mov	r5, r3
 8007228:	4643      	mov	r3, r8
 800722a:	18e3      	adds	r3, r4, r3
 800722c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007230:	464b      	mov	r3, r9
 8007232:	eb45 0303 	adc.w	r3, r5, r3
 8007236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800723a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007246:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800724a:	f04f 0200 	mov.w	r2, #0
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007256:	4629      	mov	r1, r5
 8007258:	008b      	lsls	r3, r1, #2
 800725a:	4621      	mov	r1, r4
 800725c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007260:	4621      	mov	r1, r4
 8007262:	008a      	lsls	r2, r1, #2
 8007264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007268:	f7f9 fc9e 	bl	8000ba8 <__aeabi_uldivmod>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4b60      	ldr	r3, [pc, #384]	; (80073f4 <UART_SetConfig+0x4e4>)
 8007272:	fba3 2302 	umull	r2, r3, r3, r2
 8007276:	095b      	lsrs	r3, r3, #5
 8007278:	011c      	lsls	r4, r3, #4
 800727a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800727e:	2200      	movs	r2, #0
 8007280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007284:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800728c:	4642      	mov	r2, r8
 800728e:	464b      	mov	r3, r9
 8007290:	1891      	adds	r1, r2, r2
 8007292:	61b9      	str	r1, [r7, #24]
 8007294:	415b      	adcs	r3, r3
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800729c:	4641      	mov	r1, r8
 800729e:	1851      	adds	r1, r2, r1
 80072a0:	6139      	str	r1, [r7, #16]
 80072a2:	4649      	mov	r1, r9
 80072a4:	414b      	adcs	r3, r1
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072b4:	4659      	mov	r1, fp
 80072b6:	00cb      	lsls	r3, r1, #3
 80072b8:	4651      	mov	r1, sl
 80072ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072be:	4651      	mov	r1, sl
 80072c0:	00ca      	lsls	r2, r1, #3
 80072c2:	4610      	mov	r0, r2
 80072c4:	4619      	mov	r1, r3
 80072c6:	4603      	mov	r3, r0
 80072c8:	4642      	mov	r2, r8
 80072ca:	189b      	adds	r3, r3, r2
 80072cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072d0:	464b      	mov	r3, r9
 80072d2:	460a      	mov	r2, r1
 80072d4:	eb42 0303 	adc.w	r3, r2, r3
 80072d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80072e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072f4:	4649      	mov	r1, r9
 80072f6:	008b      	lsls	r3, r1, #2
 80072f8:	4641      	mov	r1, r8
 80072fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072fe:	4641      	mov	r1, r8
 8007300:	008a      	lsls	r2, r1, #2
 8007302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007306:	f7f9 fc4f 	bl	8000ba8 <__aeabi_uldivmod>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4b39      	ldr	r3, [pc, #228]	; (80073f4 <UART_SetConfig+0x4e4>)
 8007310:	fba3 1302 	umull	r1, r3, r3, r2
 8007314:	095b      	lsrs	r3, r3, #5
 8007316:	2164      	movs	r1, #100	; 0x64
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	3332      	adds	r3, #50	; 0x32
 8007322:	4a34      	ldr	r2, [pc, #208]	; (80073f4 <UART_SetConfig+0x4e4>)
 8007324:	fba2 2303 	umull	r2, r3, r2, r3
 8007328:	095b      	lsrs	r3, r3, #5
 800732a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800732e:	441c      	add	r4, r3
 8007330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007334:	2200      	movs	r2, #0
 8007336:	673b      	str	r3, [r7, #112]	; 0x70
 8007338:	677a      	str	r2, [r7, #116]	; 0x74
 800733a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800733e:	4642      	mov	r2, r8
 8007340:	464b      	mov	r3, r9
 8007342:	1891      	adds	r1, r2, r2
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	415b      	adcs	r3, r3
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800734e:	4641      	mov	r1, r8
 8007350:	1851      	adds	r1, r2, r1
 8007352:	6039      	str	r1, [r7, #0]
 8007354:	4649      	mov	r1, r9
 8007356:	414b      	adcs	r3, r1
 8007358:	607b      	str	r3, [r7, #4]
 800735a:	f04f 0200 	mov.w	r2, #0
 800735e:	f04f 0300 	mov.w	r3, #0
 8007362:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007366:	4659      	mov	r1, fp
 8007368:	00cb      	lsls	r3, r1, #3
 800736a:	4651      	mov	r1, sl
 800736c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007370:	4651      	mov	r1, sl
 8007372:	00ca      	lsls	r2, r1, #3
 8007374:	4610      	mov	r0, r2
 8007376:	4619      	mov	r1, r3
 8007378:	4603      	mov	r3, r0
 800737a:	4642      	mov	r2, r8
 800737c:	189b      	adds	r3, r3, r2
 800737e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007380:	464b      	mov	r3, r9
 8007382:	460a      	mov	r2, r1
 8007384:	eb42 0303 	adc.w	r3, r2, r3
 8007388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800738a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	663b      	str	r3, [r7, #96]	; 0x60
 8007394:	667a      	str	r2, [r7, #100]	; 0x64
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80073a2:	4649      	mov	r1, r9
 80073a4:	008b      	lsls	r3, r1, #2
 80073a6:	4641      	mov	r1, r8
 80073a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073ac:	4641      	mov	r1, r8
 80073ae:	008a      	lsls	r2, r1, #2
 80073b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80073b4:	f7f9 fbf8 	bl	8000ba8 <__aeabi_uldivmod>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <UART_SetConfig+0x4e4>)
 80073be:	fba3 1302 	umull	r1, r3, r3, r2
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	2164      	movs	r1, #100	; 0x64
 80073c6:	fb01 f303 	mul.w	r3, r1, r3
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	3332      	adds	r3, #50	; 0x32
 80073d0:	4a08      	ldr	r2, [pc, #32]	; (80073f4 <UART_SetConfig+0x4e4>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	f003 020f 	and.w	r2, r3, #15
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4422      	add	r2, r4
 80073e4:	609a      	str	r2, [r3, #8]
}
 80073e6:	bf00      	nop
 80073e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80073ec:	46bd      	mov	sp, r7
 80073ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f2:	bf00      	nop
 80073f4:	51eb851f 	.word	0x51eb851f

080073f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073f8:	b084      	sub	sp, #16
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	f107 001c 	add.w	r0, r7, #28
 8007406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	2b01      	cmp	r3, #1
 800740e:	d122      	bne.n	8007456 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743a:	2b01      	cmp	r3, #1
 800743c:	d105      	bne.n	800744a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9c0 	bl	80077d0 <USB_CoreReset>
 8007450:	4603      	mov	r3, r0
 8007452:	73fb      	strb	r3, [r7, #15]
 8007454:	e01a      	b.n	800748c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f9b4 	bl	80077d0 <USB_CoreReset>
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800746c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
 800747e:	e005      	b.n	800748c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	2b01      	cmp	r3, #1
 8007490:	d10b      	bne.n	80074aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f043 0206 	orr.w	r2, r3, #6
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f043 0220 	orr.w	r2, r3, #32
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074b6:	b004      	add	sp, #16
 80074b8:	4770      	bx	lr

080074ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f043 0201 	orr.w	r2, r3, #1
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f023 0201 	bic.w	r2, r3, #1
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d115      	bne.n	800754c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800752c:	2001      	movs	r0, #1
 800752e:	f7fc f819 	bl	8003564 <HAL_Delay>
      ms++;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f93a 	bl	80077b2 <USB_GetMode>
 800753e:	4603      	mov	r3, r0
 8007540:	2b01      	cmp	r3, #1
 8007542:	d01e      	beq.n	8007582 <USB_SetCurrentMode+0x84>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b31      	cmp	r3, #49	; 0x31
 8007548:	d9f0      	bls.n	800752c <USB_SetCurrentMode+0x2e>
 800754a:	e01a      	b.n	8007582 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d115      	bne.n	800757e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800755e:	2001      	movs	r0, #1
 8007560:	f7fc f800 	bl	8003564 <HAL_Delay>
      ms++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f921 	bl	80077b2 <USB_GetMode>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <USB_SetCurrentMode+0x84>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b31      	cmp	r3, #49	; 0x31
 800757a:	d9f0      	bls.n	800755e <USB_SetCurrentMode+0x60>
 800757c:	e001      	b.n	8007582 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e005      	b.n	800758e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b32      	cmp	r3, #50	; 0x32
 8007586:	d101      	bne.n	800758c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3301      	adds	r3, #1
 80075aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4a13      	ldr	r2, [pc, #76]	; (80075fc <USB_FlushTxFifo+0x64>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d901      	bls.n	80075b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e01b      	b.n	80075f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	daf2      	bge.n	80075a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	019b      	lsls	r3, r3, #6
 80075c8:	f043 0220 	orr.w	r2, r3, #32
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4a08      	ldr	r2, [pc, #32]	; (80075fc <USB_FlushTxFifo+0x64>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d901      	bls.n	80075e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e006      	b.n	80075f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f003 0320 	and.w	r3, r3, #32
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d0f0      	beq.n	80075d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	00030d40 	.word	0x00030d40

08007600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3301      	adds	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4a11      	ldr	r2, [pc, #68]	; (800765c <USB_FlushRxFifo+0x5c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d901      	bls.n	800761e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e018      	b.n	8007650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	daf2      	bge.n	800760c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2210      	movs	r2, #16
 800762e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3301      	adds	r3, #1
 8007634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4a08      	ldr	r2, [pc, #32]	; (800765c <USB_FlushRxFifo+0x5c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d901      	bls.n	8007642 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e006      	b.n	8007650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	2b10      	cmp	r3, #16
 800764c:	d0f0      	beq.n	8007630 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	00030d40 	.word	0x00030d40

08007660 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007660:	b480      	push	{r7}
 8007662:	b089      	sub	sp, #36	; 0x24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4611      	mov	r1, r2
 800766c:	461a      	mov	r2, r3
 800766e:	460b      	mov	r3, r1
 8007670:	71fb      	strb	r3, [r7, #7]
 8007672:	4613      	mov	r3, r2
 8007674:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800767e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007682:	2b00      	cmp	r3, #0
 8007684:	d123      	bne.n	80076ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007686:	88bb      	ldrh	r3, [r7, #4]
 8007688:	3303      	adds	r3, #3
 800768a:	089b      	lsrs	r3, r3, #2
 800768c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800768e:	2300      	movs	r3, #0
 8007690:	61bb      	str	r3, [r7, #24]
 8007692:	e018      	b.n	80076c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	031a      	lsls	r2, r3, #12
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	4413      	add	r3, r2
 800769c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a0:	461a      	mov	r2, r3
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	3301      	adds	r3, #1
 80076ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	3301      	adds	r3, #1
 80076b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	3301      	adds	r3, #1
 80076b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	3301      	adds	r3, #1
 80076be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	3301      	adds	r3, #1
 80076c4:	61bb      	str	r3, [r7, #24]
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d3e2      	bcc.n	8007694 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3724      	adds	r7, #36	; 0x24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076dc:	b480      	push	{r7}
 80076de:	b08b      	sub	sp, #44	; 0x2c
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	4613      	mov	r3, r2
 80076e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	089b      	lsrs	r3, r3, #2
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	f003 0303 	and.w	r3, r3, #3
 8007700:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007702:	2300      	movs	r3, #0
 8007704:	623b      	str	r3, [r7, #32]
 8007706:	e014      	b.n	8007732 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	601a      	str	r2, [r3, #0]
    pDest++;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	3301      	adds	r3, #1
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	3301      	adds	r3, #1
 800771e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	3301      	adds	r3, #1
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	3301      	adds	r3, #1
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	3301      	adds	r3, #1
 8007730:	623b      	str	r3, [r7, #32]
 8007732:	6a3a      	ldr	r2, [r7, #32]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	429a      	cmp	r2, r3
 8007738:	d3e6      	bcc.n	8007708 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800773a:	8bfb      	ldrh	r3, [r7, #30]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01e      	beq.n	800777e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800774a:	461a      	mov	r2, r3
 800774c:	f107 0310 	add.w	r3, r7, #16
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
 8007760:	b2da      	uxtb	r2, r3
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	701a      	strb	r2, [r3, #0]
      i++;
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	3301      	adds	r3, #1
 800776a:	623b      	str	r3, [r7, #32]
      pDest++;
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	3301      	adds	r3, #1
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007772:	8bfb      	ldrh	r3, [r7, #30]
 8007774:	3b01      	subs	r3, #1
 8007776:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007778:	8bfb      	ldrh	r3, [r7, #30]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1ea      	bne.n	8007754 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007780:	4618      	mov	r0, r3
 8007782:	372c      	adds	r7, #44	; 0x2c
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4013      	ands	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077a4:	68fb      	ldr	r3, [r7, #12]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	f003 0301 	and.w	r3, r3, #1
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
	...

080077d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3301      	adds	r3, #1
 80077e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	4a13      	ldr	r2, [pc, #76]	; (8007834 <USB_CoreReset+0x64>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d901      	bls.n	80077ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e01b      	b.n	8007826 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	daf2      	bge.n	80077dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f043 0201 	orr.w	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4a09      	ldr	r2, [pc, #36]	; (8007834 <USB_CoreReset+0x64>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d901      	bls.n	8007818 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e006      	b.n	8007826 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b01      	cmp	r3, #1
 8007822:	d0f0      	beq.n	8007806 <USB_CoreReset+0x36>

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	00030d40 	.word	0x00030d40

08007838 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007838:	b084      	sub	sp, #16
 800783a:	b580      	push	{r7, lr}
 800783c:	b086      	sub	sp, #24
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007858:	461a      	mov	r2, r3
 800785a:	2300      	movs	r3, #0
 800785c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007862:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788a:	2b00      	cmp	r3, #0
 800788c:	d018      	beq.n	80078c0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d10a      	bne.n	80078aa <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078a2:	f043 0304 	orr.w	r3, r3, #4
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	e014      	b.n	80078d4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078b8:	f023 0304 	bic.w	r3, r3, #4
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	e009      	b.n	80078d4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078ce:	f023 0304 	bic.w	r3, r3, #4
 80078d2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078d4:	2110      	movs	r1, #16
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff fe5e 	bl	8007598 <USB_FlushTxFifo>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff fe8a 	bl	8007600 <USB_FlushRxFifo>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80078f6:	2300      	movs	r3, #0
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	e015      	b.n	8007928 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4413      	add	r3, r2
 8007904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007908:	461a      	mov	r2, r3
 800790a:	f04f 33ff 	mov.w	r3, #4294967295
 800790e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800791c:	461a      	mov	r2, r3
 800791e:	2300      	movs	r3, #0
 8007920:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	3301      	adds	r3, #1
 8007926:	613b      	str	r3, [r7, #16]
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	429a      	cmp	r2, r3
 800792e:	d3e5      	bcc.n	80078fc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f04f 32ff 	mov.w	r2, #4294967295
 800793c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007950:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <USB_HostInit+0x16c>)
 8007956:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a13      	ldr	r2, [pc, #76]	; (80079a8 <USB_HostInit+0x170>)
 800795c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007960:	e009      	b.n	8007976 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2280      	movs	r2, #128	; 0x80
 8007966:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a10      	ldr	r2, [pc, #64]	; (80079ac <USB_HostInit+0x174>)
 800796c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a0f      	ldr	r2, [pc, #60]	; (80079b0 <USB_HostInit+0x178>)
 8007972:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	2b00      	cmp	r3, #0
 800797a:	d105      	bne.n	8007988 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	f043 0210 	orr.w	r2, r3, #16
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	699a      	ldr	r2, [r3, #24]
 800798c:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <USB_HostInit+0x17c>)
 800798e:	4313      	orrs	r3, r2
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007994:	7dfb      	ldrb	r3, [r7, #23]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079a0:	b004      	add	sp, #16
 80079a2:	4770      	bx	lr
 80079a4:	01000200 	.word	0x01000200
 80079a8:	00e00300 	.word	0x00e00300
 80079ac:	00600080 	.word	0x00600080
 80079b0:	004000e0 	.word	0x004000e0
 80079b4:	a3200008 	.word	0xa3200008

080079b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079f0:	4313      	orrs	r3, r2
 80079f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d107      	bne.n	8007a0a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a00:	461a      	mov	r2, r3
 8007a02:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a06:	6053      	str	r3, [r2, #4]
 8007a08:	e009      	b.n	8007a1e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d106      	bne.n	8007a1e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a16:	461a      	mov	r2, r3
 8007a18:	f241 7370 	movw	r3, #6000	; 0x1770
 8007a1c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007a4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a5a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007a5c:	2064      	movs	r0, #100	; 0x64
 8007a5e:	f7fb fd81 	bl	8003564 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007a70:	200a      	movs	r0, #10
 8007a72:	f7fb fd77 	bl	8003564 <HAL_Delay>

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007aa4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d109      	bne.n	8007ac4 <USB_DriveVbus+0x44>
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d106      	bne.n	8007ac4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ac2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ace:	d109      	bne.n	8007ae4 <USB_DriveVbus+0x64>
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d106      	bne.n	8007ae4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ae2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b085      	sub	sp, #20
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	0c5b      	lsrs	r3, r3, #17
 8007b10:	f003 0303 	and.w	r3, r3, #3
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	b29b      	uxth	r3, r3
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	461a      	mov	r2, r3
 8007b52:	4603      	mov	r3, r0
 8007b54:	70fb      	strb	r3, [r7, #3]
 8007b56:	460b      	mov	r3, r1
 8007b58:	70bb      	strb	r3, [r7, #2]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b72:	461a      	mov	r2, r3
 8007b74:	f04f 33ff 	mov.w	r3, #4294967295
 8007b78:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007b7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d87e      	bhi.n	8007c80 <USB_HC_Init+0x13c>
 8007b82:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <USB_HC_Init+0x44>)
 8007b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b88:	08007b99 	.word	0x08007b99
 8007b8c:	08007c43 	.word	0x08007c43
 8007b90:	08007b99 	.word	0x08007b99
 8007b94:	08007c05 	.word	0x08007c05
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	f240 439d 	movw	r3, #1181	; 0x49d
 8007baa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007bac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da10      	bge.n	8007bd6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	78fa      	ldrb	r2, [r7, #3]
 8007bc4:	0151      	lsls	r1, r2, #5
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	440a      	add	r2, r1
 8007bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bd2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007bd4:	e057      	b.n	8007c86 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d051      	beq.n	8007c86 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c00:	60d3      	str	r3, [r2, #12]
      break;
 8007c02:	e040      	b.n	8007c86 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c10:	461a      	mov	r2, r3
 8007c12:	f240 639d 	movw	r3, #1693	; 0x69d
 8007c16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	da34      	bge.n	8007c8a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c3e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007c40:	e023      	b.n	8007c8a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c42:	78fb      	ldrb	r3, [r7, #3]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f240 2325 	movw	r3, #549	; 0x225
 8007c54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	da17      	bge.n	8007c8e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c78:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007c7c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007c7e:	e006      	b.n	8007c8e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	77fb      	strb	r3, [r7, #31]
      break;
 8007c84:	e004      	b.n	8007c90 <USB_HC_Init+0x14c>
      break;
 8007c86:	bf00      	nop
 8007c88:	e002      	b.n	8007c90 <USB_HC_Init+0x14c>
      break;
 8007c8a:	bf00      	nop
 8007c8c:	e000      	b.n	8007c90 <USB_HC_Init+0x14c>
      break;
 8007c8e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	78fa      	ldrb	r2, [r7, #3]
 8007ca0:	0151      	lsls	r1, r2, #5
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	440a      	add	r2, r1
 8007ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007caa:	f043 0302 	orr.w	r3, r3, #2
 8007cae:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	f003 030f 	and.w	r3, r3, #15
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc4:	6939      	ldr	r1, [r7, #16]
 8007cc6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007cda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	da03      	bge.n	8007cea <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce6:	61bb      	str	r3, [r7, #24]
 8007ce8:	e001      	b.n	8007cee <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff feff 	bl	8007af2 <USB_GetHostSpeed>
 8007cf4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d106      	bne.n	8007d0c <USB_HC_Init+0x1c8>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d003      	beq.n	8007d0c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	e001      	b.n	8007d10 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d10:	787b      	ldrb	r3, [r7, #1]
 8007d12:	059b      	lsls	r3, r3, #22
 8007d14:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d18:	78bb      	ldrb	r3, [r7, #2]
 8007d1a:	02db      	lsls	r3, r3, #11
 8007d1c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d20:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d26:	049b      	lsls	r3, r3, #18
 8007d28:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d2c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d2e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007d30:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d34:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	0159      	lsls	r1, r3, #5
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	440b      	add	r3, r1
 8007d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d46:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d4c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d003      	beq.n	8007d5e <USB_HC_Init+0x21a>
 8007d56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d10f      	bne.n	8007d7e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	78fa      	ldrb	r2, [r7, #3]
 8007d6e:	0151      	lsls	r1, r2, #5
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	440a      	add	r2, r1
 8007d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d7c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3720      	adds	r7, #32
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08c      	sub	sp, #48	; 0x30
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007da4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d02d      	beq.n	8007e0e <USB_HC_StartXfer+0x86>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	791b      	ldrb	r3, [r3, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d129      	bne.n	8007e0e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d117      	bne.n	8007df0 <USB_HC_StartXfer+0x68>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	79db      	ldrb	r3, [r3, #7]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <USB_HC_StartXfer+0x48>
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	79db      	ldrb	r3, [r3, #7]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d10f      	bne.n	8007df0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	6a3a      	ldr	r2, [r7, #32]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dee:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10b      	bne.n	8007e0e <USB_HC_StartXfer+0x86>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	795b      	ldrb	r3, [r3, #5]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d107      	bne.n	8007e0e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	785b      	ldrb	r3, [r3, #1]
 8007e02:	4619      	mov	r1, r3
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 fa0f 	bl	8008228 <USB_DoPing>
      return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e0f8      	b.n	8008000 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d018      	beq.n	8007e48 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	8912      	ldrh	r2, [r2, #8]
 8007e1e:	4413      	add	r3, r2
 8007e20:	3b01      	subs	r3, #1
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	8912      	ldrh	r2, [r2, #8]
 8007e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e2a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007e2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007e2e:	8b7b      	ldrh	r3, [r7, #26]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d90b      	bls.n	8007e4c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007e34:	8b7b      	ldrh	r3, [r7, #26]
 8007e36:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	8912      	ldrh	r2, [r2, #8]
 8007e3e:	fb03 f202 	mul.w	r2, r3, r2
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	611a      	str	r2, [r3, #16]
 8007e46:	e001      	b.n	8007e4c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	78db      	ldrb	r3, [r3, #3]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	8912      	ldrh	r2, [r2, #8]
 8007e5a:	fb03 f202 	mul.w	r2, r3, r2
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	611a      	str	r2, [r3, #16]
 8007e62:	e003      	b.n	8007e6c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	695a      	ldr	r2, [r3, #20]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e76:	04d9      	lsls	r1, r3, #19
 8007e78:	4b63      	ldr	r3, [pc, #396]	; (8008008 <USB_HC_StartXfer+0x280>)
 8007e7a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e7c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	7a9b      	ldrb	r3, [r3, #10]
 8007e82:	075b      	lsls	r3, r3, #29
 8007e84:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e88:	69f9      	ldr	r1, [r7, #28]
 8007e8a:	0148      	lsls	r0, r1, #5
 8007e8c:	6a39      	ldr	r1, [r7, #32]
 8007e8e:	4401      	add	r1, r0
 8007e90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e94:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e96:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	68d9      	ldr	r1, [r3, #12]
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eae:	460a      	mov	r2, r1
 8007eb0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bf0c      	ite	eq
 8007ec2:	2301      	moveq	r3, #1
 8007ec4:	2300      	movne	r3, #0
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	0151      	lsls	r1, r2, #5
 8007edc:	6a3a      	ldr	r2, [r7, #32]
 8007ede:	440a      	add	r2, r1
 8007ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ee4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ee8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	7e7b      	ldrb	r3, [r7, #25]
 8007efa:	075b      	lsls	r3, r3, #29
 8007efc:	69f9      	ldr	r1, [r7, #28]
 8007efe:	0148      	lsls	r0, r1, #5
 8007f00:	6a39      	ldr	r1, [r7, #32]
 8007f02:	4401      	add	r1, r0
 8007f04:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f22:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	78db      	ldrb	r3, [r3, #3]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	e003      	b.n	8007f3e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f3c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f44:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f52:	461a      	mov	r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e04e      	b.n	8008000 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	78db      	ldrb	r3, [r3, #3]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d149      	bne.n	8007ffe <USB_HC_StartXfer+0x276>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d045      	beq.n	8007ffe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	79db      	ldrb	r3, [r3, #7]
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d830      	bhi.n	8007fdc <USB_HC_StartXfer+0x254>
 8007f7a:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <USB_HC_StartXfer+0x1f8>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007f91 	.word	0x08007f91
 8007f84:	08007fb5 	.word	0x08007fb5
 8007f88:	08007f91 	.word	0x08007f91
 8007f8c:	08007fb5 	.word	0x08007fb5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	3303      	adds	r3, #3
 8007f96:	089b      	lsrs	r3, r3, #2
 8007f98:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007f9a:	8afa      	ldrh	r2, [r7, #22]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d91c      	bls.n	8007fe0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f043 0220 	orr.w	r2, r3, #32
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007fb2:	e015      	b.n	8007fe0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	3303      	adds	r3, #3
 8007fba:	089b      	lsrs	r3, r3, #2
 8007fbc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007fbe:	8afa      	ldrh	r2, [r7, #22]
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d90a      	bls.n	8007fe4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007fda:	e003      	b.n	8007fe4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007fdc:	bf00      	nop
 8007fde:	e002      	b.n	8007fe6 <USB_HC_StartXfer+0x25e>
        break;
 8007fe0:	bf00      	nop
 8007fe2:	e000      	b.n	8007fe6 <USB_HC_StartXfer+0x25e>
        break;
 8007fe4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	68d9      	ldr	r1, [r3, #12]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	785a      	ldrb	r2, [r3, #1]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	9000      	str	r0, [sp, #0]
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f7ff fb31 	bl	8007660 <USB_WritePacket>
  }

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3728      	adds	r7, #40	; 0x28
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	1ff80000 	.word	0x1ff80000

0800800c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	b29b      	uxth	r3, r3
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800802e:	b480      	push	{r7}
 8008030:	b089      	sub	sp, #36	; 0x24
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4413      	add	r3, r2
 800804e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	0c9b      	lsrs	r3, r3, #18
 8008056:	f003 0303 	and.w	r3, r3, #3
 800805a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	4413      	add	r3, r2
 8008064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	0fdb      	lsrs	r3, r3, #31
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b20      	cmp	r3, #32
 800807c:	d104      	bne.n	8008088 <USB_HC_Halt+0x5a>
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	e0c8      	b.n	800821a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <USB_HC_Halt+0x66>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d163      	bne.n	800815c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	4413      	add	r3, r2
 800809c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	0151      	lsls	r1, r2, #5
 80080a6:	69fa      	ldr	r2, [r7, #28]
 80080a8:	440a      	add	r2, r1
 80080aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f003 0320 	and.w	r3, r3, #32
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f040 80ab 	bne.w	8008218 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d133      	bne.n	8008136 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	0151      	lsls	r1, r2, #5
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	440a      	add	r2, r1
 80080e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	0151      	lsls	r1, r2, #5
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	440a      	add	r2, r1
 8008104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800810c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800811a:	d81d      	bhi.n	8008158 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800812e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008132:	d0ec      	beq.n	800810e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008134:	e070      	b.n	8008218 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	4413      	add	r3, r2
 800813e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	0151      	lsls	r1, r2, #5
 8008148:	69fa      	ldr	r2, [r7, #28]
 800814a:	440a      	add	r2, r1
 800814c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008154:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008156:	e05f      	b.n	8008218 <USB_HC_Halt+0x1ea>
            break;
 8008158:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800815a:	e05d      	b.n	8008218 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	4413      	add	r3, r2
 8008164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	0151      	lsls	r1, r2, #5
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	440a      	add	r2, r1
 8008172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008176:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800817a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d133      	bne.n	80081f4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	4413      	add	r3, r2
 8008194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	0151      	lsls	r1, r2, #5
 800819e:	69fa      	ldr	r2, [r7, #28]
 80081a0:	440a      	add	r2, r1
 80081a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	0151      	lsls	r1, r2, #5
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	440a      	add	r2, r1
 80081c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081ca:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3301      	adds	r3, #1
 80081d0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081d8:	d81d      	bhi.n	8008216 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081f0:	d0ec      	beq.n	80081cc <USB_HC_Halt+0x19e>
 80081f2:	e011      	b.n	8008218 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	0151      	lsls	r1, r2, #5
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	440a      	add	r2, r1
 800820a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800820e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	e000      	b.n	8008218 <USB_HC_Halt+0x1ea>
          break;
 8008216:	bf00      	nop
    }
  }

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3724      	adds	r7, #36	; 0x24
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
	...

08008228 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800823c:	2301      	movs	r3, #1
 800823e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	04da      	lsls	r2, r3, #19
 8008244:	4b15      	ldr	r3, [pc, #84]	; (800829c <USB_DoPing+0x74>)
 8008246:	4013      	ands	r3, r2
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	0151      	lsls	r1, r2, #5
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	440a      	add	r2, r1
 8008250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008258:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	015a      	lsls	r2, r3, #5
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	4413      	add	r3, r2
 8008262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008270:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008278:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	4413      	add	r3, r2
 8008282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008286:	461a      	mov	r2, r3
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	371c      	adds	r7, #28
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	1ff80000 	.word	0x1ff80000

080082a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff f911 	bl	80074dc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80082ba:	2110      	movs	r1, #16
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff f96b 	bl	8007598 <USB_FlushTxFifo>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff f997 	bl	8007600 <USB_FlushRxFifo>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80082dc:	2300      	movs	r3, #0
 80082de:	61bb      	str	r3, [r7, #24]
 80082e0:	e01f      	b.n	8008322 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008300:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008308:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	4413      	add	r3, r2
 8008312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008316:	461a      	mov	r2, r3
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	3301      	adds	r3, #1
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b0f      	cmp	r3, #15
 8008326:	d9dc      	bls.n	80082e2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008328:	2300      	movs	r3, #0
 800832a:	61bb      	str	r3, [r7, #24]
 800832c:	e034      	b.n	8008398 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	4413      	add	r3, r2
 8008336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008344:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800834c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008354:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	4413      	add	r3, r2
 800835e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008362:	461a      	mov	r2, r3
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008374:	d80c      	bhi.n	8008390 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	4413      	add	r3, r2
 800837e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800838c:	d0ec      	beq.n	8008368 <USB_StopHost+0xc8>
 800838e:	e000      	b.n	8008392 <USB_StopHost+0xf2>
        break;
 8008390:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	3301      	adds	r3, #1
 8008396:	61bb      	str	r3, [r7, #24]
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	2b0f      	cmp	r3, #15
 800839c:	d9c7      	bls.n	800832e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083a4:	461a      	mov	r2, r3
 80083a6:	f04f 33ff 	mov.w	r3, #4294967295
 80083aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff f880 	bl	80074ba <USB_EnableGlobalInt>

  return ret;
 80083ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3720      	adds	r7, #32
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80083c4:	b590      	push	{r4, r7, lr}
 80083c6:	b089      	sub	sp, #36	; 0x24
 80083c8:	af04      	add	r7, sp, #16
 80083ca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80083cc:	2301      	movs	r3, #1
 80083ce:	2202      	movs	r2, #2
 80083d0:	2102      	movs	r1, #2
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fd16 	bl	8008e04 <USBH_FindInterface>
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	2bff      	cmp	r3, #255	; 0xff
 80083e0:	d002      	beq.n	80083e8 <USBH_CDC_InterfaceInit+0x24>
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d90f      	bls.n	8008408 <USBH_CDC_InterfaceInit+0x44>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
 80083e8:	487e      	ldr	r0, [pc, #504]	; (80085e4 <USBH_CDC_InterfaceInit+0x220>)
 80083ea:	f003 fa7d 	bl	800b8e8 <iprintf>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4619      	mov	r1, r3
 80083f8:	487b      	ldr	r0, [pc, #492]	; (80085e8 <USBH_CDC_InterfaceInit+0x224>)
 80083fa:	f003 fa75 	bl	800b8e8 <iprintf>
 80083fe:	200a      	movs	r0, #10
 8008400:	f003 fa8a 	bl	800b918 <putchar>
    return USBH_FAIL;
 8008404:	2302      	movs	r3, #2
 8008406:	e15c      	b.n	80086c2 <USBH_CDC_InterfaceInit+0x2fe>
  }

  status = USBH_SelectInterface(phost, interface);
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fc91 	bl	8008d34 <USBH_SelectInterface>
 8008412:	4603      	mov	r3, r0
 8008414:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <USBH_CDC_InterfaceInit+0x5c>
  {
    return USBH_FAIL;
 800841c:	2302      	movs	r3, #2
 800841e:	e150      	b.n	80086c2 <USBH_CDC_InterfaceInit+0x2fe>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008426:	2050      	movs	r0, #80	; 0x50
 8008428:	f002 fcfc 	bl	800ae24 <malloc>
 800842c:	4603      	mov	r3, r0
 800842e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <USBH_CDC_InterfaceInit+0x92>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
 8008440:	4868      	ldr	r0, [pc, #416]	; (80085e4 <USBH_CDC_InterfaceInit+0x220>)
 8008442:	f003 fa51 	bl	800b8e8 <iprintf>
 8008446:	4869      	ldr	r0, [pc, #420]	; (80085ec <USBH_CDC_InterfaceInit+0x228>)
 8008448:	f003 fa4e 	bl	800b8e8 <iprintf>
 800844c:	200a      	movs	r0, #10
 800844e:	f003 fa63 	bl	800b918 <putchar>
    return USBH_FAIL;
 8008452:	2302      	movs	r3, #2
 8008454:	e135      	b.n	80086c2 <USBH_CDC_InterfaceInit+0x2fe>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008456:	2250      	movs	r2, #80	; 0x50
 8008458:	2100      	movs	r1, #0
 800845a:	68b8      	ldr	r0, [r7, #8]
 800845c:	f002 fcf2 	bl	800ae44 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	211a      	movs	r1, #26
 8008466:	fb01 f303 	mul.w	r3, r1, r3
 800846a:	4413      	add	r3, r2
 800846c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	b25b      	sxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	da15      	bge.n	80084a4 <USBH_CDC_InterfaceInit+0xe0>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	211a      	movs	r1, #26
 800847e:	fb01 f303 	mul.w	r3, r1, r3
 8008482:	4413      	add	r3, r2
 8008484:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008488:	781a      	ldrb	r2, [r3, #0]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	211a      	movs	r1, #26
 8008494:	fb01 f303 	mul.w	r3, r1, r3
 8008498:	4413      	add	r3, r2
 800849a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800849e:	881a      	ldrh	r2, [r3, #0]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f002 f925 	bl	800a6fa <USBH_AllocPipe>
 80084b0:	4603      	mov	r3, r0
 80084b2:	461a      	mov	r2, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	7819      	ldrb	r1, [r3, #0]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	7858      	ldrb	r0, [r3, #1]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	8952      	ldrh	r2, [r2, #10]
 80084d0:	9202      	str	r2, [sp, #8]
 80084d2:	2203      	movs	r2, #3
 80084d4:	9201      	str	r2, [sp, #4]
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	4623      	mov	r3, r4
 80084da:	4602      	mov	r2, r0
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f002 f8dd 	bl	800a69c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2200      	movs	r2, #0
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f002 fbec 	bl	800acc8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80084f0:	2300      	movs	r3, #0
 80084f2:	2200      	movs	r2, #0
 80084f4:	210a      	movs	r1, #10
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fc84 	bl	8008e04 <USBH_FindInterface>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	2bff      	cmp	r3, #255	; 0xff
 8008504:	d002      	beq.n	800850c <USBH_CDC_InterfaceInit+0x148>
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d90f      	bls.n	800852c <USBH_CDC_InterfaceInit+0x168>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
 800850c:	4835      	ldr	r0, [pc, #212]	; (80085e4 <USBH_CDC_InterfaceInit+0x220>)
 800850e:	f003 f9eb 	bl	800b8e8 <iprintf>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4619      	mov	r1, r3
 800851c:	4834      	ldr	r0, [pc, #208]	; (80085f0 <USBH_CDC_InterfaceInit+0x22c>)
 800851e:	f003 f9e3 	bl	800b8e8 <iprintf>
 8008522:	200a      	movs	r0, #10
 8008524:	f003 f9f8 	bl	800b918 <putchar>
    return USBH_FAIL;
 8008528:	2302      	movs	r3, #2
 800852a:	e0ca      	b.n	80086c2 <USBH_CDC_InterfaceInit+0x2fe>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	211a      	movs	r1, #26
 8008532:	fb01 f303 	mul.w	r3, r1, r3
 8008536:	4413      	add	r3, r2
 8008538:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	b25b      	sxtb	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	da16      	bge.n	8008572 <USBH_CDC_InterfaceInit+0x1ae>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	211a      	movs	r1, #26
 800854a:	fb01 f303 	mul.w	r3, r1, r3
 800854e:	4413      	add	r3, r2
 8008550:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	211a      	movs	r1, #26
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	4413      	add	r3, r2
 8008566:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800856a:	881a      	ldrh	r2, [r3, #0]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	835a      	strh	r2, [r3, #26]
 8008570:	e015      	b.n	800859e <USBH_CDC_InterfaceInit+0x1da>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	211a      	movs	r1, #26
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	4413      	add	r3, r2
 800857e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008582:	781a      	ldrb	r2, [r3, #0]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	211a      	movs	r1, #26
 800858e:	fb01 f303 	mul.w	r3, r1, r3
 8008592:	4413      	add	r3, r2
 8008594:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008598:	881a      	ldrh	r2, [r3, #0]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	211a      	movs	r1, #26
 80085a4:	fb01 f303 	mul.w	r3, r1, r3
 80085a8:	4413      	add	r3, r2
 80085aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b25b      	sxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	da1e      	bge.n	80085f4 <USBH_CDC_InterfaceInit+0x230>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	211a      	movs	r1, #26
 80085bc:	fb01 f303 	mul.w	r3, r1, r3
 80085c0:	4413      	add	r3, r2
 80085c2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80085c6:	781a      	ldrb	r2, [r3, #0]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	211a      	movs	r1, #26
 80085d2:	fb01 f303 	mul.w	r3, r1, r3
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80085dc:	881a      	ldrh	r2, [r3, #0]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	835a      	strh	r2, [r3, #26]
 80085e2:	e01d      	b.n	8008620 <USBH_CDC_InterfaceInit+0x25c>
 80085e4:	0800dd08 	.word	0x0800dd08
 80085e8:	0800dd14 	.word	0x0800dd14
 80085ec:	0800dd54 	.word	0x0800dd54
 80085f0:	0800dd7c 	.word	0x0800dd7c
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	211a      	movs	r1, #26
 80085fa:	fb01 f303 	mul.w	r3, r1, r3
 80085fe:	4413      	add	r3, r2
 8008600:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008604:	781a      	ldrb	r2, [r3, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	211a      	movs	r1, #26
 8008610:	fb01 f303 	mul.w	r3, r1, r3
 8008614:	4413      	add	r3, r2
 8008616:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800861a:	881a      	ldrh	r2, [r3, #0]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	7b9b      	ldrb	r3, [r3, #14]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f002 f867 	bl	800a6fa <USBH_AllocPipe>
 800862c:	4603      	mov	r3, r0
 800862e:	461a      	mov	r2, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	7bdb      	ldrb	r3, [r3, #15]
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f002 f85d 	bl	800a6fa <USBH_AllocPipe>
 8008640:	4603      	mov	r3, r0
 8008642:	461a      	mov	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	7b59      	ldrb	r1, [r3, #13]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	7b98      	ldrb	r0, [r3, #14]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	8b12      	ldrh	r2, [r2, #24]
 8008660:	9202      	str	r2, [sp, #8]
 8008662:	2202      	movs	r2, #2
 8008664:	9201      	str	r2, [sp, #4]
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	4623      	mov	r3, r4
 800866a:	4602      	mov	r2, r0
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f002 f815 	bl	800a69c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	7b19      	ldrb	r1, [r3, #12]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	7bd8      	ldrb	r0, [r3, #15]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	8b52      	ldrh	r2, [r2, #26]
 800868a:	9202      	str	r2, [sp, #8]
 800868c:	2202      	movs	r2, #2
 800868e:	9201      	str	r2, [sp, #4]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4623      	mov	r3, r4
 8008694:	4602      	mov	r2, r0
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f002 f800 	bl	800a69c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	7b5b      	ldrb	r3, [r3, #13]
 80086a8:	2200      	movs	r2, #0
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f002 fb0b 	bl	800acc8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	7b1b      	ldrb	r3, [r3, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f002 fb04 	bl	800acc8 <USBH_LL_SetToggle>

  return USBH_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd90      	pop	{r4, r7, pc}
 80086ca:	bf00      	nop

080086cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00e      	beq.n	8008704 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 fff4 	bl	800a6da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f002 f81f 	bl	800a73c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	7b1b      	ldrb	r3, [r3, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00e      	beq.n	800872a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	7b1b      	ldrb	r3, [r3, #12]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 ffe1 	bl	800a6da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	7b1b      	ldrb	r3, [r3, #12]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f002 f80c 	bl	800a73c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	7b5b      	ldrb	r3, [r3, #13]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00e      	beq.n	8008750 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	7b5b      	ldrb	r3, [r3, #13]
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 ffce 	bl	800a6da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	7b5b      	ldrb	r3, [r3, #13]
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 fff9 	bl	800a73c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	4618      	mov	r0, r3
 8008766:	f002 fb65 	bl	800ae34 <free>
    phost->pActiveClass->pData = 0U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008770:	2200      	movs	r2, #0
 8008772:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3340      	adds	r3, #64	; 0x40
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f8c2 	bl	8008922 <GetLineCoding>
 800879e:	4603      	mov	r3, r0
 80087a0:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d106      	bne.n	80087b6 <USBH_CDC_ClassRequest+0x36>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087ae:	2102      	movs	r1, #2
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	4798      	blx	r3
 80087b4:	e00b      	b.n	80087ce <USBH_CDC_ClassRequest+0x4e>
  }
  else if (status == USBH_NOT_SUPPORTED)
 80087b6:	7afb      	ldrb	r3, [r7, #11]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d108      	bne.n	80087ce <USBH_CDC_ClassRequest+0x4e>
  {
    USBH_ErrLog("Control error: CDC: Device Get Line Coding configuration failed");
 80087bc:	4806      	ldr	r0, [pc, #24]	; (80087d8 <USBH_CDC_ClassRequest+0x58>)
 80087be:	f003 f893 	bl	800b8e8 <iprintf>
 80087c2:	4806      	ldr	r0, [pc, #24]	; (80087dc <USBH_CDC_ClassRequest+0x5c>)
 80087c4:	f003 f890 	bl	800b8e8 <iprintf>
 80087c8:	200a      	movs	r0, #10
 80087ca:	f003 f8a5 	bl	800b918 <putchar>
  else
  {
    /* .. */
  }

  return status;
 80087ce:	7afb      	ldrb	r3, [r7, #11]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	0800ddb0 	.word	0x0800ddb0
 80087dc:	0800ddb8 	.word	0x0800ddb8

080087e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008800:	2b04      	cmp	r3, #4
 8008802:	d877      	bhi.n	80088f4 <USBH_CDC_Process+0x114>
 8008804:	a201      	add	r2, pc, #4	; (adr r2, 800880c <USBH_CDC_Process+0x2c>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	08008821 	.word	0x08008821
 8008810:	08008827 	.word	0x08008827
 8008814:	08008857 	.word	0x08008857
 8008818:	080088cb 	.word	0x080088cb
 800881c:	080088d9 	.word	0x080088d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
      break;
 8008824:	e06d      	b.n	8008902 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f897 	bl	8008960 <SetLineCoding>
 8008832:	4603      	mov	r3, r0
 8008834:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008844:	e058      	b.n	80088f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d055      	beq.n	80088f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2204      	movs	r2, #4
 8008850:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008854:	e050      	b.n	80088f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	3340      	adds	r3, #64	; 0x40
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f860 	bl	8008922 <GetLineCoding>
 8008862:	4603      	mov	r3, r0
 8008864:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d126      	bne.n	80088ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800887e:	791b      	ldrb	r3, [r3, #4]
 8008880:	429a      	cmp	r2, r3
 8008882:	d13b      	bne.n	80088fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800888e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008890:	429a      	cmp	r2, r3
 8008892:	d133      	bne.n	80088fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800889e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d12b      	bne.n	80088fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d124      	bne.n	80088fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f958 	bl	8008b68 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80088b8:	e020      	b.n	80088fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d01d      	beq.n	80088fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2204      	movs	r2, #4
 80088c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80088c8:	e018      	b.n	80088fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f867 	bl	800899e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f8da 	bl	8008a8a <CDC_ProcessReception>
      break;
 80088d6:	e014      	b.n	8008902 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80088d8:	2100      	movs	r1, #0
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 f9b1 	bl	8009c42 <USBH_ClrFeature>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80088f2:	e005      	b.n	8008900 <USBH_CDC_Process+0x120>

    default:
      break;
 80088f4:	bf00      	nop
 80088f6:	e004      	b.n	8008902 <USBH_CDC_Process+0x122>
      break;
 80088f8:	bf00      	nop
 80088fa:	e002      	b.n	8008902 <USBH_CDC_Process+0x122>
      break;
 80088fc:	bf00      	nop
 80088fe:	e000      	b.n	8008902 <USBH_CDC_Process+0x122>
      break;
 8008900:	bf00      	nop

  }

  return status;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b082      	sub	sp, #8
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	22a1      	movs	r2, #161	; 0xa1
 8008930:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2221      	movs	r2, #33	; 0x21
 8008936:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2207      	movs	r2, #7
 8008948:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2207      	movs	r2, #7
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 fc43 	bl	800a1dc <USBH_CtlReq>
 8008956:	4603      	mov	r3, r0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2221      	movs	r2, #33	; 0x21
 800896e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2220      	movs	r2, #32
 8008974:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2207      	movs	r2, #7
 8008986:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2207      	movs	r2, #7
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 fc24 	bl	800a1dc <USBH_CtlReq>
 8008994:	4603      	mov	r3, r0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b086      	sub	sp, #24
 80089a2:	af02      	add	r7, sp, #8
 80089a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80089b0:	2300      	movs	r3, #0
 80089b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d002      	beq.n	80089c4 <CDC_ProcessTransmission+0x26>
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d023      	beq.n	8008a0a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80089c2:	e05e      	b.n	8008a82 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	8b12      	ldrh	r2, [r2, #24]
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d90b      	bls.n	80089e8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	69d9      	ldr	r1, [r3, #28]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	8b1a      	ldrh	r2, [r3, #24]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	7b5b      	ldrb	r3, [r3, #13]
 80089dc:	2001      	movs	r0, #1
 80089de:	9000      	str	r0, [sp, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 fe18 	bl	800a616 <USBH_BulkSendData>
 80089e6:	e00b      	b.n	8008a00 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	7b5b      	ldrb	r3, [r3, #13]
 80089f6:	2001      	movs	r0, #1
 80089f8:	9000      	str	r0, [sp, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 fe0b 	bl	800a616 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a08:	e03b      	b.n	8008a82 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	7b5b      	ldrb	r3, [r3, #13]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f002 f92f 	bl	800ac74 <USBH_LL_GetURBState>
 8008a16:	4603      	mov	r3, r0
 8008a18:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d128      	bne.n	8008a72 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	8b12      	ldrh	r2, [r2, #24]
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d90e      	bls.n	8008a4a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	8b12      	ldrh	r2, [r2, #24]
 8008a34:	1a9a      	subs	r2, r3, r2
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	8b12      	ldrh	r2, [r2, #24]
 8008a42:	441a      	add	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	61da      	str	r2, [r3, #28]
 8008a48:	e002      	b.n	8008a50 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a60:	e00e      	b.n	8008a80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f868 	bl	8008b40 <USBH_CDC_TransmitCallback>
      break;
 8008a70:	e006      	b.n	8008a80 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008a72:	7afb      	ldrb	r3, [r7, #11]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d103      	bne.n	8008a80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a80:	bf00      	nop
  }
}
 8008a82:	bf00      	nop
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b086      	sub	sp, #24
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d002      	beq.n	8008ab0 <CDC_ProcessReception+0x26>
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d00e      	beq.n	8008acc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008aae:	e043      	b.n	8008b38 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	6a19      	ldr	r1, [r3, #32]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	8b5a      	ldrh	r2, [r3, #26]
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	7b1b      	ldrb	r3, [r3, #12]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f001 fdcf 	bl	800a660 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2204      	movs	r2, #4
 8008ac6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008aca:	e035      	b.n	8008b38 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	7b1b      	ldrb	r3, [r3, #12]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f002 f8ce 	bl	800ac74 <USBH_LL_GetURBState>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008adc:	7cfb      	ldrb	r3, [r7, #19]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d129      	bne.n	8008b36 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	7b1b      	ldrb	r3, [r3, #12]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f002 f831 	bl	800ab50 <USBH_LL_GetLastXferSize>
 8008aee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d016      	beq.n	8008b28 <CDC_ProcessReception+0x9e>
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	8b5b      	ldrh	r3, [r3, #26]
 8008afe:	461a      	mov	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d910      	bls.n	8008b28 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	1ad2      	subs	r2, r2, r3
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	6a1a      	ldr	r2, [r3, #32]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	441a      	add	r2, r3
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2203      	movs	r2, #3
 8008b22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008b26:	e006      	b.n	8008b36 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f80f 	bl	8008b54 <USBH_CDC_ReceiveCallback>
      break;
 8008b36:	bf00      	nop
  }
}
 8008b38:	bf00      	nop
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8008b90:	481c      	ldr	r0, [pc, #112]	; (8008c04 <USBH_Init+0x88>)
 8008b92:	f002 fea9 	bl	800b8e8 <iprintf>
 8008b96:	481c      	ldr	r0, [pc, #112]	; (8008c08 <USBH_Init+0x8c>)
 8008b98:	f002 fea6 	bl	800b8e8 <iprintf>
 8008b9c:	200a      	movs	r0, #10
 8008b9e:	f002 febb 	bl	800b918 <putchar>
    return USBH_FAIL;
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	e029      	b.n	8008bfa <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	79fa      	ldrb	r2, [r7, #7]
 8008baa:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 f824 	bl	8008c0c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f001 fef8 	bl	800a9e8 <USBH_LL_Init>

  return USBH_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	0800ddf8 	.word	0x0800ddf8
 8008c08:	0800de00 	.word	0x0800de00

08008c0c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	e009      	b.n	8008c32 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	33e0      	adds	r3, #224	; 0xe0
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	2200      	movs	r2, #0
 8008c2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b0f      	cmp	r3, #15
 8008c36:	d9f2      	bls.n	8008c1e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e009      	b.n	8008c52 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c48:	2200      	movs	r2, #0
 8008c4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c58:	d3f1      	bcc.n	8008c3e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2240      	movs	r2, #64	; 0x40
 8008c7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d01f      	beq.n	8008d08 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10e      	bne.n	8008cf0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cd8:	1c59      	adds	r1, r3, #1
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	33de      	adds	r3, #222	; 0xde
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]
 8008cee:	e016      	b.n	8008d1e <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8008cf0:	480d      	ldr	r0, [pc, #52]	; (8008d28 <USBH_RegisterClass+0x74>)
 8008cf2:	f002 fdf9 	bl	800b8e8 <iprintf>
 8008cf6:	480d      	ldr	r0, [pc, #52]	; (8008d2c <USBH_RegisterClass+0x78>)
 8008cf8:	f002 fdf6 	bl	800b8e8 <iprintf>
 8008cfc:	200a      	movs	r0, #10
 8008cfe:	f002 fe0b 	bl	800b918 <putchar>
      status = USBH_FAIL;
 8008d02:	2302      	movs	r3, #2
 8008d04:	73fb      	strb	r3, [r7, #15]
 8008d06:	e00a      	b.n	8008d1e <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8008d08:	4807      	ldr	r0, [pc, #28]	; (8008d28 <USBH_RegisterClass+0x74>)
 8008d0a:	f002 fded 	bl	800b8e8 <iprintf>
 8008d0e:	4808      	ldr	r0, [pc, #32]	; (8008d30 <USBH_RegisterClass+0x7c>)
 8008d10:	f002 fdea 	bl	800b8e8 <iprintf>
 8008d14:	200a      	movs	r0, #10
 8008d16:	f002 fdff 	bl	800b918 <putchar>
    status = USBH_FAIL;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	0800ddf8 	.word	0x0800ddf8
 8008d2c:	0800de14 	.word	0x0800de14
 8008d30:	0800de30 	.word	0x0800de30

08008d34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008d4a:	78fa      	ldrb	r2, [r7, #3]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d23c      	bcs.n	8008dca <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	78fa      	ldrb	r2, [r7, #3]
 8008d54:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4823      	ldr	r0, [pc, #140]	; (8008dec <USBH_SelectInterface+0xb8>)
 8008d5e:	f002 fdc3 	bl	800b8e8 <iprintf>
 8008d62:	200a      	movs	r0, #10
 8008d64:	f002 fdd8 	bl	800b918 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 8008d68:	78fb      	ldrb	r3, [r7, #3]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	211a      	movs	r1, #26
 8008d6e:	fb01 f303 	mul.w	r3, r1, r3
 8008d72:	4413      	add	r3, r2
 8008d74:	f203 3347 	addw	r3, r3, #839	; 0x347
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	481c      	ldr	r0, [pc, #112]	; (8008df0 <USBH_SelectInterface+0xbc>)
 8008d7e:	f002 fdb3 	bl	800b8e8 <iprintf>
 8008d82:	200a      	movs	r0, #10
 8008d84:	f002 fdc8 	bl	800b918 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	211a      	movs	r1, #26
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	4815      	ldr	r0, [pc, #84]	; (8008df4 <USBH_SelectInterface+0xc0>)
 8008d9e:	f002 fda3 	bl	800b8e8 <iprintf>
 8008da2:	200a      	movs	r0, #10
 8008da4:	f002 fdb8 	bl	800b918 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	211a      	movs	r1, #26
 8008dae:	fb01 f303 	mul.w	r3, r1, r3
 8008db2:	4413      	add	r3, r2
 8008db4:	f203 3349 	addw	r3, r3, #841	; 0x349
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	480e      	ldr	r0, [pc, #56]	; (8008df8 <USBH_SelectInterface+0xc4>)
 8008dbe:	f002 fd93 	bl	800b8e8 <iprintf>
 8008dc2:	200a      	movs	r0, #10
 8008dc4:	f002 fda8 	bl	800b918 <putchar>
 8008dc8:	e00a      	b.n	8008de0 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8008dca:	480c      	ldr	r0, [pc, #48]	; (8008dfc <USBH_SelectInterface+0xc8>)
 8008dcc:	f002 fd8c 	bl	800b8e8 <iprintf>
 8008dd0:	480b      	ldr	r0, [pc, #44]	; (8008e00 <USBH_SelectInterface+0xcc>)
 8008dd2:	f002 fd89 	bl	800b8e8 <iprintf>
 8008dd6:	200a      	movs	r0, #10
 8008dd8:	f002 fd9e 	bl	800b918 <putchar>
    status = USBH_FAIL;
 8008ddc:	2302      	movs	r3, #2
 8008dde:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	0800de48 	.word	0x0800de48
 8008df0:	0800de68 	.word	0x0800de68
 8008df4:	0800de78 	.word	0x0800de78
 8008df8:	0800de88 	.word	0x0800de88
 8008dfc:	0800ddf8 	.word	0x0800ddf8
 8008e00:	0800de98 	.word	0x0800de98

08008e04 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	4611      	mov	r1, r2
 8008e10:	461a      	mov	r2, r3
 8008e12:	4603      	mov	r3, r0
 8008e14:	70fb      	strb	r3, [r7, #3]
 8008e16:	460b      	mov	r3, r1
 8008e18:	70bb      	strb	r3, [r7, #2]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e2c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e2e:	e025      	b.n	8008e7c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
 8008e32:	221a      	movs	r2, #26
 8008e34:	fb02 f303 	mul.w	r3, r2, r3
 8008e38:	3308      	adds	r3, #8
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	3302      	adds	r3, #2
 8008e40:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	795b      	ldrb	r3, [r3, #5]
 8008e46:	78fa      	ldrb	r2, [r7, #3]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d002      	beq.n	8008e52 <USBH_FindInterface+0x4e>
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	2bff      	cmp	r3, #255	; 0xff
 8008e50:	d111      	bne.n	8008e76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e56:	78ba      	ldrb	r2, [r7, #2]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d002      	beq.n	8008e62 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e5c:	78bb      	ldrb	r3, [r7, #2]
 8008e5e:	2bff      	cmp	r3, #255	; 0xff
 8008e60:	d109      	bne.n	8008e76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e66:	787a      	ldrb	r2, [r7, #1]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d002      	beq.n	8008e72 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e6c:	787b      	ldrb	r3, [r7, #1]
 8008e6e:	2bff      	cmp	r3, #255	; 0xff
 8008e70:	d101      	bne.n	8008e76 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	e006      	b.n	8008e84 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d9d6      	bls.n	8008e30 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008e82:	23ff      	movs	r3, #255	; 0xff
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	371c      	adds	r7, #28
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 fde1 	bl	800aa60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 fefa 	bl	800ac9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af04      	add	r7, sp, #16
 8008eb6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008eb8:	2302      	movs	r3, #2
 8008eba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d102      	bne.n	8008ed2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2203      	movs	r2, #3
 8008ed0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b0b      	cmp	r3, #11
 8008eda:	f200 823b 	bhi.w	8009354 <USBH_Process+0x4a4>
 8008ede:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <USBH_Process+0x34>)
 8008ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee4:	08008f15 	.word	0x08008f15
 8008ee8:	08008f53 	.word	0x08008f53
 8008eec:	08008fd3 	.word	0x08008fd3
 8008ef0:	080092e3 	.word	0x080092e3
 8008ef4:	08009355 	.word	0x08009355
 8008ef8:	08009077 	.word	0x08009077
 8008efc:	08009265 	.word	0x08009265
 8008f00:	080090c5 	.word	0x080090c5
 8008f04:	080090e5 	.word	0x080090e5
 8008f08:	08009111 	.word	0x08009111
 8008f0c:	0800916d 	.word	0x0800916d
 8008f10:	080092cb 	.word	0x080092cb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 821b 	beq.w	8009358 <USBH_Process+0x4a8>
      {
        USBH_UsrLog("USB Device Connected");
 8008f22:	48a6      	ldr	r0, [pc, #664]	; (80091bc <USBH_Process+0x30c>)
 8008f24:	f002 fce0 	bl	800b8e8 <iprintf>
 8008f28:	200a      	movs	r0, #10
 8008f2a:	f002 fcf5 	bl	800b918 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008f34:	20c8      	movs	r0, #200	; 0xc8
 8008f36:	f001 fef7 	bl	800ad28 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 fded 	bl	800ab1a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f50:	e202      	b.n	8009358 <USBH_Process+0x4a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d10d      	bne.n	8008f78 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8008f5c:	4898      	ldr	r0, [pc, #608]	; (80091c0 <USBH_Process+0x310>)
 8008f5e:	f002 fcc3 	bl	800b8e8 <iprintf>
 8008f62:	200a      	movs	r0, #10
 8008f64:	f002 fcd8 	bl	800b918 <putchar>
        phost->device.RstCnt = 0U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2202      	movs	r2, #2
 8008f74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f76:	e1fc      	b.n	8009372 <USBH_Process+0x4c2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f82:	d91a      	bls.n	8008fba <USBH_Process+0x10a>
          phost->device.RstCnt++;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d909      	bls.n	8008fb2 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 8008f9e:	4889      	ldr	r0, [pc, #548]	; (80091c4 <USBH_Process+0x314>)
 8008fa0:	f002 fca2 	bl	800b8e8 <iprintf>
 8008fa4:	200a      	movs	r0, #10
 8008fa6:	f002 fcb7 	bl	800b918 <putchar>
            phost->gState = HOST_ABORT_STATE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	220d      	movs	r2, #13
 8008fae:	701a      	strb	r2, [r3, #0]
      break;
 8008fb0:	e1df      	b.n	8009372 <USBH_Process+0x4c2>
            phost->gState = HOST_IDLE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	701a      	strb	r2, [r3, #0]
      break;
 8008fb8:	e1db      	b.n	8009372 <USBH_Process+0x4c2>
          phost->Timeout += 10U;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008fc0:	f103 020a 	add.w	r2, r3, #10
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008fca:	200a      	movs	r0, #10
 8008fcc:	f001 feac 	bl	800ad28 <USBH_Delay>
      break;
 8008fd0:	e1cf      	b.n	8009372 <USBH_Process+0x4c2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fe2:	2104      	movs	r1, #4
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008fe8:	2064      	movs	r0, #100	; 0x64
 8008fea:	f001 fe9d 	bl	800ad28 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fd6c 	bl	800aacc <USBH_LL_GetSpeed>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2205      	movs	r2, #5
 8009002:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009004:	2100      	movs	r1, #0
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f001 fb77 	bl	800a6fa <USBH_AllocPipe>
 800900c:	4603      	mov	r3, r0
 800900e:	461a      	mov	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009014:	2180      	movs	r1, #128	; 0x80
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 fb6f 	bl	800a6fa <USBH_AllocPipe>
 800901c:	4603      	mov	r3, r0
 800901e:	461a      	mov	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	7919      	ldrb	r1, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009038:	b292      	uxth	r2, r2
 800903a:	9202      	str	r2, [sp, #8]
 800903c:	2200      	movs	r2, #0
 800903e:	9201      	str	r2, [sp, #4]
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	4603      	mov	r3, r0
 8009044:	2280      	movs	r2, #128	; 0x80
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 fb28 	bl	800a69c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	7959      	ldrb	r1, [r3, #5]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009060:	b292      	uxth	r2, r2
 8009062:	9202      	str	r2, [sp, #8]
 8009064:	2200      	movs	r2, #0
 8009066:	9201      	str	r2, [sp, #4]
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	4603      	mov	r3, r0
 800906c:	2200      	movs	r2, #0
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 fb14 	bl	800a69c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009074:	e17d      	b.n	8009372 <USBH_Process+0x4c2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f98e 	bl	8009398 <USBH_HandleEnum>
 800907c:	4603      	mov	r3, r0
 800907e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	f040 8169 	bne.w	800935c <USBH_Process+0x4ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800908a:	484f      	ldr	r0, [pc, #316]	; (80091c8 <USBH_Process+0x318>)
 800908c:	f002 fc2c 	bl	800b8e8 <iprintf>
 8009090:	200a      	movs	r0, #10
 8009092:	f002 fc41 	bl	800b918 <putchar>

        phost->device.current_interface = 0U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d109      	bne.n	80090bc <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 80090a8:	4848      	ldr	r0, [pc, #288]	; (80091cc <USBH_Process+0x31c>)
 80090aa:	f002 fc1d 	bl	800b8e8 <iprintf>
 80090ae:	200a      	movs	r0, #10
 80090b0:	f002 fc32 	bl	800b918 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2208      	movs	r2, #8
 80090b8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80090ba:	e14f      	b.n	800935c <USBH_Process+0x4ac>
          phost->gState = HOST_INPUT;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2207      	movs	r2, #7
 80090c0:	701a      	strb	r2, [r3, #0]
      break;
 80090c2:	e14b      	b.n	800935c <USBH_Process+0x4ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 8148 	beq.w	8009360 <USBH_Process+0x4b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090d6:	2101      	movs	r1, #1
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2208      	movs	r2, #8
 80090e0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80090e2:	e13d      	b.n	8009360 <USBH_Process+0x4b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fd60 	bl	8009bb4 <USBH_SetCfg>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f040 8134 	bne.w	8009364 <USBH_Process+0x4b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2209      	movs	r2, #9
 8009100:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8009102:	4833      	ldr	r0, [pc, #204]	; (80091d0 <USBH_Process+0x320>)
 8009104:	f002 fbf0 	bl	800b8e8 <iprintf>
 8009108:	200a      	movs	r0, #10
 800910a:	f002 fc05 	bl	800b918 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800910e:	e129      	b.n	8009364 <USBH_Process+0x4b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009116:	f003 0320 	and.w	r3, r3, #32
 800911a:	2b00      	cmp	r3, #0
 800911c:	d022      	beq.n	8009164 <USBH_Process+0x2b4>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800911e:	2101      	movs	r1, #1
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fd6a 	bl	8009bfa <USBH_SetFeature>
 8009126:	4603      	mov	r3, r0
 8009128:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d109      	bne.n	8009146 <USBH_Process+0x296>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 8009132:	4828      	ldr	r0, [pc, #160]	; (80091d4 <USBH_Process+0x324>)
 8009134:	f002 fbd8 	bl	800b8e8 <iprintf>
 8009138:	200a      	movs	r0, #10
 800913a:	f002 fbed 	bl	800b918 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	220a      	movs	r2, #10
 8009142:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009144:	e110      	b.n	8009368 <USBH_Process+0x4b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b03      	cmp	r3, #3
 800914c:	f040 810c 	bne.w	8009368 <USBH_Process+0x4b8>
          USBH_UsrLog("Remote wakeup not supported by the device");
 8009150:	4821      	ldr	r0, [pc, #132]	; (80091d8 <USBH_Process+0x328>)
 8009152:	f002 fbc9 	bl	800b8e8 <iprintf>
 8009156:	200a      	movs	r0, #10
 8009158:	f002 fbde 	bl	800b918 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	220a      	movs	r2, #10
 8009160:	701a      	strb	r2, [r3, #0]
      break;
 8009162:	e101      	b.n	8009368 <USBH_Process+0x4b8>
        phost->gState = HOST_CHECK_CLASS;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	220a      	movs	r2, #10
 8009168:	701a      	strb	r2, [r3, #0]
      break;
 800916a:	e0fd      	b.n	8009368 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <USBH_Process+0x2d4>
      {
        USBH_UsrLog("No Class has been registered.");
 8009176:	4819      	ldr	r0, [pc, #100]	; (80091dc <USBH_Process+0x32c>)
 8009178:	f002 fbb6 	bl	800b8e8 <iprintf>
 800917c:	200a      	movs	r0, #10
 800917e:	f002 fbcb 	bl	800b918 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009182:	e0f6      	b.n	8009372 <USBH_Process+0x4c2>
        phost->pActiveClass = NULL;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800918c:	2300      	movs	r3, #0
 800918e:	73fb      	strb	r3, [r7, #15]
 8009190:	e029      	b.n	80091e6 <USBH_Process+0x336>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009192:	7bfa      	ldrb	r2, [r7, #15]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	32de      	adds	r2, #222	; 0xde
 8009198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919c:	791a      	ldrb	r2, [r3, #4]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d11b      	bne.n	80091e0 <USBH_Process+0x330>
            phost->pActiveClass = phost->pClass[idx];
 80091a8:	7bfa      	ldrb	r2, [r7, #15]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	32de      	adds	r2, #222	; 0xde
 80091ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80091b8:	e018      	b.n	80091ec <USBH_Process+0x33c>
 80091ba:	bf00      	nop
 80091bc:	0800deb8 	.word	0x0800deb8
 80091c0:	0800ded0 	.word	0x0800ded0
 80091c4:	0800deec 	.word	0x0800deec
 80091c8:	0800df18 	.word	0x0800df18
 80091cc:	0800df2c 	.word	0x0800df2c
 80091d0:	0800df54 	.word	0x0800df54
 80091d4:	0800df70 	.word	0x0800df70
 80091d8:	0800df90 	.word	0x0800df90
 80091dc:	0800dfbc 	.word	0x0800dfbc
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	3301      	adds	r3, #1
 80091e4:	73fb      	strb	r3, [r7, #15]
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0d2      	beq.n	8009192 <USBH_Process+0x2e2>
        if (phost->pActiveClass != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d02c      	beq.n	8009250 <USBH_Process+0x3a0>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d114      	bne.n	8009232 <USBH_Process+0x382>
            phost->gState = HOST_CLASS_REQUEST;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2206      	movs	r2, #6
 800920c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4619      	mov	r1, r3
 8009218:	4858      	ldr	r0, [pc, #352]	; (800937c <USBH_Process+0x4cc>)
 800921a:	f002 fb65 	bl	800b8e8 <iprintf>
 800921e:	200a      	movs	r0, #10
 8009220:	f002 fb7a 	bl	800b918 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800922a:	2103      	movs	r1, #3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	4798      	blx	r3
      break;
 8009230:	e09f      	b.n	8009372 <USBH_Process+0x4c2>
            phost->gState = HOST_ABORT_STATE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	220d      	movs	r2, #13
 8009236:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4619      	mov	r1, r3
 8009242:	484f      	ldr	r0, [pc, #316]	; (8009380 <USBH_Process+0x4d0>)
 8009244:	f002 fb50 	bl	800b8e8 <iprintf>
 8009248:	200a      	movs	r0, #10
 800924a:	f002 fb65 	bl	800b918 <putchar>
      break;
 800924e:	e090      	b.n	8009372 <USBH_Process+0x4c2>
          phost->gState = HOST_ABORT_STATE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	220d      	movs	r2, #13
 8009254:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8009256:	484b      	ldr	r0, [pc, #300]	; (8009384 <USBH_Process+0x4d4>)
 8009258:	f002 fb46 	bl	800b8e8 <iprintf>
 800925c:	200a      	movs	r0, #10
 800925e:	f002 fb5b 	bl	800b918 <putchar>
      break;
 8009262:	e086      	b.n	8009372 <USBH_Process+0x4c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800926a:	2b00      	cmp	r3, #0
 800926c:	d020      	beq.n	80092b0 <USBH_Process+0x400>
      {
        status = phost->pActiveClass->Requests(phost);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	4798      	blx	r3
 800927a:	4603      	mov	r3, r0
 800927c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d103      	bne.n	800928e <USBH_Process+0x3de>
        {
          phost->gState = HOST_CLASS;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	220b      	movs	r2, #11
 800928a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800928c:	e06e      	b.n	800936c <USBH_Process+0x4bc>
        else if (status == USBH_FAIL)
 800928e:	7bbb      	ldrb	r3, [r7, #14]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b02      	cmp	r3, #2
 8009294:	d16a      	bne.n	800936c <USBH_Process+0x4bc>
          phost->gState = HOST_ABORT_STATE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	220d      	movs	r2, #13
 800929a:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800929c:	483a      	ldr	r0, [pc, #232]	; (8009388 <USBH_Process+0x4d8>)
 800929e:	f002 fb23 	bl	800b8e8 <iprintf>
 80092a2:	483a      	ldr	r0, [pc, #232]	; (800938c <USBH_Process+0x4dc>)
 80092a4:	f002 fb20 	bl	800b8e8 <iprintf>
 80092a8:	200a      	movs	r0, #10
 80092aa:	f002 fb35 	bl	800b918 <putchar>
      break;
 80092ae:	e05d      	b.n	800936c <USBH_Process+0x4bc>
        phost->gState = HOST_ABORT_STATE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	220d      	movs	r2, #13
 80092b4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 80092b6:	4834      	ldr	r0, [pc, #208]	; (8009388 <USBH_Process+0x4d8>)
 80092b8:	f002 fb16 	bl	800b8e8 <iprintf>
 80092bc:	4834      	ldr	r0, [pc, #208]	; (8009390 <USBH_Process+0x4e0>)
 80092be:	f002 fb13 	bl	800b8e8 <iprintf>
 80092c2:	200a      	movs	r0, #10
 80092c4:	f002 fb28 	bl	800b918 <putchar>
      break;
 80092c8:	e050      	b.n	800936c <USBH_Process+0x4bc>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d04d      	beq.n	8009370 <USBH_Process+0x4c0>
      {
        phost->pActiveClass->BgndProcess(phost);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	4798      	blx	r3
      }
      break;
 80092e0:	e046      	b.n	8009370 <USBH_Process+0x4c0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7ff fc8e 	bl	8008c0c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d009      	beq.n	800930e <USBH_Process+0x45e>
      {
        phost->pActiveClass->DeInit(phost);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <USBH_Process+0x474>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800931e:	2105      	movs	r1, #5
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8009324:	481b      	ldr	r0, [pc, #108]	; (8009394 <USBH_Process+0x4e4>)
 8009326:	f002 fadf 	bl	800b8e8 <iprintf>
 800932a:	200a      	movs	r0, #10
 800932c:	f002 faf4 	bl	800b918 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b01      	cmp	r3, #1
 800933a:	d107      	bne.n	800934c <USBH_Process+0x49c>
      {
        phost->device.is_ReEnumerated = 0U;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff fda3 	bl	8008e90 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800934a:	e012      	b.n	8009372 <USBH_Process+0x4c2>
        (void)USBH_LL_Start(phost);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 fb87 	bl	800aa60 <USBH_LL_Start>
      break;
 8009352:	e00e      	b.n	8009372 <USBH_Process+0x4c2>

    case HOST_ABORT_STATE:
    default :
      break;
 8009354:	bf00      	nop
 8009356:	e00c      	b.n	8009372 <USBH_Process+0x4c2>
      break;
 8009358:	bf00      	nop
 800935a:	e00a      	b.n	8009372 <USBH_Process+0x4c2>
      break;
 800935c:	bf00      	nop
 800935e:	e008      	b.n	8009372 <USBH_Process+0x4c2>
    break;
 8009360:	bf00      	nop
 8009362:	e006      	b.n	8009372 <USBH_Process+0x4c2>
      break;
 8009364:	bf00      	nop
 8009366:	e004      	b.n	8009372 <USBH_Process+0x4c2>
      break;
 8009368:	bf00      	nop
 800936a:	e002      	b.n	8009372 <USBH_Process+0x4c2>
      break;
 800936c:	bf00      	nop
 800936e:	e000      	b.n	8009372 <USBH_Process+0x4c2>
      break;
 8009370:	bf00      	nop
  }
  return USBH_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	0800dfdc 	.word	0x0800dfdc
 8009380:	0800dff0 	.word	0x0800dff0
 8009384:	0800e010 	.word	0x0800e010
 8009388:	0800ddf8 	.word	0x0800ddf8
 800938c:	0800e038 	.word	0x0800e038
 8009390:	0800e060 	.word	0x0800e060
 8009394:	0800e078 	.word	0x0800e078

08009398 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af04      	add	r7, sp, #16
 800939e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80093a0:	2301      	movs	r3, #1
 80093a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80093a4:	2301      	movs	r3, #1
 80093a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	2b07      	cmp	r3, #7
 80093ae:	f200 827f 	bhi.w	80098b0 <USBH_HandleEnum+0x518>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <USBH_HandleEnum+0x20>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	080093d9 	.word	0x080093d9
 80093bc:	080094b5 	.word	0x080094b5
 80093c0:	08009565 	.word	0x08009565
 80093c4:	08009625 	.word	0x08009625
 80093c8:	080096ad 	.word	0x080096ad
 80093cc:	0800975f 	.word	0x0800975f
 80093d0:	080097d3 	.word	0x080097d3
 80093d4:	08009845 	.word	0x08009845
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80093d8:	2108      	movs	r1, #8
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fb1a 	bl	8009a14 <USBH_Get_DevDesc>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d130      	bne.n	800944c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	7919      	ldrb	r1, [r3, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800940e:	b292      	uxth	r2, r2
 8009410:	9202      	str	r2, [sp, #8]
 8009412:	2200      	movs	r2, #0
 8009414:	9201      	str	r2, [sp, #4]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	4603      	mov	r3, r0
 800941a:	2280      	movs	r2, #128	; 0x80
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 f93d 	bl	800a69c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	7959      	ldrb	r1, [r3, #5]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009436:	b292      	uxth	r2, r2
 8009438:	9202      	str	r2, [sp, #8]
 800943a:	2200      	movs	r2, #0
 800943c:	9201      	str	r2, [sp, #4]
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	4603      	mov	r3, r0
 8009442:	2200      	movs	r2, #0
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f001 f929 	bl	800a69c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800944a:	e233      	b.n	80098b4 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	2b03      	cmp	r3, #3
 8009450:	f040 8230 	bne.w	80098b4 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8009454:	48af      	ldr	r0, [pc, #700]	; (8009714 <USBH_HandleEnum+0x37c>)
 8009456:	f002 fa47 	bl	800b8e8 <iprintf>
 800945a:	48af      	ldr	r0, [pc, #700]	; (8009718 <USBH_HandleEnum+0x380>)
 800945c:	f002 fa44 	bl	800b8e8 <iprintf>
 8009460:	200a      	movs	r0, #10
 8009462:	f002 fa59 	bl	800b918 <putchar>
        phost->device.EnumCnt++;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800946c:	3301      	adds	r3, #1
 800946e:	b2da      	uxtb	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800947c:	2b03      	cmp	r3, #3
 800947e:	d909      	bls.n	8009494 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009480:	48a6      	ldr	r0, [pc, #664]	; (800971c <USBH_HandleEnum+0x384>)
 8009482:	f002 fa31 	bl	800b8e8 <iprintf>
 8009486:	200a      	movs	r0, #10
 8009488:	f002 fa46 	bl	800b918 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	220d      	movs	r2, #13
 8009490:	701a      	strb	r2, [r3, #0]
      break;
 8009492:	e20f      	b.n	80098b4 <USBH_HandleEnum+0x51c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	795b      	ldrb	r3, [r3, #5]
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f001 f94e 	bl	800a73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	791b      	ldrb	r3, [r3, #4]
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 f948 	bl	800a73c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
      break;
 80094b2:	e1ff      	b.n	80098b4 <USBH_HandleEnum+0x51c>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80094b4:	2112      	movs	r1, #18
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 faac 	bl	8009a14 <USBH_Get_DevDesc>
 80094bc:	4603      	mov	r3, r0
 80094be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d117      	bne.n	80094f6 <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 80094cc:	4619      	mov	r1, r3
 80094ce:	4894      	ldr	r0, [pc, #592]	; (8009720 <USBH_HandleEnum+0x388>)
 80094d0:	f002 fa0a 	bl	800b8e8 <iprintf>
 80094d4:	200a      	movs	r0, #10
 80094d6:	f002 fa1f 	bl	800b918 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 80094e0:	4619      	mov	r1, r3
 80094e2:	4890      	ldr	r0, [pc, #576]	; (8009724 <USBH_HandleEnum+0x38c>)
 80094e4:	f002 fa00 	bl	800b8e8 <iprintf>
 80094e8:	200a      	movs	r0, #10
 80094ea:	f002 fa15 	bl	800b918 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80094f4:	e1e0      	b.n	80098b8 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	f040 81dd 	bne.w	80098b8 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 80094fe:	4885      	ldr	r0, [pc, #532]	; (8009714 <USBH_HandleEnum+0x37c>)
 8009500:	f002 f9f2 	bl	800b8e8 <iprintf>
 8009504:	4888      	ldr	r0, [pc, #544]	; (8009728 <USBH_HandleEnum+0x390>)
 8009506:	f002 f9ef 	bl	800b8e8 <iprintf>
 800950a:	200a      	movs	r0, #10
 800950c:	f002 fa04 	bl	800b918 <putchar>
        phost->device.EnumCnt++;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009516:	3301      	adds	r3, #1
 8009518:	b2da      	uxtb	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009526:	2b03      	cmp	r3, #3
 8009528:	d909      	bls.n	800953e <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800952a:	487c      	ldr	r0, [pc, #496]	; (800971c <USBH_HandleEnum+0x384>)
 800952c:	f002 f9dc 	bl	800b8e8 <iprintf>
 8009530:	200a      	movs	r0, #10
 8009532:	f002 f9f1 	bl	800b918 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	220d      	movs	r2, #13
 800953a:	701a      	strb	r2, [r3, #0]
      break;
 800953c:	e1bc      	b.n	80098b8 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	795b      	ldrb	r3, [r3, #5]
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 f8f9 	bl	800a73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	791b      	ldrb	r3, [r3, #4]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 f8f3 	bl	800a73c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
      break;
 8009562:	e1a9      	b.n	80098b8 <USBH_HandleEnum+0x520>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009564:	2101      	movs	r1, #1
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fb00 	bl	8009b6c <USBH_SetAddress>
 800956c:	4603      	mov	r3, r0
 800956e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d13c      	bne.n	80095f0 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 8009576:	2002      	movs	r0, #2
 8009578:	f001 fbd6 	bl	800ad28 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 800958a:	4619      	mov	r1, r3
 800958c:	4867      	ldr	r0, [pc, #412]	; (800972c <USBH_HandleEnum+0x394>)
 800958e:	f002 f9ab 	bl	800b8e8 <iprintf>
 8009592:	200a      	movs	r0, #10
 8009594:	f002 f9c0 	bl	800b918 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2203      	movs	r2, #3
 800959c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	7919      	ldrb	r1, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80095b2:	b292      	uxth	r2, r2
 80095b4:	9202      	str	r2, [sp, #8]
 80095b6:	2200      	movs	r2, #0
 80095b8:	9201      	str	r2, [sp, #4]
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	4603      	mov	r3, r0
 80095be:	2280      	movs	r2, #128	; 0x80
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 f86b 	bl	800a69c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	7959      	ldrb	r1, [r3, #5]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095da:	b292      	uxth	r2, r2
 80095dc:	9202      	str	r2, [sp, #8]
 80095de:	2200      	movs	r2, #0
 80095e0:	9201      	str	r2, [sp, #4]
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	4603      	mov	r3, r0
 80095e6:	2200      	movs	r2, #0
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f857 	bl	800a69c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095ee:	e165      	b.n	80098bc <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	f040 8162 	bne.w	80098bc <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Device Set Address request failed");
 80095f8:	4846      	ldr	r0, [pc, #280]	; (8009714 <USBH_HandleEnum+0x37c>)
 80095fa:	f002 f975 	bl	800b8e8 <iprintf>
 80095fe:	484c      	ldr	r0, [pc, #304]	; (8009730 <USBH_HandleEnum+0x398>)
 8009600:	f002 f972 	bl	800b8e8 <iprintf>
 8009604:	200a      	movs	r0, #10
 8009606:	f002 f987 	bl	800b918 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800960a:	4844      	ldr	r0, [pc, #272]	; (800971c <USBH_HandleEnum+0x384>)
 800960c:	f002 f96c 	bl	800b8e8 <iprintf>
 8009610:	200a      	movs	r0, #10
 8009612:	f002 f981 	bl	800b918 <putchar>
        phost->gState = HOST_ABORT_STATE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	220d      	movs	r2, #13
 800961a:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	705a      	strb	r2, [r3, #1]
      break;
 8009622:	e14b      	b.n	80098bc <USBH_HandleEnum+0x524>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009624:	2109      	movs	r1, #9
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fa1c 	bl	8009a64 <USBH_Get_CfgDesc>
 800962c:	4603      	mov	r3, r0
 800962e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d103      	bne.n	800963e <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2204      	movs	r2, #4
 800963a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800963c:	e140      	b.n	80098c0 <USBH_HandleEnum+0x528>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b03      	cmp	r3, #3
 8009642:	f040 813d 	bne.w	80098c0 <USBH_HandleEnum+0x528>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8009646:	4833      	ldr	r0, [pc, #204]	; (8009714 <USBH_HandleEnum+0x37c>)
 8009648:	f002 f94e 	bl	800b8e8 <iprintf>
 800964c:	4839      	ldr	r0, [pc, #228]	; (8009734 <USBH_HandleEnum+0x39c>)
 800964e:	f002 f94b 	bl	800b8e8 <iprintf>
 8009652:	200a      	movs	r0, #10
 8009654:	f002 f960 	bl	800b918 <putchar>
        phost->device.EnumCnt++;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800965e:	3301      	adds	r3, #1
 8009660:	b2da      	uxtb	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800966e:	2b03      	cmp	r3, #3
 8009670:	d909      	bls.n	8009686 <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009672:	482a      	ldr	r0, [pc, #168]	; (800971c <USBH_HandleEnum+0x384>)
 8009674:	f002 f938 	bl	800b8e8 <iprintf>
 8009678:	200a      	movs	r0, #10
 800967a:	f002 f94d 	bl	800b918 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	220d      	movs	r2, #13
 8009682:	701a      	strb	r2, [r3, #0]
      break;
 8009684:	e11c      	b.n	80098c0 <USBH_HandleEnum+0x528>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	795b      	ldrb	r3, [r3, #5]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f001 f855 	bl	800a73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	791b      	ldrb	r3, [r3, #4]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 f84f 	bl	800a73c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	701a      	strb	r2, [r3, #0]
      break;
 80096aa:	e109      	b.n	80098c0 <USBH_HandleEnum+0x528>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f9d5 	bl	8009a64 <USBH_Get_CfgDesc>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d103      	bne.n	80096cc <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2205      	movs	r2, #5
 80096c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80096ca:	e0fb      	b.n	80098c4 <USBH_HandleEnum+0x52c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	f040 80f8 	bne.w	80098c4 <USBH_HandleEnum+0x52c>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 80096d4:	480f      	ldr	r0, [pc, #60]	; (8009714 <USBH_HandleEnum+0x37c>)
 80096d6:	f002 f907 	bl	800b8e8 <iprintf>
 80096da:	4816      	ldr	r0, [pc, #88]	; (8009734 <USBH_HandleEnum+0x39c>)
 80096dc:	f002 f904 	bl	800b8e8 <iprintf>
 80096e0:	200a      	movs	r0, #10
 80096e2:	f002 f919 	bl	800b918 <putchar>
        phost->device.EnumCnt++;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096ec:	3301      	adds	r3, #1
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d91b      	bls.n	8009738 <USBH_HandleEnum+0x3a0>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009700:	4806      	ldr	r0, [pc, #24]	; (800971c <USBH_HandleEnum+0x384>)
 8009702:	f002 f8f1 	bl	800b8e8 <iprintf>
 8009706:	200a      	movs	r0, #10
 8009708:	f002 f906 	bl	800b918 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	220d      	movs	r2, #13
 8009710:	701a      	strb	r2, [r3, #0]
      break;
 8009712:	e0d7      	b.n	80098c4 <USBH_HandleEnum+0x52c>
 8009714:	0800ddf8 	.word	0x0800ddf8
 8009718:	0800e090 	.word	0x0800e090
 800971c:	0800e0c4 	.word	0x0800e0c4
 8009720:	0800e104 	.word	0x0800e104
 8009724:	0800e110 	.word	0x0800e110
 8009728:	0800e11c 	.word	0x0800e11c
 800972c:	0800e158 	.word	0x0800e158
 8009730:	0800e170 	.word	0x0800e170
 8009734:	0800e1a4 	.word	0x0800e1a4
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	795b      	ldrb	r3, [r3, #5]
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fffc 	bl	800a73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	791b      	ldrb	r3, [r3, #4]
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fff6 	bl	800a73c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	701a      	strb	r2, [r3, #0]
      break;
 800975c:	e0b2      	b.n	80098c4 <USBH_HandleEnum+0x52c>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009764:	2b00      	cmp	r3, #0
 8009766:	d02a      	beq.n	80097be <USBH_HandleEnum+0x426>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009774:	23ff      	movs	r3, #255	; 0xff
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f998 	bl	8009aac <USBH_Get_StringDesc>
 800977c:	4603      	mov	r3, r0
 800977e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10d      	bne.n	80097a2 <USBH_HandleEnum+0x40a>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800978c:	4619      	mov	r1, r3
 800978e:	4853      	ldr	r0, [pc, #332]	; (80098dc <USBH_HandleEnum+0x544>)
 8009790:	f002 f8aa 	bl	800b8e8 <iprintf>
 8009794:	200a      	movs	r0, #10
 8009796:	f002 f8bf 	bl	800b918 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2206      	movs	r2, #6
 800979e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80097a0:	e092      	b.n	80098c8 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	f040 808f 	bne.w	80098c8 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Manufacturer : N/A");
 80097aa:	484d      	ldr	r0, [pc, #308]	; (80098e0 <USBH_HandleEnum+0x548>)
 80097ac:	f002 f89c 	bl	800b8e8 <iprintf>
 80097b0:	200a      	movs	r0, #10
 80097b2:	f002 f8b1 	bl	800b918 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2206      	movs	r2, #6
 80097ba:	705a      	strb	r2, [r3, #1]
      break;
 80097bc:	e084      	b.n	80098c8 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Manufacturer : N/A");
 80097be:	4848      	ldr	r0, [pc, #288]	; (80098e0 <USBH_HandleEnum+0x548>)
 80097c0:	f002 f892 	bl	800b8e8 <iprintf>
 80097c4:	200a      	movs	r0, #10
 80097c6:	f002 f8a7 	bl	800b918 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2206      	movs	r2, #6
 80097ce:	705a      	strb	r2, [r3, #1]
      break;
 80097d0:	e07a      	b.n	80098c8 <USBH_HandleEnum+0x530>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d029      	beq.n	8009830 <USBH_HandleEnum+0x498>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80097e8:	23ff      	movs	r3, #255	; 0xff
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f95e 	bl	8009aac <USBH_Get_StringDesc>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10d      	bne.n	8009816 <USBH_HandleEnum+0x47e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009800:	4619      	mov	r1, r3
 8009802:	4838      	ldr	r0, [pc, #224]	; (80098e4 <USBH_HandleEnum+0x54c>)
 8009804:	f002 f870 	bl	800b8e8 <iprintf>
 8009808:	200a      	movs	r0, #10
 800980a:	f002 f885 	bl	800b918 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2207      	movs	r2, #7
 8009812:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009814:	e05a      	b.n	80098cc <USBH_HandleEnum+0x534>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009816:	7bbb      	ldrb	r3, [r7, #14]
 8009818:	2b03      	cmp	r3, #3
 800981a:	d157      	bne.n	80098cc <USBH_HandleEnum+0x534>
          USBH_UsrLog("Product : N/A");
 800981c:	4832      	ldr	r0, [pc, #200]	; (80098e8 <USBH_HandleEnum+0x550>)
 800981e:	f002 f863 	bl	800b8e8 <iprintf>
 8009822:	200a      	movs	r0, #10
 8009824:	f002 f878 	bl	800b918 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2207      	movs	r2, #7
 800982c:	705a      	strb	r2, [r3, #1]
      break;
 800982e:	e04d      	b.n	80098cc <USBH_HandleEnum+0x534>
        USBH_UsrLog("Product : N/A");
 8009830:	482d      	ldr	r0, [pc, #180]	; (80098e8 <USBH_HandleEnum+0x550>)
 8009832:	f002 f859 	bl	800b8e8 <iprintf>
 8009836:	200a      	movs	r0, #10
 8009838:	f002 f86e 	bl	800b918 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2207      	movs	r2, #7
 8009840:	705a      	strb	r2, [r3, #1]
      break;
 8009842:	e043      	b.n	80098cc <USBH_HandleEnum+0x534>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800984a:	2b00      	cmp	r3, #0
 800984c:	d027      	beq.n	800989e <USBH_HandleEnum+0x506>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800985a:	23ff      	movs	r3, #255	; 0xff
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f925 	bl	8009aac <USBH_Get_StringDesc>
 8009862:	4603      	mov	r3, r0
 8009864:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10c      	bne.n	8009886 <USBH_HandleEnum+0x4ee>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009872:	4619      	mov	r1, r3
 8009874:	481d      	ldr	r0, [pc, #116]	; (80098ec <USBH_HandleEnum+0x554>)
 8009876:	f002 f837 	bl	800b8e8 <iprintf>
 800987a:	200a      	movs	r0, #10
 800987c:	f002 f84c 	bl	800b918 <putchar>
          Status = USBH_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009884:	e024      	b.n	80098d0 <USBH_HandleEnum+0x538>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	2b03      	cmp	r3, #3
 800988a:	d121      	bne.n	80098d0 <USBH_HandleEnum+0x538>
          USBH_UsrLog("Serial Number : N/A");
 800988c:	4818      	ldr	r0, [pc, #96]	; (80098f0 <USBH_HandleEnum+0x558>)
 800988e:	f002 f82b 	bl	800b8e8 <iprintf>
 8009892:	200a      	movs	r0, #10
 8009894:	f002 f840 	bl	800b918 <putchar>
          Status = USBH_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
      break;
 800989c:	e018      	b.n	80098d0 <USBH_HandleEnum+0x538>
        USBH_UsrLog("Serial Number : N/A");
 800989e:	4814      	ldr	r0, [pc, #80]	; (80098f0 <USBH_HandleEnum+0x558>)
 80098a0:	f002 f822 	bl	800b8e8 <iprintf>
 80098a4:	200a      	movs	r0, #10
 80098a6:	f002 f837 	bl	800b918 <putchar>
        Status = USBH_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
      break;
 80098ae:	e00f      	b.n	80098d0 <USBH_HandleEnum+0x538>

    default:
      break;
 80098b0:	bf00      	nop
 80098b2:	e00e      	b.n	80098d2 <USBH_HandleEnum+0x53a>
      break;
 80098b4:	bf00      	nop
 80098b6:	e00c      	b.n	80098d2 <USBH_HandleEnum+0x53a>
      break;
 80098b8:	bf00      	nop
 80098ba:	e00a      	b.n	80098d2 <USBH_HandleEnum+0x53a>
      break;
 80098bc:	bf00      	nop
 80098be:	e008      	b.n	80098d2 <USBH_HandleEnum+0x53a>
      break;
 80098c0:	bf00      	nop
 80098c2:	e006      	b.n	80098d2 <USBH_HandleEnum+0x53a>
      break;
 80098c4:	bf00      	nop
 80098c6:	e004      	b.n	80098d2 <USBH_HandleEnum+0x53a>
      break;
 80098c8:	bf00      	nop
 80098ca:	e002      	b.n	80098d2 <USBH_HandleEnum+0x53a>
      break;
 80098cc:	bf00      	nop
 80098ce:	e000      	b.n	80098d2 <USBH_HandleEnum+0x53a>
      break;
 80098d0:	bf00      	nop
  }
  return Status;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	0800e1e8 	.word	0x0800e1e8
 80098e0:	0800e1fc 	.word	0x0800e1fc
 80098e4:	0800e210 	.word	0x0800e210
 80098e8:	0800e220 	.word	0x0800e220
 80098ec:	0800e230 	.word	0x0800e230
 80098f0:	0800e244 	.word	0x0800e244

080098f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f804 	bl	8009936 <USBH_HandleSof>
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b0b      	cmp	r3, #11
 8009946:	d10a      	bne.n	800995e <USBH_HandleSof+0x28>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800994e:	2b00      	cmp	r3, #0
 8009950:	d005      	beq.n	800995e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	4798      	blx	r3
  }
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009976:	bf00      	nop
}
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009992:	bf00      	nop
}
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f001 f852 	bl	800aa96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	791b      	ldrb	r3, [r3, #4]
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fe9f 	bl	800a73c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	795b      	ldrb	r3, [r3, #5]
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fe99 	bl	800a73c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009a26:	78fb      	ldrb	r3, [r7, #3]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a32:	2100      	movs	r1, #0
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f864 	bl	8009b02 <USBH_GetDescriptor>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a50:	78fa      	ldrb	r2, [r7, #3]
 8009a52:	b292      	uxth	r2, r2
 8009a54:	4619      	mov	r1, r3
 8009a56:	f000 f918 	bl	8009c8a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af02      	add	r7, sp, #8
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	331c      	adds	r3, #28
 8009a74:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009a76:	887b      	ldrh	r3, [r7, #2]
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a80:	2100      	movs	r1, #0
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f83d 	bl	8009b02 <USBH_GetDescriptor>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d107      	bne.n	8009aa2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009a92:	887b      	ldrh	r3, [r7, #2]
 8009a94:	461a      	mov	r2, r3
 8009a96:	68b9      	ldr	r1, [r7, #8]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f987 	bl	8009dac <USBH_ParseCfgDesc>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	607a      	str	r2, [r7, #4]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	460b      	mov	r3, r1
 8009aba:	72fb      	strb	r3, [r7, #11]
 8009abc:	4613      	mov	r3, r2
 8009abe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009ac0:	7afb      	ldrb	r3, [r7, #11]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009ac8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009ad0:	893b      	ldrh	r3, [r7, #8]
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 f812 	bl	8009b02 <USBH_GetDescriptor>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d107      	bne.n	8009af8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009aee:	893a      	ldrh	r2, [r7, #8]
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fb24 	bl	800a140 <USBH_ParseStringDesc>
  }

  return status;
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b084      	sub	sp, #16
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	607b      	str	r3, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	72fb      	strb	r3, [r7, #11]
 8009b10:	4613      	mov	r3, r2
 8009b12:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	789b      	ldrb	r3, [r3, #2]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d11c      	bne.n	8009b56 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009b1c:	7afb      	ldrb	r3, [r7, #11]
 8009b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2206      	movs	r2, #6
 8009b2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	893a      	ldrh	r2, [r7, #8]
 8009b32:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009b34:	893b      	ldrh	r3, [r7, #8]
 8009b36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b3e:	d104      	bne.n	8009b4a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f240 4209 	movw	r2, #1033	; 0x409
 8009b46:	829a      	strh	r2, [r3, #20]
 8009b48:	e002      	b.n	8009b50 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8b3a      	ldrh	r2, [r7, #24]
 8009b54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009b56:	8b3b      	ldrh	r3, [r7, #24]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 fb3d 	bl	800a1dc <USBH_CtlReq>
 8009b62:	4603      	mov	r3, r0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	789b      	ldrb	r3, [r3, #2]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d10f      	bne.n	8009ba0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2205      	movs	r2, #5
 8009b8a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fb19 	bl	800a1dc <USBH_CtlReq>
 8009baa:	4603      	mov	r3, r0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	789b      	ldrb	r3, [r3, #2]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d10e      	bne.n	8009be6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2209      	movs	r2, #9
 8009bd2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	887a      	ldrh	r2, [r7, #2]
 8009bd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009be6:	2200      	movs	r2, #0
 8009be8:	2100      	movs	r1, #0
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 faf6 	bl	800a1dc <USBH_CtlReq>
 8009bf0:	4603      	mov	r3, r0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	789b      	ldrb	r3, [r3, #2]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d10f      	bne.n	8009c2e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2203      	movs	r2, #3
 8009c18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2100      	movs	r1, #0
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fad2 	bl	800a1dc <USBH_CtlReq>
 8009c38:	4603      	mov	r3, r0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	789b      	ldrb	r3, [r3, #2]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d10f      	bne.n	8009c76 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009c68:	78fb      	ldrb	r3, [r7, #3]
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009c76:	2200      	movs	r2, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 faae 	bl	800a1dc <USBH_CtlReq>
 8009c80:	4603      	mov	r3, r0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b085      	sub	sp, #20
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60f8      	str	r0, [r7, #12]
 8009c92:	60b9      	str	r1, [r7, #8]
 8009c94:	4613      	mov	r3, r2
 8009c96:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	781a      	ldrb	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	785a      	ldrb	r2, [r3, #1]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	3302      	adds	r3, #2
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	3303      	adds	r3, #3
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	791a      	ldrb	r2, [r3, #4]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	795a      	ldrb	r2, [r3, #5]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	799a      	ldrb	r2, [r3, #6]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	79da      	ldrb	r2, [r3, #7]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	79db      	ldrb	r3, [r3, #7]
 8009ce8:	2b20      	cmp	r3, #32
 8009cea:	dc11      	bgt.n	8009d10 <USBH_ParseDevDesc+0x86>
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	db16      	blt.n	8009d1e <USBH_ParseDevDesc+0x94>
 8009cf0:	3b08      	subs	r3, #8
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bf14      	ite	ne
 8009d04:	2301      	movne	r3, #1
 8009d06:	2300      	moveq	r3, #0
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d102      	bne.n	8009d14 <USBH_ParseDevDesc+0x8a>
 8009d0e:	e006      	b.n	8009d1e <USBH_ParseDevDesc+0x94>
 8009d10:	2b40      	cmp	r3, #64	; 0x40
 8009d12:	d104      	bne.n	8009d1e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	79da      	ldrb	r2, [r3, #7]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	71da      	strb	r2, [r3, #7]
      break;
 8009d1c:	e003      	b.n	8009d26 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2240      	movs	r2, #64	; 0x40
 8009d22:	71da      	strb	r2, [r3, #7]
      break;
 8009d24:	bf00      	nop
  }

  if (length > 8U)
 8009d26:	88fb      	ldrh	r3, [r7, #6]
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d939      	bls.n	8009da0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	3308      	adds	r3, #8
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	3309      	adds	r3, #9
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	4313      	orrs	r3, r2
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	330a      	adds	r3, #10
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	330b      	adds	r3, #11
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	021b      	lsls	r3, r3, #8
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	330c      	adds	r3, #12
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	330d      	adds	r3, #13
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	021b      	lsls	r3, r3, #8
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	7b9a      	ldrb	r2, [r3, #14]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	7bda      	ldrb	r2, [r3, #15]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	7c1a      	ldrb	r2, [r3, #16]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	7c5a      	ldrb	r2, [r3, #17]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	745a      	strb	r2, [r3, #17]
  }
}
 8009da0:	bf00      	nop
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08c      	sub	sp, #48	; 0x30
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4613      	mov	r3, r2
 8009db8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009dc0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	781a      	ldrb	r2, [r3, #0]
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	785a      	ldrb	r2, [r3, #1]
 8009de8:	6a3b      	ldr	r3, [r7, #32]
 8009dea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	3302      	adds	r3, #2
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	3303      	adds	r3, #3
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	021b      	lsls	r3, r3, #8
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	4313      	orrs	r3, r2
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e08:	bf28      	it	cs
 8009e0a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	791a      	ldrb	r2, [r3, #4]
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	795a      	ldrb	r2, [r3, #5]
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	799a      	ldrb	r2, [r3, #6]
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	79da      	ldrb	r2, [r3, #7]
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	7a1a      	ldrb	r2, [r3, #8]
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b09      	cmp	r3, #9
 8009e42:	d002      	beq.n	8009e4a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	2209      	movs	r2, #9
 8009e48:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009e4a:	88fb      	ldrh	r3, [r7, #6]
 8009e4c:	2b09      	cmp	r3, #9
 8009e4e:	f240 809d 	bls.w	8009f8c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009e52:	2309      	movs	r3, #9
 8009e54:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009e56:	2300      	movs	r3, #0
 8009e58:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e5a:	e081      	b.n	8009f60 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e5c:	f107 0316 	add.w	r3, r7, #22
 8009e60:	4619      	mov	r1, r3
 8009e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e64:	f000 f99f 	bl	800a1a6 <USBH_GetNextDesc>
 8009e68:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	785b      	ldrb	r3, [r3, #1]
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d176      	bne.n	8009f60 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b09      	cmp	r3, #9
 8009e78:	d002      	beq.n	8009e80 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	2209      	movs	r2, #9
 8009e7e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e84:	221a      	movs	r2, #26
 8009e86:	fb02 f303 	mul.w	r3, r2, r3
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	6a3a      	ldr	r2, [r7, #32]
 8009e8e:	4413      	add	r3, r2
 8009e90:	3302      	adds	r3, #2
 8009e92:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e96:	69f8      	ldr	r0, [r7, #28]
 8009e98:	f000 f87e 	bl	8009f98 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ea6:	e043      	b.n	8009f30 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ea8:	f107 0316 	add.w	r3, r7, #22
 8009eac:	4619      	mov	r1, r3
 8009eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eb0:	f000 f979 	bl	800a1a6 <USBH_GetNextDesc>
 8009eb4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	785b      	ldrb	r3, [r3, #1]
 8009eba:	2b05      	cmp	r3, #5
 8009ebc:	d138      	bne.n	8009f30 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	795b      	ldrb	r3, [r3, #5]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d10f      	bne.n	8009ee6 <USBH_ParseCfgDesc+0x13a>
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	799b      	ldrb	r3, [r3, #6]
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d10b      	bne.n	8009ee6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	79db      	ldrb	r3, [r3, #7]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10f      	bne.n	8009ef6 <USBH_ParseCfgDesc+0x14a>
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	2b09      	cmp	r3, #9
 8009edc:	d00b      	beq.n	8009ef6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	2209      	movs	r2, #9
 8009ee2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ee4:	e007      	b.n	8009ef6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2b07      	cmp	r3, #7
 8009eec:	d004      	beq.n	8009ef8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef0:	2207      	movs	r2, #7
 8009ef2:	701a      	strb	r2, [r3, #0]
 8009ef4:	e000      	b.n	8009ef8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ef6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009efc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009f00:	3201      	adds	r2, #1
 8009f02:	00d2      	lsls	r2, r2, #3
 8009f04:	211a      	movs	r1, #26
 8009f06:	fb01 f303 	mul.w	r3, r1, r3
 8009f0a:	4413      	add	r3, r2
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	6a3a      	ldr	r2, [r7, #32]
 8009f10:	4413      	add	r3, r2
 8009f12:	3304      	adds	r3, #4
 8009f14:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f18:	69b9      	ldr	r1, [r7, #24]
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 f86b 	bl	8009ff6 <USBH_ParseEPDesc>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009f26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	791b      	ldrb	r3, [r3, #4]
 8009f34:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d204      	bcs.n	8009f46 <USBH_ParseCfgDesc+0x19a>
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	885a      	ldrh	r2, [r3, #2]
 8009f40:	8afb      	ldrh	r3, [r7, #22]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d8b0      	bhi.n	8009ea8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	791b      	ldrb	r3, [r3, #4]
 8009f4a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d201      	bcs.n	8009f56 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009f52:	2303      	movs	r3, #3
 8009f54:	e01c      	b.n	8009f90 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d805      	bhi.n	8009f74 <USBH_ParseCfgDesc+0x1c8>
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	885a      	ldrh	r2, [r3, #2]
 8009f6c:	8afb      	ldrh	r3, [r7, #22]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	f63f af74 	bhi.w	8009e5c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	791b      	ldrb	r3, [r3, #4]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	bf28      	it	cs
 8009f7c:	2302      	movcs	r3, #2
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d201      	bcs.n	8009f8c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e001      	b.n	8009f90 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3730      	adds	r7, #48	; 0x30
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781a      	ldrb	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	785a      	ldrb	r2, [r3, #1]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	789a      	ldrb	r2, [r3, #2]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	78da      	ldrb	r2, [r3, #3]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	791a      	ldrb	r2, [r3, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	795a      	ldrb	r2, [r3, #5]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	799a      	ldrb	r2, [r3, #6]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	79da      	ldrb	r2, [r3, #7]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	7a1a      	ldrb	r2, [r3, #8]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	721a      	strb	r2, [r3, #8]
}
 8009fea:	bf00      	nop
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b087      	sub	sp, #28
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	60f8      	str	r0, [r7, #12]
 8009ffe:	60b9      	str	r1, [r7, #8]
 800a000:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	785a      	ldrb	r2, [r3, #1]
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	789a      	ldrb	r2, [r3, #2]
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	78da      	ldrb	r2, [r3, #3]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3304      	adds	r3, #4
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3305      	adds	r3, #5
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	b29b      	uxth	r3, r3
 800a036:	021b      	lsls	r3, r3, #8
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4313      	orrs	r3, r2
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	799a      	ldrb	r2, [r3, #6]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	889b      	ldrh	r3, [r3, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d102      	bne.n	800a058 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a052:	2303      	movs	r3, #3
 800a054:	75fb      	strb	r3, [r7, #23]
 800a056:	e033      	b.n	800a0c0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	889b      	ldrh	r3, [r3, #4]
 800a05c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a060:	f023 0307 	bic.w	r3, r3, #7
 800a064:	b29a      	uxth	r2, r3
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	889b      	ldrh	r3, [r3, #4]
 800a06e:	b21a      	sxth	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3304      	adds	r3, #4
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	b299      	uxth	r1, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3305      	adds	r3, #5
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	021b      	lsls	r3, r3, #8
 800a082:	b29b      	uxth	r3, r3
 800a084:	430b      	orrs	r3, r1
 800a086:	b29b      	uxth	r3, r3
 800a088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d110      	bne.n	800a0b2 <USBH_ParseEPDesc+0xbc>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3304      	adds	r3, #4
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	b299      	uxth	r1, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3305      	adds	r3, #5
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	021b      	lsls	r3, r3, #8
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	b21b      	sxth	r3, r3
 800a0aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0ae:	b21b      	sxth	r3, r3
 800a0b0:	e001      	b.n	800a0b6 <USBH_ParseEPDesc+0xc0>
 800a0b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	b21b      	sxth	r3, r3
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d116      	bne.n	800a0f8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	78db      	ldrb	r3, [r3, #3]
 800a0ce:	f003 0303 	and.w	r3, r3, #3
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d005      	beq.n	800a0e2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	78db      	ldrb	r3, [r3, #3]
 800a0da:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d127      	bne.n	800a132 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	799b      	ldrb	r3, [r3, #6]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d003      	beq.n	800a0f2 <USBH_ParseEPDesc+0xfc>
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	799b      	ldrb	r3, [r3, #6]
 800a0ee:	2b10      	cmp	r3, #16
 800a0f0:	d91f      	bls.n	800a132 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	75fb      	strb	r3, [r7, #23]
 800a0f6:	e01c      	b.n	800a132 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	78db      	ldrb	r3, [r3, #3]
 800a0fc:	f003 0303 	and.w	r3, r3, #3
 800a100:	2b01      	cmp	r3, #1
 800a102:	d10a      	bne.n	800a11a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	799b      	ldrb	r3, [r3, #6]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <USBH_ParseEPDesc+0x11e>
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	799b      	ldrb	r3, [r3, #6]
 800a110:	2b10      	cmp	r3, #16
 800a112:	d90e      	bls.n	800a132 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a114:	2303      	movs	r3, #3
 800a116:	75fb      	strb	r3, [r7, #23]
 800a118:	e00b      	b.n	800a132 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	78db      	ldrb	r3, [r3, #3]
 800a11e:	f003 0303 	and.w	r3, r3, #3
 800a122:	2b03      	cmp	r3, #3
 800a124:	d105      	bne.n	800a132 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	799b      	ldrb	r3, [r3, #6]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a12e:	2303      	movs	r3, #3
 800a130:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a132:	7dfb      	ldrb	r3, [r7, #23]
}
 800a134:	4618      	mov	r0, r3
 800a136:	371c      	adds	r7, #28
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	4613      	mov	r3, r2
 800a14c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3301      	adds	r3, #1
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b03      	cmp	r3, #3
 800a156:	d120      	bne.n	800a19a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	1e9a      	subs	r2, r3, #2
 800a15e:	88fb      	ldrh	r3, [r7, #6]
 800a160:	4293      	cmp	r3, r2
 800a162:	bf28      	it	cs
 800a164:	4613      	movcs	r3, r2
 800a166:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	3302      	adds	r3, #2
 800a16c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a16e:	2300      	movs	r3, #0
 800a170:	82fb      	strh	r3, [r7, #22]
 800a172:	e00b      	b.n	800a18c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a174:	8afb      	ldrh	r3, [r7, #22]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4413      	add	r3, r2
 800a17a:	781a      	ldrb	r2, [r3, #0]
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	3301      	adds	r3, #1
 800a184:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a186:	8afb      	ldrh	r3, [r7, #22]
 800a188:	3302      	adds	r3, #2
 800a18a:	82fb      	strh	r3, [r7, #22]
 800a18c:	8afa      	ldrh	r2, [r7, #22]
 800a18e:	8abb      	ldrh	r3, [r7, #20]
 800a190:	429a      	cmp	r2, r3
 800a192:	d3ef      	bcc.n	800a174 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]
  }
}
 800a19a:	bf00      	nop
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b085      	sub	sp, #20
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	881a      	ldrh	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	4413      	add	r3, r2
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	789b      	ldrb	r3, [r3, #2]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d002      	beq.n	800a1fc <USBH_CtlReq+0x20>
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d00f      	beq.n	800a21a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a1fa:	e027      	b.n	800a24c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	88fa      	ldrh	r2, [r7, #6]
 800a206:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2201      	movs	r2, #1
 800a20c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2202      	movs	r2, #2
 800a212:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a214:	2301      	movs	r3, #1
 800a216:	75fb      	strb	r3, [r7, #23]
      break;
 800a218:	e018      	b.n	800a24c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 f81c 	bl	800a258 <USBH_HandleControl>
 800a220:	4603      	mov	r3, r0
 800a222:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <USBH_CtlReq+0x54>
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d106      	bne.n	800a23e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2201      	movs	r2, #1
 800a234:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	761a      	strb	r2, [r3, #24]
      break;
 800a23c:	e005      	b.n	800a24a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
 800a240:	2b02      	cmp	r3, #2
 800a242:	d102      	bne.n	800a24a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2201      	movs	r2, #1
 800a248:	709a      	strb	r2, [r3, #2]
      break;
 800a24a:	bf00      	nop
  }
  return status;
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3718      	adds	r7, #24
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af02      	add	r7, sp, #8
 800a25e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a260:	2301      	movs	r3, #1
 800a262:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a264:	2300      	movs	r3, #0
 800a266:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	7e1b      	ldrb	r3, [r3, #24]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	2b0a      	cmp	r3, #10
 800a270:	f200 815f 	bhi.w	800a532 <USBH_HandleControl+0x2da>
 800a274:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <USBH_HandleControl+0x24>)
 800a276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27a:	bf00      	nop
 800a27c:	0800a2a9 	.word	0x0800a2a9
 800a280:	0800a2c3 	.word	0x0800a2c3
 800a284:	0800a32d 	.word	0x0800a32d
 800a288:	0800a353 	.word	0x0800a353
 800a28c:	0800a38b 	.word	0x0800a38b
 800a290:	0800a3b5 	.word	0x0800a3b5
 800a294:	0800a407 	.word	0x0800a407
 800a298:	0800a429 	.word	0x0800a429
 800a29c:	0800a465 	.word	0x0800a465
 800a2a0:	0800a48b 	.word	0x0800a48b
 800a2a4:	0800a4c9 	.word	0x0800a4c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f103 0110 	add.w	r1, r3, #16
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	795b      	ldrb	r3, [r3, #5]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f951 	bl	800a55c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2202      	movs	r2, #2
 800a2be:	761a      	strb	r2, [r3, #24]
      break;
 800a2c0:	e142      	b.n	800a548 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	795b      	ldrb	r3, [r3, #5]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fcd3 	bl	800ac74 <USBH_LL_GetURBState>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a2d2:	7bbb      	ldrb	r3, [r7, #14]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d11e      	bne.n	800a316 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	7c1b      	ldrb	r3, [r3, #16]
 800a2dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	8adb      	ldrh	r3, [r3, #22]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00a      	beq.n	800a300 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a2ea:	7b7b      	ldrb	r3, [r7, #13]
 800a2ec:	2b80      	cmp	r3, #128	; 0x80
 800a2ee:	d103      	bne.n	800a2f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2203      	movs	r2, #3
 800a2f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2f6:	e11e      	b.n	800a536 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2205      	movs	r2, #5
 800a2fc:	761a      	strb	r2, [r3, #24]
      break;
 800a2fe:	e11a      	b.n	800a536 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800a300:	7b7b      	ldrb	r3, [r7, #13]
 800a302:	2b80      	cmp	r3, #128	; 0x80
 800a304:	d103      	bne.n	800a30e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2209      	movs	r2, #9
 800a30a:	761a      	strb	r2, [r3, #24]
      break;
 800a30c:	e113      	b.n	800a536 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2207      	movs	r2, #7
 800a312:	761a      	strb	r2, [r3, #24]
      break;
 800a314:	e10f      	b.n	800a536 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	2b04      	cmp	r3, #4
 800a31a:	d003      	beq.n	800a324 <USBH_HandleControl+0xcc>
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	f040 8109 	bne.w	800a536 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	220b      	movs	r2, #11
 800a328:	761a      	strb	r2, [r3, #24]
      break;
 800a32a:	e104      	b.n	800a536 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a332:	b29a      	uxth	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6899      	ldr	r1, [r3, #8]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	899a      	ldrh	r2, [r3, #12]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	791b      	ldrb	r3, [r3, #4]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f948 	bl	800a5da <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2204      	movs	r2, #4
 800a34e:	761a      	strb	r2, [r3, #24]
      break;
 800a350:	e0fa      	b.n	800a548 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	791b      	ldrb	r3, [r3, #4]
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fc8b 	bl	800ac74 <USBH_LL_GetURBState>
 800a35e:	4603      	mov	r3, r0
 800a360:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d102      	bne.n	800a36e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2209      	movs	r2, #9
 800a36c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a36e:	7bbb      	ldrb	r3, [r7, #14]
 800a370:	2b05      	cmp	r3, #5
 800a372:	d102      	bne.n	800a37a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a374:	2303      	movs	r3, #3
 800a376:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a378:	e0df      	b.n	800a53a <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800a37a:	7bbb      	ldrb	r3, [r7, #14]
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	f040 80dc 	bne.w	800a53a <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	220b      	movs	r2, #11
 800a386:	761a      	strb	r2, [r3, #24]
      break;
 800a388:	e0d7      	b.n	800a53a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6899      	ldr	r1, [r3, #8]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	899a      	ldrh	r2, [r3, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	795b      	ldrb	r3, [r3, #5]
 800a396:	2001      	movs	r0, #1
 800a398:	9000      	str	r0, [sp, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f8f8 	bl	800a590 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2206      	movs	r2, #6
 800a3b0:	761a      	strb	r2, [r3, #24]
      break;
 800a3b2:	e0c9      	b.n	800a548 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	795b      	ldrb	r3, [r3, #5]
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fc5a 	bl	800ac74 <USBH_LL_GetURBState>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a3c4:	7bbb      	ldrb	r3, [r7, #14]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d103      	bne.n	800a3d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2207      	movs	r2, #7
 800a3ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3d0:	e0b5      	b.n	800a53e <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	2b05      	cmp	r3, #5
 800a3d6:	d105      	bne.n	800a3e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	220c      	movs	r2, #12
 800a3dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e2:	e0ac      	b.n	800a53e <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d103      	bne.n	800a3f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2205      	movs	r2, #5
 800a3ee:	761a      	strb	r2, [r3, #24]
      break;
 800a3f0:	e0a5      	b.n	800a53e <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800a3f2:	7bbb      	ldrb	r3, [r7, #14]
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	f040 80a2 	bne.w	800a53e <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	220b      	movs	r2, #11
 800a3fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a400:	2302      	movs	r3, #2
 800a402:	73fb      	strb	r3, [r7, #15]
      break;
 800a404:	e09b      	b.n	800a53e <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	791b      	ldrb	r3, [r3, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	2100      	movs	r1, #0
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f8e3 	bl	800a5da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2208      	movs	r2, #8
 800a424:	761a      	strb	r2, [r3, #24]

      break;
 800a426:	e08f      	b.n	800a548 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	791b      	ldrb	r3, [r3, #4]
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fc20 	bl	800ac74 <USBH_LL_GetURBState>
 800a434:	4603      	mov	r3, r0
 800a436:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a438:	7bbb      	ldrb	r3, [r7, #14]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d105      	bne.n	800a44a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	220d      	movs	r2, #13
 800a442:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a448:	e07b      	b.n	800a542 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d103      	bne.n	800a458 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	220b      	movs	r2, #11
 800a454:	761a      	strb	r2, [r3, #24]
      break;
 800a456:	e074      	b.n	800a542 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800a458:	7bbb      	ldrb	r3, [r7, #14]
 800a45a:	2b05      	cmp	r3, #5
 800a45c:	d171      	bne.n	800a542 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800a45e:	2303      	movs	r3, #3
 800a460:	73fb      	strb	r3, [r7, #15]
      break;
 800a462:	e06e      	b.n	800a542 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	795b      	ldrb	r3, [r3, #5]
 800a468:	2201      	movs	r2, #1
 800a46a:	9200      	str	r2, [sp, #0]
 800a46c:	2200      	movs	r2, #0
 800a46e:	2100      	movs	r1, #0
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f88d 	bl	800a590 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	220a      	movs	r2, #10
 800a486:	761a      	strb	r2, [r3, #24]
      break;
 800a488:	e05e      	b.n	800a548 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	795b      	ldrb	r3, [r3, #5]
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fbef 	bl	800ac74 <USBH_LL_GetURBState>
 800a496:	4603      	mov	r3, r0
 800a498:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d105      	bne.n	800a4ac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	220d      	movs	r2, #13
 800a4a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4aa:	e04c      	b.n	800a546 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d103      	bne.n	800a4ba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2209      	movs	r2, #9
 800a4b6:	761a      	strb	r2, [r3, #24]
      break;
 800a4b8:	e045      	b.n	800a546 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800a4ba:	7bbb      	ldrb	r3, [r7, #14]
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	d142      	bne.n	800a546 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	220b      	movs	r2, #11
 800a4c4:	761a      	strb	r2, [r3, #24]
      break;
 800a4c6:	e03e      	b.n	800a546 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	7e5b      	ldrb	r3, [r3, #25]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	765a      	strb	r2, [r3, #25]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	7e5b      	ldrb	r3, [r3, #25]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d806      	bhi.n	800a4ea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a4e8:	e02e      	b.n	800a548 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4f0:	2106      	movs	r1, #6
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800a4fc:	4815      	ldr	r0, [pc, #84]	; (800a554 <USBH_HandleControl+0x2fc>)
 800a4fe:	f001 f9f3 	bl	800b8e8 <iprintf>
 800a502:	4815      	ldr	r0, [pc, #84]	; (800a558 <USBH_HandleControl+0x300>)
 800a504:	f001 f9f0 	bl	800b8e8 <iprintf>
 800a508:	200a      	movs	r0, #10
 800a50a:	f001 fa05 	bl	800b918 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	795b      	ldrb	r3, [r3, #5]
 800a512:	4619      	mov	r1, r3
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f911 	bl	800a73c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	791b      	ldrb	r3, [r3, #4]
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f90b 	bl	800a73c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a52c:	2302      	movs	r3, #2
 800a52e:	73fb      	strb	r3, [r7, #15]
      break;
 800a530:	e00a      	b.n	800a548 <USBH_HandleControl+0x2f0>

    default:
      break;
 800a532:	bf00      	nop
 800a534:	e008      	b.n	800a548 <USBH_HandleControl+0x2f0>
      break;
 800a536:	bf00      	nop
 800a538:	e006      	b.n	800a548 <USBH_HandleControl+0x2f0>
      break;
 800a53a:	bf00      	nop
 800a53c:	e004      	b.n	800a548 <USBH_HandleControl+0x2f0>
      break;
 800a53e:	bf00      	nop
 800a540:	e002      	b.n	800a548 <USBH_HandleControl+0x2f0>
      break;
 800a542:	bf00      	nop
 800a544:	e000      	b.n	800a548 <USBH_HandleControl+0x2f0>
      break;
 800a546:	bf00      	nop
  }

  return status;
 800a548:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	0800e258 	.word	0x0800e258
 800a558:	0800e260 	.word	0x0800e260

0800a55c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af04      	add	r7, sp, #16
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	4613      	mov	r3, r2
 800a568:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a56a:	79f9      	ldrb	r1, [r7, #7]
 800a56c:	2300      	movs	r3, #0
 800a56e:	9303      	str	r3, [sp, #12]
 800a570:	2308      	movs	r3, #8
 800a572:	9302      	str	r3, [sp, #8]
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	9301      	str	r3, [sp, #4]
 800a578:	2300      	movs	r3, #0
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	2300      	movs	r3, #0
 800a57e:	2200      	movs	r2, #0
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f000 fb46 	bl	800ac12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af04      	add	r7, sp, #16
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	4611      	mov	r1, r2
 800a59c:	461a      	mov	r2, r3
 800a59e:	460b      	mov	r3, r1
 800a5a0:	80fb      	strh	r3, [r7, #6]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5b4:	7979      	ldrb	r1, [r7, #5]
 800a5b6:	7e3b      	ldrb	r3, [r7, #24]
 800a5b8:	9303      	str	r3, [sp, #12]
 800a5ba:	88fb      	ldrh	r3, [r7, #6]
 800a5bc:	9302      	str	r3, [sp, #8]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f000 fb21 	bl	800ac12 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b088      	sub	sp, #32
 800a5de:	af04      	add	r7, sp, #16
 800a5e0:	60f8      	str	r0, [r7, #12]
 800a5e2:	60b9      	str	r1, [r7, #8]
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	80fb      	strh	r3, [r7, #6]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5f0:	7979      	ldrb	r1, [r7, #5]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	9303      	str	r3, [sp, #12]
 800a5f6:	88fb      	ldrh	r3, [r7, #6]
 800a5f8:	9302      	str	r3, [sp, #8]
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	2301      	movs	r3, #1
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	2300      	movs	r3, #0
 800a604:	2201      	movs	r2, #1
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f000 fb03 	bl	800ac12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a60c:	2300      	movs	r3, #0

}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b088      	sub	sp, #32
 800a61a:	af04      	add	r7, sp, #16
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	4611      	mov	r1, r2
 800a622:	461a      	mov	r2, r3
 800a624:	460b      	mov	r3, r1
 800a626:	80fb      	strh	r3, [r7, #6]
 800a628:	4613      	mov	r3, r2
 800a62a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a636:	2300      	movs	r3, #0
 800a638:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a63a:	7979      	ldrb	r1, [r7, #5]
 800a63c:	7e3b      	ldrb	r3, [r7, #24]
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	88fb      	ldrh	r3, [r7, #6]
 800a642:	9302      	str	r3, [sp, #8]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	2301      	movs	r3, #1
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	2302      	movs	r3, #2
 800a64e:	2200      	movs	r2, #0
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 fade 	bl	800ac12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af04      	add	r7, sp, #16
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4611      	mov	r1, r2
 800a66c:	461a      	mov	r2, r3
 800a66e:	460b      	mov	r3, r1
 800a670:	80fb      	strh	r3, [r7, #6]
 800a672:	4613      	mov	r3, r2
 800a674:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a676:	7979      	ldrb	r1, [r7, #5]
 800a678:	2300      	movs	r3, #0
 800a67a:	9303      	str	r3, [sp, #12]
 800a67c:	88fb      	ldrh	r3, [r7, #6]
 800a67e:	9302      	str	r3, [sp, #8]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	2301      	movs	r3, #1
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	2302      	movs	r3, #2
 800a68a:	2201      	movs	r2, #1
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 fac0 	bl	800ac12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af04      	add	r7, sp, #16
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	4608      	mov	r0, r1
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	70fb      	strb	r3, [r7, #3]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	70bb      	strb	r3, [r7, #2]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a6b6:	7878      	ldrb	r0, [r7, #1]
 800a6b8:	78ba      	ldrb	r2, [r7, #2]
 800a6ba:	78f9      	ldrb	r1, [r7, #3]
 800a6bc:	8b3b      	ldrh	r3, [r7, #24]
 800a6be:	9302      	str	r3, [sp, #8]
 800a6c0:	7d3b      	ldrb	r3, [r7, #20]
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	7c3b      	ldrb	r3, [r7, #16]
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fa53 	bl	800ab76 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b082      	sub	sp, #8
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a6e6:	78fb      	ldrb	r3, [r7, #3]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fa72 	bl	800abd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	460b      	mov	r3, r1
 800a704:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f836 	bl	800a778 <USBH_GetFreePipe>
 800a70c:	4603      	mov	r3, r0
 800a70e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a710:	89fb      	ldrh	r3, [r7, #14]
 800a712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a716:	4293      	cmp	r3, r2
 800a718:	d00a      	beq.n	800a730 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a71a:	78fa      	ldrb	r2, [r7, #3]
 800a71c:	89fb      	ldrh	r3, [r7, #14]
 800a71e:	f003 030f 	and.w	r3, r3, #15
 800a722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	33e0      	adds	r3, #224	; 0xe0
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a730:	89fb      	ldrh	r3, [r7, #14]
 800a732:	b2db      	uxtb	r3, r3
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	2b0f      	cmp	r3, #15
 800a74c:	d80d      	bhi.n	800a76a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a74e:	78fb      	ldrb	r3, [r7, #3]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	33e0      	adds	r3, #224	; 0xe0
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	78fb      	ldrb	r3, [r7, #3]
 800a75c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a760:	6879      	ldr	r1, [r7, #4]
 800a762:	33e0      	adds	r3, #224	; 0xe0
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	440b      	add	r3, r1
 800a768:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a780:	2300      	movs	r3, #0
 800a782:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
 800a788:	e00f      	b.n	800a7aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	33e0      	adds	r3, #224	; 0xe0
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d102      	bne.n	800a7a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	e007      	b.n	800a7b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	73fb      	strb	r3, [r7, #15]
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	2b0f      	cmp	r3, #15
 800a7ae:	d9ec      	bls.n	800a78a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a7b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	490e      	ldr	r1, [pc, #56]	; (800a800 <MX_USB_HOST_Init+0x40>)
 800a7c8:	480e      	ldr	r0, [pc, #56]	; (800a804 <MX_USB_HOST_Init+0x44>)
 800a7ca:	f7fe f9d7 	bl	8008b7c <USBH_Init>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a7d4:	f7f8 fba0 	bl	8002f18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a7d8:	490b      	ldr	r1, [pc, #44]	; (800a808 <MX_USB_HOST_Init+0x48>)
 800a7da:	480a      	ldr	r0, [pc, #40]	; (800a804 <MX_USB_HOST_Init+0x44>)
 800a7dc:	f7fe fa6a 	bl	8008cb4 <USBH_RegisterClass>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a7e6:	f7f8 fb97 	bl	8002f18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a7ea:	4806      	ldr	r0, [pc, #24]	; (800a804 <MX_USB_HOST_Init+0x44>)
 800a7ec:	f7fe fb50 	bl	8008e90 <USBH_Start>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a7f6:	f7f8 fb8f 	bl	8002f18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a7fa:	bf00      	nop
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	0800a821 	.word	0x0800a821
 800a804:	2000050c 	.word	0x2000050c
 800a808:	20000024 	.word	0x20000024

0800a80c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a810:	4802      	ldr	r0, [pc, #8]	; (800a81c <MX_USB_HOST_Process+0x10>)
 800a812:	f7fe fb4d 	bl	8008eb0 <USBH_Process>
}
 800a816:	bf00      	nop
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	2000050c 	.word	0x2000050c

0800a820 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	3b01      	subs	r3, #1
 800a830:	2b04      	cmp	r3, #4
 800a832:	d819      	bhi.n	800a868 <USBH_UserProcess+0x48>
 800a834:	a201      	add	r2, pc, #4	; (adr r2, 800a83c <USBH_UserProcess+0x1c>)
 800a836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83a:	bf00      	nop
 800a83c:	0800a869 	.word	0x0800a869
 800a840:	0800a859 	.word	0x0800a859
 800a844:	0800a869 	.word	0x0800a869
 800a848:	0800a861 	.word	0x0800a861
 800a84c:	0800a851 	.word	0x0800a851
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a850:	4b09      	ldr	r3, [pc, #36]	; (800a878 <USBH_UserProcess+0x58>)
 800a852:	2203      	movs	r2, #3
 800a854:	701a      	strb	r2, [r3, #0]
  break;
 800a856:	e008      	b.n	800a86a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a858:	4b07      	ldr	r3, [pc, #28]	; (800a878 <USBH_UserProcess+0x58>)
 800a85a:	2202      	movs	r2, #2
 800a85c:	701a      	strb	r2, [r3, #0]
  break;
 800a85e:	e004      	b.n	800a86a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a860:	4b05      	ldr	r3, [pc, #20]	; (800a878 <USBH_UserProcess+0x58>)
 800a862:	2201      	movs	r2, #1
 800a864:	701a      	strb	r2, [r3, #0]
  break;
 800a866:	e000      	b.n	800a86a <USBH_UserProcess+0x4a>

  default:
  break;
 800a868:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	200008e4 	.word	0x200008e4

0800a87c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08a      	sub	sp, #40	; 0x28
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a884:	f107 0314 	add.w	r3, r7, #20
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	605a      	str	r2, [r3, #4]
 800a88e:	609a      	str	r2, [r3, #8]
 800a890:	60da      	str	r2, [r3, #12]
 800a892:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a89c:	d147      	bne.n	800a92e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a89e:	2300      	movs	r3, #0
 800a8a0:	613b      	str	r3, [r7, #16]
 800a8a2:	4b25      	ldr	r3, [pc, #148]	; (800a938 <HAL_HCD_MspInit+0xbc>)
 800a8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a6:	4a24      	ldr	r2, [pc, #144]	; (800a938 <HAL_HCD_MspInit+0xbc>)
 800a8a8:	f043 0301 	orr.w	r3, r3, #1
 800a8ac:	6313      	str	r3, [r2, #48]	; 0x30
 800a8ae:	4b22      	ldr	r3, [pc, #136]	; (800a938 <HAL_HCD_MspInit+0xbc>)
 800a8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	613b      	str	r3, [r7, #16]
 800a8b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a8ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a8c8:	f107 0314 	add.w	r3, r7, #20
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	481b      	ldr	r0, [pc, #108]	; (800a93c <HAL_HCD_MspInit+0xc0>)
 800a8d0:	f7f9 f87a 	bl	80039c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a8d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a8d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8da:	2302      	movs	r3, #2
 800a8dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8e6:	230a      	movs	r3, #10
 800a8e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8ea:	f107 0314 	add.w	r3, r7, #20
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4812      	ldr	r0, [pc, #72]	; (800a93c <HAL_HCD_MspInit+0xc0>)
 800a8f2:	f7f9 f869 	bl	80039c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8f6:	4b10      	ldr	r3, [pc, #64]	; (800a938 <HAL_HCD_MspInit+0xbc>)
 800a8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8fa:	4a0f      	ldr	r2, [pc, #60]	; (800a938 <HAL_HCD_MspInit+0xbc>)
 800a8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a900:	6353      	str	r3, [r2, #52]	; 0x34
 800a902:	2300      	movs	r3, #0
 800a904:	60fb      	str	r3, [r7, #12]
 800a906:	4b0c      	ldr	r3, [pc, #48]	; (800a938 <HAL_HCD_MspInit+0xbc>)
 800a908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90a:	4a0b      	ldr	r2, [pc, #44]	; (800a938 <HAL_HCD_MspInit+0xbc>)
 800a90c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a910:	6453      	str	r3, [r2, #68]	; 0x44
 800a912:	4b09      	ldr	r3, [pc, #36]	; (800a938 <HAL_HCD_MspInit+0xbc>)
 800a914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a91e:	2200      	movs	r2, #0
 800a920:	2100      	movs	r1, #0
 800a922:	2043      	movs	r0, #67	; 0x43
 800a924:	f7f9 f819 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a928:	2043      	movs	r0, #67	; 0x43
 800a92a:	f7f9 f832 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a92e:	bf00      	nop
 800a930:	3728      	adds	r7, #40	; 0x28
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	40023800 	.word	0x40023800
 800a93c:	40020000 	.word	0x40020000

0800a940 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe ffdf 	bl	8009912 <USBH_LL_IncTimer>
}
 800a954:	bf00      	nop
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7ff f817 	bl	800999e <USBH_LL_Connect>
}
 800a970:	bf00      	nop
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff f820 	bl	80099cc <USBH_LL_Disconnect>
}
 800a98c:	bf00      	nop
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	460b      	mov	r3, r1
 800a99e:	70fb      	strb	r3, [r7, #3]
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe ffd1 	bl	8009966 <USBH_LL_PortEnabled>
}
 800a9c4:	bf00      	nop
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe ffd1 	bl	8009982 <USBH_LL_PortDisabled>
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d12a      	bne.n	800aa50 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a9fa:	4a18      	ldr	r2, [pc, #96]	; (800aa5c <USBH_LL_Init+0x74>)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a15      	ldr	r2, [pc, #84]	; (800aa5c <USBH_LL_Init+0x74>)
 800aa06:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa0a:	4b14      	ldr	r3, [pc, #80]	; (800aa5c <USBH_LL_Init+0x74>)
 800aa0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aa10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <USBH_LL_Init+0x74>)
 800aa14:	2208      	movs	r2, #8
 800aa16:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aa18:	4b10      	ldr	r3, [pc, #64]	; (800aa5c <USBH_LL_Init+0x74>)
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <USBH_LL_Init+0x74>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aa24:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <USBH_LL_Init+0x74>)
 800aa26:	2202      	movs	r2, #2
 800aa28:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aa2a:	4b0c      	ldr	r3, [pc, #48]	; (800aa5c <USBH_LL_Init+0x74>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aa30:	480a      	ldr	r0, [pc, #40]	; (800aa5c <USBH_LL_Init+0x74>)
 800aa32:	f7f9 f97e 	bl	8003d32 <HAL_HCD_Init>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aa3c:	f7f8 fa6c 	bl	8002f18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aa40:	4806      	ldr	r0, [pc, #24]	; (800aa5c <USBH_LL_Init+0x74>)
 800aa42:	f7f9 fd62 	bl	800450a <HAL_HCD_GetCurrentFrame>
 800aa46:	4603      	mov	r3, r0
 800aa48:	4619      	mov	r1, r3
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7fe ff52 	bl	80098f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	200008e8 	.word	0x200008e8

0800aa60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7f9 fcd1 	bl	800441e <HAL_HCD_Start>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 f95c 	bl	800ad40 <USBH_Get_USB_Status>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7f9 fcd9 	bl	8004464 <HAL_HCD_Stop>
 800aab2:	4603      	mov	r3, r0
 800aab4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f000 f941 	bl	800ad40 <USBH_Get_USB_Status>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aad4:	2301      	movs	r3, #1
 800aad6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aade:	4618      	mov	r0, r3
 800aae0:	f7f9 fd21 	bl	8004526 <HAL_HCD_GetCurrentSpeed>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d00c      	beq.n	800ab04 <USBH_LL_GetSpeed+0x38>
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d80d      	bhi.n	800ab0a <USBH_LL_GetSpeed+0x3e>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <USBH_LL_GetSpeed+0x2c>
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d003      	beq.n	800aafe <USBH_LL_GetSpeed+0x32>
 800aaf6:	e008      	b.n	800ab0a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]
    break;
 800aafc:	e008      	b.n	800ab10 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800aafe:	2301      	movs	r3, #1
 800ab00:	73fb      	strb	r3, [r7, #15]
    break;
 800ab02:	e005      	b.n	800ab10 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ab04:	2302      	movs	r3, #2
 800ab06:	73fb      	strb	r3, [r7, #15]
    break;
 800ab08:	e002      	b.n	800ab10 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab0e:	bf00      	nop
  }
  return  speed;
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7f9 fcb4 	bl	800449e <HAL_HCD_ResetPort>
 800ab36:	4603      	mov	r3, r0
 800ab38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 f8ff 	bl	800ad40 <USBH_Get_USB_Status>
 800ab42:	4603      	mov	r3, r0
 800ab44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab62:	78fa      	ldrb	r2, [r7, #3]
 800ab64:	4611      	mov	r1, r2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7f9 fcbb 	bl	80044e2 <HAL_HCD_HC_GetXferCount>
 800ab6c:	4603      	mov	r3, r0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab76:	b590      	push	{r4, r7, lr}
 800ab78:	b089      	sub	sp, #36	; 0x24
 800ab7a:	af04      	add	r7, sp, #16
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	4608      	mov	r0, r1
 800ab80:	4611      	mov	r1, r2
 800ab82:	461a      	mov	r2, r3
 800ab84:	4603      	mov	r3, r0
 800ab86:	70fb      	strb	r3, [r7, #3]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70bb      	strb	r3, [r7, #2]
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab90:	2300      	movs	r3, #0
 800ab92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ab9e:	787c      	ldrb	r4, [r7, #1]
 800aba0:	78ba      	ldrb	r2, [r7, #2]
 800aba2:	78f9      	ldrb	r1, [r7, #3]
 800aba4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aba6:	9302      	str	r3, [sp, #8]
 800aba8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4623      	mov	r3, r4
 800abb6:	f7f9 f91e 	bl	8003df6 <HAL_HCD_HC_Init>
 800abba:	4603      	mov	r3, r0
 800abbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 f8bd 	bl	800ad40 <USBH_Get_USB_Status>
 800abc6:	4603      	mov	r3, r0
 800abc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abca:	7bbb      	ldrb	r3, [r7, #14]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3714      	adds	r7, #20
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd90      	pop	{r4, r7, pc}

0800abd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abee:	78fa      	ldrb	r2, [r7, #3]
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7f9 f98e 	bl	8003f14 <HAL_HCD_HC_Halt>
 800abf8:	4603      	mov	r3, r0
 800abfa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 f89e 	bl	800ad40 <USBH_Get_USB_Status>
 800ac04:	4603      	mov	r3, r0
 800ac06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ac12:	b590      	push	{r4, r7, lr}
 800ac14:	b089      	sub	sp, #36	; 0x24
 800ac16:	af04      	add	r7, sp, #16
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	4608      	mov	r0, r1
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	461a      	mov	r2, r3
 800ac20:	4603      	mov	r3, r0
 800ac22:	70fb      	strb	r3, [r7, #3]
 800ac24:	460b      	mov	r3, r1
 800ac26:	70bb      	strb	r3, [r7, #2]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ac3a:	787c      	ldrb	r4, [r7, #1]
 800ac3c:	78ba      	ldrb	r2, [r7, #2]
 800ac3e:	78f9      	ldrb	r1, [r7, #3]
 800ac40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ac44:	9303      	str	r3, [sp, #12]
 800ac46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac48:	9302      	str	r3, [sp, #8]
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	9301      	str	r3, [sp, #4]
 800ac4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	4623      	mov	r3, r4
 800ac56:	f7f9 f981 	bl	8003f5c <HAL_HCD_HC_SubmitRequest>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 f86d 	bl	800ad40 <USBH_Get_USB_Status>
 800ac66:	4603      	mov	r3, r0
 800ac68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd90      	pop	{r4, r7, pc}

0800ac74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac86:	78fa      	ldrb	r2, [r7, #3]
 800ac88:	4611      	mov	r1, r2
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f9 fc15 	bl	80044ba <HAL_HCD_HC_GetURBState>
 800ac90:	4603      	mov	r3, r0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	460b      	mov	r3, r1
 800aca4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800acac:	2b01      	cmp	r3, #1
 800acae:	d103      	bne.n	800acb8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 f870 	bl	800ad98 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800acb8:	20c8      	movs	r0, #200	; 0xc8
 800acba:	f7f8 fc53 	bl	8003564 <HAL_Delay>
  return USBH_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
 800acd4:	4613      	mov	r3, r2
 800acd6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acde:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	212c      	movs	r1, #44	; 0x2c
 800ace6:	fb01 f303 	mul.w	r3, r1, r3
 800acea:	4413      	add	r3, r2
 800acec:	333b      	adds	r3, #59	; 0x3b
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d009      	beq.n	800ad08 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	212c      	movs	r1, #44	; 0x2c
 800acfa:	fb01 f303 	mul.w	r3, r1, r3
 800acfe:	4413      	add	r3, r2
 800ad00:	3354      	adds	r3, #84	; 0x54
 800ad02:	78ba      	ldrb	r2, [r7, #2]
 800ad04:	701a      	strb	r2, [r3, #0]
 800ad06:	e008      	b.n	800ad1a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ad08:	78fb      	ldrb	r3, [r7, #3]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	212c      	movs	r1, #44	; 0x2c
 800ad0e:	fb01 f303 	mul.w	r3, r1, r3
 800ad12:	4413      	add	r3, r2
 800ad14:	3355      	adds	r3, #85	; 0x55
 800ad16:	78ba      	ldrb	r2, [r7, #2]
 800ad18:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7f8 fc17 	bl	8003564 <HAL_Delay>
}
 800ad36:	bf00      	nop
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad4e:	79fb      	ldrb	r3, [r7, #7]
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d817      	bhi.n	800ad84 <USBH_Get_USB_Status+0x44>
 800ad54:	a201      	add	r2, pc, #4	; (adr r2, 800ad5c <USBH_Get_USB_Status+0x1c>)
 800ad56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5a:	bf00      	nop
 800ad5c:	0800ad6d 	.word	0x0800ad6d
 800ad60:	0800ad73 	.word	0x0800ad73
 800ad64:	0800ad79 	.word	0x0800ad79
 800ad68:	0800ad7f 	.word	0x0800ad7f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad70:	e00b      	b.n	800ad8a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ad72:	2302      	movs	r3, #2
 800ad74:	73fb      	strb	r3, [r7, #15]
    break;
 800ad76:	e008      	b.n	800ad8a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad7c:	e005      	b.n	800ad8a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	73fb      	strb	r3, [r7, #15]
    break;
 800ad82:	e002      	b.n	800ad8a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ad84:	2302      	movs	r3, #2
 800ad86:	73fb      	strb	r3, [r7, #15]
    break;
 800ad88:	bf00      	nop
  }
  return usb_status;
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3714      	adds	r7, #20
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	4603      	mov	r3, r0
 800ada0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ada2:	79fb      	ldrb	r3, [r7, #7]
 800ada4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ada6:	79fb      	ldrb	r3, [r7, #7]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d102      	bne.n	800adb2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800adac:	2300      	movs	r3, #0
 800adae:	73fb      	strb	r3, [r7, #15]
 800adb0:	e001      	b.n	800adb6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800adb2:	2301      	movs	r3, #1
 800adb4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	461a      	mov	r2, r3
 800adba:	2101      	movs	r1, #1
 800adbc:	4803      	ldr	r0, [pc, #12]	; (800adcc <MX_DriverVbusFS+0x34>)
 800adbe:	f7f8 ff9f 	bl	8003d00 <HAL_GPIO_WritePin>
}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	40020800 	.word	0x40020800

0800add0 <__errno>:
 800add0:	4b01      	ldr	r3, [pc, #4]	; (800add8 <__errno+0x8>)
 800add2:	6818      	ldr	r0, [r3, #0]
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	20000044 	.word	0x20000044

0800addc <__libc_init_array>:
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	4d0d      	ldr	r5, [pc, #52]	; (800ae14 <__libc_init_array+0x38>)
 800ade0:	4c0d      	ldr	r4, [pc, #52]	; (800ae18 <__libc_init_array+0x3c>)
 800ade2:	1b64      	subs	r4, r4, r5
 800ade4:	10a4      	asrs	r4, r4, #2
 800ade6:	2600      	movs	r6, #0
 800ade8:	42a6      	cmp	r6, r4
 800adea:	d109      	bne.n	800ae00 <__libc_init_array+0x24>
 800adec:	4d0b      	ldr	r5, [pc, #44]	; (800ae1c <__libc_init_array+0x40>)
 800adee:	4c0c      	ldr	r4, [pc, #48]	; (800ae20 <__libc_init_array+0x44>)
 800adf0:	f002 fe28 	bl	800da44 <_init>
 800adf4:	1b64      	subs	r4, r4, r5
 800adf6:	10a4      	asrs	r4, r4, #2
 800adf8:	2600      	movs	r6, #0
 800adfa:	42a6      	cmp	r6, r4
 800adfc:	d105      	bne.n	800ae0a <__libc_init_array+0x2e>
 800adfe:	bd70      	pop	{r4, r5, r6, pc}
 800ae00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae04:	4798      	blx	r3
 800ae06:	3601      	adds	r6, #1
 800ae08:	e7ee      	b.n	800ade8 <__libc_init_array+0xc>
 800ae0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae0e:	4798      	blx	r3
 800ae10:	3601      	adds	r6, #1
 800ae12:	e7f2      	b.n	800adfa <__libc_init_array+0x1e>
 800ae14:	0800e884 	.word	0x0800e884
 800ae18:	0800e884 	.word	0x0800e884
 800ae1c:	0800e884 	.word	0x0800e884
 800ae20:	0800e888 	.word	0x0800e888

0800ae24 <malloc>:
 800ae24:	4b02      	ldr	r3, [pc, #8]	; (800ae30 <malloc+0xc>)
 800ae26:	4601      	mov	r1, r0
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	f000 b87f 	b.w	800af2c <_malloc_r>
 800ae2e:	bf00      	nop
 800ae30:	20000044 	.word	0x20000044

0800ae34 <free>:
 800ae34:	4b02      	ldr	r3, [pc, #8]	; (800ae40 <free+0xc>)
 800ae36:	4601      	mov	r1, r0
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	f000 b80b 	b.w	800ae54 <_free_r>
 800ae3e:	bf00      	nop
 800ae40:	20000044 	.word	0x20000044

0800ae44 <memset>:
 800ae44:	4402      	add	r2, r0
 800ae46:	4603      	mov	r3, r0
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d100      	bne.n	800ae4e <memset+0xa>
 800ae4c:	4770      	bx	lr
 800ae4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae52:	e7f9      	b.n	800ae48 <memset+0x4>

0800ae54 <_free_r>:
 800ae54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae56:	2900      	cmp	r1, #0
 800ae58:	d044      	beq.n	800aee4 <_free_r+0x90>
 800ae5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae5e:	9001      	str	r0, [sp, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f1a1 0404 	sub.w	r4, r1, #4
 800ae66:	bfb8      	it	lt
 800ae68:	18e4      	addlt	r4, r4, r3
 800ae6a:	f001 ff5d 	bl	800cd28 <__malloc_lock>
 800ae6e:	4a1e      	ldr	r2, [pc, #120]	; (800aee8 <_free_r+0x94>)
 800ae70:	9801      	ldr	r0, [sp, #4]
 800ae72:	6813      	ldr	r3, [r2, #0]
 800ae74:	b933      	cbnz	r3, 800ae84 <_free_r+0x30>
 800ae76:	6063      	str	r3, [r4, #4]
 800ae78:	6014      	str	r4, [r2, #0]
 800ae7a:	b003      	add	sp, #12
 800ae7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae80:	f001 bf58 	b.w	800cd34 <__malloc_unlock>
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d908      	bls.n	800ae9a <_free_r+0x46>
 800ae88:	6825      	ldr	r5, [r4, #0]
 800ae8a:	1961      	adds	r1, r4, r5
 800ae8c:	428b      	cmp	r3, r1
 800ae8e:	bf01      	itttt	eq
 800ae90:	6819      	ldreq	r1, [r3, #0]
 800ae92:	685b      	ldreq	r3, [r3, #4]
 800ae94:	1949      	addeq	r1, r1, r5
 800ae96:	6021      	streq	r1, [r4, #0]
 800ae98:	e7ed      	b.n	800ae76 <_free_r+0x22>
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	b10b      	cbz	r3, 800aea4 <_free_r+0x50>
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	d9fa      	bls.n	800ae9a <_free_r+0x46>
 800aea4:	6811      	ldr	r1, [r2, #0]
 800aea6:	1855      	adds	r5, r2, r1
 800aea8:	42a5      	cmp	r5, r4
 800aeaa:	d10b      	bne.n	800aec4 <_free_r+0x70>
 800aeac:	6824      	ldr	r4, [r4, #0]
 800aeae:	4421      	add	r1, r4
 800aeb0:	1854      	adds	r4, r2, r1
 800aeb2:	42a3      	cmp	r3, r4
 800aeb4:	6011      	str	r1, [r2, #0]
 800aeb6:	d1e0      	bne.n	800ae7a <_free_r+0x26>
 800aeb8:	681c      	ldr	r4, [r3, #0]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	6053      	str	r3, [r2, #4]
 800aebe:	4421      	add	r1, r4
 800aec0:	6011      	str	r1, [r2, #0]
 800aec2:	e7da      	b.n	800ae7a <_free_r+0x26>
 800aec4:	d902      	bls.n	800aecc <_free_r+0x78>
 800aec6:	230c      	movs	r3, #12
 800aec8:	6003      	str	r3, [r0, #0]
 800aeca:	e7d6      	b.n	800ae7a <_free_r+0x26>
 800aecc:	6825      	ldr	r5, [r4, #0]
 800aece:	1961      	adds	r1, r4, r5
 800aed0:	428b      	cmp	r3, r1
 800aed2:	bf04      	itt	eq
 800aed4:	6819      	ldreq	r1, [r3, #0]
 800aed6:	685b      	ldreq	r3, [r3, #4]
 800aed8:	6063      	str	r3, [r4, #4]
 800aeda:	bf04      	itt	eq
 800aedc:	1949      	addeq	r1, r1, r5
 800aede:	6021      	streq	r1, [r4, #0]
 800aee0:	6054      	str	r4, [r2, #4]
 800aee2:	e7ca      	b.n	800ae7a <_free_r+0x26>
 800aee4:	b003      	add	sp, #12
 800aee6:	bd30      	pop	{r4, r5, pc}
 800aee8:	20000bec 	.word	0x20000bec

0800aeec <sbrk_aligned>:
 800aeec:	b570      	push	{r4, r5, r6, lr}
 800aeee:	4e0e      	ldr	r6, [pc, #56]	; (800af28 <sbrk_aligned+0x3c>)
 800aef0:	460c      	mov	r4, r1
 800aef2:	6831      	ldr	r1, [r6, #0]
 800aef4:	4605      	mov	r5, r0
 800aef6:	b911      	cbnz	r1, 800aefe <sbrk_aligned+0x12>
 800aef8:	f000 fd9a 	bl	800ba30 <_sbrk_r>
 800aefc:	6030      	str	r0, [r6, #0]
 800aefe:	4621      	mov	r1, r4
 800af00:	4628      	mov	r0, r5
 800af02:	f000 fd95 	bl	800ba30 <_sbrk_r>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d00a      	beq.n	800af20 <sbrk_aligned+0x34>
 800af0a:	1cc4      	adds	r4, r0, #3
 800af0c:	f024 0403 	bic.w	r4, r4, #3
 800af10:	42a0      	cmp	r0, r4
 800af12:	d007      	beq.n	800af24 <sbrk_aligned+0x38>
 800af14:	1a21      	subs	r1, r4, r0
 800af16:	4628      	mov	r0, r5
 800af18:	f000 fd8a 	bl	800ba30 <_sbrk_r>
 800af1c:	3001      	adds	r0, #1
 800af1e:	d101      	bne.n	800af24 <sbrk_aligned+0x38>
 800af20:	f04f 34ff 	mov.w	r4, #4294967295
 800af24:	4620      	mov	r0, r4
 800af26:	bd70      	pop	{r4, r5, r6, pc}
 800af28:	20000bf0 	.word	0x20000bf0

0800af2c <_malloc_r>:
 800af2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af30:	1ccd      	adds	r5, r1, #3
 800af32:	f025 0503 	bic.w	r5, r5, #3
 800af36:	3508      	adds	r5, #8
 800af38:	2d0c      	cmp	r5, #12
 800af3a:	bf38      	it	cc
 800af3c:	250c      	movcc	r5, #12
 800af3e:	2d00      	cmp	r5, #0
 800af40:	4607      	mov	r7, r0
 800af42:	db01      	blt.n	800af48 <_malloc_r+0x1c>
 800af44:	42a9      	cmp	r1, r5
 800af46:	d905      	bls.n	800af54 <_malloc_r+0x28>
 800af48:	230c      	movs	r3, #12
 800af4a:	603b      	str	r3, [r7, #0]
 800af4c:	2600      	movs	r6, #0
 800af4e:	4630      	mov	r0, r6
 800af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af54:	4e2e      	ldr	r6, [pc, #184]	; (800b010 <_malloc_r+0xe4>)
 800af56:	f001 fee7 	bl	800cd28 <__malloc_lock>
 800af5a:	6833      	ldr	r3, [r6, #0]
 800af5c:	461c      	mov	r4, r3
 800af5e:	bb34      	cbnz	r4, 800afae <_malloc_r+0x82>
 800af60:	4629      	mov	r1, r5
 800af62:	4638      	mov	r0, r7
 800af64:	f7ff ffc2 	bl	800aeec <sbrk_aligned>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	4604      	mov	r4, r0
 800af6c:	d14d      	bne.n	800b00a <_malloc_r+0xde>
 800af6e:	6834      	ldr	r4, [r6, #0]
 800af70:	4626      	mov	r6, r4
 800af72:	2e00      	cmp	r6, #0
 800af74:	d140      	bne.n	800aff8 <_malloc_r+0xcc>
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	4631      	mov	r1, r6
 800af7a:	4638      	mov	r0, r7
 800af7c:	eb04 0803 	add.w	r8, r4, r3
 800af80:	f000 fd56 	bl	800ba30 <_sbrk_r>
 800af84:	4580      	cmp	r8, r0
 800af86:	d13a      	bne.n	800affe <_malloc_r+0xd2>
 800af88:	6821      	ldr	r1, [r4, #0]
 800af8a:	3503      	adds	r5, #3
 800af8c:	1a6d      	subs	r5, r5, r1
 800af8e:	f025 0503 	bic.w	r5, r5, #3
 800af92:	3508      	adds	r5, #8
 800af94:	2d0c      	cmp	r5, #12
 800af96:	bf38      	it	cc
 800af98:	250c      	movcc	r5, #12
 800af9a:	4629      	mov	r1, r5
 800af9c:	4638      	mov	r0, r7
 800af9e:	f7ff ffa5 	bl	800aeec <sbrk_aligned>
 800afa2:	3001      	adds	r0, #1
 800afa4:	d02b      	beq.n	800affe <_malloc_r+0xd2>
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	442b      	add	r3, r5
 800afaa:	6023      	str	r3, [r4, #0]
 800afac:	e00e      	b.n	800afcc <_malloc_r+0xa0>
 800afae:	6822      	ldr	r2, [r4, #0]
 800afb0:	1b52      	subs	r2, r2, r5
 800afb2:	d41e      	bmi.n	800aff2 <_malloc_r+0xc6>
 800afb4:	2a0b      	cmp	r2, #11
 800afb6:	d916      	bls.n	800afe6 <_malloc_r+0xba>
 800afb8:	1961      	adds	r1, r4, r5
 800afba:	42a3      	cmp	r3, r4
 800afbc:	6025      	str	r5, [r4, #0]
 800afbe:	bf18      	it	ne
 800afc0:	6059      	strne	r1, [r3, #4]
 800afc2:	6863      	ldr	r3, [r4, #4]
 800afc4:	bf08      	it	eq
 800afc6:	6031      	streq	r1, [r6, #0]
 800afc8:	5162      	str	r2, [r4, r5]
 800afca:	604b      	str	r3, [r1, #4]
 800afcc:	4638      	mov	r0, r7
 800afce:	f104 060b 	add.w	r6, r4, #11
 800afd2:	f001 feaf 	bl	800cd34 <__malloc_unlock>
 800afd6:	f026 0607 	bic.w	r6, r6, #7
 800afda:	1d23      	adds	r3, r4, #4
 800afdc:	1af2      	subs	r2, r6, r3
 800afde:	d0b6      	beq.n	800af4e <_malloc_r+0x22>
 800afe0:	1b9b      	subs	r3, r3, r6
 800afe2:	50a3      	str	r3, [r4, r2]
 800afe4:	e7b3      	b.n	800af4e <_malloc_r+0x22>
 800afe6:	6862      	ldr	r2, [r4, #4]
 800afe8:	42a3      	cmp	r3, r4
 800afea:	bf0c      	ite	eq
 800afec:	6032      	streq	r2, [r6, #0]
 800afee:	605a      	strne	r2, [r3, #4]
 800aff0:	e7ec      	b.n	800afcc <_malloc_r+0xa0>
 800aff2:	4623      	mov	r3, r4
 800aff4:	6864      	ldr	r4, [r4, #4]
 800aff6:	e7b2      	b.n	800af5e <_malloc_r+0x32>
 800aff8:	4634      	mov	r4, r6
 800affa:	6876      	ldr	r6, [r6, #4]
 800affc:	e7b9      	b.n	800af72 <_malloc_r+0x46>
 800affe:	230c      	movs	r3, #12
 800b000:	603b      	str	r3, [r7, #0]
 800b002:	4638      	mov	r0, r7
 800b004:	f001 fe96 	bl	800cd34 <__malloc_unlock>
 800b008:	e7a1      	b.n	800af4e <_malloc_r+0x22>
 800b00a:	6025      	str	r5, [r4, #0]
 800b00c:	e7de      	b.n	800afcc <_malloc_r+0xa0>
 800b00e:	bf00      	nop
 800b010:	20000bec 	.word	0x20000bec

0800b014 <__cvt>:
 800b014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b018:	ec55 4b10 	vmov	r4, r5, d0
 800b01c:	2d00      	cmp	r5, #0
 800b01e:	460e      	mov	r6, r1
 800b020:	4619      	mov	r1, r3
 800b022:	462b      	mov	r3, r5
 800b024:	bfbb      	ittet	lt
 800b026:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b02a:	461d      	movlt	r5, r3
 800b02c:	2300      	movge	r3, #0
 800b02e:	232d      	movlt	r3, #45	; 0x2d
 800b030:	700b      	strb	r3, [r1, #0]
 800b032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b034:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b038:	4691      	mov	r9, r2
 800b03a:	f023 0820 	bic.w	r8, r3, #32
 800b03e:	bfbc      	itt	lt
 800b040:	4622      	movlt	r2, r4
 800b042:	4614      	movlt	r4, r2
 800b044:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b048:	d005      	beq.n	800b056 <__cvt+0x42>
 800b04a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b04e:	d100      	bne.n	800b052 <__cvt+0x3e>
 800b050:	3601      	adds	r6, #1
 800b052:	2102      	movs	r1, #2
 800b054:	e000      	b.n	800b058 <__cvt+0x44>
 800b056:	2103      	movs	r1, #3
 800b058:	ab03      	add	r3, sp, #12
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	ab02      	add	r3, sp, #8
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	ec45 4b10 	vmov	d0, r4, r5
 800b064:	4653      	mov	r3, sl
 800b066:	4632      	mov	r2, r6
 800b068:	f000 fe3e 	bl	800bce8 <_dtoa_r>
 800b06c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b070:	4607      	mov	r7, r0
 800b072:	d102      	bne.n	800b07a <__cvt+0x66>
 800b074:	f019 0f01 	tst.w	r9, #1
 800b078:	d022      	beq.n	800b0c0 <__cvt+0xac>
 800b07a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b07e:	eb07 0906 	add.w	r9, r7, r6
 800b082:	d110      	bne.n	800b0a6 <__cvt+0x92>
 800b084:	783b      	ldrb	r3, [r7, #0]
 800b086:	2b30      	cmp	r3, #48	; 0x30
 800b088:	d10a      	bne.n	800b0a0 <__cvt+0x8c>
 800b08a:	2200      	movs	r2, #0
 800b08c:	2300      	movs	r3, #0
 800b08e:	4620      	mov	r0, r4
 800b090:	4629      	mov	r1, r5
 800b092:	f7f5 fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 800b096:	b918      	cbnz	r0, 800b0a0 <__cvt+0x8c>
 800b098:	f1c6 0601 	rsb	r6, r6, #1
 800b09c:	f8ca 6000 	str.w	r6, [sl]
 800b0a0:	f8da 3000 	ldr.w	r3, [sl]
 800b0a4:	4499      	add	r9, r3
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	f7f5 fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0b2:	b108      	cbz	r0, 800b0b8 <__cvt+0xa4>
 800b0b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0b8:	2230      	movs	r2, #48	; 0x30
 800b0ba:	9b03      	ldr	r3, [sp, #12]
 800b0bc:	454b      	cmp	r3, r9
 800b0be:	d307      	bcc.n	800b0d0 <__cvt+0xbc>
 800b0c0:	9b03      	ldr	r3, [sp, #12]
 800b0c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0c4:	1bdb      	subs	r3, r3, r7
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	b004      	add	sp, #16
 800b0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d0:	1c59      	adds	r1, r3, #1
 800b0d2:	9103      	str	r1, [sp, #12]
 800b0d4:	701a      	strb	r2, [r3, #0]
 800b0d6:	e7f0      	b.n	800b0ba <__cvt+0xa6>

0800b0d8 <__exponent>:
 800b0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2900      	cmp	r1, #0
 800b0de:	bfb8      	it	lt
 800b0e0:	4249      	neglt	r1, r1
 800b0e2:	f803 2b02 	strb.w	r2, [r3], #2
 800b0e6:	bfb4      	ite	lt
 800b0e8:	222d      	movlt	r2, #45	; 0x2d
 800b0ea:	222b      	movge	r2, #43	; 0x2b
 800b0ec:	2909      	cmp	r1, #9
 800b0ee:	7042      	strb	r2, [r0, #1]
 800b0f0:	dd2a      	ble.n	800b148 <__exponent+0x70>
 800b0f2:	f10d 0407 	add.w	r4, sp, #7
 800b0f6:	46a4      	mov	ip, r4
 800b0f8:	270a      	movs	r7, #10
 800b0fa:	46a6      	mov	lr, r4
 800b0fc:	460a      	mov	r2, r1
 800b0fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800b102:	fb07 1516 	mls	r5, r7, r6, r1
 800b106:	3530      	adds	r5, #48	; 0x30
 800b108:	2a63      	cmp	r2, #99	; 0x63
 800b10a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b10e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b112:	4631      	mov	r1, r6
 800b114:	dcf1      	bgt.n	800b0fa <__exponent+0x22>
 800b116:	3130      	adds	r1, #48	; 0x30
 800b118:	f1ae 0502 	sub.w	r5, lr, #2
 800b11c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b120:	1c44      	adds	r4, r0, #1
 800b122:	4629      	mov	r1, r5
 800b124:	4561      	cmp	r1, ip
 800b126:	d30a      	bcc.n	800b13e <__exponent+0x66>
 800b128:	f10d 0209 	add.w	r2, sp, #9
 800b12c:	eba2 020e 	sub.w	r2, r2, lr
 800b130:	4565      	cmp	r5, ip
 800b132:	bf88      	it	hi
 800b134:	2200      	movhi	r2, #0
 800b136:	4413      	add	r3, r2
 800b138:	1a18      	subs	r0, r3, r0
 800b13a:	b003      	add	sp, #12
 800b13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b13e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b142:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b146:	e7ed      	b.n	800b124 <__exponent+0x4c>
 800b148:	2330      	movs	r3, #48	; 0x30
 800b14a:	3130      	adds	r1, #48	; 0x30
 800b14c:	7083      	strb	r3, [r0, #2]
 800b14e:	70c1      	strb	r1, [r0, #3]
 800b150:	1d03      	adds	r3, r0, #4
 800b152:	e7f1      	b.n	800b138 <__exponent+0x60>

0800b154 <_printf_float>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	ed2d 8b02 	vpush	{d8}
 800b15c:	b08d      	sub	sp, #52	; 0x34
 800b15e:	460c      	mov	r4, r1
 800b160:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b164:	4616      	mov	r6, r2
 800b166:	461f      	mov	r7, r3
 800b168:	4605      	mov	r5, r0
 800b16a:	f001 fd63 	bl	800cc34 <_localeconv_r>
 800b16e:	f8d0 a000 	ldr.w	sl, [r0]
 800b172:	4650      	mov	r0, sl
 800b174:	f7f5 f82c 	bl	80001d0 <strlen>
 800b178:	2300      	movs	r3, #0
 800b17a:	930a      	str	r3, [sp, #40]	; 0x28
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	9305      	str	r3, [sp, #20]
 800b180:	f8d8 3000 	ldr.w	r3, [r8]
 800b184:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b188:	3307      	adds	r3, #7
 800b18a:	f023 0307 	bic.w	r3, r3, #7
 800b18e:	f103 0208 	add.w	r2, r3, #8
 800b192:	f8c8 2000 	str.w	r2, [r8]
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b19e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b1a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1a6:	9307      	str	r3, [sp, #28]
 800b1a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1ac:	ee08 0a10 	vmov	s16, r0
 800b1b0:	4b9f      	ldr	r3, [pc, #636]	; (800b430 <_printf_float+0x2dc>)
 800b1b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ba:	f7f5 fcb7 	bl	8000b2c <__aeabi_dcmpun>
 800b1be:	bb88      	cbnz	r0, 800b224 <_printf_float+0xd0>
 800b1c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1c4:	4b9a      	ldr	r3, [pc, #616]	; (800b430 <_printf_float+0x2dc>)
 800b1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ca:	f7f5 fc91 	bl	8000af0 <__aeabi_dcmple>
 800b1ce:	bb48      	cbnz	r0, 800b224 <_printf_float+0xd0>
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	f7f5 fc80 	bl	8000adc <__aeabi_dcmplt>
 800b1dc:	b110      	cbz	r0, 800b1e4 <_printf_float+0x90>
 800b1de:	232d      	movs	r3, #45	; 0x2d
 800b1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1e4:	4b93      	ldr	r3, [pc, #588]	; (800b434 <_printf_float+0x2e0>)
 800b1e6:	4894      	ldr	r0, [pc, #592]	; (800b438 <_printf_float+0x2e4>)
 800b1e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b1ec:	bf94      	ite	ls
 800b1ee:	4698      	movls	r8, r3
 800b1f0:	4680      	movhi	r8, r0
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	6123      	str	r3, [r4, #16]
 800b1f6:	9b05      	ldr	r3, [sp, #20]
 800b1f8:	f023 0204 	bic.w	r2, r3, #4
 800b1fc:	6022      	str	r2, [r4, #0]
 800b1fe:	f04f 0900 	mov.w	r9, #0
 800b202:	9700      	str	r7, [sp, #0]
 800b204:	4633      	mov	r3, r6
 800b206:	aa0b      	add	r2, sp, #44	; 0x2c
 800b208:	4621      	mov	r1, r4
 800b20a:	4628      	mov	r0, r5
 800b20c:	f000 f9d8 	bl	800b5c0 <_printf_common>
 800b210:	3001      	adds	r0, #1
 800b212:	f040 8090 	bne.w	800b336 <_printf_float+0x1e2>
 800b216:	f04f 30ff 	mov.w	r0, #4294967295
 800b21a:	b00d      	add	sp, #52	; 0x34
 800b21c:	ecbd 8b02 	vpop	{d8}
 800b220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b224:	4642      	mov	r2, r8
 800b226:	464b      	mov	r3, r9
 800b228:	4640      	mov	r0, r8
 800b22a:	4649      	mov	r1, r9
 800b22c:	f7f5 fc7e 	bl	8000b2c <__aeabi_dcmpun>
 800b230:	b140      	cbz	r0, 800b244 <_printf_float+0xf0>
 800b232:	464b      	mov	r3, r9
 800b234:	2b00      	cmp	r3, #0
 800b236:	bfbc      	itt	lt
 800b238:	232d      	movlt	r3, #45	; 0x2d
 800b23a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b23e:	487f      	ldr	r0, [pc, #508]	; (800b43c <_printf_float+0x2e8>)
 800b240:	4b7f      	ldr	r3, [pc, #508]	; (800b440 <_printf_float+0x2ec>)
 800b242:	e7d1      	b.n	800b1e8 <_printf_float+0x94>
 800b244:	6863      	ldr	r3, [r4, #4]
 800b246:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b24a:	9206      	str	r2, [sp, #24]
 800b24c:	1c5a      	adds	r2, r3, #1
 800b24e:	d13f      	bne.n	800b2d0 <_printf_float+0x17c>
 800b250:	2306      	movs	r3, #6
 800b252:	6063      	str	r3, [r4, #4]
 800b254:	9b05      	ldr	r3, [sp, #20]
 800b256:	6861      	ldr	r1, [r4, #4]
 800b258:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b25c:	2300      	movs	r3, #0
 800b25e:	9303      	str	r3, [sp, #12]
 800b260:	ab0a      	add	r3, sp, #40	; 0x28
 800b262:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b266:	ab09      	add	r3, sp, #36	; 0x24
 800b268:	ec49 8b10 	vmov	d0, r8, r9
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	6022      	str	r2, [r4, #0]
 800b270:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b274:	4628      	mov	r0, r5
 800b276:	f7ff fecd 	bl	800b014 <__cvt>
 800b27a:	9b06      	ldr	r3, [sp, #24]
 800b27c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b27e:	2b47      	cmp	r3, #71	; 0x47
 800b280:	4680      	mov	r8, r0
 800b282:	d108      	bne.n	800b296 <_printf_float+0x142>
 800b284:	1cc8      	adds	r0, r1, #3
 800b286:	db02      	blt.n	800b28e <_printf_float+0x13a>
 800b288:	6863      	ldr	r3, [r4, #4]
 800b28a:	4299      	cmp	r1, r3
 800b28c:	dd41      	ble.n	800b312 <_printf_float+0x1be>
 800b28e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b292:	fa5f fb8b 	uxtb.w	fp, fp
 800b296:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b29a:	d820      	bhi.n	800b2de <_printf_float+0x18a>
 800b29c:	3901      	subs	r1, #1
 800b29e:	465a      	mov	r2, fp
 800b2a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2a4:	9109      	str	r1, [sp, #36]	; 0x24
 800b2a6:	f7ff ff17 	bl	800b0d8 <__exponent>
 800b2aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2ac:	1813      	adds	r3, r2, r0
 800b2ae:	2a01      	cmp	r2, #1
 800b2b0:	4681      	mov	r9, r0
 800b2b2:	6123      	str	r3, [r4, #16]
 800b2b4:	dc02      	bgt.n	800b2bc <_printf_float+0x168>
 800b2b6:	6822      	ldr	r2, [r4, #0]
 800b2b8:	07d2      	lsls	r2, r2, #31
 800b2ba:	d501      	bpl.n	800b2c0 <_printf_float+0x16c>
 800b2bc:	3301      	adds	r3, #1
 800b2be:	6123      	str	r3, [r4, #16]
 800b2c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d09c      	beq.n	800b202 <_printf_float+0xae>
 800b2c8:	232d      	movs	r3, #45	; 0x2d
 800b2ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2ce:	e798      	b.n	800b202 <_printf_float+0xae>
 800b2d0:	9a06      	ldr	r2, [sp, #24]
 800b2d2:	2a47      	cmp	r2, #71	; 0x47
 800b2d4:	d1be      	bne.n	800b254 <_printf_float+0x100>
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1bc      	bne.n	800b254 <_printf_float+0x100>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e7b9      	b.n	800b252 <_printf_float+0xfe>
 800b2de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b2e2:	d118      	bne.n	800b316 <_printf_float+0x1c2>
 800b2e4:	2900      	cmp	r1, #0
 800b2e6:	6863      	ldr	r3, [r4, #4]
 800b2e8:	dd0b      	ble.n	800b302 <_printf_float+0x1ae>
 800b2ea:	6121      	str	r1, [r4, #16]
 800b2ec:	b913      	cbnz	r3, 800b2f4 <_printf_float+0x1a0>
 800b2ee:	6822      	ldr	r2, [r4, #0]
 800b2f0:	07d0      	lsls	r0, r2, #31
 800b2f2:	d502      	bpl.n	800b2fa <_printf_float+0x1a6>
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	440b      	add	r3, r1
 800b2f8:	6123      	str	r3, [r4, #16]
 800b2fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800b2fc:	f04f 0900 	mov.w	r9, #0
 800b300:	e7de      	b.n	800b2c0 <_printf_float+0x16c>
 800b302:	b913      	cbnz	r3, 800b30a <_printf_float+0x1b6>
 800b304:	6822      	ldr	r2, [r4, #0]
 800b306:	07d2      	lsls	r2, r2, #31
 800b308:	d501      	bpl.n	800b30e <_printf_float+0x1ba>
 800b30a:	3302      	adds	r3, #2
 800b30c:	e7f4      	b.n	800b2f8 <_printf_float+0x1a4>
 800b30e:	2301      	movs	r3, #1
 800b310:	e7f2      	b.n	800b2f8 <_printf_float+0x1a4>
 800b312:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b318:	4299      	cmp	r1, r3
 800b31a:	db05      	blt.n	800b328 <_printf_float+0x1d4>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	6121      	str	r1, [r4, #16]
 800b320:	07d8      	lsls	r0, r3, #31
 800b322:	d5ea      	bpl.n	800b2fa <_printf_float+0x1a6>
 800b324:	1c4b      	adds	r3, r1, #1
 800b326:	e7e7      	b.n	800b2f8 <_printf_float+0x1a4>
 800b328:	2900      	cmp	r1, #0
 800b32a:	bfd4      	ite	le
 800b32c:	f1c1 0202 	rsble	r2, r1, #2
 800b330:	2201      	movgt	r2, #1
 800b332:	4413      	add	r3, r2
 800b334:	e7e0      	b.n	800b2f8 <_printf_float+0x1a4>
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	055a      	lsls	r2, r3, #21
 800b33a:	d407      	bmi.n	800b34c <_printf_float+0x1f8>
 800b33c:	6923      	ldr	r3, [r4, #16]
 800b33e:	4642      	mov	r2, r8
 800b340:	4631      	mov	r1, r6
 800b342:	4628      	mov	r0, r5
 800b344:	47b8      	blx	r7
 800b346:	3001      	adds	r0, #1
 800b348:	d12c      	bne.n	800b3a4 <_printf_float+0x250>
 800b34a:	e764      	b.n	800b216 <_printf_float+0xc2>
 800b34c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b350:	f240 80e0 	bls.w	800b514 <_printf_float+0x3c0>
 800b354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b358:	2200      	movs	r2, #0
 800b35a:	2300      	movs	r3, #0
 800b35c:	f7f5 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b360:	2800      	cmp	r0, #0
 800b362:	d034      	beq.n	800b3ce <_printf_float+0x27a>
 800b364:	4a37      	ldr	r2, [pc, #220]	; (800b444 <_printf_float+0x2f0>)
 800b366:	2301      	movs	r3, #1
 800b368:	4631      	mov	r1, r6
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b8      	blx	r7
 800b36e:	3001      	adds	r0, #1
 800b370:	f43f af51 	beq.w	800b216 <_printf_float+0xc2>
 800b374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b378:	429a      	cmp	r2, r3
 800b37a:	db02      	blt.n	800b382 <_printf_float+0x22e>
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	07d8      	lsls	r0, r3, #31
 800b380:	d510      	bpl.n	800b3a4 <_printf_float+0x250>
 800b382:	ee18 3a10 	vmov	r3, s16
 800b386:	4652      	mov	r2, sl
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	47b8      	blx	r7
 800b38e:	3001      	adds	r0, #1
 800b390:	f43f af41 	beq.w	800b216 <_printf_float+0xc2>
 800b394:	f04f 0800 	mov.w	r8, #0
 800b398:	f104 091a 	add.w	r9, r4, #26
 800b39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	4543      	cmp	r3, r8
 800b3a2:	dc09      	bgt.n	800b3b8 <_printf_float+0x264>
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	079b      	lsls	r3, r3, #30
 800b3a8:	f100 8105 	bmi.w	800b5b6 <_printf_float+0x462>
 800b3ac:	68e0      	ldr	r0, [r4, #12]
 800b3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3b0:	4298      	cmp	r0, r3
 800b3b2:	bfb8      	it	lt
 800b3b4:	4618      	movlt	r0, r3
 800b3b6:	e730      	b.n	800b21a <_printf_float+0xc6>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	464a      	mov	r2, r9
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b8      	blx	r7
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f43f af27 	beq.w	800b216 <_printf_float+0xc2>
 800b3c8:	f108 0801 	add.w	r8, r8, #1
 800b3cc:	e7e6      	b.n	800b39c <_printf_float+0x248>
 800b3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	dc39      	bgt.n	800b448 <_printf_float+0x2f4>
 800b3d4:	4a1b      	ldr	r2, [pc, #108]	; (800b444 <_printf_float+0x2f0>)
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f43f af19 	beq.w	800b216 <_printf_float+0xc2>
 800b3e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	d102      	bne.n	800b3f2 <_printf_float+0x29e>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	07d9      	lsls	r1, r3, #31
 800b3f0:	d5d8      	bpl.n	800b3a4 <_printf_float+0x250>
 800b3f2:	ee18 3a10 	vmov	r3, s16
 800b3f6:	4652      	mov	r2, sl
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b8      	blx	r7
 800b3fe:	3001      	adds	r0, #1
 800b400:	f43f af09 	beq.w	800b216 <_printf_float+0xc2>
 800b404:	f04f 0900 	mov.w	r9, #0
 800b408:	f104 0a1a 	add.w	sl, r4, #26
 800b40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b40e:	425b      	negs	r3, r3
 800b410:	454b      	cmp	r3, r9
 800b412:	dc01      	bgt.n	800b418 <_printf_float+0x2c4>
 800b414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b416:	e792      	b.n	800b33e <_printf_float+0x1ea>
 800b418:	2301      	movs	r3, #1
 800b41a:	4652      	mov	r2, sl
 800b41c:	4631      	mov	r1, r6
 800b41e:	4628      	mov	r0, r5
 800b420:	47b8      	blx	r7
 800b422:	3001      	adds	r0, #1
 800b424:	f43f aef7 	beq.w	800b216 <_printf_float+0xc2>
 800b428:	f109 0901 	add.w	r9, r9, #1
 800b42c:	e7ee      	b.n	800b40c <_printf_float+0x2b8>
 800b42e:	bf00      	nop
 800b430:	7fefffff 	.word	0x7fefffff
 800b434:	0800e4a4 	.word	0x0800e4a4
 800b438:	0800e4a8 	.word	0x0800e4a8
 800b43c:	0800e4b0 	.word	0x0800e4b0
 800b440:	0800e4ac 	.word	0x0800e4ac
 800b444:	0800e4b4 	.word	0x0800e4b4
 800b448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b44a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b44c:	429a      	cmp	r2, r3
 800b44e:	bfa8      	it	ge
 800b450:	461a      	movge	r2, r3
 800b452:	2a00      	cmp	r2, #0
 800b454:	4691      	mov	r9, r2
 800b456:	dc37      	bgt.n	800b4c8 <_printf_float+0x374>
 800b458:	f04f 0b00 	mov.w	fp, #0
 800b45c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b460:	f104 021a 	add.w	r2, r4, #26
 800b464:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b466:	9305      	str	r3, [sp, #20]
 800b468:	eba3 0309 	sub.w	r3, r3, r9
 800b46c:	455b      	cmp	r3, fp
 800b46e:	dc33      	bgt.n	800b4d8 <_printf_float+0x384>
 800b470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b474:	429a      	cmp	r2, r3
 800b476:	db3b      	blt.n	800b4f0 <_printf_float+0x39c>
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	07da      	lsls	r2, r3, #31
 800b47c:	d438      	bmi.n	800b4f0 <_printf_float+0x39c>
 800b47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b480:	9a05      	ldr	r2, [sp, #20]
 800b482:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b484:	1a9a      	subs	r2, r3, r2
 800b486:	eba3 0901 	sub.w	r9, r3, r1
 800b48a:	4591      	cmp	r9, r2
 800b48c:	bfa8      	it	ge
 800b48e:	4691      	movge	r9, r2
 800b490:	f1b9 0f00 	cmp.w	r9, #0
 800b494:	dc35      	bgt.n	800b502 <_printf_float+0x3ae>
 800b496:	f04f 0800 	mov.w	r8, #0
 800b49a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b49e:	f104 0a1a 	add.w	sl, r4, #26
 800b4a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4a6:	1a9b      	subs	r3, r3, r2
 800b4a8:	eba3 0309 	sub.w	r3, r3, r9
 800b4ac:	4543      	cmp	r3, r8
 800b4ae:	f77f af79 	ble.w	800b3a4 <_printf_float+0x250>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4652      	mov	r2, sl
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b8      	blx	r7
 800b4bc:	3001      	adds	r0, #1
 800b4be:	f43f aeaa 	beq.w	800b216 <_printf_float+0xc2>
 800b4c2:	f108 0801 	add.w	r8, r8, #1
 800b4c6:	e7ec      	b.n	800b4a2 <_printf_float+0x34e>
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	4631      	mov	r1, r6
 800b4cc:	4642      	mov	r2, r8
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	47b8      	blx	r7
 800b4d2:	3001      	adds	r0, #1
 800b4d4:	d1c0      	bne.n	800b458 <_printf_float+0x304>
 800b4d6:	e69e      	b.n	800b216 <_printf_float+0xc2>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	4631      	mov	r1, r6
 800b4dc:	4628      	mov	r0, r5
 800b4de:	9205      	str	r2, [sp, #20]
 800b4e0:	47b8      	blx	r7
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	f43f ae97 	beq.w	800b216 <_printf_float+0xc2>
 800b4e8:	9a05      	ldr	r2, [sp, #20]
 800b4ea:	f10b 0b01 	add.w	fp, fp, #1
 800b4ee:	e7b9      	b.n	800b464 <_printf_float+0x310>
 800b4f0:	ee18 3a10 	vmov	r3, s16
 800b4f4:	4652      	mov	r2, sl
 800b4f6:	4631      	mov	r1, r6
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	47b8      	blx	r7
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d1be      	bne.n	800b47e <_printf_float+0x32a>
 800b500:	e689      	b.n	800b216 <_printf_float+0xc2>
 800b502:	9a05      	ldr	r2, [sp, #20]
 800b504:	464b      	mov	r3, r9
 800b506:	4442      	add	r2, r8
 800b508:	4631      	mov	r1, r6
 800b50a:	4628      	mov	r0, r5
 800b50c:	47b8      	blx	r7
 800b50e:	3001      	adds	r0, #1
 800b510:	d1c1      	bne.n	800b496 <_printf_float+0x342>
 800b512:	e680      	b.n	800b216 <_printf_float+0xc2>
 800b514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b516:	2a01      	cmp	r2, #1
 800b518:	dc01      	bgt.n	800b51e <_printf_float+0x3ca>
 800b51a:	07db      	lsls	r3, r3, #31
 800b51c:	d538      	bpl.n	800b590 <_printf_float+0x43c>
 800b51e:	2301      	movs	r3, #1
 800b520:	4642      	mov	r2, r8
 800b522:	4631      	mov	r1, r6
 800b524:	4628      	mov	r0, r5
 800b526:	47b8      	blx	r7
 800b528:	3001      	adds	r0, #1
 800b52a:	f43f ae74 	beq.w	800b216 <_printf_float+0xc2>
 800b52e:	ee18 3a10 	vmov	r3, s16
 800b532:	4652      	mov	r2, sl
 800b534:	4631      	mov	r1, r6
 800b536:	4628      	mov	r0, r5
 800b538:	47b8      	blx	r7
 800b53a:	3001      	adds	r0, #1
 800b53c:	f43f ae6b 	beq.w	800b216 <_printf_float+0xc2>
 800b540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b544:	2200      	movs	r2, #0
 800b546:	2300      	movs	r3, #0
 800b548:	f7f5 fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 800b54c:	b9d8      	cbnz	r0, 800b586 <_printf_float+0x432>
 800b54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b550:	f108 0201 	add.w	r2, r8, #1
 800b554:	3b01      	subs	r3, #1
 800b556:	4631      	mov	r1, r6
 800b558:	4628      	mov	r0, r5
 800b55a:	47b8      	blx	r7
 800b55c:	3001      	adds	r0, #1
 800b55e:	d10e      	bne.n	800b57e <_printf_float+0x42a>
 800b560:	e659      	b.n	800b216 <_printf_float+0xc2>
 800b562:	2301      	movs	r3, #1
 800b564:	4652      	mov	r2, sl
 800b566:	4631      	mov	r1, r6
 800b568:	4628      	mov	r0, r5
 800b56a:	47b8      	blx	r7
 800b56c:	3001      	adds	r0, #1
 800b56e:	f43f ae52 	beq.w	800b216 <_printf_float+0xc2>
 800b572:	f108 0801 	add.w	r8, r8, #1
 800b576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b578:	3b01      	subs	r3, #1
 800b57a:	4543      	cmp	r3, r8
 800b57c:	dcf1      	bgt.n	800b562 <_printf_float+0x40e>
 800b57e:	464b      	mov	r3, r9
 800b580:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b584:	e6dc      	b.n	800b340 <_printf_float+0x1ec>
 800b586:	f04f 0800 	mov.w	r8, #0
 800b58a:	f104 0a1a 	add.w	sl, r4, #26
 800b58e:	e7f2      	b.n	800b576 <_printf_float+0x422>
 800b590:	2301      	movs	r3, #1
 800b592:	4642      	mov	r2, r8
 800b594:	e7df      	b.n	800b556 <_printf_float+0x402>
 800b596:	2301      	movs	r3, #1
 800b598:	464a      	mov	r2, r9
 800b59a:	4631      	mov	r1, r6
 800b59c:	4628      	mov	r0, r5
 800b59e:	47b8      	blx	r7
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	f43f ae38 	beq.w	800b216 <_printf_float+0xc2>
 800b5a6:	f108 0801 	add.w	r8, r8, #1
 800b5aa:	68e3      	ldr	r3, [r4, #12]
 800b5ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5ae:	1a5b      	subs	r3, r3, r1
 800b5b0:	4543      	cmp	r3, r8
 800b5b2:	dcf0      	bgt.n	800b596 <_printf_float+0x442>
 800b5b4:	e6fa      	b.n	800b3ac <_printf_float+0x258>
 800b5b6:	f04f 0800 	mov.w	r8, #0
 800b5ba:	f104 0919 	add.w	r9, r4, #25
 800b5be:	e7f4      	b.n	800b5aa <_printf_float+0x456>

0800b5c0 <_printf_common>:
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	4616      	mov	r6, r2
 800b5c6:	4699      	mov	r9, r3
 800b5c8:	688a      	ldr	r2, [r1, #8]
 800b5ca:	690b      	ldr	r3, [r1, #16]
 800b5cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	bfb8      	it	lt
 800b5d4:	4613      	movlt	r3, r2
 800b5d6:	6033      	str	r3, [r6, #0]
 800b5d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5dc:	4607      	mov	r7, r0
 800b5de:	460c      	mov	r4, r1
 800b5e0:	b10a      	cbz	r2, 800b5e6 <_printf_common+0x26>
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	6033      	str	r3, [r6, #0]
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	0699      	lsls	r1, r3, #26
 800b5ea:	bf42      	ittt	mi
 800b5ec:	6833      	ldrmi	r3, [r6, #0]
 800b5ee:	3302      	addmi	r3, #2
 800b5f0:	6033      	strmi	r3, [r6, #0]
 800b5f2:	6825      	ldr	r5, [r4, #0]
 800b5f4:	f015 0506 	ands.w	r5, r5, #6
 800b5f8:	d106      	bne.n	800b608 <_printf_common+0x48>
 800b5fa:	f104 0a19 	add.w	sl, r4, #25
 800b5fe:	68e3      	ldr	r3, [r4, #12]
 800b600:	6832      	ldr	r2, [r6, #0]
 800b602:	1a9b      	subs	r3, r3, r2
 800b604:	42ab      	cmp	r3, r5
 800b606:	dc26      	bgt.n	800b656 <_printf_common+0x96>
 800b608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b60c:	1e13      	subs	r3, r2, #0
 800b60e:	6822      	ldr	r2, [r4, #0]
 800b610:	bf18      	it	ne
 800b612:	2301      	movne	r3, #1
 800b614:	0692      	lsls	r2, r2, #26
 800b616:	d42b      	bmi.n	800b670 <_printf_common+0xb0>
 800b618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b61c:	4649      	mov	r1, r9
 800b61e:	4638      	mov	r0, r7
 800b620:	47c0      	blx	r8
 800b622:	3001      	adds	r0, #1
 800b624:	d01e      	beq.n	800b664 <_printf_common+0xa4>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	68e5      	ldr	r5, [r4, #12]
 800b62a:	6832      	ldr	r2, [r6, #0]
 800b62c:	f003 0306 	and.w	r3, r3, #6
 800b630:	2b04      	cmp	r3, #4
 800b632:	bf08      	it	eq
 800b634:	1aad      	subeq	r5, r5, r2
 800b636:	68a3      	ldr	r3, [r4, #8]
 800b638:	6922      	ldr	r2, [r4, #16]
 800b63a:	bf0c      	ite	eq
 800b63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b640:	2500      	movne	r5, #0
 800b642:	4293      	cmp	r3, r2
 800b644:	bfc4      	itt	gt
 800b646:	1a9b      	subgt	r3, r3, r2
 800b648:	18ed      	addgt	r5, r5, r3
 800b64a:	2600      	movs	r6, #0
 800b64c:	341a      	adds	r4, #26
 800b64e:	42b5      	cmp	r5, r6
 800b650:	d11a      	bne.n	800b688 <_printf_common+0xc8>
 800b652:	2000      	movs	r0, #0
 800b654:	e008      	b.n	800b668 <_printf_common+0xa8>
 800b656:	2301      	movs	r3, #1
 800b658:	4652      	mov	r2, sl
 800b65a:	4649      	mov	r1, r9
 800b65c:	4638      	mov	r0, r7
 800b65e:	47c0      	blx	r8
 800b660:	3001      	adds	r0, #1
 800b662:	d103      	bne.n	800b66c <_printf_common+0xac>
 800b664:	f04f 30ff 	mov.w	r0, #4294967295
 800b668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66c:	3501      	adds	r5, #1
 800b66e:	e7c6      	b.n	800b5fe <_printf_common+0x3e>
 800b670:	18e1      	adds	r1, r4, r3
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	2030      	movs	r0, #48	; 0x30
 800b676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b67a:	4422      	add	r2, r4
 800b67c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b684:	3302      	adds	r3, #2
 800b686:	e7c7      	b.n	800b618 <_printf_common+0x58>
 800b688:	2301      	movs	r3, #1
 800b68a:	4622      	mov	r2, r4
 800b68c:	4649      	mov	r1, r9
 800b68e:	4638      	mov	r0, r7
 800b690:	47c0      	blx	r8
 800b692:	3001      	adds	r0, #1
 800b694:	d0e6      	beq.n	800b664 <_printf_common+0xa4>
 800b696:	3601      	adds	r6, #1
 800b698:	e7d9      	b.n	800b64e <_printf_common+0x8e>
	...

0800b69c <_printf_i>:
 800b69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a0:	7e0f      	ldrb	r7, [r1, #24]
 800b6a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6a4:	2f78      	cmp	r7, #120	; 0x78
 800b6a6:	4691      	mov	r9, r2
 800b6a8:	4680      	mov	r8, r0
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	469a      	mov	sl, r3
 800b6ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6b2:	d807      	bhi.n	800b6c4 <_printf_i+0x28>
 800b6b4:	2f62      	cmp	r7, #98	; 0x62
 800b6b6:	d80a      	bhi.n	800b6ce <_printf_i+0x32>
 800b6b8:	2f00      	cmp	r7, #0
 800b6ba:	f000 80d8 	beq.w	800b86e <_printf_i+0x1d2>
 800b6be:	2f58      	cmp	r7, #88	; 0x58
 800b6c0:	f000 80a3 	beq.w	800b80a <_printf_i+0x16e>
 800b6c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6cc:	e03a      	b.n	800b744 <_printf_i+0xa8>
 800b6ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6d2:	2b15      	cmp	r3, #21
 800b6d4:	d8f6      	bhi.n	800b6c4 <_printf_i+0x28>
 800b6d6:	a101      	add	r1, pc, #4	; (adr r1, 800b6dc <_printf_i+0x40>)
 800b6d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6dc:	0800b735 	.word	0x0800b735
 800b6e0:	0800b749 	.word	0x0800b749
 800b6e4:	0800b6c5 	.word	0x0800b6c5
 800b6e8:	0800b6c5 	.word	0x0800b6c5
 800b6ec:	0800b6c5 	.word	0x0800b6c5
 800b6f0:	0800b6c5 	.word	0x0800b6c5
 800b6f4:	0800b749 	.word	0x0800b749
 800b6f8:	0800b6c5 	.word	0x0800b6c5
 800b6fc:	0800b6c5 	.word	0x0800b6c5
 800b700:	0800b6c5 	.word	0x0800b6c5
 800b704:	0800b6c5 	.word	0x0800b6c5
 800b708:	0800b855 	.word	0x0800b855
 800b70c:	0800b779 	.word	0x0800b779
 800b710:	0800b837 	.word	0x0800b837
 800b714:	0800b6c5 	.word	0x0800b6c5
 800b718:	0800b6c5 	.word	0x0800b6c5
 800b71c:	0800b877 	.word	0x0800b877
 800b720:	0800b6c5 	.word	0x0800b6c5
 800b724:	0800b779 	.word	0x0800b779
 800b728:	0800b6c5 	.word	0x0800b6c5
 800b72c:	0800b6c5 	.word	0x0800b6c5
 800b730:	0800b83f 	.word	0x0800b83f
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	1d1a      	adds	r2, r3, #4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	602a      	str	r2, [r5, #0]
 800b73c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b744:	2301      	movs	r3, #1
 800b746:	e0a3      	b.n	800b890 <_printf_i+0x1f4>
 800b748:	6820      	ldr	r0, [r4, #0]
 800b74a:	6829      	ldr	r1, [r5, #0]
 800b74c:	0606      	lsls	r6, r0, #24
 800b74e:	f101 0304 	add.w	r3, r1, #4
 800b752:	d50a      	bpl.n	800b76a <_printf_i+0xce>
 800b754:	680e      	ldr	r6, [r1, #0]
 800b756:	602b      	str	r3, [r5, #0]
 800b758:	2e00      	cmp	r6, #0
 800b75a:	da03      	bge.n	800b764 <_printf_i+0xc8>
 800b75c:	232d      	movs	r3, #45	; 0x2d
 800b75e:	4276      	negs	r6, r6
 800b760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b764:	485e      	ldr	r0, [pc, #376]	; (800b8e0 <_printf_i+0x244>)
 800b766:	230a      	movs	r3, #10
 800b768:	e019      	b.n	800b79e <_printf_i+0x102>
 800b76a:	680e      	ldr	r6, [r1, #0]
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b772:	bf18      	it	ne
 800b774:	b236      	sxthne	r6, r6
 800b776:	e7ef      	b.n	800b758 <_printf_i+0xbc>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	6820      	ldr	r0, [r4, #0]
 800b77c:	1d19      	adds	r1, r3, #4
 800b77e:	6029      	str	r1, [r5, #0]
 800b780:	0601      	lsls	r1, r0, #24
 800b782:	d501      	bpl.n	800b788 <_printf_i+0xec>
 800b784:	681e      	ldr	r6, [r3, #0]
 800b786:	e002      	b.n	800b78e <_printf_i+0xf2>
 800b788:	0646      	lsls	r6, r0, #25
 800b78a:	d5fb      	bpl.n	800b784 <_printf_i+0xe8>
 800b78c:	881e      	ldrh	r6, [r3, #0]
 800b78e:	4854      	ldr	r0, [pc, #336]	; (800b8e0 <_printf_i+0x244>)
 800b790:	2f6f      	cmp	r7, #111	; 0x6f
 800b792:	bf0c      	ite	eq
 800b794:	2308      	moveq	r3, #8
 800b796:	230a      	movne	r3, #10
 800b798:	2100      	movs	r1, #0
 800b79a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b79e:	6865      	ldr	r5, [r4, #4]
 800b7a0:	60a5      	str	r5, [r4, #8]
 800b7a2:	2d00      	cmp	r5, #0
 800b7a4:	bfa2      	ittt	ge
 800b7a6:	6821      	ldrge	r1, [r4, #0]
 800b7a8:	f021 0104 	bicge.w	r1, r1, #4
 800b7ac:	6021      	strge	r1, [r4, #0]
 800b7ae:	b90e      	cbnz	r6, 800b7b4 <_printf_i+0x118>
 800b7b0:	2d00      	cmp	r5, #0
 800b7b2:	d04d      	beq.n	800b850 <_printf_i+0x1b4>
 800b7b4:	4615      	mov	r5, r2
 800b7b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7ba:	fb03 6711 	mls	r7, r3, r1, r6
 800b7be:	5dc7      	ldrb	r7, [r0, r7]
 800b7c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7c4:	4637      	mov	r7, r6
 800b7c6:	42bb      	cmp	r3, r7
 800b7c8:	460e      	mov	r6, r1
 800b7ca:	d9f4      	bls.n	800b7b6 <_printf_i+0x11a>
 800b7cc:	2b08      	cmp	r3, #8
 800b7ce:	d10b      	bne.n	800b7e8 <_printf_i+0x14c>
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	07de      	lsls	r6, r3, #31
 800b7d4:	d508      	bpl.n	800b7e8 <_printf_i+0x14c>
 800b7d6:	6923      	ldr	r3, [r4, #16]
 800b7d8:	6861      	ldr	r1, [r4, #4]
 800b7da:	4299      	cmp	r1, r3
 800b7dc:	bfde      	ittt	le
 800b7de:	2330      	movle	r3, #48	; 0x30
 800b7e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7e8:	1b52      	subs	r2, r2, r5
 800b7ea:	6122      	str	r2, [r4, #16]
 800b7ec:	f8cd a000 	str.w	sl, [sp]
 800b7f0:	464b      	mov	r3, r9
 800b7f2:	aa03      	add	r2, sp, #12
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	4640      	mov	r0, r8
 800b7f8:	f7ff fee2 	bl	800b5c0 <_printf_common>
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d14c      	bne.n	800b89a <_printf_i+0x1fe>
 800b800:	f04f 30ff 	mov.w	r0, #4294967295
 800b804:	b004      	add	sp, #16
 800b806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80a:	4835      	ldr	r0, [pc, #212]	; (800b8e0 <_printf_i+0x244>)
 800b80c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b810:	6829      	ldr	r1, [r5, #0]
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	f851 6b04 	ldr.w	r6, [r1], #4
 800b818:	6029      	str	r1, [r5, #0]
 800b81a:	061d      	lsls	r5, r3, #24
 800b81c:	d514      	bpl.n	800b848 <_printf_i+0x1ac>
 800b81e:	07df      	lsls	r7, r3, #31
 800b820:	bf44      	itt	mi
 800b822:	f043 0320 	orrmi.w	r3, r3, #32
 800b826:	6023      	strmi	r3, [r4, #0]
 800b828:	b91e      	cbnz	r6, 800b832 <_printf_i+0x196>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	f023 0320 	bic.w	r3, r3, #32
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	2310      	movs	r3, #16
 800b834:	e7b0      	b.n	800b798 <_printf_i+0xfc>
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	f043 0320 	orr.w	r3, r3, #32
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	2378      	movs	r3, #120	; 0x78
 800b840:	4828      	ldr	r0, [pc, #160]	; (800b8e4 <_printf_i+0x248>)
 800b842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b846:	e7e3      	b.n	800b810 <_printf_i+0x174>
 800b848:	0659      	lsls	r1, r3, #25
 800b84a:	bf48      	it	mi
 800b84c:	b2b6      	uxthmi	r6, r6
 800b84e:	e7e6      	b.n	800b81e <_printf_i+0x182>
 800b850:	4615      	mov	r5, r2
 800b852:	e7bb      	b.n	800b7cc <_printf_i+0x130>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	6826      	ldr	r6, [r4, #0]
 800b858:	6961      	ldr	r1, [r4, #20]
 800b85a:	1d18      	adds	r0, r3, #4
 800b85c:	6028      	str	r0, [r5, #0]
 800b85e:	0635      	lsls	r5, r6, #24
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	d501      	bpl.n	800b868 <_printf_i+0x1cc>
 800b864:	6019      	str	r1, [r3, #0]
 800b866:	e002      	b.n	800b86e <_printf_i+0x1d2>
 800b868:	0670      	lsls	r0, r6, #25
 800b86a:	d5fb      	bpl.n	800b864 <_printf_i+0x1c8>
 800b86c:	8019      	strh	r1, [r3, #0]
 800b86e:	2300      	movs	r3, #0
 800b870:	6123      	str	r3, [r4, #16]
 800b872:	4615      	mov	r5, r2
 800b874:	e7ba      	b.n	800b7ec <_printf_i+0x150>
 800b876:	682b      	ldr	r3, [r5, #0]
 800b878:	1d1a      	adds	r2, r3, #4
 800b87a:	602a      	str	r2, [r5, #0]
 800b87c:	681d      	ldr	r5, [r3, #0]
 800b87e:	6862      	ldr	r2, [r4, #4]
 800b880:	2100      	movs	r1, #0
 800b882:	4628      	mov	r0, r5
 800b884:	f7f4 fcac 	bl	80001e0 <memchr>
 800b888:	b108      	cbz	r0, 800b88e <_printf_i+0x1f2>
 800b88a:	1b40      	subs	r0, r0, r5
 800b88c:	6060      	str	r0, [r4, #4]
 800b88e:	6863      	ldr	r3, [r4, #4]
 800b890:	6123      	str	r3, [r4, #16]
 800b892:	2300      	movs	r3, #0
 800b894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b898:	e7a8      	b.n	800b7ec <_printf_i+0x150>
 800b89a:	6923      	ldr	r3, [r4, #16]
 800b89c:	462a      	mov	r2, r5
 800b89e:	4649      	mov	r1, r9
 800b8a0:	4640      	mov	r0, r8
 800b8a2:	47d0      	blx	sl
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	d0ab      	beq.n	800b800 <_printf_i+0x164>
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	079b      	lsls	r3, r3, #30
 800b8ac:	d413      	bmi.n	800b8d6 <_printf_i+0x23a>
 800b8ae:	68e0      	ldr	r0, [r4, #12]
 800b8b0:	9b03      	ldr	r3, [sp, #12]
 800b8b2:	4298      	cmp	r0, r3
 800b8b4:	bfb8      	it	lt
 800b8b6:	4618      	movlt	r0, r3
 800b8b8:	e7a4      	b.n	800b804 <_printf_i+0x168>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	4632      	mov	r2, r6
 800b8be:	4649      	mov	r1, r9
 800b8c0:	4640      	mov	r0, r8
 800b8c2:	47d0      	blx	sl
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d09b      	beq.n	800b800 <_printf_i+0x164>
 800b8c8:	3501      	adds	r5, #1
 800b8ca:	68e3      	ldr	r3, [r4, #12]
 800b8cc:	9903      	ldr	r1, [sp, #12]
 800b8ce:	1a5b      	subs	r3, r3, r1
 800b8d0:	42ab      	cmp	r3, r5
 800b8d2:	dcf2      	bgt.n	800b8ba <_printf_i+0x21e>
 800b8d4:	e7eb      	b.n	800b8ae <_printf_i+0x212>
 800b8d6:	2500      	movs	r5, #0
 800b8d8:	f104 0619 	add.w	r6, r4, #25
 800b8dc:	e7f5      	b.n	800b8ca <_printf_i+0x22e>
 800b8de:	bf00      	nop
 800b8e0:	0800e4b6 	.word	0x0800e4b6
 800b8e4:	0800e4c7 	.word	0x0800e4c7

0800b8e8 <iprintf>:
 800b8e8:	b40f      	push	{r0, r1, r2, r3}
 800b8ea:	4b0a      	ldr	r3, [pc, #40]	; (800b914 <iprintf+0x2c>)
 800b8ec:	b513      	push	{r0, r1, r4, lr}
 800b8ee:	681c      	ldr	r4, [r3, #0]
 800b8f0:	b124      	cbz	r4, 800b8fc <iprintf+0x14>
 800b8f2:	69a3      	ldr	r3, [r4, #24]
 800b8f4:	b913      	cbnz	r3, 800b8fc <iprintf+0x14>
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f001 f8fe 	bl	800caf8 <__sinit>
 800b8fc:	ab05      	add	r3, sp, #20
 800b8fe:	9a04      	ldr	r2, [sp, #16]
 800b900:	68a1      	ldr	r1, [r4, #8]
 800b902:	9301      	str	r3, [sp, #4]
 800b904:	4620      	mov	r0, r4
 800b906:	f001 fddf 	bl	800d4c8 <_vfiprintf_r>
 800b90a:	b002      	add	sp, #8
 800b90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b910:	b004      	add	sp, #16
 800b912:	4770      	bx	lr
 800b914:	20000044 	.word	0x20000044

0800b918 <putchar>:
 800b918:	4b09      	ldr	r3, [pc, #36]	; (800b940 <putchar+0x28>)
 800b91a:	b513      	push	{r0, r1, r4, lr}
 800b91c:	681c      	ldr	r4, [r3, #0]
 800b91e:	4601      	mov	r1, r0
 800b920:	b134      	cbz	r4, 800b930 <putchar+0x18>
 800b922:	69a3      	ldr	r3, [r4, #24]
 800b924:	b923      	cbnz	r3, 800b930 <putchar+0x18>
 800b926:	9001      	str	r0, [sp, #4]
 800b928:	4620      	mov	r0, r4
 800b92a:	f001 f8e5 	bl	800caf8 <__sinit>
 800b92e:	9901      	ldr	r1, [sp, #4]
 800b930:	68a2      	ldr	r2, [r4, #8]
 800b932:	4620      	mov	r0, r4
 800b934:	b002      	add	sp, #8
 800b936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b93a:	f001 bef5 	b.w	800d728 <_putc_r>
 800b93e:	bf00      	nop
 800b940:	20000044 	.word	0x20000044

0800b944 <_puts_r>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	460e      	mov	r6, r1
 800b948:	4605      	mov	r5, r0
 800b94a:	b118      	cbz	r0, 800b954 <_puts_r+0x10>
 800b94c:	6983      	ldr	r3, [r0, #24]
 800b94e:	b90b      	cbnz	r3, 800b954 <_puts_r+0x10>
 800b950:	f001 f8d2 	bl	800caf8 <__sinit>
 800b954:	69ab      	ldr	r3, [r5, #24]
 800b956:	68ac      	ldr	r4, [r5, #8]
 800b958:	b913      	cbnz	r3, 800b960 <_puts_r+0x1c>
 800b95a:	4628      	mov	r0, r5
 800b95c:	f001 f8cc 	bl	800caf8 <__sinit>
 800b960:	4b2c      	ldr	r3, [pc, #176]	; (800ba14 <_puts_r+0xd0>)
 800b962:	429c      	cmp	r4, r3
 800b964:	d120      	bne.n	800b9a8 <_puts_r+0x64>
 800b966:	686c      	ldr	r4, [r5, #4]
 800b968:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b96a:	07db      	lsls	r3, r3, #31
 800b96c:	d405      	bmi.n	800b97a <_puts_r+0x36>
 800b96e:	89a3      	ldrh	r3, [r4, #12]
 800b970:	0598      	lsls	r0, r3, #22
 800b972:	d402      	bmi.n	800b97a <_puts_r+0x36>
 800b974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b976:	f001 f962 	bl	800cc3e <__retarget_lock_acquire_recursive>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	0719      	lsls	r1, r3, #28
 800b97e:	d51d      	bpl.n	800b9bc <_puts_r+0x78>
 800b980:	6923      	ldr	r3, [r4, #16]
 800b982:	b1db      	cbz	r3, 800b9bc <_puts_r+0x78>
 800b984:	3e01      	subs	r6, #1
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b98c:	3b01      	subs	r3, #1
 800b98e:	60a3      	str	r3, [r4, #8]
 800b990:	bb39      	cbnz	r1, 800b9e2 <_puts_r+0x9e>
 800b992:	2b00      	cmp	r3, #0
 800b994:	da38      	bge.n	800ba08 <_puts_r+0xc4>
 800b996:	4622      	mov	r2, r4
 800b998:	210a      	movs	r1, #10
 800b99a:	4628      	mov	r0, r5
 800b99c:	f000 f858 	bl	800ba50 <__swbuf_r>
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	d011      	beq.n	800b9c8 <_puts_r+0x84>
 800b9a4:	250a      	movs	r5, #10
 800b9a6:	e011      	b.n	800b9cc <_puts_r+0x88>
 800b9a8:	4b1b      	ldr	r3, [pc, #108]	; (800ba18 <_puts_r+0xd4>)
 800b9aa:	429c      	cmp	r4, r3
 800b9ac:	d101      	bne.n	800b9b2 <_puts_r+0x6e>
 800b9ae:	68ac      	ldr	r4, [r5, #8]
 800b9b0:	e7da      	b.n	800b968 <_puts_r+0x24>
 800b9b2:	4b1a      	ldr	r3, [pc, #104]	; (800ba1c <_puts_r+0xd8>)
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	bf08      	it	eq
 800b9b8:	68ec      	ldreq	r4, [r5, #12]
 800b9ba:	e7d5      	b.n	800b968 <_puts_r+0x24>
 800b9bc:	4621      	mov	r1, r4
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f000 f898 	bl	800baf4 <__swsetup_r>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d0dd      	beq.n	800b984 <_puts_r+0x40>
 800b9c8:	f04f 35ff 	mov.w	r5, #4294967295
 800b9cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9ce:	07da      	lsls	r2, r3, #31
 800b9d0:	d405      	bmi.n	800b9de <_puts_r+0x9a>
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	059b      	lsls	r3, r3, #22
 800b9d6:	d402      	bmi.n	800b9de <_puts_r+0x9a>
 800b9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9da:	f001 f931 	bl	800cc40 <__retarget_lock_release_recursive>
 800b9de:	4628      	mov	r0, r5
 800b9e0:	bd70      	pop	{r4, r5, r6, pc}
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	da04      	bge.n	800b9f0 <_puts_r+0xac>
 800b9e6:	69a2      	ldr	r2, [r4, #24]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	dc06      	bgt.n	800b9fa <_puts_r+0xb6>
 800b9ec:	290a      	cmp	r1, #10
 800b9ee:	d004      	beq.n	800b9fa <_puts_r+0xb6>
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	6022      	str	r2, [r4, #0]
 800b9f6:	7019      	strb	r1, [r3, #0]
 800b9f8:	e7c5      	b.n	800b986 <_puts_r+0x42>
 800b9fa:	4622      	mov	r2, r4
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f000 f827 	bl	800ba50 <__swbuf_r>
 800ba02:	3001      	adds	r0, #1
 800ba04:	d1bf      	bne.n	800b986 <_puts_r+0x42>
 800ba06:	e7df      	b.n	800b9c8 <_puts_r+0x84>
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	250a      	movs	r5, #10
 800ba0c:	1c5a      	adds	r2, r3, #1
 800ba0e:	6022      	str	r2, [r4, #0]
 800ba10:	701d      	strb	r5, [r3, #0]
 800ba12:	e7db      	b.n	800b9cc <_puts_r+0x88>
 800ba14:	0800e588 	.word	0x0800e588
 800ba18:	0800e5a8 	.word	0x0800e5a8
 800ba1c:	0800e568 	.word	0x0800e568

0800ba20 <puts>:
 800ba20:	4b02      	ldr	r3, [pc, #8]	; (800ba2c <puts+0xc>)
 800ba22:	4601      	mov	r1, r0
 800ba24:	6818      	ldr	r0, [r3, #0]
 800ba26:	f7ff bf8d 	b.w	800b944 <_puts_r>
 800ba2a:	bf00      	nop
 800ba2c:	20000044 	.word	0x20000044

0800ba30 <_sbrk_r>:
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4d06      	ldr	r5, [pc, #24]	; (800ba4c <_sbrk_r+0x1c>)
 800ba34:	2300      	movs	r3, #0
 800ba36:	4604      	mov	r4, r0
 800ba38:	4608      	mov	r0, r1
 800ba3a:	602b      	str	r3, [r5, #0]
 800ba3c:	f7f7 fcae 	bl	800339c <_sbrk>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d102      	bne.n	800ba4a <_sbrk_r+0x1a>
 800ba44:	682b      	ldr	r3, [r5, #0]
 800ba46:	b103      	cbz	r3, 800ba4a <_sbrk_r+0x1a>
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	bd38      	pop	{r3, r4, r5, pc}
 800ba4c:	20000bf8 	.word	0x20000bf8

0800ba50 <__swbuf_r>:
 800ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba52:	460e      	mov	r6, r1
 800ba54:	4614      	mov	r4, r2
 800ba56:	4605      	mov	r5, r0
 800ba58:	b118      	cbz	r0, 800ba62 <__swbuf_r+0x12>
 800ba5a:	6983      	ldr	r3, [r0, #24]
 800ba5c:	b90b      	cbnz	r3, 800ba62 <__swbuf_r+0x12>
 800ba5e:	f001 f84b 	bl	800caf8 <__sinit>
 800ba62:	4b21      	ldr	r3, [pc, #132]	; (800bae8 <__swbuf_r+0x98>)
 800ba64:	429c      	cmp	r4, r3
 800ba66:	d12b      	bne.n	800bac0 <__swbuf_r+0x70>
 800ba68:	686c      	ldr	r4, [r5, #4]
 800ba6a:	69a3      	ldr	r3, [r4, #24]
 800ba6c:	60a3      	str	r3, [r4, #8]
 800ba6e:	89a3      	ldrh	r3, [r4, #12]
 800ba70:	071a      	lsls	r2, r3, #28
 800ba72:	d52f      	bpl.n	800bad4 <__swbuf_r+0x84>
 800ba74:	6923      	ldr	r3, [r4, #16]
 800ba76:	b36b      	cbz	r3, 800bad4 <__swbuf_r+0x84>
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	6820      	ldr	r0, [r4, #0]
 800ba7c:	1ac0      	subs	r0, r0, r3
 800ba7e:	6963      	ldr	r3, [r4, #20]
 800ba80:	b2f6      	uxtb	r6, r6
 800ba82:	4283      	cmp	r3, r0
 800ba84:	4637      	mov	r7, r6
 800ba86:	dc04      	bgt.n	800ba92 <__swbuf_r+0x42>
 800ba88:	4621      	mov	r1, r4
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	f000 ffa0 	bl	800c9d0 <_fflush_r>
 800ba90:	bb30      	cbnz	r0, 800bae0 <__swbuf_r+0x90>
 800ba92:	68a3      	ldr	r3, [r4, #8]
 800ba94:	3b01      	subs	r3, #1
 800ba96:	60a3      	str	r3, [r4, #8]
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	6022      	str	r2, [r4, #0]
 800ba9e:	701e      	strb	r6, [r3, #0]
 800baa0:	6963      	ldr	r3, [r4, #20]
 800baa2:	3001      	adds	r0, #1
 800baa4:	4283      	cmp	r3, r0
 800baa6:	d004      	beq.n	800bab2 <__swbuf_r+0x62>
 800baa8:	89a3      	ldrh	r3, [r4, #12]
 800baaa:	07db      	lsls	r3, r3, #31
 800baac:	d506      	bpl.n	800babc <__swbuf_r+0x6c>
 800baae:	2e0a      	cmp	r6, #10
 800bab0:	d104      	bne.n	800babc <__swbuf_r+0x6c>
 800bab2:	4621      	mov	r1, r4
 800bab4:	4628      	mov	r0, r5
 800bab6:	f000 ff8b 	bl	800c9d0 <_fflush_r>
 800baba:	b988      	cbnz	r0, 800bae0 <__swbuf_r+0x90>
 800babc:	4638      	mov	r0, r7
 800babe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bac0:	4b0a      	ldr	r3, [pc, #40]	; (800baec <__swbuf_r+0x9c>)
 800bac2:	429c      	cmp	r4, r3
 800bac4:	d101      	bne.n	800baca <__swbuf_r+0x7a>
 800bac6:	68ac      	ldr	r4, [r5, #8]
 800bac8:	e7cf      	b.n	800ba6a <__swbuf_r+0x1a>
 800baca:	4b09      	ldr	r3, [pc, #36]	; (800baf0 <__swbuf_r+0xa0>)
 800bacc:	429c      	cmp	r4, r3
 800bace:	bf08      	it	eq
 800bad0:	68ec      	ldreq	r4, [r5, #12]
 800bad2:	e7ca      	b.n	800ba6a <__swbuf_r+0x1a>
 800bad4:	4621      	mov	r1, r4
 800bad6:	4628      	mov	r0, r5
 800bad8:	f000 f80c 	bl	800baf4 <__swsetup_r>
 800badc:	2800      	cmp	r0, #0
 800bade:	d0cb      	beq.n	800ba78 <__swbuf_r+0x28>
 800bae0:	f04f 37ff 	mov.w	r7, #4294967295
 800bae4:	e7ea      	b.n	800babc <__swbuf_r+0x6c>
 800bae6:	bf00      	nop
 800bae8:	0800e588 	.word	0x0800e588
 800baec:	0800e5a8 	.word	0x0800e5a8
 800baf0:	0800e568 	.word	0x0800e568

0800baf4 <__swsetup_r>:
 800baf4:	4b32      	ldr	r3, [pc, #200]	; (800bbc0 <__swsetup_r+0xcc>)
 800baf6:	b570      	push	{r4, r5, r6, lr}
 800baf8:	681d      	ldr	r5, [r3, #0]
 800bafa:	4606      	mov	r6, r0
 800bafc:	460c      	mov	r4, r1
 800bafe:	b125      	cbz	r5, 800bb0a <__swsetup_r+0x16>
 800bb00:	69ab      	ldr	r3, [r5, #24]
 800bb02:	b913      	cbnz	r3, 800bb0a <__swsetup_r+0x16>
 800bb04:	4628      	mov	r0, r5
 800bb06:	f000 fff7 	bl	800caf8 <__sinit>
 800bb0a:	4b2e      	ldr	r3, [pc, #184]	; (800bbc4 <__swsetup_r+0xd0>)
 800bb0c:	429c      	cmp	r4, r3
 800bb0e:	d10f      	bne.n	800bb30 <__swsetup_r+0x3c>
 800bb10:	686c      	ldr	r4, [r5, #4]
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb18:	0719      	lsls	r1, r3, #28
 800bb1a:	d42c      	bmi.n	800bb76 <__swsetup_r+0x82>
 800bb1c:	06dd      	lsls	r5, r3, #27
 800bb1e:	d411      	bmi.n	800bb44 <__swsetup_r+0x50>
 800bb20:	2309      	movs	r3, #9
 800bb22:	6033      	str	r3, [r6, #0]
 800bb24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb28:	81a3      	strh	r3, [r4, #12]
 800bb2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2e:	e03e      	b.n	800bbae <__swsetup_r+0xba>
 800bb30:	4b25      	ldr	r3, [pc, #148]	; (800bbc8 <__swsetup_r+0xd4>)
 800bb32:	429c      	cmp	r4, r3
 800bb34:	d101      	bne.n	800bb3a <__swsetup_r+0x46>
 800bb36:	68ac      	ldr	r4, [r5, #8]
 800bb38:	e7eb      	b.n	800bb12 <__swsetup_r+0x1e>
 800bb3a:	4b24      	ldr	r3, [pc, #144]	; (800bbcc <__swsetup_r+0xd8>)
 800bb3c:	429c      	cmp	r4, r3
 800bb3e:	bf08      	it	eq
 800bb40:	68ec      	ldreq	r4, [r5, #12]
 800bb42:	e7e6      	b.n	800bb12 <__swsetup_r+0x1e>
 800bb44:	0758      	lsls	r0, r3, #29
 800bb46:	d512      	bpl.n	800bb6e <__swsetup_r+0x7a>
 800bb48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb4a:	b141      	cbz	r1, 800bb5e <__swsetup_r+0x6a>
 800bb4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb50:	4299      	cmp	r1, r3
 800bb52:	d002      	beq.n	800bb5a <__swsetup_r+0x66>
 800bb54:	4630      	mov	r0, r6
 800bb56:	f7ff f97d 	bl	800ae54 <_free_r>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb64:	81a3      	strh	r3, [r4, #12]
 800bb66:	2300      	movs	r3, #0
 800bb68:	6063      	str	r3, [r4, #4]
 800bb6a:	6923      	ldr	r3, [r4, #16]
 800bb6c:	6023      	str	r3, [r4, #0]
 800bb6e:	89a3      	ldrh	r3, [r4, #12]
 800bb70:	f043 0308 	orr.w	r3, r3, #8
 800bb74:	81a3      	strh	r3, [r4, #12]
 800bb76:	6923      	ldr	r3, [r4, #16]
 800bb78:	b94b      	cbnz	r3, 800bb8e <__swsetup_r+0x9a>
 800bb7a:	89a3      	ldrh	r3, [r4, #12]
 800bb7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb84:	d003      	beq.n	800bb8e <__swsetup_r+0x9a>
 800bb86:	4621      	mov	r1, r4
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f001 f87f 	bl	800cc8c <__smakebuf_r>
 800bb8e:	89a0      	ldrh	r0, [r4, #12]
 800bb90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb94:	f010 0301 	ands.w	r3, r0, #1
 800bb98:	d00a      	beq.n	800bbb0 <__swsetup_r+0xbc>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	60a3      	str	r3, [r4, #8]
 800bb9e:	6963      	ldr	r3, [r4, #20]
 800bba0:	425b      	negs	r3, r3
 800bba2:	61a3      	str	r3, [r4, #24]
 800bba4:	6923      	ldr	r3, [r4, #16]
 800bba6:	b943      	cbnz	r3, 800bbba <__swsetup_r+0xc6>
 800bba8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbac:	d1ba      	bne.n	800bb24 <__swsetup_r+0x30>
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	0781      	lsls	r1, r0, #30
 800bbb2:	bf58      	it	pl
 800bbb4:	6963      	ldrpl	r3, [r4, #20]
 800bbb6:	60a3      	str	r3, [r4, #8]
 800bbb8:	e7f4      	b.n	800bba4 <__swsetup_r+0xb0>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	e7f7      	b.n	800bbae <__swsetup_r+0xba>
 800bbbe:	bf00      	nop
 800bbc0:	20000044 	.word	0x20000044
 800bbc4:	0800e588 	.word	0x0800e588
 800bbc8:	0800e5a8 	.word	0x0800e5a8
 800bbcc:	0800e568 	.word	0x0800e568

0800bbd0 <quorem>:
 800bbd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	6903      	ldr	r3, [r0, #16]
 800bbd6:	690c      	ldr	r4, [r1, #16]
 800bbd8:	42a3      	cmp	r3, r4
 800bbda:	4607      	mov	r7, r0
 800bbdc:	f2c0 8081 	blt.w	800bce2 <quorem+0x112>
 800bbe0:	3c01      	subs	r4, #1
 800bbe2:	f101 0814 	add.w	r8, r1, #20
 800bbe6:	f100 0514 	add.w	r5, r0, #20
 800bbea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbee:	9301      	str	r3, [sp, #4]
 800bbf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc04:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc08:	d331      	bcc.n	800bc6e <quorem+0x9e>
 800bc0a:	f04f 0e00 	mov.w	lr, #0
 800bc0e:	4640      	mov	r0, r8
 800bc10:	46ac      	mov	ip, r5
 800bc12:	46f2      	mov	sl, lr
 800bc14:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc18:	b293      	uxth	r3, r2
 800bc1a:	fb06 e303 	mla	r3, r6, r3, lr
 800bc1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	ebaa 0303 	sub.w	r3, sl, r3
 800bc28:	f8dc a000 	ldr.w	sl, [ip]
 800bc2c:	0c12      	lsrs	r2, r2, #16
 800bc2e:	fa13 f38a 	uxtah	r3, r3, sl
 800bc32:	fb06 e202 	mla	r2, r6, r2, lr
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	9b00      	ldr	r3, [sp, #0]
 800bc3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc3e:	b292      	uxth	r2, r2
 800bc40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc48:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc4c:	4581      	cmp	r9, r0
 800bc4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc52:	f84c 3b04 	str.w	r3, [ip], #4
 800bc56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc5a:	d2db      	bcs.n	800bc14 <quorem+0x44>
 800bc5c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc60:	b92b      	cbnz	r3, 800bc6e <quorem+0x9e>
 800bc62:	9b01      	ldr	r3, [sp, #4]
 800bc64:	3b04      	subs	r3, #4
 800bc66:	429d      	cmp	r5, r3
 800bc68:	461a      	mov	r2, r3
 800bc6a:	d32e      	bcc.n	800bcca <quorem+0xfa>
 800bc6c:	613c      	str	r4, [r7, #16]
 800bc6e:	4638      	mov	r0, r7
 800bc70:	f001 fae8 	bl	800d244 <__mcmp>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	db24      	blt.n	800bcc2 <quorem+0xf2>
 800bc78:	3601      	adds	r6, #1
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	f04f 0c00 	mov.w	ip, #0
 800bc80:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc84:	f8d0 e000 	ldr.w	lr, [r0]
 800bc88:	b293      	uxth	r3, r2
 800bc8a:	ebac 0303 	sub.w	r3, ip, r3
 800bc8e:	0c12      	lsrs	r2, r2, #16
 800bc90:	fa13 f38e 	uxtah	r3, r3, lr
 800bc94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bca2:	45c1      	cmp	r9, r8
 800bca4:	f840 3b04 	str.w	r3, [r0], #4
 800bca8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bcac:	d2e8      	bcs.n	800bc80 <quorem+0xb0>
 800bcae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcb6:	b922      	cbnz	r2, 800bcc2 <quorem+0xf2>
 800bcb8:	3b04      	subs	r3, #4
 800bcba:	429d      	cmp	r5, r3
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	d30a      	bcc.n	800bcd6 <quorem+0x106>
 800bcc0:	613c      	str	r4, [r7, #16]
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	b003      	add	sp, #12
 800bcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcca:	6812      	ldr	r2, [r2, #0]
 800bccc:	3b04      	subs	r3, #4
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	d1cc      	bne.n	800bc6c <quorem+0x9c>
 800bcd2:	3c01      	subs	r4, #1
 800bcd4:	e7c7      	b.n	800bc66 <quorem+0x96>
 800bcd6:	6812      	ldr	r2, [r2, #0]
 800bcd8:	3b04      	subs	r3, #4
 800bcda:	2a00      	cmp	r2, #0
 800bcdc:	d1f0      	bne.n	800bcc0 <quorem+0xf0>
 800bcde:	3c01      	subs	r4, #1
 800bce0:	e7eb      	b.n	800bcba <quorem+0xea>
 800bce2:	2000      	movs	r0, #0
 800bce4:	e7ee      	b.n	800bcc4 <quorem+0xf4>
	...

0800bce8 <_dtoa_r>:
 800bce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcec:	ed2d 8b04 	vpush	{d8-d9}
 800bcf0:	ec57 6b10 	vmov	r6, r7, d0
 800bcf4:	b093      	sub	sp, #76	; 0x4c
 800bcf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bcfc:	9106      	str	r1, [sp, #24]
 800bcfe:	ee10 aa10 	vmov	sl, s0
 800bd02:	4604      	mov	r4, r0
 800bd04:	9209      	str	r2, [sp, #36]	; 0x24
 800bd06:	930c      	str	r3, [sp, #48]	; 0x30
 800bd08:	46bb      	mov	fp, r7
 800bd0a:	b975      	cbnz	r5, 800bd2a <_dtoa_r+0x42>
 800bd0c:	2010      	movs	r0, #16
 800bd0e:	f7ff f889 	bl	800ae24 <malloc>
 800bd12:	4602      	mov	r2, r0
 800bd14:	6260      	str	r0, [r4, #36]	; 0x24
 800bd16:	b920      	cbnz	r0, 800bd22 <_dtoa_r+0x3a>
 800bd18:	4ba7      	ldr	r3, [pc, #668]	; (800bfb8 <_dtoa_r+0x2d0>)
 800bd1a:	21ea      	movs	r1, #234	; 0xea
 800bd1c:	48a7      	ldr	r0, [pc, #668]	; (800bfbc <_dtoa_r+0x2d4>)
 800bd1e:	f001 fda1 	bl	800d864 <__assert_func>
 800bd22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd26:	6005      	str	r5, [r0, #0]
 800bd28:	60c5      	str	r5, [r0, #12]
 800bd2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd2c:	6819      	ldr	r1, [r3, #0]
 800bd2e:	b151      	cbz	r1, 800bd46 <_dtoa_r+0x5e>
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	604a      	str	r2, [r1, #4]
 800bd34:	2301      	movs	r3, #1
 800bd36:	4093      	lsls	r3, r2
 800bd38:	608b      	str	r3, [r1, #8]
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f001 f840 	bl	800cdc0 <_Bfree>
 800bd40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd42:	2200      	movs	r2, #0
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	1e3b      	subs	r3, r7, #0
 800bd48:	bfaa      	itet	ge
 800bd4a:	2300      	movge	r3, #0
 800bd4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bd50:	f8c8 3000 	strge.w	r3, [r8]
 800bd54:	4b9a      	ldr	r3, [pc, #616]	; (800bfc0 <_dtoa_r+0x2d8>)
 800bd56:	bfbc      	itt	lt
 800bd58:	2201      	movlt	r2, #1
 800bd5a:	f8c8 2000 	strlt.w	r2, [r8]
 800bd5e:	ea33 030b 	bics.w	r3, r3, fp
 800bd62:	d11b      	bne.n	800bd9c <_dtoa_r+0xb4>
 800bd64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd66:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd70:	4333      	orrs	r3, r6
 800bd72:	f000 8592 	beq.w	800c89a <_dtoa_r+0xbb2>
 800bd76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd78:	b963      	cbnz	r3, 800bd94 <_dtoa_r+0xac>
 800bd7a:	4b92      	ldr	r3, [pc, #584]	; (800bfc4 <_dtoa_r+0x2dc>)
 800bd7c:	e022      	b.n	800bdc4 <_dtoa_r+0xdc>
 800bd7e:	4b92      	ldr	r3, [pc, #584]	; (800bfc8 <_dtoa_r+0x2e0>)
 800bd80:	9301      	str	r3, [sp, #4]
 800bd82:	3308      	adds	r3, #8
 800bd84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	9801      	ldr	r0, [sp, #4]
 800bd8a:	b013      	add	sp, #76	; 0x4c
 800bd8c:	ecbd 8b04 	vpop	{d8-d9}
 800bd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd94:	4b8b      	ldr	r3, [pc, #556]	; (800bfc4 <_dtoa_r+0x2dc>)
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	3303      	adds	r3, #3
 800bd9a:	e7f3      	b.n	800bd84 <_dtoa_r+0x9c>
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2300      	movs	r3, #0
 800bda0:	4650      	mov	r0, sl
 800bda2:	4659      	mov	r1, fp
 800bda4:	f7f4 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 800bda8:	ec4b ab19 	vmov	d9, sl, fp
 800bdac:	4680      	mov	r8, r0
 800bdae:	b158      	cbz	r0, 800bdc8 <_dtoa_r+0xe0>
 800bdb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	6013      	str	r3, [r2, #0]
 800bdb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 856b 	beq.w	800c894 <_dtoa_r+0xbac>
 800bdbe:	4883      	ldr	r0, [pc, #524]	; (800bfcc <_dtoa_r+0x2e4>)
 800bdc0:	6018      	str	r0, [r3, #0]
 800bdc2:	1e43      	subs	r3, r0, #1
 800bdc4:	9301      	str	r3, [sp, #4]
 800bdc6:	e7df      	b.n	800bd88 <_dtoa_r+0xa0>
 800bdc8:	ec4b ab10 	vmov	d0, sl, fp
 800bdcc:	aa10      	add	r2, sp, #64	; 0x40
 800bdce:	a911      	add	r1, sp, #68	; 0x44
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f001 fadd 	bl	800d390 <__d2b>
 800bdd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bdda:	ee08 0a10 	vmov	s16, r0
 800bdde:	2d00      	cmp	r5, #0
 800bde0:	f000 8084 	beq.w	800beec <_dtoa_r+0x204>
 800bde4:	ee19 3a90 	vmov	r3, s19
 800bde8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bdf0:	4656      	mov	r6, sl
 800bdf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bdf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bdfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bdfe:	4b74      	ldr	r3, [pc, #464]	; (800bfd0 <_dtoa_r+0x2e8>)
 800be00:	2200      	movs	r2, #0
 800be02:	4630      	mov	r0, r6
 800be04:	4639      	mov	r1, r7
 800be06:	f7f4 fa3f 	bl	8000288 <__aeabi_dsub>
 800be0a:	a365      	add	r3, pc, #404	; (adr r3, 800bfa0 <_dtoa_r+0x2b8>)
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	f7f4 fbf2 	bl	80005f8 <__aeabi_dmul>
 800be14:	a364      	add	r3, pc, #400	; (adr r3, 800bfa8 <_dtoa_r+0x2c0>)
 800be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1a:	f7f4 fa37 	bl	800028c <__adddf3>
 800be1e:	4606      	mov	r6, r0
 800be20:	4628      	mov	r0, r5
 800be22:	460f      	mov	r7, r1
 800be24:	f7f4 fb7e 	bl	8000524 <__aeabi_i2d>
 800be28:	a361      	add	r3, pc, #388	; (adr r3, 800bfb0 <_dtoa_r+0x2c8>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	f7f4 fbe3 	bl	80005f8 <__aeabi_dmul>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	4630      	mov	r0, r6
 800be38:	4639      	mov	r1, r7
 800be3a:	f7f4 fa27 	bl	800028c <__adddf3>
 800be3e:	4606      	mov	r6, r0
 800be40:	460f      	mov	r7, r1
 800be42:	f7f4 fe89 	bl	8000b58 <__aeabi_d2iz>
 800be46:	2200      	movs	r2, #0
 800be48:	9000      	str	r0, [sp, #0]
 800be4a:	2300      	movs	r3, #0
 800be4c:	4630      	mov	r0, r6
 800be4e:	4639      	mov	r1, r7
 800be50:	f7f4 fe44 	bl	8000adc <__aeabi_dcmplt>
 800be54:	b150      	cbz	r0, 800be6c <_dtoa_r+0x184>
 800be56:	9800      	ldr	r0, [sp, #0]
 800be58:	f7f4 fb64 	bl	8000524 <__aeabi_i2d>
 800be5c:	4632      	mov	r2, r6
 800be5e:	463b      	mov	r3, r7
 800be60:	f7f4 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 800be64:	b910      	cbnz	r0, 800be6c <_dtoa_r+0x184>
 800be66:	9b00      	ldr	r3, [sp, #0]
 800be68:	3b01      	subs	r3, #1
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	9b00      	ldr	r3, [sp, #0]
 800be6e:	2b16      	cmp	r3, #22
 800be70:	d85a      	bhi.n	800bf28 <_dtoa_r+0x240>
 800be72:	9a00      	ldr	r2, [sp, #0]
 800be74:	4b57      	ldr	r3, [pc, #348]	; (800bfd4 <_dtoa_r+0x2ec>)
 800be76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	ec51 0b19 	vmov	r0, r1, d9
 800be82:	f7f4 fe2b 	bl	8000adc <__aeabi_dcmplt>
 800be86:	2800      	cmp	r0, #0
 800be88:	d050      	beq.n	800bf2c <_dtoa_r+0x244>
 800be8a:	9b00      	ldr	r3, [sp, #0]
 800be8c:	3b01      	subs	r3, #1
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	2300      	movs	r3, #0
 800be92:	930b      	str	r3, [sp, #44]	; 0x2c
 800be94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be96:	1b5d      	subs	r5, r3, r5
 800be98:	1e6b      	subs	r3, r5, #1
 800be9a:	9305      	str	r3, [sp, #20]
 800be9c:	bf45      	ittet	mi
 800be9e:	f1c5 0301 	rsbmi	r3, r5, #1
 800bea2:	9304      	strmi	r3, [sp, #16]
 800bea4:	2300      	movpl	r3, #0
 800bea6:	2300      	movmi	r3, #0
 800bea8:	bf4c      	ite	mi
 800beaa:	9305      	strmi	r3, [sp, #20]
 800beac:	9304      	strpl	r3, [sp, #16]
 800beae:	9b00      	ldr	r3, [sp, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	db3d      	blt.n	800bf30 <_dtoa_r+0x248>
 800beb4:	9b05      	ldr	r3, [sp, #20]
 800beb6:	9a00      	ldr	r2, [sp, #0]
 800beb8:	920a      	str	r2, [sp, #40]	; 0x28
 800beba:	4413      	add	r3, r2
 800bebc:	9305      	str	r3, [sp, #20]
 800bebe:	2300      	movs	r3, #0
 800bec0:	9307      	str	r3, [sp, #28]
 800bec2:	9b06      	ldr	r3, [sp, #24]
 800bec4:	2b09      	cmp	r3, #9
 800bec6:	f200 8089 	bhi.w	800bfdc <_dtoa_r+0x2f4>
 800beca:	2b05      	cmp	r3, #5
 800becc:	bfc4      	itt	gt
 800bece:	3b04      	subgt	r3, #4
 800bed0:	9306      	strgt	r3, [sp, #24]
 800bed2:	9b06      	ldr	r3, [sp, #24]
 800bed4:	f1a3 0302 	sub.w	r3, r3, #2
 800bed8:	bfcc      	ite	gt
 800beda:	2500      	movgt	r5, #0
 800bedc:	2501      	movle	r5, #1
 800bede:	2b03      	cmp	r3, #3
 800bee0:	f200 8087 	bhi.w	800bff2 <_dtoa_r+0x30a>
 800bee4:	e8df f003 	tbb	[pc, r3]
 800bee8:	59383a2d 	.word	0x59383a2d
 800beec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bef0:	441d      	add	r5, r3
 800bef2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bef6:	2b20      	cmp	r3, #32
 800bef8:	bfc1      	itttt	gt
 800befa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800befe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf02:	fa0b f303 	lslgt.w	r3, fp, r3
 800bf06:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf0a:	bfda      	itte	le
 800bf0c:	f1c3 0320 	rsble	r3, r3, #32
 800bf10:	fa06 f003 	lslle.w	r0, r6, r3
 800bf14:	4318      	orrgt	r0, r3
 800bf16:	f7f4 faf5 	bl	8000504 <__aeabi_ui2d>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bf22:	3d01      	subs	r5, #1
 800bf24:	930e      	str	r3, [sp, #56]	; 0x38
 800bf26:	e76a      	b.n	800bdfe <_dtoa_r+0x116>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e7b2      	b.n	800be92 <_dtoa_r+0x1aa>
 800bf2c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf2e:	e7b1      	b.n	800be94 <_dtoa_r+0x1ac>
 800bf30:	9b04      	ldr	r3, [sp, #16]
 800bf32:	9a00      	ldr	r2, [sp, #0]
 800bf34:	1a9b      	subs	r3, r3, r2
 800bf36:	9304      	str	r3, [sp, #16]
 800bf38:	4253      	negs	r3, r2
 800bf3a:	9307      	str	r3, [sp, #28]
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf40:	e7bf      	b.n	800bec2 <_dtoa_r+0x1da>
 800bf42:	2300      	movs	r3, #0
 800bf44:	9308      	str	r3, [sp, #32]
 800bf46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	dc55      	bgt.n	800bff8 <_dtoa_r+0x310>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf52:	461a      	mov	r2, r3
 800bf54:	9209      	str	r2, [sp, #36]	; 0x24
 800bf56:	e00c      	b.n	800bf72 <_dtoa_r+0x28a>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e7f3      	b.n	800bf44 <_dtoa_r+0x25c>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf60:	9308      	str	r3, [sp, #32]
 800bf62:	9b00      	ldr	r3, [sp, #0]
 800bf64:	4413      	add	r3, r2
 800bf66:	9302      	str	r3, [sp, #8]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	9303      	str	r3, [sp, #12]
 800bf6e:	bfb8      	it	lt
 800bf70:	2301      	movlt	r3, #1
 800bf72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bf74:	2200      	movs	r2, #0
 800bf76:	6042      	str	r2, [r0, #4]
 800bf78:	2204      	movs	r2, #4
 800bf7a:	f102 0614 	add.w	r6, r2, #20
 800bf7e:	429e      	cmp	r6, r3
 800bf80:	6841      	ldr	r1, [r0, #4]
 800bf82:	d93d      	bls.n	800c000 <_dtoa_r+0x318>
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 fedb 	bl	800cd40 <_Balloc>
 800bf8a:	9001      	str	r0, [sp, #4]
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d13b      	bne.n	800c008 <_dtoa_r+0x320>
 800bf90:	4b11      	ldr	r3, [pc, #68]	; (800bfd8 <_dtoa_r+0x2f0>)
 800bf92:	4602      	mov	r2, r0
 800bf94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bf98:	e6c0      	b.n	800bd1c <_dtoa_r+0x34>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e7df      	b.n	800bf5e <_dtoa_r+0x276>
 800bf9e:	bf00      	nop
 800bfa0:	636f4361 	.word	0x636f4361
 800bfa4:	3fd287a7 	.word	0x3fd287a7
 800bfa8:	8b60c8b3 	.word	0x8b60c8b3
 800bfac:	3fc68a28 	.word	0x3fc68a28
 800bfb0:	509f79fb 	.word	0x509f79fb
 800bfb4:	3fd34413 	.word	0x3fd34413
 800bfb8:	0800e4e5 	.word	0x0800e4e5
 800bfbc:	0800e4fc 	.word	0x0800e4fc
 800bfc0:	7ff00000 	.word	0x7ff00000
 800bfc4:	0800e4e1 	.word	0x0800e4e1
 800bfc8:	0800e4d8 	.word	0x0800e4d8
 800bfcc:	0800e4b5 	.word	0x0800e4b5
 800bfd0:	3ff80000 	.word	0x3ff80000
 800bfd4:	0800e650 	.word	0x0800e650
 800bfd8:	0800e557 	.word	0x0800e557
 800bfdc:	2501      	movs	r5, #1
 800bfde:	2300      	movs	r3, #0
 800bfe0:	9306      	str	r3, [sp, #24]
 800bfe2:	9508      	str	r5, [sp, #32]
 800bfe4:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bfec:	2200      	movs	r2, #0
 800bfee:	2312      	movs	r3, #18
 800bff0:	e7b0      	b.n	800bf54 <_dtoa_r+0x26c>
 800bff2:	2301      	movs	r3, #1
 800bff4:	9308      	str	r3, [sp, #32]
 800bff6:	e7f5      	b.n	800bfe4 <_dtoa_r+0x2fc>
 800bff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bffa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bffe:	e7b8      	b.n	800bf72 <_dtoa_r+0x28a>
 800c000:	3101      	adds	r1, #1
 800c002:	6041      	str	r1, [r0, #4]
 800c004:	0052      	lsls	r2, r2, #1
 800c006:	e7b8      	b.n	800bf7a <_dtoa_r+0x292>
 800c008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c00a:	9a01      	ldr	r2, [sp, #4]
 800c00c:	601a      	str	r2, [r3, #0]
 800c00e:	9b03      	ldr	r3, [sp, #12]
 800c010:	2b0e      	cmp	r3, #14
 800c012:	f200 809d 	bhi.w	800c150 <_dtoa_r+0x468>
 800c016:	2d00      	cmp	r5, #0
 800c018:	f000 809a 	beq.w	800c150 <_dtoa_r+0x468>
 800c01c:	9b00      	ldr	r3, [sp, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	dd32      	ble.n	800c088 <_dtoa_r+0x3a0>
 800c022:	4ab7      	ldr	r2, [pc, #732]	; (800c300 <_dtoa_r+0x618>)
 800c024:	f003 030f 	and.w	r3, r3, #15
 800c028:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c02c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c030:	9b00      	ldr	r3, [sp, #0]
 800c032:	05d8      	lsls	r0, r3, #23
 800c034:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c038:	d516      	bpl.n	800c068 <_dtoa_r+0x380>
 800c03a:	4bb2      	ldr	r3, [pc, #712]	; (800c304 <_dtoa_r+0x61c>)
 800c03c:	ec51 0b19 	vmov	r0, r1, d9
 800c040:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c044:	f7f4 fc02 	bl	800084c <__aeabi_ddiv>
 800c048:	f007 070f 	and.w	r7, r7, #15
 800c04c:	4682      	mov	sl, r0
 800c04e:	468b      	mov	fp, r1
 800c050:	2503      	movs	r5, #3
 800c052:	4eac      	ldr	r6, [pc, #688]	; (800c304 <_dtoa_r+0x61c>)
 800c054:	b957      	cbnz	r7, 800c06c <_dtoa_r+0x384>
 800c056:	4642      	mov	r2, r8
 800c058:	464b      	mov	r3, r9
 800c05a:	4650      	mov	r0, sl
 800c05c:	4659      	mov	r1, fp
 800c05e:	f7f4 fbf5 	bl	800084c <__aeabi_ddiv>
 800c062:	4682      	mov	sl, r0
 800c064:	468b      	mov	fp, r1
 800c066:	e028      	b.n	800c0ba <_dtoa_r+0x3d2>
 800c068:	2502      	movs	r5, #2
 800c06a:	e7f2      	b.n	800c052 <_dtoa_r+0x36a>
 800c06c:	07f9      	lsls	r1, r7, #31
 800c06e:	d508      	bpl.n	800c082 <_dtoa_r+0x39a>
 800c070:	4640      	mov	r0, r8
 800c072:	4649      	mov	r1, r9
 800c074:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c078:	f7f4 fabe 	bl	80005f8 <__aeabi_dmul>
 800c07c:	3501      	adds	r5, #1
 800c07e:	4680      	mov	r8, r0
 800c080:	4689      	mov	r9, r1
 800c082:	107f      	asrs	r7, r7, #1
 800c084:	3608      	adds	r6, #8
 800c086:	e7e5      	b.n	800c054 <_dtoa_r+0x36c>
 800c088:	f000 809b 	beq.w	800c1c2 <_dtoa_r+0x4da>
 800c08c:	9b00      	ldr	r3, [sp, #0]
 800c08e:	4f9d      	ldr	r7, [pc, #628]	; (800c304 <_dtoa_r+0x61c>)
 800c090:	425e      	negs	r6, r3
 800c092:	4b9b      	ldr	r3, [pc, #620]	; (800c300 <_dtoa_r+0x618>)
 800c094:	f006 020f 	and.w	r2, r6, #15
 800c098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	ec51 0b19 	vmov	r0, r1, d9
 800c0a4:	f7f4 faa8 	bl	80005f8 <__aeabi_dmul>
 800c0a8:	1136      	asrs	r6, r6, #4
 800c0aa:	4682      	mov	sl, r0
 800c0ac:	468b      	mov	fp, r1
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	2502      	movs	r5, #2
 800c0b2:	2e00      	cmp	r6, #0
 800c0b4:	d17a      	bne.n	800c1ac <_dtoa_r+0x4c4>
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1d3      	bne.n	800c062 <_dtoa_r+0x37a>
 800c0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 8082 	beq.w	800c1c6 <_dtoa_r+0x4de>
 800c0c2:	4b91      	ldr	r3, [pc, #580]	; (800c308 <_dtoa_r+0x620>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	4650      	mov	r0, sl
 800c0c8:	4659      	mov	r1, fp
 800c0ca:	f7f4 fd07 	bl	8000adc <__aeabi_dcmplt>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d079      	beq.n	800c1c6 <_dtoa_r+0x4de>
 800c0d2:	9b03      	ldr	r3, [sp, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d076      	beq.n	800c1c6 <_dtoa_r+0x4de>
 800c0d8:	9b02      	ldr	r3, [sp, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dd36      	ble.n	800c14c <_dtoa_r+0x464>
 800c0de:	9b00      	ldr	r3, [sp, #0]
 800c0e0:	4650      	mov	r0, sl
 800c0e2:	4659      	mov	r1, fp
 800c0e4:	1e5f      	subs	r7, r3, #1
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	4b88      	ldr	r3, [pc, #544]	; (800c30c <_dtoa_r+0x624>)
 800c0ea:	f7f4 fa85 	bl	80005f8 <__aeabi_dmul>
 800c0ee:	9e02      	ldr	r6, [sp, #8]
 800c0f0:	4682      	mov	sl, r0
 800c0f2:	468b      	mov	fp, r1
 800c0f4:	3501      	adds	r5, #1
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	f7f4 fa14 	bl	8000524 <__aeabi_i2d>
 800c0fc:	4652      	mov	r2, sl
 800c0fe:	465b      	mov	r3, fp
 800c100:	f7f4 fa7a 	bl	80005f8 <__aeabi_dmul>
 800c104:	4b82      	ldr	r3, [pc, #520]	; (800c310 <_dtoa_r+0x628>)
 800c106:	2200      	movs	r2, #0
 800c108:	f7f4 f8c0 	bl	800028c <__adddf3>
 800c10c:	46d0      	mov	r8, sl
 800c10e:	46d9      	mov	r9, fp
 800c110:	4682      	mov	sl, r0
 800c112:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c116:	2e00      	cmp	r6, #0
 800c118:	d158      	bne.n	800c1cc <_dtoa_r+0x4e4>
 800c11a:	4b7e      	ldr	r3, [pc, #504]	; (800c314 <_dtoa_r+0x62c>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	4640      	mov	r0, r8
 800c120:	4649      	mov	r1, r9
 800c122:	f7f4 f8b1 	bl	8000288 <__aeabi_dsub>
 800c126:	4652      	mov	r2, sl
 800c128:	465b      	mov	r3, fp
 800c12a:	4680      	mov	r8, r0
 800c12c:	4689      	mov	r9, r1
 800c12e:	f7f4 fcf3 	bl	8000b18 <__aeabi_dcmpgt>
 800c132:	2800      	cmp	r0, #0
 800c134:	f040 8295 	bne.w	800c662 <_dtoa_r+0x97a>
 800c138:	4652      	mov	r2, sl
 800c13a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c13e:	4640      	mov	r0, r8
 800c140:	4649      	mov	r1, r9
 800c142:	f7f4 fccb 	bl	8000adc <__aeabi_dcmplt>
 800c146:	2800      	cmp	r0, #0
 800c148:	f040 8289 	bne.w	800c65e <_dtoa_r+0x976>
 800c14c:	ec5b ab19 	vmov	sl, fp, d9
 800c150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c152:	2b00      	cmp	r3, #0
 800c154:	f2c0 8148 	blt.w	800c3e8 <_dtoa_r+0x700>
 800c158:	9a00      	ldr	r2, [sp, #0]
 800c15a:	2a0e      	cmp	r2, #14
 800c15c:	f300 8144 	bgt.w	800c3e8 <_dtoa_r+0x700>
 800c160:	4b67      	ldr	r3, [pc, #412]	; (800c300 <_dtoa_r+0x618>)
 800c162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c166:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f280 80d5 	bge.w	800c31c <_dtoa_r+0x634>
 800c172:	9b03      	ldr	r3, [sp, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	f300 80d1 	bgt.w	800c31c <_dtoa_r+0x634>
 800c17a:	f040 826f 	bne.w	800c65c <_dtoa_r+0x974>
 800c17e:	4b65      	ldr	r3, [pc, #404]	; (800c314 <_dtoa_r+0x62c>)
 800c180:	2200      	movs	r2, #0
 800c182:	4640      	mov	r0, r8
 800c184:	4649      	mov	r1, r9
 800c186:	f7f4 fa37 	bl	80005f8 <__aeabi_dmul>
 800c18a:	4652      	mov	r2, sl
 800c18c:	465b      	mov	r3, fp
 800c18e:	f7f4 fcb9 	bl	8000b04 <__aeabi_dcmpge>
 800c192:	9e03      	ldr	r6, [sp, #12]
 800c194:	4637      	mov	r7, r6
 800c196:	2800      	cmp	r0, #0
 800c198:	f040 8245 	bne.w	800c626 <_dtoa_r+0x93e>
 800c19c:	9d01      	ldr	r5, [sp, #4]
 800c19e:	2331      	movs	r3, #49	; 0x31
 800c1a0:	f805 3b01 	strb.w	r3, [r5], #1
 800c1a4:	9b00      	ldr	r3, [sp, #0]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	9300      	str	r3, [sp, #0]
 800c1aa:	e240      	b.n	800c62e <_dtoa_r+0x946>
 800c1ac:	07f2      	lsls	r2, r6, #31
 800c1ae:	d505      	bpl.n	800c1bc <_dtoa_r+0x4d4>
 800c1b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1b4:	f7f4 fa20 	bl	80005f8 <__aeabi_dmul>
 800c1b8:	3501      	adds	r5, #1
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	1076      	asrs	r6, r6, #1
 800c1be:	3708      	adds	r7, #8
 800c1c0:	e777      	b.n	800c0b2 <_dtoa_r+0x3ca>
 800c1c2:	2502      	movs	r5, #2
 800c1c4:	e779      	b.n	800c0ba <_dtoa_r+0x3d2>
 800c1c6:	9f00      	ldr	r7, [sp, #0]
 800c1c8:	9e03      	ldr	r6, [sp, #12]
 800c1ca:	e794      	b.n	800c0f6 <_dtoa_r+0x40e>
 800c1cc:	9901      	ldr	r1, [sp, #4]
 800c1ce:	4b4c      	ldr	r3, [pc, #304]	; (800c300 <_dtoa_r+0x618>)
 800c1d0:	4431      	add	r1, r6
 800c1d2:	910d      	str	r1, [sp, #52]	; 0x34
 800c1d4:	9908      	ldr	r1, [sp, #32]
 800c1d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c1da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1de:	2900      	cmp	r1, #0
 800c1e0:	d043      	beq.n	800c26a <_dtoa_r+0x582>
 800c1e2:	494d      	ldr	r1, [pc, #308]	; (800c318 <_dtoa_r+0x630>)
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	f7f4 fb31 	bl	800084c <__aeabi_ddiv>
 800c1ea:	4652      	mov	r2, sl
 800c1ec:	465b      	mov	r3, fp
 800c1ee:	f7f4 f84b 	bl	8000288 <__aeabi_dsub>
 800c1f2:	9d01      	ldr	r5, [sp, #4]
 800c1f4:	4682      	mov	sl, r0
 800c1f6:	468b      	mov	fp, r1
 800c1f8:	4649      	mov	r1, r9
 800c1fa:	4640      	mov	r0, r8
 800c1fc:	f7f4 fcac 	bl	8000b58 <__aeabi_d2iz>
 800c200:	4606      	mov	r6, r0
 800c202:	f7f4 f98f 	bl	8000524 <__aeabi_i2d>
 800c206:	4602      	mov	r2, r0
 800c208:	460b      	mov	r3, r1
 800c20a:	4640      	mov	r0, r8
 800c20c:	4649      	mov	r1, r9
 800c20e:	f7f4 f83b 	bl	8000288 <__aeabi_dsub>
 800c212:	3630      	adds	r6, #48	; 0x30
 800c214:	f805 6b01 	strb.w	r6, [r5], #1
 800c218:	4652      	mov	r2, sl
 800c21a:	465b      	mov	r3, fp
 800c21c:	4680      	mov	r8, r0
 800c21e:	4689      	mov	r9, r1
 800c220:	f7f4 fc5c 	bl	8000adc <__aeabi_dcmplt>
 800c224:	2800      	cmp	r0, #0
 800c226:	d163      	bne.n	800c2f0 <_dtoa_r+0x608>
 800c228:	4642      	mov	r2, r8
 800c22a:	464b      	mov	r3, r9
 800c22c:	4936      	ldr	r1, [pc, #216]	; (800c308 <_dtoa_r+0x620>)
 800c22e:	2000      	movs	r0, #0
 800c230:	f7f4 f82a 	bl	8000288 <__aeabi_dsub>
 800c234:	4652      	mov	r2, sl
 800c236:	465b      	mov	r3, fp
 800c238:	f7f4 fc50 	bl	8000adc <__aeabi_dcmplt>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	f040 80b5 	bne.w	800c3ac <_dtoa_r+0x6c4>
 800c242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c244:	429d      	cmp	r5, r3
 800c246:	d081      	beq.n	800c14c <_dtoa_r+0x464>
 800c248:	4b30      	ldr	r3, [pc, #192]	; (800c30c <_dtoa_r+0x624>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	4650      	mov	r0, sl
 800c24e:	4659      	mov	r1, fp
 800c250:	f7f4 f9d2 	bl	80005f8 <__aeabi_dmul>
 800c254:	4b2d      	ldr	r3, [pc, #180]	; (800c30c <_dtoa_r+0x624>)
 800c256:	4682      	mov	sl, r0
 800c258:	468b      	mov	fp, r1
 800c25a:	4640      	mov	r0, r8
 800c25c:	4649      	mov	r1, r9
 800c25e:	2200      	movs	r2, #0
 800c260:	f7f4 f9ca 	bl	80005f8 <__aeabi_dmul>
 800c264:	4680      	mov	r8, r0
 800c266:	4689      	mov	r9, r1
 800c268:	e7c6      	b.n	800c1f8 <_dtoa_r+0x510>
 800c26a:	4650      	mov	r0, sl
 800c26c:	4659      	mov	r1, fp
 800c26e:	f7f4 f9c3 	bl	80005f8 <__aeabi_dmul>
 800c272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c274:	9d01      	ldr	r5, [sp, #4]
 800c276:	930f      	str	r3, [sp, #60]	; 0x3c
 800c278:	4682      	mov	sl, r0
 800c27a:	468b      	mov	fp, r1
 800c27c:	4649      	mov	r1, r9
 800c27e:	4640      	mov	r0, r8
 800c280:	f7f4 fc6a 	bl	8000b58 <__aeabi_d2iz>
 800c284:	4606      	mov	r6, r0
 800c286:	f7f4 f94d 	bl	8000524 <__aeabi_i2d>
 800c28a:	3630      	adds	r6, #48	; 0x30
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4640      	mov	r0, r8
 800c292:	4649      	mov	r1, r9
 800c294:	f7f3 fff8 	bl	8000288 <__aeabi_dsub>
 800c298:	f805 6b01 	strb.w	r6, [r5], #1
 800c29c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c29e:	429d      	cmp	r5, r3
 800c2a0:	4680      	mov	r8, r0
 800c2a2:	4689      	mov	r9, r1
 800c2a4:	f04f 0200 	mov.w	r2, #0
 800c2a8:	d124      	bne.n	800c2f4 <_dtoa_r+0x60c>
 800c2aa:	4b1b      	ldr	r3, [pc, #108]	; (800c318 <_dtoa_r+0x630>)
 800c2ac:	4650      	mov	r0, sl
 800c2ae:	4659      	mov	r1, fp
 800c2b0:	f7f3 ffec 	bl	800028c <__adddf3>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4640      	mov	r0, r8
 800c2ba:	4649      	mov	r1, r9
 800c2bc:	f7f4 fc2c 	bl	8000b18 <__aeabi_dcmpgt>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d173      	bne.n	800c3ac <_dtoa_r+0x6c4>
 800c2c4:	4652      	mov	r2, sl
 800c2c6:	465b      	mov	r3, fp
 800c2c8:	4913      	ldr	r1, [pc, #76]	; (800c318 <_dtoa_r+0x630>)
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f7f3 ffdc 	bl	8000288 <__aeabi_dsub>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	4640      	mov	r0, r8
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	f7f4 fc00 	bl	8000adc <__aeabi_dcmplt>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f43f af35 	beq.w	800c14c <_dtoa_r+0x464>
 800c2e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c2e4:	1e6b      	subs	r3, r5, #1
 800c2e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2ec:	2b30      	cmp	r3, #48	; 0x30
 800c2ee:	d0f8      	beq.n	800c2e2 <_dtoa_r+0x5fa>
 800c2f0:	9700      	str	r7, [sp, #0]
 800c2f2:	e049      	b.n	800c388 <_dtoa_r+0x6a0>
 800c2f4:	4b05      	ldr	r3, [pc, #20]	; (800c30c <_dtoa_r+0x624>)
 800c2f6:	f7f4 f97f 	bl	80005f8 <__aeabi_dmul>
 800c2fa:	4680      	mov	r8, r0
 800c2fc:	4689      	mov	r9, r1
 800c2fe:	e7bd      	b.n	800c27c <_dtoa_r+0x594>
 800c300:	0800e650 	.word	0x0800e650
 800c304:	0800e628 	.word	0x0800e628
 800c308:	3ff00000 	.word	0x3ff00000
 800c30c:	40240000 	.word	0x40240000
 800c310:	401c0000 	.word	0x401c0000
 800c314:	40140000 	.word	0x40140000
 800c318:	3fe00000 	.word	0x3fe00000
 800c31c:	9d01      	ldr	r5, [sp, #4]
 800c31e:	4656      	mov	r6, sl
 800c320:	465f      	mov	r7, fp
 800c322:	4642      	mov	r2, r8
 800c324:	464b      	mov	r3, r9
 800c326:	4630      	mov	r0, r6
 800c328:	4639      	mov	r1, r7
 800c32a:	f7f4 fa8f 	bl	800084c <__aeabi_ddiv>
 800c32e:	f7f4 fc13 	bl	8000b58 <__aeabi_d2iz>
 800c332:	4682      	mov	sl, r0
 800c334:	f7f4 f8f6 	bl	8000524 <__aeabi_i2d>
 800c338:	4642      	mov	r2, r8
 800c33a:	464b      	mov	r3, r9
 800c33c:	f7f4 f95c 	bl	80005f8 <__aeabi_dmul>
 800c340:	4602      	mov	r2, r0
 800c342:	460b      	mov	r3, r1
 800c344:	4630      	mov	r0, r6
 800c346:	4639      	mov	r1, r7
 800c348:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c34c:	f7f3 ff9c 	bl	8000288 <__aeabi_dsub>
 800c350:	f805 6b01 	strb.w	r6, [r5], #1
 800c354:	9e01      	ldr	r6, [sp, #4]
 800c356:	9f03      	ldr	r7, [sp, #12]
 800c358:	1bae      	subs	r6, r5, r6
 800c35a:	42b7      	cmp	r7, r6
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	d135      	bne.n	800c3ce <_dtoa_r+0x6e6>
 800c362:	f7f3 ff93 	bl	800028c <__adddf3>
 800c366:	4642      	mov	r2, r8
 800c368:	464b      	mov	r3, r9
 800c36a:	4606      	mov	r6, r0
 800c36c:	460f      	mov	r7, r1
 800c36e:	f7f4 fbd3 	bl	8000b18 <__aeabi_dcmpgt>
 800c372:	b9d0      	cbnz	r0, 800c3aa <_dtoa_r+0x6c2>
 800c374:	4642      	mov	r2, r8
 800c376:	464b      	mov	r3, r9
 800c378:	4630      	mov	r0, r6
 800c37a:	4639      	mov	r1, r7
 800c37c:	f7f4 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c380:	b110      	cbz	r0, 800c388 <_dtoa_r+0x6a0>
 800c382:	f01a 0f01 	tst.w	sl, #1
 800c386:	d110      	bne.n	800c3aa <_dtoa_r+0x6c2>
 800c388:	4620      	mov	r0, r4
 800c38a:	ee18 1a10 	vmov	r1, s16
 800c38e:	f000 fd17 	bl	800cdc0 <_Bfree>
 800c392:	2300      	movs	r3, #0
 800c394:	9800      	ldr	r0, [sp, #0]
 800c396:	702b      	strb	r3, [r5, #0]
 800c398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c39a:	3001      	adds	r0, #1
 800c39c:	6018      	str	r0, [r3, #0]
 800c39e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f43f acf1 	beq.w	800bd88 <_dtoa_r+0xa0>
 800c3a6:	601d      	str	r5, [r3, #0]
 800c3a8:	e4ee      	b.n	800bd88 <_dtoa_r+0xa0>
 800c3aa:	9f00      	ldr	r7, [sp, #0]
 800c3ac:	462b      	mov	r3, r5
 800c3ae:	461d      	mov	r5, r3
 800c3b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3b4:	2a39      	cmp	r2, #57	; 0x39
 800c3b6:	d106      	bne.n	800c3c6 <_dtoa_r+0x6de>
 800c3b8:	9a01      	ldr	r2, [sp, #4]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d1f7      	bne.n	800c3ae <_dtoa_r+0x6c6>
 800c3be:	9901      	ldr	r1, [sp, #4]
 800c3c0:	2230      	movs	r2, #48	; 0x30
 800c3c2:	3701      	adds	r7, #1
 800c3c4:	700a      	strb	r2, [r1, #0]
 800c3c6:	781a      	ldrb	r2, [r3, #0]
 800c3c8:	3201      	adds	r2, #1
 800c3ca:	701a      	strb	r2, [r3, #0]
 800c3cc:	e790      	b.n	800c2f0 <_dtoa_r+0x608>
 800c3ce:	4ba6      	ldr	r3, [pc, #664]	; (800c668 <_dtoa_r+0x980>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f7f4 f911 	bl	80005f8 <__aeabi_dmul>
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	2300      	movs	r3, #0
 800c3da:	4606      	mov	r6, r0
 800c3dc:	460f      	mov	r7, r1
 800c3de:	f7f4 fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d09d      	beq.n	800c322 <_dtoa_r+0x63a>
 800c3e6:	e7cf      	b.n	800c388 <_dtoa_r+0x6a0>
 800c3e8:	9a08      	ldr	r2, [sp, #32]
 800c3ea:	2a00      	cmp	r2, #0
 800c3ec:	f000 80d7 	beq.w	800c59e <_dtoa_r+0x8b6>
 800c3f0:	9a06      	ldr	r2, [sp, #24]
 800c3f2:	2a01      	cmp	r2, #1
 800c3f4:	f300 80ba 	bgt.w	800c56c <_dtoa_r+0x884>
 800c3f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3fa:	2a00      	cmp	r2, #0
 800c3fc:	f000 80b2 	beq.w	800c564 <_dtoa_r+0x87c>
 800c400:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c404:	9e07      	ldr	r6, [sp, #28]
 800c406:	9d04      	ldr	r5, [sp, #16]
 800c408:	9a04      	ldr	r2, [sp, #16]
 800c40a:	441a      	add	r2, r3
 800c40c:	9204      	str	r2, [sp, #16]
 800c40e:	9a05      	ldr	r2, [sp, #20]
 800c410:	2101      	movs	r1, #1
 800c412:	441a      	add	r2, r3
 800c414:	4620      	mov	r0, r4
 800c416:	9205      	str	r2, [sp, #20]
 800c418:	f000 fd8a 	bl	800cf30 <__i2b>
 800c41c:	4607      	mov	r7, r0
 800c41e:	2d00      	cmp	r5, #0
 800c420:	dd0c      	ble.n	800c43c <_dtoa_r+0x754>
 800c422:	9b05      	ldr	r3, [sp, #20]
 800c424:	2b00      	cmp	r3, #0
 800c426:	dd09      	ble.n	800c43c <_dtoa_r+0x754>
 800c428:	42ab      	cmp	r3, r5
 800c42a:	9a04      	ldr	r2, [sp, #16]
 800c42c:	bfa8      	it	ge
 800c42e:	462b      	movge	r3, r5
 800c430:	1ad2      	subs	r2, r2, r3
 800c432:	9204      	str	r2, [sp, #16]
 800c434:	9a05      	ldr	r2, [sp, #20]
 800c436:	1aed      	subs	r5, r5, r3
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	9305      	str	r3, [sp, #20]
 800c43c:	9b07      	ldr	r3, [sp, #28]
 800c43e:	b31b      	cbz	r3, 800c488 <_dtoa_r+0x7a0>
 800c440:	9b08      	ldr	r3, [sp, #32]
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 80af 	beq.w	800c5a6 <_dtoa_r+0x8be>
 800c448:	2e00      	cmp	r6, #0
 800c44a:	dd13      	ble.n	800c474 <_dtoa_r+0x78c>
 800c44c:	4639      	mov	r1, r7
 800c44e:	4632      	mov	r2, r6
 800c450:	4620      	mov	r0, r4
 800c452:	f000 fe2d 	bl	800d0b0 <__pow5mult>
 800c456:	ee18 2a10 	vmov	r2, s16
 800c45a:	4601      	mov	r1, r0
 800c45c:	4607      	mov	r7, r0
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 fd7c 	bl	800cf5c <__multiply>
 800c464:	ee18 1a10 	vmov	r1, s16
 800c468:	4680      	mov	r8, r0
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 fca8 	bl	800cdc0 <_Bfree>
 800c470:	ee08 8a10 	vmov	s16, r8
 800c474:	9b07      	ldr	r3, [sp, #28]
 800c476:	1b9a      	subs	r2, r3, r6
 800c478:	d006      	beq.n	800c488 <_dtoa_r+0x7a0>
 800c47a:	ee18 1a10 	vmov	r1, s16
 800c47e:	4620      	mov	r0, r4
 800c480:	f000 fe16 	bl	800d0b0 <__pow5mult>
 800c484:	ee08 0a10 	vmov	s16, r0
 800c488:	2101      	movs	r1, #1
 800c48a:	4620      	mov	r0, r4
 800c48c:	f000 fd50 	bl	800cf30 <__i2b>
 800c490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c492:	2b00      	cmp	r3, #0
 800c494:	4606      	mov	r6, r0
 800c496:	f340 8088 	ble.w	800c5aa <_dtoa_r+0x8c2>
 800c49a:	461a      	mov	r2, r3
 800c49c:	4601      	mov	r1, r0
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f000 fe06 	bl	800d0b0 <__pow5mult>
 800c4a4:	9b06      	ldr	r3, [sp, #24]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	f340 8081 	ble.w	800c5b0 <_dtoa_r+0x8c8>
 800c4ae:	f04f 0800 	mov.w	r8, #0
 800c4b2:	6933      	ldr	r3, [r6, #16]
 800c4b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c4b8:	6918      	ldr	r0, [r3, #16]
 800c4ba:	f000 fce9 	bl	800ce90 <__hi0bits>
 800c4be:	f1c0 0020 	rsb	r0, r0, #32
 800c4c2:	9b05      	ldr	r3, [sp, #20]
 800c4c4:	4418      	add	r0, r3
 800c4c6:	f010 001f 	ands.w	r0, r0, #31
 800c4ca:	f000 8092 	beq.w	800c5f2 <_dtoa_r+0x90a>
 800c4ce:	f1c0 0320 	rsb	r3, r0, #32
 800c4d2:	2b04      	cmp	r3, #4
 800c4d4:	f340 808a 	ble.w	800c5ec <_dtoa_r+0x904>
 800c4d8:	f1c0 001c 	rsb	r0, r0, #28
 800c4dc:	9b04      	ldr	r3, [sp, #16]
 800c4de:	4403      	add	r3, r0
 800c4e0:	9304      	str	r3, [sp, #16]
 800c4e2:	9b05      	ldr	r3, [sp, #20]
 800c4e4:	4403      	add	r3, r0
 800c4e6:	4405      	add	r5, r0
 800c4e8:	9305      	str	r3, [sp, #20]
 800c4ea:	9b04      	ldr	r3, [sp, #16]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	dd07      	ble.n	800c500 <_dtoa_r+0x818>
 800c4f0:	ee18 1a10 	vmov	r1, s16
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 fe34 	bl	800d164 <__lshift>
 800c4fc:	ee08 0a10 	vmov	s16, r0
 800c500:	9b05      	ldr	r3, [sp, #20]
 800c502:	2b00      	cmp	r3, #0
 800c504:	dd05      	ble.n	800c512 <_dtoa_r+0x82a>
 800c506:	4631      	mov	r1, r6
 800c508:	461a      	mov	r2, r3
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 fe2a 	bl	800d164 <__lshift>
 800c510:	4606      	mov	r6, r0
 800c512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c514:	2b00      	cmp	r3, #0
 800c516:	d06e      	beq.n	800c5f6 <_dtoa_r+0x90e>
 800c518:	ee18 0a10 	vmov	r0, s16
 800c51c:	4631      	mov	r1, r6
 800c51e:	f000 fe91 	bl	800d244 <__mcmp>
 800c522:	2800      	cmp	r0, #0
 800c524:	da67      	bge.n	800c5f6 <_dtoa_r+0x90e>
 800c526:	9b00      	ldr	r3, [sp, #0]
 800c528:	3b01      	subs	r3, #1
 800c52a:	ee18 1a10 	vmov	r1, s16
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	220a      	movs	r2, #10
 800c532:	2300      	movs	r3, #0
 800c534:	4620      	mov	r0, r4
 800c536:	f000 fc65 	bl	800ce04 <__multadd>
 800c53a:	9b08      	ldr	r3, [sp, #32]
 800c53c:	ee08 0a10 	vmov	s16, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	f000 81b1 	beq.w	800c8a8 <_dtoa_r+0xbc0>
 800c546:	2300      	movs	r3, #0
 800c548:	4639      	mov	r1, r7
 800c54a:	220a      	movs	r2, #10
 800c54c:	4620      	mov	r0, r4
 800c54e:	f000 fc59 	bl	800ce04 <__multadd>
 800c552:	9b02      	ldr	r3, [sp, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	4607      	mov	r7, r0
 800c558:	f300 808e 	bgt.w	800c678 <_dtoa_r+0x990>
 800c55c:	9b06      	ldr	r3, [sp, #24]
 800c55e:	2b02      	cmp	r3, #2
 800c560:	dc51      	bgt.n	800c606 <_dtoa_r+0x91e>
 800c562:	e089      	b.n	800c678 <_dtoa_r+0x990>
 800c564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c56a:	e74b      	b.n	800c404 <_dtoa_r+0x71c>
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	1e5e      	subs	r6, r3, #1
 800c570:	9b07      	ldr	r3, [sp, #28]
 800c572:	42b3      	cmp	r3, r6
 800c574:	bfbf      	itttt	lt
 800c576:	9b07      	ldrlt	r3, [sp, #28]
 800c578:	9607      	strlt	r6, [sp, #28]
 800c57a:	1af2      	sublt	r2, r6, r3
 800c57c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c57e:	bfb6      	itet	lt
 800c580:	189b      	addlt	r3, r3, r2
 800c582:	1b9e      	subge	r6, r3, r6
 800c584:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	bfb8      	it	lt
 800c58a:	2600      	movlt	r6, #0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bfb7      	itett	lt
 800c590:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c594:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c598:	1a9d      	sublt	r5, r3, r2
 800c59a:	2300      	movlt	r3, #0
 800c59c:	e734      	b.n	800c408 <_dtoa_r+0x720>
 800c59e:	9e07      	ldr	r6, [sp, #28]
 800c5a0:	9d04      	ldr	r5, [sp, #16]
 800c5a2:	9f08      	ldr	r7, [sp, #32]
 800c5a4:	e73b      	b.n	800c41e <_dtoa_r+0x736>
 800c5a6:	9a07      	ldr	r2, [sp, #28]
 800c5a8:	e767      	b.n	800c47a <_dtoa_r+0x792>
 800c5aa:	9b06      	ldr	r3, [sp, #24]
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	dc18      	bgt.n	800c5e2 <_dtoa_r+0x8fa>
 800c5b0:	f1ba 0f00 	cmp.w	sl, #0
 800c5b4:	d115      	bne.n	800c5e2 <_dtoa_r+0x8fa>
 800c5b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5ba:	b993      	cbnz	r3, 800c5e2 <_dtoa_r+0x8fa>
 800c5bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5c0:	0d1b      	lsrs	r3, r3, #20
 800c5c2:	051b      	lsls	r3, r3, #20
 800c5c4:	b183      	cbz	r3, 800c5e8 <_dtoa_r+0x900>
 800c5c6:	9b04      	ldr	r3, [sp, #16]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	9304      	str	r3, [sp, #16]
 800c5cc:	9b05      	ldr	r3, [sp, #20]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	9305      	str	r3, [sp, #20]
 800c5d2:	f04f 0801 	mov.w	r8, #1
 800c5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f47f af6a 	bne.w	800c4b2 <_dtoa_r+0x7ca>
 800c5de:	2001      	movs	r0, #1
 800c5e0:	e76f      	b.n	800c4c2 <_dtoa_r+0x7da>
 800c5e2:	f04f 0800 	mov.w	r8, #0
 800c5e6:	e7f6      	b.n	800c5d6 <_dtoa_r+0x8ee>
 800c5e8:	4698      	mov	r8, r3
 800c5ea:	e7f4      	b.n	800c5d6 <_dtoa_r+0x8ee>
 800c5ec:	f43f af7d 	beq.w	800c4ea <_dtoa_r+0x802>
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	301c      	adds	r0, #28
 800c5f4:	e772      	b.n	800c4dc <_dtoa_r+0x7f4>
 800c5f6:	9b03      	ldr	r3, [sp, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	dc37      	bgt.n	800c66c <_dtoa_r+0x984>
 800c5fc:	9b06      	ldr	r3, [sp, #24]
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	dd34      	ble.n	800c66c <_dtoa_r+0x984>
 800c602:	9b03      	ldr	r3, [sp, #12]
 800c604:	9302      	str	r3, [sp, #8]
 800c606:	9b02      	ldr	r3, [sp, #8]
 800c608:	b96b      	cbnz	r3, 800c626 <_dtoa_r+0x93e>
 800c60a:	4631      	mov	r1, r6
 800c60c:	2205      	movs	r2, #5
 800c60e:	4620      	mov	r0, r4
 800c610:	f000 fbf8 	bl	800ce04 <__multadd>
 800c614:	4601      	mov	r1, r0
 800c616:	4606      	mov	r6, r0
 800c618:	ee18 0a10 	vmov	r0, s16
 800c61c:	f000 fe12 	bl	800d244 <__mcmp>
 800c620:	2800      	cmp	r0, #0
 800c622:	f73f adbb 	bgt.w	800c19c <_dtoa_r+0x4b4>
 800c626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c628:	9d01      	ldr	r5, [sp, #4]
 800c62a:	43db      	mvns	r3, r3
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	f04f 0800 	mov.w	r8, #0
 800c632:	4631      	mov	r1, r6
 800c634:	4620      	mov	r0, r4
 800c636:	f000 fbc3 	bl	800cdc0 <_Bfree>
 800c63a:	2f00      	cmp	r7, #0
 800c63c:	f43f aea4 	beq.w	800c388 <_dtoa_r+0x6a0>
 800c640:	f1b8 0f00 	cmp.w	r8, #0
 800c644:	d005      	beq.n	800c652 <_dtoa_r+0x96a>
 800c646:	45b8      	cmp	r8, r7
 800c648:	d003      	beq.n	800c652 <_dtoa_r+0x96a>
 800c64a:	4641      	mov	r1, r8
 800c64c:	4620      	mov	r0, r4
 800c64e:	f000 fbb7 	bl	800cdc0 <_Bfree>
 800c652:	4639      	mov	r1, r7
 800c654:	4620      	mov	r0, r4
 800c656:	f000 fbb3 	bl	800cdc0 <_Bfree>
 800c65a:	e695      	b.n	800c388 <_dtoa_r+0x6a0>
 800c65c:	2600      	movs	r6, #0
 800c65e:	4637      	mov	r7, r6
 800c660:	e7e1      	b.n	800c626 <_dtoa_r+0x93e>
 800c662:	9700      	str	r7, [sp, #0]
 800c664:	4637      	mov	r7, r6
 800c666:	e599      	b.n	800c19c <_dtoa_r+0x4b4>
 800c668:	40240000 	.word	0x40240000
 800c66c:	9b08      	ldr	r3, [sp, #32]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 80ca 	beq.w	800c808 <_dtoa_r+0xb20>
 800c674:	9b03      	ldr	r3, [sp, #12]
 800c676:	9302      	str	r3, [sp, #8]
 800c678:	2d00      	cmp	r5, #0
 800c67a:	dd05      	ble.n	800c688 <_dtoa_r+0x9a0>
 800c67c:	4639      	mov	r1, r7
 800c67e:	462a      	mov	r2, r5
 800c680:	4620      	mov	r0, r4
 800c682:	f000 fd6f 	bl	800d164 <__lshift>
 800c686:	4607      	mov	r7, r0
 800c688:	f1b8 0f00 	cmp.w	r8, #0
 800c68c:	d05b      	beq.n	800c746 <_dtoa_r+0xa5e>
 800c68e:	6879      	ldr	r1, [r7, #4]
 800c690:	4620      	mov	r0, r4
 800c692:	f000 fb55 	bl	800cd40 <_Balloc>
 800c696:	4605      	mov	r5, r0
 800c698:	b928      	cbnz	r0, 800c6a6 <_dtoa_r+0x9be>
 800c69a:	4b87      	ldr	r3, [pc, #540]	; (800c8b8 <_dtoa_r+0xbd0>)
 800c69c:	4602      	mov	r2, r0
 800c69e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c6a2:	f7ff bb3b 	b.w	800bd1c <_dtoa_r+0x34>
 800c6a6:	693a      	ldr	r2, [r7, #16]
 800c6a8:	3202      	adds	r2, #2
 800c6aa:	0092      	lsls	r2, r2, #2
 800c6ac:	f107 010c 	add.w	r1, r7, #12
 800c6b0:	300c      	adds	r0, #12
 800c6b2:	f000 fb2b 	bl	800cd0c <memcpy>
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f000 fd52 	bl	800d164 <__lshift>
 800c6c0:	9b01      	ldr	r3, [sp, #4]
 800c6c2:	f103 0901 	add.w	r9, r3, #1
 800c6c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	9305      	str	r3, [sp, #20]
 800c6ce:	f00a 0301 	and.w	r3, sl, #1
 800c6d2:	46b8      	mov	r8, r7
 800c6d4:	9304      	str	r3, [sp, #16]
 800c6d6:	4607      	mov	r7, r0
 800c6d8:	4631      	mov	r1, r6
 800c6da:	ee18 0a10 	vmov	r0, s16
 800c6de:	f7ff fa77 	bl	800bbd0 <quorem>
 800c6e2:	4641      	mov	r1, r8
 800c6e4:	9002      	str	r0, [sp, #8]
 800c6e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c6ea:	ee18 0a10 	vmov	r0, s16
 800c6ee:	f000 fda9 	bl	800d244 <__mcmp>
 800c6f2:	463a      	mov	r2, r7
 800c6f4:	9003      	str	r0, [sp, #12]
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f000 fdbf 	bl	800d27c <__mdiff>
 800c6fe:	68c2      	ldr	r2, [r0, #12]
 800c700:	f109 3bff 	add.w	fp, r9, #4294967295
 800c704:	4605      	mov	r5, r0
 800c706:	bb02      	cbnz	r2, 800c74a <_dtoa_r+0xa62>
 800c708:	4601      	mov	r1, r0
 800c70a:	ee18 0a10 	vmov	r0, s16
 800c70e:	f000 fd99 	bl	800d244 <__mcmp>
 800c712:	4602      	mov	r2, r0
 800c714:	4629      	mov	r1, r5
 800c716:	4620      	mov	r0, r4
 800c718:	9207      	str	r2, [sp, #28]
 800c71a:	f000 fb51 	bl	800cdc0 <_Bfree>
 800c71e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c722:	ea43 0102 	orr.w	r1, r3, r2
 800c726:	9b04      	ldr	r3, [sp, #16]
 800c728:	430b      	orrs	r3, r1
 800c72a:	464d      	mov	r5, r9
 800c72c:	d10f      	bne.n	800c74e <_dtoa_r+0xa66>
 800c72e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c732:	d02a      	beq.n	800c78a <_dtoa_r+0xaa2>
 800c734:	9b03      	ldr	r3, [sp, #12]
 800c736:	2b00      	cmp	r3, #0
 800c738:	dd02      	ble.n	800c740 <_dtoa_r+0xa58>
 800c73a:	9b02      	ldr	r3, [sp, #8]
 800c73c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c740:	f88b a000 	strb.w	sl, [fp]
 800c744:	e775      	b.n	800c632 <_dtoa_r+0x94a>
 800c746:	4638      	mov	r0, r7
 800c748:	e7ba      	b.n	800c6c0 <_dtoa_r+0x9d8>
 800c74a:	2201      	movs	r2, #1
 800c74c:	e7e2      	b.n	800c714 <_dtoa_r+0xa2c>
 800c74e:	9b03      	ldr	r3, [sp, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	db04      	blt.n	800c75e <_dtoa_r+0xa76>
 800c754:	9906      	ldr	r1, [sp, #24]
 800c756:	430b      	orrs	r3, r1
 800c758:	9904      	ldr	r1, [sp, #16]
 800c75a:	430b      	orrs	r3, r1
 800c75c:	d122      	bne.n	800c7a4 <_dtoa_r+0xabc>
 800c75e:	2a00      	cmp	r2, #0
 800c760:	ddee      	ble.n	800c740 <_dtoa_r+0xa58>
 800c762:	ee18 1a10 	vmov	r1, s16
 800c766:	2201      	movs	r2, #1
 800c768:	4620      	mov	r0, r4
 800c76a:	f000 fcfb 	bl	800d164 <__lshift>
 800c76e:	4631      	mov	r1, r6
 800c770:	ee08 0a10 	vmov	s16, r0
 800c774:	f000 fd66 	bl	800d244 <__mcmp>
 800c778:	2800      	cmp	r0, #0
 800c77a:	dc03      	bgt.n	800c784 <_dtoa_r+0xa9c>
 800c77c:	d1e0      	bne.n	800c740 <_dtoa_r+0xa58>
 800c77e:	f01a 0f01 	tst.w	sl, #1
 800c782:	d0dd      	beq.n	800c740 <_dtoa_r+0xa58>
 800c784:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c788:	d1d7      	bne.n	800c73a <_dtoa_r+0xa52>
 800c78a:	2339      	movs	r3, #57	; 0x39
 800c78c:	f88b 3000 	strb.w	r3, [fp]
 800c790:	462b      	mov	r3, r5
 800c792:	461d      	mov	r5, r3
 800c794:	3b01      	subs	r3, #1
 800c796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c79a:	2a39      	cmp	r2, #57	; 0x39
 800c79c:	d071      	beq.n	800c882 <_dtoa_r+0xb9a>
 800c79e:	3201      	adds	r2, #1
 800c7a0:	701a      	strb	r2, [r3, #0]
 800c7a2:	e746      	b.n	800c632 <_dtoa_r+0x94a>
 800c7a4:	2a00      	cmp	r2, #0
 800c7a6:	dd07      	ble.n	800c7b8 <_dtoa_r+0xad0>
 800c7a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7ac:	d0ed      	beq.n	800c78a <_dtoa_r+0xaa2>
 800c7ae:	f10a 0301 	add.w	r3, sl, #1
 800c7b2:	f88b 3000 	strb.w	r3, [fp]
 800c7b6:	e73c      	b.n	800c632 <_dtoa_r+0x94a>
 800c7b8:	9b05      	ldr	r3, [sp, #20]
 800c7ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c7be:	4599      	cmp	r9, r3
 800c7c0:	d047      	beq.n	800c852 <_dtoa_r+0xb6a>
 800c7c2:	ee18 1a10 	vmov	r1, s16
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	220a      	movs	r2, #10
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 fb1a 	bl	800ce04 <__multadd>
 800c7d0:	45b8      	cmp	r8, r7
 800c7d2:	ee08 0a10 	vmov	s16, r0
 800c7d6:	f04f 0300 	mov.w	r3, #0
 800c7da:	f04f 020a 	mov.w	r2, #10
 800c7de:	4641      	mov	r1, r8
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	d106      	bne.n	800c7f2 <_dtoa_r+0xb0a>
 800c7e4:	f000 fb0e 	bl	800ce04 <__multadd>
 800c7e8:	4680      	mov	r8, r0
 800c7ea:	4607      	mov	r7, r0
 800c7ec:	f109 0901 	add.w	r9, r9, #1
 800c7f0:	e772      	b.n	800c6d8 <_dtoa_r+0x9f0>
 800c7f2:	f000 fb07 	bl	800ce04 <__multadd>
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	4680      	mov	r8, r0
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	220a      	movs	r2, #10
 800c7fe:	4620      	mov	r0, r4
 800c800:	f000 fb00 	bl	800ce04 <__multadd>
 800c804:	4607      	mov	r7, r0
 800c806:	e7f1      	b.n	800c7ec <_dtoa_r+0xb04>
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	9302      	str	r3, [sp, #8]
 800c80c:	9d01      	ldr	r5, [sp, #4]
 800c80e:	ee18 0a10 	vmov	r0, s16
 800c812:	4631      	mov	r1, r6
 800c814:	f7ff f9dc 	bl	800bbd0 <quorem>
 800c818:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c81c:	9b01      	ldr	r3, [sp, #4]
 800c81e:	f805 ab01 	strb.w	sl, [r5], #1
 800c822:	1aea      	subs	r2, r5, r3
 800c824:	9b02      	ldr	r3, [sp, #8]
 800c826:	4293      	cmp	r3, r2
 800c828:	dd09      	ble.n	800c83e <_dtoa_r+0xb56>
 800c82a:	ee18 1a10 	vmov	r1, s16
 800c82e:	2300      	movs	r3, #0
 800c830:	220a      	movs	r2, #10
 800c832:	4620      	mov	r0, r4
 800c834:	f000 fae6 	bl	800ce04 <__multadd>
 800c838:	ee08 0a10 	vmov	s16, r0
 800c83c:	e7e7      	b.n	800c80e <_dtoa_r+0xb26>
 800c83e:	9b02      	ldr	r3, [sp, #8]
 800c840:	2b00      	cmp	r3, #0
 800c842:	bfc8      	it	gt
 800c844:	461d      	movgt	r5, r3
 800c846:	9b01      	ldr	r3, [sp, #4]
 800c848:	bfd8      	it	le
 800c84a:	2501      	movle	r5, #1
 800c84c:	441d      	add	r5, r3
 800c84e:	f04f 0800 	mov.w	r8, #0
 800c852:	ee18 1a10 	vmov	r1, s16
 800c856:	2201      	movs	r2, #1
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 fc83 	bl	800d164 <__lshift>
 800c85e:	4631      	mov	r1, r6
 800c860:	ee08 0a10 	vmov	s16, r0
 800c864:	f000 fcee 	bl	800d244 <__mcmp>
 800c868:	2800      	cmp	r0, #0
 800c86a:	dc91      	bgt.n	800c790 <_dtoa_r+0xaa8>
 800c86c:	d102      	bne.n	800c874 <_dtoa_r+0xb8c>
 800c86e:	f01a 0f01 	tst.w	sl, #1
 800c872:	d18d      	bne.n	800c790 <_dtoa_r+0xaa8>
 800c874:	462b      	mov	r3, r5
 800c876:	461d      	mov	r5, r3
 800c878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c87c:	2a30      	cmp	r2, #48	; 0x30
 800c87e:	d0fa      	beq.n	800c876 <_dtoa_r+0xb8e>
 800c880:	e6d7      	b.n	800c632 <_dtoa_r+0x94a>
 800c882:	9a01      	ldr	r2, [sp, #4]
 800c884:	429a      	cmp	r2, r3
 800c886:	d184      	bne.n	800c792 <_dtoa_r+0xaaa>
 800c888:	9b00      	ldr	r3, [sp, #0]
 800c88a:	3301      	adds	r3, #1
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	2331      	movs	r3, #49	; 0x31
 800c890:	7013      	strb	r3, [r2, #0]
 800c892:	e6ce      	b.n	800c632 <_dtoa_r+0x94a>
 800c894:	4b09      	ldr	r3, [pc, #36]	; (800c8bc <_dtoa_r+0xbd4>)
 800c896:	f7ff ba95 	b.w	800bdc4 <_dtoa_r+0xdc>
 800c89a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f47f aa6e 	bne.w	800bd7e <_dtoa_r+0x96>
 800c8a2:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <_dtoa_r+0xbd8>)
 800c8a4:	f7ff ba8e 	b.w	800bdc4 <_dtoa_r+0xdc>
 800c8a8:	9b02      	ldr	r3, [sp, #8]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	dcae      	bgt.n	800c80c <_dtoa_r+0xb24>
 800c8ae:	9b06      	ldr	r3, [sp, #24]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	f73f aea8 	bgt.w	800c606 <_dtoa_r+0x91e>
 800c8b6:	e7a9      	b.n	800c80c <_dtoa_r+0xb24>
 800c8b8:	0800e557 	.word	0x0800e557
 800c8bc:	0800e4b4 	.word	0x0800e4b4
 800c8c0:	0800e4d8 	.word	0x0800e4d8

0800c8c4 <__sflush_r>:
 800c8c4:	898a      	ldrh	r2, [r1, #12]
 800c8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	0710      	lsls	r0, r2, #28
 800c8ce:	460c      	mov	r4, r1
 800c8d0:	d458      	bmi.n	800c984 <__sflush_r+0xc0>
 800c8d2:	684b      	ldr	r3, [r1, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	dc05      	bgt.n	800c8e4 <__sflush_r+0x20>
 800c8d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	dc02      	bgt.n	800c8e4 <__sflush_r+0x20>
 800c8de:	2000      	movs	r0, #0
 800c8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8e6:	2e00      	cmp	r6, #0
 800c8e8:	d0f9      	beq.n	800c8de <__sflush_r+0x1a>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8f0:	682f      	ldr	r7, [r5, #0]
 800c8f2:	602b      	str	r3, [r5, #0]
 800c8f4:	d032      	beq.n	800c95c <__sflush_r+0x98>
 800c8f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	075a      	lsls	r2, r3, #29
 800c8fc:	d505      	bpl.n	800c90a <__sflush_r+0x46>
 800c8fe:	6863      	ldr	r3, [r4, #4]
 800c900:	1ac0      	subs	r0, r0, r3
 800c902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c904:	b10b      	cbz	r3, 800c90a <__sflush_r+0x46>
 800c906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c908:	1ac0      	subs	r0, r0, r3
 800c90a:	2300      	movs	r3, #0
 800c90c:	4602      	mov	r2, r0
 800c90e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c910:	6a21      	ldr	r1, [r4, #32]
 800c912:	4628      	mov	r0, r5
 800c914:	47b0      	blx	r6
 800c916:	1c43      	adds	r3, r0, #1
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	d106      	bne.n	800c92a <__sflush_r+0x66>
 800c91c:	6829      	ldr	r1, [r5, #0]
 800c91e:	291d      	cmp	r1, #29
 800c920:	d82c      	bhi.n	800c97c <__sflush_r+0xb8>
 800c922:	4a2a      	ldr	r2, [pc, #168]	; (800c9cc <__sflush_r+0x108>)
 800c924:	40ca      	lsrs	r2, r1
 800c926:	07d6      	lsls	r6, r2, #31
 800c928:	d528      	bpl.n	800c97c <__sflush_r+0xb8>
 800c92a:	2200      	movs	r2, #0
 800c92c:	6062      	str	r2, [r4, #4]
 800c92e:	04d9      	lsls	r1, r3, #19
 800c930:	6922      	ldr	r2, [r4, #16]
 800c932:	6022      	str	r2, [r4, #0]
 800c934:	d504      	bpl.n	800c940 <__sflush_r+0x7c>
 800c936:	1c42      	adds	r2, r0, #1
 800c938:	d101      	bne.n	800c93e <__sflush_r+0x7a>
 800c93a:	682b      	ldr	r3, [r5, #0]
 800c93c:	b903      	cbnz	r3, 800c940 <__sflush_r+0x7c>
 800c93e:	6560      	str	r0, [r4, #84]	; 0x54
 800c940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c942:	602f      	str	r7, [r5, #0]
 800c944:	2900      	cmp	r1, #0
 800c946:	d0ca      	beq.n	800c8de <__sflush_r+0x1a>
 800c948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c94c:	4299      	cmp	r1, r3
 800c94e:	d002      	beq.n	800c956 <__sflush_r+0x92>
 800c950:	4628      	mov	r0, r5
 800c952:	f7fe fa7f 	bl	800ae54 <_free_r>
 800c956:	2000      	movs	r0, #0
 800c958:	6360      	str	r0, [r4, #52]	; 0x34
 800c95a:	e7c1      	b.n	800c8e0 <__sflush_r+0x1c>
 800c95c:	6a21      	ldr	r1, [r4, #32]
 800c95e:	2301      	movs	r3, #1
 800c960:	4628      	mov	r0, r5
 800c962:	47b0      	blx	r6
 800c964:	1c41      	adds	r1, r0, #1
 800c966:	d1c7      	bne.n	800c8f8 <__sflush_r+0x34>
 800c968:	682b      	ldr	r3, [r5, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d0c4      	beq.n	800c8f8 <__sflush_r+0x34>
 800c96e:	2b1d      	cmp	r3, #29
 800c970:	d001      	beq.n	800c976 <__sflush_r+0xb2>
 800c972:	2b16      	cmp	r3, #22
 800c974:	d101      	bne.n	800c97a <__sflush_r+0xb6>
 800c976:	602f      	str	r7, [r5, #0]
 800c978:	e7b1      	b.n	800c8de <__sflush_r+0x1a>
 800c97a:	89a3      	ldrh	r3, [r4, #12]
 800c97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c980:	81a3      	strh	r3, [r4, #12]
 800c982:	e7ad      	b.n	800c8e0 <__sflush_r+0x1c>
 800c984:	690f      	ldr	r7, [r1, #16]
 800c986:	2f00      	cmp	r7, #0
 800c988:	d0a9      	beq.n	800c8de <__sflush_r+0x1a>
 800c98a:	0793      	lsls	r3, r2, #30
 800c98c:	680e      	ldr	r6, [r1, #0]
 800c98e:	bf08      	it	eq
 800c990:	694b      	ldreq	r3, [r1, #20]
 800c992:	600f      	str	r7, [r1, #0]
 800c994:	bf18      	it	ne
 800c996:	2300      	movne	r3, #0
 800c998:	eba6 0807 	sub.w	r8, r6, r7
 800c99c:	608b      	str	r3, [r1, #8]
 800c99e:	f1b8 0f00 	cmp.w	r8, #0
 800c9a2:	dd9c      	ble.n	800c8de <__sflush_r+0x1a>
 800c9a4:	6a21      	ldr	r1, [r4, #32]
 800c9a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9a8:	4643      	mov	r3, r8
 800c9aa:	463a      	mov	r2, r7
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	47b0      	blx	r6
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	dc06      	bgt.n	800c9c2 <__sflush_r+0xfe>
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ba:	81a3      	strh	r3, [r4, #12]
 800c9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c0:	e78e      	b.n	800c8e0 <__sflush_r+0x1c>
 800c9c2:	4407      	add	r7, r0
 800c9c4:	eba8 0800 	sub.w	r8, r8, r0
 800c9c8:	e7e9      	b.n	800c99e <__sflush_r+0xda>
 800c9ca:	bf00      	nop
 800c9cc:	20400001 	.word	0x20400001

0800c9d0 <_fflush_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	690b      	ldr	r3, [r1, #16]
 800c9d4:	4605      	mov	r5, r0
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	b913      	cbnz	r3, 800c9e0 <_fflush_r+0x10>
 800c9da:	2500      	movs	r5, #0
 800c9dc:	4628      	mov	r0, r5
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	b118      	cbz	r0, 800c9ea <_fflush_r+0x1a>
 800c9e2:	6983      	ldr	r3, [r0, #24]
 800c9e4:	b90b      	cbnz	r3, 800c9ea <_fflush_r+0x1a>
 800c9e6:	f000 f887 	bl	800caf8 <__sinit>
 800c9ea:	4b14      	ldr	r3, [pc, #80]	; (800ca3c <_fflush_r+0x6c>)
 800c9ec:	429c      	cmp	r4, r3
 800c9ee:	d11b      	bne.n	800ca28 <_fflush_r+0x58>
 800c9f0:	686c      	ldr	r4, [r5, #4]
 800c9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0ef      	beq.n	800c9da <_fflush_r+0xa>
 800c9fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9fc:	07d0      	lsls	r0, r2, #31
 800c9fe:	d404      	bmi.n	800ca0a <_fflush_r+0x3a>
 800ca00:	0599      	lsls	r1, r3, #22
 800ca02:	d402      	bmi.n	800ca0a <_fflush_r+0x3a>
 800ca04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca06:	f000 f91a 	bl	800cc3e <__retarget_lock_acquire_recursive>
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	f7ff ff59 	bl	800c8c4 <__sflush_r>
 800ca12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca14:	07da      	lsls	r2, r3, #31
 800ca16:	4605      	mov	r5, r0
 800ca18:	d4e0      	bmi.n	800c9dc <_fflush_r+0xc>
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	059b      	lsls	r3, r3, #22
 800ca1e:	d4dd      	bmi.n	800c9dc <_fflush_r+0xc>
 800ca20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca22:	f000 f90d 	bl	800cc40 <__retarget_lock_release_recursive>
 800ca26:	e7d9      	b.n	800c9dc <_fflush_r+0xc>
 800ca28:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <_fflush_r+0x70>)
 800ca2a:	429c      	cmp	r4, r3
 800ca2c:	d101      	bne.n	800ca32 <_fflush_r+0x62>
 800ca2e:	68ac      	ldr	r4, [r5, #8]
 800ca30:	e7df      	b.n	800c9f2 <_fflush_r+0x22>
 800ca32:	4b04      	ldr	r3, [pc, #16]	; (800ca44 <_fflush_r+0x74>)
 800ca34:	429c      	cmp	r4, r3
 800ca36:	bf08      	it	eq
 800ca38:	68ec      	ldreq	r4, [r5, #12]
 800ca3a:	e7da      	b.n	800c9f2 <_fflush_r+0x22>
 800ca3c:	0800e588 	.word	0x0800e588
 800ca40:	0800e5a8 	.word	0x0800e5a8
 800ca44:	0800e568 	.word	0x0800e568

0800ca48 <std>:
 800ca48:	2300      	movs	r3, #0
 800ca4a:	b510      	push	{r4, lr}
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ca52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca56:	6083      	str	r3, [r0, #8]
 800ca58:	8181      	strh	r1, [r0, #12]
 800ca5a:	6643      	str	r3, [r0, #100]	; 0x64
 800ca5c:	81c2      	strh	r2, [r0, #14]
 800ca5e:	6183      	str	r3, [r0, #24]
 800ca60:	4619      	mov	r1, r3
 800ca62:	2208      	movs	r2, #8
 800ca64:	305c      	adds	r0, #92	; 0x5c
 800ca66:	f7fe f9ed 	bl	800ae44 <memset>
 800ca6a:	4b05      	ldr	r3, [pc, #20]	; (800ca80 <std+0x38>)
 800ca6c:	6263      	str	r3, [r4, #36]	; 0x24
 800ca6e:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <std+0x3c>)
 800ca70:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca72:	4b05      	ldr	r3, [pc, #20]	; (800ca88 <std+0x40>)
 800ca74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca76:	4b05      	ldr	r3, [pc, #20]	; (800ca8c <std+0x44>)
 800ca78:	6224      	str	r4, [r4, #32]
 800ca7a:	6323      	str	r3, [r4, #48]	; 0x30
 800ca7c:	bd10      	pop	{r4, pc}
 800ca7e:	bf00      	nop
 800ca80:	0800d7b9 	.word	0x0800d7b9
 800ca84:	0800d7db 	.word	0x0800d7db
 800ca88:	0800d813 	.word	0x0800d813
 800ca8c:	0800d837 	.word	0x0800d837

0800ca90 <_cleanup_r>:
 800ca90:	4901      	ldr	r1, [pc, #4]	; (800ca98 <_cleanup_r+0x8>)
 800ca92:	f000 b8af 	b.w	800cbf4 <_fwalk_reent>
 800ca96:	bf00      	nop
 800ca98:	0800c9d1 	.word	0x0800c9d1

0800ca9c <__sfmoreglue>:
 800ca9c:	b570      	push	{r4, r5, r6, lr}
 800ca9e:	2268      	movs	r2, #104	; 0x68
 800caa0:	1e4d      	subs	r5, r1, #1
 800caa2:	4355      	muls	r5, r2
 800caa4:	460e      	mov	r6, r1
 800caa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800caaa:	f7fe fa3f 	bl	800af2c <_malloc_r>
 800caae:	4604      	mov	r4, r0
 800cab0:	b140      	cbz	r0, 800cac4 <__sfmoreglue+0x28>
 800cab2:	2100      	movs	r1, #0
 800cab4:	e9c0 1600 	strd	r1, r6, [r0]
 800cab8:	300c      	adds	r0, #12
 800caba:	60a0      	str	r0, [r4, #8]
 800cabc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cac0:	f7fe f9c0 	bl	800ae44 <memset>
 800cac4:	4620      	mov	r0, r4
 800cac6:	bd70      	pop	{r4, r5, r6, pc}

0800cac8 <__sfp_lock_acquire>:
 800cac8:	4801      	ldr	r0, [pc, #4]	; (800cad0 <__sfp_lock_acquire+0x8>)
 800caca:	f000 b8b8 	b.w	800cc3e <__retarget_lock_acquire_recursive>
 800cace:	bf00      	nop
 800cad0:	20000bf5 	.word	0x20000bf5

0800cad4 <__sfp_lock_release>:
 800cad4:	4801      	ldr	r0, [pc, #4]	; (800cadc <__sfp_lock_release+0x8>)
 800cad6:	f000 b8b3 	b.w	800cc40 <__retarget_lock_release_recursive>
 800cada:	bf00      	nop
 800cadc:	20000bf5 	.word	0x20000bf5

0800cae0 <__sinit_lock_acquire>:
 800cae0:	4801      	ldr	r0, [pc, #4]	; (800cae8 <__sinit_lock_acquire+0x8>)
 800cae2:	f000 b8ac 	b.w	800cc3e <__retarget_lock_acquire_recursive>
 800cae6:	bf00      	nop
 800cae8:	20000bf6 	.word	0x20000bf6

0800caec <__sinit_lock_release>:
 800caec:	4801      	ldr	r0, [pc, #4]	; (800caf4 <__sinit_lock_release+0x8>)
 800caee:	f000 b8a7 	b.w	800cc40 <__retarget_lock_release_recursive>
 800caf2:	bf00      	nop
 800caf4:	20000bf6 	.word	0x20000bf6

0800caf8 <__sinit>:
 800caf8:	b510      	push	{r4, lr}
 800cafa:	4604      	mov	r4, r0
 800cafc:	f7ff fff0 	bl	800cae0 <__sinit_lock_acquire>
 800cb00:	69a3      	ldr	r3, [r4, #24]
 800cb02:	b11b      	cbz	r3, 800cb0c <__sinit+0x14>
 800cb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb08:	f7ff bff0 	b.w	800caec <__sinit_lock_release>
 800cb0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb10:	6523      	str	r3, [r4, #80]	; 0x50
 800cb12:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <__sinit+0x68>)
 800cb14:	4a13      	ldr	r2, [pc, #76]	; (800cb64 <__sinit+0x6c>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb1a:	42a3      	cmp	r3, r4
 800cb1c:	bf04      	itt	eq
 800cb1e:	2301      	moveq	r3, #1
 800cb20:	61a3      	streq	r3, [r4, #24]
 800cb22:	4620      	mov	r0, r4
 800cb24:	f000 f820 	bl	800cb68 <__sfp>
 800cb28:	6060      	str	r0, [r4, #4]
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f000 f81c 	bl	800cb68 <__sfp>
 800cb30:	60a0      	str	r0, [r4, #8]
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 f818 	bl	800cb68 <__sfp>
 800cb38:	2200      	movs	r2, #0
 800cb3a:	60e0      	str	r0, [r4, #12]
 800cb3c:	2104      	movs	r1, #4
 800cb3e:	6860      	ldr	r0, [r4, #4]
 800cb40:	f7ff ff82 	bl	800ca48 <std>
 800cb44:	68a0      	ldr	r0, [r4, #8]
 800cb46:	2201      	movs	r2, #1
 800cb48:	2109      	movs	r1, #9
 800cb4a:	f7ff ff7d 	bl	800ca48 <std>
 800cb4e:	68e0      	ldr	r0, [r4, #12]
 800cb50:	2202      	movs	r2, #2
 800cb52:	2112      	movs	r1, #18
 800cb54:	f7ff ff78 	bl	800ca48 <std>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	61a3      	str	r3, [r4, #24]
 800cb5c:	e7d2      	b.n	800cb04 <__sinit+0xc>
 800cb5e:	bf00      	nop
 800cb60:	0800e4a0 	.word	0x0800e4a0
 800cb64:	0800ca91 	.word	0x0800ca91

0800cb68 <__sfp>:
 800cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	f7ff ffac 	bl	800cac8 <__sfp_lock_acquire>
 800cb70:	4b1e      	ldr	r3, [pc, #120]	; (800cbec <__sfp+0x84>)
 800cb72:	681e      	ldr	r6, [r3, #0]
 800cb74:	69b3      	ldr	r3, [r6, #24]
 800cb76:	b913      	cbnz	r3, 800cb7e <__sfp+0x16>
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f7ff ffbd 	bl	800caf8 <__sinit>
 800cb7e:	3648      	adds	r6, #72	; 0x48
 800cb80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb84:	3b01      	subs	r3, #1
 800cb86:	d503      	bpl.n	800cb90 <__sfp+0x28>
 800cb88:	6833      	ldr	r3, [r6, #0]
 800cb8a:	b30b      	cbz	r3, 800cbd0 <__sfp+0x68>
 800cb8c:	6836      	ldr	r6, [r6, #0]
 800cb8e:	e7f7      	b.n	800cb80 <__sfp+0x18>
 800cb90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb94:	b9d5      	cbnz	r5, 800cbcc <__sfp+0x64>
 800cb96:	4b16      	ldr	r3, [pc, #88]	; (800cbf0 <__sfp+0x88>)
 800cb98:	60e3      	str	r3, [r4, #12]
 800cb9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb9e:	6665      	str	r5, [r4, #100]	; 0x64
 800cba0:	f000 f84c 	bl	800cc3c <__retarget_lock_init_recursive>
 800cba4:	f7ff ff96 	bl	800cad4 <__sfp_lock_release>
 800cba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbb0:	6025      	str	r5, [r4, #0]
 800cbb2:	61a5      	str	r5, [r4, #24]
 800cbb4:	2208      	movs	r2, #8
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbbc:	f7fe f942 	bl	800ae44 <memset>
 800cbc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbc8:	4620      	mov	r0, r4
 800cbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbcc:	3468      	adds	r4, #104	; 0x68
 800cbce:	e7d9      	b.n	800cb84 <__sfp+0x1c>
 800cbd0:	2104      	movs	r1, #4
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	f7ff ff62 	bl	800ca9c <__sfmoreglue>
 800cbd8:	4604      	mov	r4, r0
 800cbda:	6030      	str	r0, [r6, #0]
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d1d5      	bne.n	800cb8c <__sfp+0x24>
 800cbe0:	f7ff ff78 	bl	800cad4 <__sfp_lock_release>
 800cbe4:	230c      	movs	r3, #12
 800cbe6:	603b      	str	r3, [r7, #0]
 800cbe8:	e7ee      	b.n	800cbc8 <__sfp+0x60>
 800cbea:	bf00      	nop
 800cbec:	0800e4a0 	.word	0x0800e4a0
 800cbf0:	ffff0001 	.word	0xffff0001

0800cbf4 <_fwalk_reent>:
 800cbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf8:	4606      	mov	r6, r0
 800cbfa:	4688      	mov	r8, r1
 800cbfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc00:	2700      	movs	r7, #0
 800cc02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc06:	f1b9 0901 	subs.w	r9, r9, #1
 800cc0a:	d505      	bpl.n	800cc18 <_fwalk_reent+0x24>
 800cc0c:	6824      	ldr	r4, [r4, #0]
 800cc0e:	2c00      	cmp	r4, #0
 800cc10:	d1f7      	bne.n	800cc02 <_fwalk_reent+0xe>
 800cc12:	4638      	mov	r0, r7
 800cc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc18:	89ab      	ldrh	r3, [r5, #12]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d907      	bls.n	800cc2e <_fwalk_reent+0x3a>
 800cc1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc22:	3301      	adds	r3, #1
 800cc24:	d003      	beq.n	800cc2e <_fwalk_reent+0x3a>
 800cc26:	4629      	mov	r1, r5
 800cc28:	4630      	mov	r0, r6
 800cc2a:	47c0      	blx	r8
 800cc2c:	4307      	orrs	r7, r0
 800cc2e:	3568      	adds	r5, #104	; 0x68
 800cc30:	e7e9      	b.n	800cc06 <_fwalk_reent+0x12>
	...

0800cc34 <_localeconv_r>:
 800cc34:	4800      	ldr	r0, [pc, #0]	; (800cc38 <_localeconv_r+0x4>)
 800cc36:	4770      	bx	lr
 800cc38:	20000198 	.word	0x20000198

0800cc3c <__retarget_lock_init_recursive>:
 800cc3c:	4770      	bx	lr

0800cc3e <__retarget_lock_acquire_recursive>:
 800cc3e:	4770      	bx	lr

0800cc40 <__retarget_lock_release_recursive>:
 800cc40:	4770      	bx	lr

0800cc42 <__swhatbuf_r>:
 800cc42:	b570      	push	{r4, r5, r6, lr}
 800cc44:	460e      	mov	r6, r1
 800cc46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc4a:	2900      	cmp	r1, #0
 800cc4c:	b096      	sub	sp, #88	; 0x58
 800cc4e:	4614      	mov	r4, r2
 800cc50:	461d      	mov	r5, r3
 800cc52:	da08      	bge.n	800cc66 <__swhatbuf_r+0x24>
 800cc54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	602a      	str	r2, [r5, #0]
 800cc5c:	061a      	lsls	r2, r3, #24
 800cc5e:	d410      	bmi.n	800cc82 <__swhatbuf_r+0x40>
 800cc60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc64:	e00e      	b.n	800cc84 <__swhatbuf_r+0x42>
 800cc66:	466a      	mov	r2, sp
 800cc68:	f000 fe3c 	bl	800d8e4 <_fstat_r>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	dbf1      	blt.n	800cc54 <__swhatbuf_r+0x12>
 800cc70:	9a01      	ldr	r2, [sp, #4]
 800cc72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc7a:	425a      	negs	r2, r3
 800cc7c:	415a      	adcs	r2, r3
 800cc7e:	602a      	str	r2, [r5, #0]
 800cc80:	e7ee      	b.n	800cc60 <__swhatbuf_r+0x1e>
 800cc82:	2340      	movs	r3, #64	; 0x40
 800cc84:	2000      	movs	r0, #0
 800cc86:	6023      	str	r3, [r4, #0]
 800cc88:	b016      	add	sp, #88	; 0x58
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}

0800cc8c <__smakebuf_r>:
 800cc8c:	898b      	ldrh	r3, [r1, #12]
 800cc8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc90:	079d      	lsls	r5, r3, #30
 800cc92:	4606      	mov	r6, r0
 800cc94:	460c      	mov	r4, r1
 800cc96:	d507      	bpl.n	800cca8 <__smakebuf_r+0x1c>
 800cc98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	6123      	str	r3, [r4, #16]
 800cca0:	2301      	movs	r3, #1
 800cca2:	6163      	str	r3, [r4, #20]
 800cca4:	b002      	add	sp, #8
 800cca6:	bd70      	pop	{r4, r5, r6, pc}
 800cca8:	ab01      	add	r3, sp, #4
 800ccaa:	466a      	mov	r2, sp
 800ccac:	f7ff ffc9 	bl	800cc42 <__swhatbuf_r>
 800ccb0:	9900      	ldr	r1, [sp, #0]
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f7fe f939 	bl	800af2c <_malloc_r>
 800ccba:	b948      	cbnz	r0, 800ccd0 <__smakebuf_r+0x44>
 800ccbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccc0:	059a      	lsls	r2, r3, #22
 800ccc2:	d4ef      	bmi.n	800cca4 <__smakebuf_r+0x18>
 800ccc4:	f023 0303 	bic.w	r3, r3, #3
 800ccc8:	f043 0302 	orr.w	r3, r3, #2
 800cccc:	81a3      	strh	r3, [r4, #12]
 800ccce:	e7e3      	b.n	800cc98 <__smakebuf_r+0xc>
 800ccd0:	4b0d      	ldr	r3, [pc, #52]	; (800cd08 <__smakebuf_r+0x7c>)
 800ccd2:	62b3      	str	r3, [r6, #40]	; 0x28
 800ccd4:	89a3      	ldrh	r3, [r4, #12]
 800ccd6:	6020      	str	r0, [r4, #0]
 800ccd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccdc:	81a3      	strh	r3, [r4, #12]
 800ccde:	9b00      	ldr	r3, [sp, #0]
 800cce0:	6163      	str	r3, [r4, #20]
 800cce2:	9b01      	ldr	r3, [sp, #4]
 800cce4:	6120      	str	r0, [r4, #16]
 800cce6:	b15b      	cbz	r3, 800cd00 <__smakebuf_r+0x74>
 800cce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccec:	4630      	mov	r0, r6
 800ccee:	f000 fe0b 	bl	800d908 <_isatty_r>
 800ccf2:	b128      	cbz	r0, 800cd00 <__smakebuf_r+0x74>
 800ccf4:	89a3      	ldrh	r3, [r4, #12]
 800ccf6:	f023 0303 	bic.w	r3, r3, #3
 800ccfa:	f043 0301 	orr.w	r3, r3, #1
 800ccfe:	81a3      	strh	r3, [r4, #12]
 800cd00:	89a0      	ldrh	r0, [r4, #12]
 800cd02:	4305      	orrs	r5, r0
 800cd04:	81a5      	strh	r5, [r4, #12]
 800cd06:	e7cd      	b.n	800cca4 <__smakebuf_r+0x18>
 800cd08:	0800ca91 	.word	0x0800ca91

0800cd0c <memcpy>:
 800cd0c:	440a      	add	r2, r1
 800cd0e:	4291      	cmp	r1, r2
 800cd10:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd14:	d100      	bne.n	800cd18 <memcpy+0xc>
 800cd16:	4770      	bx	lr
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd22:	4291      	cmp	r1, r2
 800cd24:	d1f9      	bne.n	800cd1a <memcpy+0xe>
 800cd26:	bd10      	pop	{r4, pc}

0800cd28 <__malloc_lock>:
 800cd28:	4801      	ldr	r0, [pc, #4]	; (800cd30 <__malloc_lock+0x8>)
 800cd2a:	f7ff bf88 	b.w	800cc3e <__retarget_lock_acquire_recursive>
 800cd2e:	bf00      	nop
 800cd30:	20000bf4 	.word	0x20000bf4

0800cd34 <__malloc_unlock>:
 800cd34:	4801      	ldr	r0, [pc, #4]	; (800cd3c <__malloc_unlock+0x8>)
 800cd36:	f7ff bf83 	b.w	800cc40 <__retarget_lock_release_recursive>
 800cd3a:	bf00      	nop
 800cd3c:	20000bf4 	.word	0x20000bf4

0800cd40 <_Balloc>:
 800cd40:	b570      	push	{r4, r5, r6, lr}
 800cd42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd44:	4604      	mov	r4, r0
 800cd46:	460d      	mov	r5, r1
 800cd48:	b976      	cbnz	r6, 800cd68 <_Balloc+0x28>
 800cd4a:	2010      	movs	r0, #16
 800cd4c:	f7fe f86a 	bl	800ae24 <malloc>
 800cd50:	4602      	mov	r2, r0
 800cd52:	6260      	str	r0, [r4, #36]	; 0x24
 800cd54:	b920      	cbnz	r0, 800cd60 <_Balloc+0x20>
 800cd56:	4b18      	ldr	r3, [pc, #96]	; (800cdb8 <_Balloc+0x78>)
 800cd58:	4818      	ldr	r0, [pc, #96]	; (800cdbc <_Balloc+0x7c>)
 800cd5a:	2166      	movs	r1, #102	; 0x66
 800cd5c:	f000 fd82 	bl	800d864 <__assert_func>
 800cd60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd64:	6006      	str	r6, [r0, #0]
 800cd66:	60c6      	str	r6, [r0, #12]
 800cd68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd6a:	68f3      	ldr	r3, [r6, #12]
 800cd6c:	b183      	cbz	r3, 800cd90 <_Balloc+0x50>
 800cd6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd76:	b9b8      	cbnz	r0, 800cda8 <_Balloc+0x68>
 800cd78:	2101      	movs	r1, #1
 800cd7a:	fa01 f605 	lsl.w	r6, r1, r5
 800cd7e:	1d72      	adds	r2, r6, #5
 800cd80:	0092      	lsls	r2, r2, #2
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 fb60 	bl	800d448 <_calloc_r>
 800cd88:	b160      	cbz	r0, 800cda4 <_Balloc+0x64>
 800cd8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd8e:	e00e      	b.n	800cdae <_Balloc+0x6e>
 800cd90:	2221      	movs	r2, #33	; 0x21
 800cd92:	2104      	movs	r1, #4
 800cd94:	4620      	mov	r0, r4
 800cd96:	f000 fb57 	bl	800d448 <_calloc_r>
 800cd9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd9c:	60f0      	str	r0, [r6, #12]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1e4      	bne.n	800cd6e <_Balloc+0x2e>
 800cda4:	2000      	movs	r0, #0
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	6802      	ldr	r2, [r0, #0]
 800cdaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdae:	2300      	movs	r3, #0
 800cdb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cdb4:	e7f7      	b.n	800cda6 <_Balloc+0x66>
 800cdb6:	bf00      	nop
 800cdb8:	0800e4e5 	.word	0x0800e4e5
 800cdbc:	0800e5c8 	.word	0x0800e5c8

0800cdc0 <_Bfree>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	b976      	cbnz	r6, 800cde8 <_Bfree+0x28>
 800cdca:	2010      	movs	r0, #16
 800cdcc:	f7fe f82a 	bl	800ae24 <malloc>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	6268      	str	r0, [r5, #36]	; 0x24
 800cdd4:	b920      	cbnz	r0, 800cde0 <_Bfree+0x20>
 800cdd6:	4b09      	ldr	r3, [pc, #36]	; (800cdfc <_Bfree+0x3c>)
 800cdd8:	4809      	ldr	r0, [pc, #36]	; (800ce00 <_Bfree+0x40>)
 800cdda:	218a      	movs	r1, #138	; 0x8a
 800cddc:	f000 fd42 	bl	800d864 <__assert_func>
 800cde0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cde4:	6006      	str	r6, [r0, #0]
 800cde6:	60c6      	str	r6, [r0, #12]
 800cde8:	b13c      	cbz	r4, 800cdfa <_Bfree+0x3a>
 800cdea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cdec:	6862      	ldr	r2, [r4, #4]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdf4:	6021      	str	r1, [r4, #0]
 800cdf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdfa:	bd70      	pop	{r4, r5, r6, pc}
 800cdfc:	0800e4e5 	.word	0x0800e4e5
 800ce00:	0800e5c8 	.word	0x0800e5c8

0800ce04 <__multadd>:
 800ce04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce08:	690d      	ldr	r5, [r1, #16]
 800ce0a:	4607      	mov	r7, r0
 800ce0c:	460c      	mov	r4, r1
 800ce0e:	461e      	mov	r6, r3
 800ce10:	f101 0c14 	add.w	ip, r1, #20
 800ce14:	2000      	movs	r0, #0
 800ce16:	f8dc 3000 	ldr.w	r3, [ip]
 800ce1a:	b299      	uxth	r1, r3
 800ce1c:	fb02 6101 	mla	r1, r2, r1, r6
 800ce20:	0c1e      	lsrs	r6, r3, #16
 800ce22:	0c0b      	lsrs	r3, r1, #16
 800ce24:	fb02 3306 	mla	r3, r2, r6, r3
 800ce28:	b289      	uxth	r1, r1
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce30:	4285      	cmp	r5, r0
 800ce32:	f84c 1b04 	str.w	r1, [ip], #4
 800ce36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce3a:	dcec      	bgt.n	800ce16 <__multadd+0x12>
 800ce3c:	b30e      	cbz	r6, 800ce82 <__multadd+0x7e>
 800ce3e:	68a3      	ldr	r3, [r4, #8]
 800ce40:	42ab      	cmp	r3, r5
 800ce42:	dc19      	bgt.n	800ce78 <__multadd+0x74>
 800ce44:	6861      	ldr	r1, [r4, #4]
 800ce46:	4638      	mov	r0, r7
 800ce48:	3101      	adds	r1, #1
 800ce4a:	f7ff ff79 	bl	800cd40 <_Balloc>
 800ce4e:	4680      	mov	r8, r0
 800ce50:	b928      	cbnz	r0, 800ce5e <__multadd+0x5a>
 800ce52:	4602      	mov	r2, r0
 800ce54:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <__multadd+0x84>)
 800ce56:	480d      	ldr	r0, [pc, #52]	; (800ce8c <__multadd+0x88>)
 800ce58:	21b5      	movs	r1, #181	; 0xb5
 800ce5a:	f000 fd03 	bl	800d864 <__assert_func>
 800ce5e:	6922      	ldr	r2, [r4, #16]
 800ce60:	3202      	adds	r2, #2
 800ce62:	f104 010c 	add.w	r1, r4, #12
 800ce66:	0092      	lsls	r2, r2, #2
 800ce68:	300c      	adds	r0, #12
 800ce6a:	f7ff ff4f 	bl	800cd0c <memcpy>
 800ce6e:	4621      	mov	r1, r4
 800ce70:	4638      	mov	r0, r7
 800ce72:	f7ff ffa5 	bl	800cdc0 <_Bfree>
 800ce76:	4644      	mov	r4, r8
 800ce78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce7c:	3501      	adds	r5, #1
 800ce7e:	615e      	str	r6, [r3, #20]
 800ce80:	6125      	str	r5, [r4, #16]
 800ce82:	4620      	mov	r0, r4
 800ce84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce88:	0800e557 	.word	0x0800e557
 800ce8c:	0800e5c8 	.word	0x0800e5c8

0800ce90 <__hi0bits>:
 800ce90:	0c03      	lsrs	r3, r0, #16
 800ce92:	041b      	lsls	r3, r3, #16
 800ce94:	b9d3      	cbnz	r3, 800cecc <__hi0bits+0x3c>
 800ce96:	0400      	lsls	r0, r0, #16
 800ce98:	2310      	movs	r3, #16
 800ce9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce9e:	bf04      	itt	eq
 800cea0:	0200      	lsleq	r0, r0, #8
 800cea2:	3308      	addeq	r3, #8
 800cea4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cea8:	bf04      	itt	eq
 800ceaa:	0100      	lsleq	r0, r0, #4
 800ceac:	3304      	addeq	r3, #4
 800ceae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ceb2:	bf04      	itt	eq
 800ceb4:	0080      	lsleq	r0, r0, #2
 800ceb6:	3302      	addeq	r3, #2
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	db05      	blt.n	800cec8 <__hi0bits+0x38>
 800cebc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cec0:	f103 0301 	add.w	r3, r3, #1
 800cec4:	bf08      	it	eq
 800cec6:	2320      	moveq	r3, #32
 800cec8:	4618      	mov	r0, r3
 800ceca:	4770      	bx	lr
 800cecc:	2300      	movs	r3, #0
 800cece:	e7e4      	b.n	800ce9a <__hi0bits+0xa>

0800ced0 <__lo0bits>:
 800ced0:	6803      	ldr	r3, [r0, #0]
 800ced2:	f013 0207 	ands.w	r2, r3, #7
 800ced6:	4601      	mov	r1, r0
 800ced8:	d00b      	beq.n	800cef2 <__lo0bits+0x22>
 800ceda:	07da      	lsls	r2, r3, #31
 800cedc:	d423      	bmi.n	800cf26 <__lo0bits+0x56>
 800cede:	0798      	lsls	r0, r3, #30
 800cee0:	bf49      	itett	mi
 800cee2:	085b      	lsrmi	r3, r3, #1
 800cee4:	089b      	lsrpl	r3, r3, #2
 800cee6:	2001      	movmi	r0, #1
 800cee8:	600b      	strmi	r3, [r1, #0]
 800ceea:	bf5c      	itt	pl
 800ceec:	600b      	strpl	r3, [r1, #0]
 800ceee:	2002      	movpl	r0, #2
 800cef0:	4770      	bx	lr
 800cef2:	b298      	uxth	r0, r3
 800cef4:	b9a8      	cbnz	r0, 800cf22 <__lo0bits+0x52>
 800cef6:	0c1b      	lsrs	r3, r3, #16
 800cef8:	2010      	movs	r0, #16
 800cefa:	b2da      	uxtb	r2, r3
 800cefc:	b90a      	cbnz	r2, 800cf02 <__lo0bits+0x32>
 800cefe:	3008      	adds	r0, #8
 800cf00:	0a1b      	lsrs	r3, r3, #8
 800cf02:	071a      	lsls	r2, r3, #28
 800cf04:	bf04      	itt	eq
 800cf06:	091b      	lsreq	r3, r3, #4
 800cf08:	3004      	addeq	r0, #4
 800cf0a:	079a      	lsls	r2, r3, #30
 800cf0c:	bf04      	itt	eq
 800cf0e:	089b      	lsreq	r3, r3, #2
 800cf10:	3002      	addeq	r0, #2
 800cf12:	07da      	lsls	r2, r3, #31
 800cf14:	d403      	bmi.n	800cf1e <__lo0bits+0x4e>
 800cf16:	085b      	lsrs	r3, r3, #1
 800cf18:	f100 0001 	add.w	r0, r0, #1
 800cf1c:	d005      	beq.n	800cf2a <__lo0bits+0x5a>
 800cf1e:	600b      	str	r3, [r1, #0]
 800cf20:	4770      	bx	lr
 800cf22:	4610      	mov	r0, r2
 800cf24:	e7e9      	b.n	800cefa <__lo0bits+0x2a>
 800cf26:	2000      	movs	r0, #0
 800cf28:	4770      	bx	lr
 800cf2a:	2020      	movs	r0, #32
 800cf2c:	4770      	bx	lr
	...

0800cf30 <__i2b>:
 800cf30:	b510      	push	{r4, lr}
 800cf32:	460c      	mov	r4, r1
 800cf34:	2101      	movs	r1, #1
 800cf36:	f7ff ff03 	bl	800cd40 <_Balloc>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	b928      	cbnz	r0, 800cf4a <__i2b+0x1a>
 800cf3e:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <__i2b+0x24>)
 800cf40:	4805      	ldr	r0, [pc, #20]	; (800cf58 <__i2b+0x28>)
 800cf42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf46:	f000 fc8d 	bl	800d864 <__assert_func>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	6144      	str	r4, [r0, #20]
 800cf4e:	6103      	str	r3, [r0, #16]
 800cf50:	bd10      	pop	{r4, pc}
 800cf52:	bf00      	nop
 800cf54:	0800e557 	.word	0x0800e557
 800cf58:	0800e5c8 	.word	0x0800e5c8

0800cf5c <__multiply>:
 800cf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf60:	4691      	mov	r9, r2
 800cf62:	690a      	ldr	r2, [r1, #16]
 800cf64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	bfb8      	it	lt
 800cf6c:	460b      	movlt	r3, r1
 800cf6e:	460c      	mov	r4, r1
 800cf70:	bfbc      	itt	lt
 800cf72:	464c      	movlt	r4, r9
 800cf74:	4699      	movlt	r9, r3
 800cf76:	6927      	ldr	r7, [r4, #16]
 800cf78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf7c:	68a3      	ldr	r3, [r4, #8]
 800cf7e:	6861      	ldr	r1, [r4, #4]
 800cf80:	eb07 060a 	add.w	r6, r7, sl
 800cf84:	42b3      	cmp	r3, r6
 800cf86:	b085      	sub	sp, #20
 800cf88:	bfb8      	it	lt
 800cf8a:	3101      	addlt	r1, #1
 800cf8c:	f7ff fed8 	bl	800cd40 <_Balloc>
 800cf90:	b930      	cbnz	r0, 800cfa0 <__multiply+0x44>
 800cf92:	4602      	mov	r2, r0
 800cf94:	4b44      	ldr	r3, [pc, #272]	; (800d0a8 <__multiply+0x14c>)
 800cf96:	4845      	ldr	r0, [pc, #276]	; (800d0ac <__multiply+0x150>)
 800cf98:	f240 115d 	movw	r1, #349	; 0x15d
 800cf9c:	f000 fc62 	bl	800d864 <__assert_func>
 800cfa0:	f100 0514 	add.w	r5, r0, #20
 800cfa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cfa8:	462b      	mov	r3, r5
 800cfaa:	2200      	movs	r2, #0
 800cfac:	4543      	cmp	r3, r8
 800cfae:	d321      	bcc.n	800cff4 <__multiply+0x98>
 800cfb0:	f104 0314 	add.w	r3, r4, #20
 800cfb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cfb8:	f109 0314 	add.w	r3, r9, #20
 800cfbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cfc0:	9202      	str	r2, [sp, #8]
 800cfc2:	1b3a      	subs	r2, r7, r4
 800cfc4:	3a15      	subs	r2, #21
 800cfc6:	f022 0203 	bic.w	r2, r2, #3
 800cfca:	3204      	adds	r2, #4
 800cfcc:	f104 0115 	add.w	r1, r4, #21
 800cfd0:	428f      	cmp	r7, r1
 800cfd2:	bf38      	it	cc
 800cfd4:	2204      	movcc	r2, #4
 800cfd6:	9201      	str	r2, [sp, #4]
 800cfd8:	9a02      	ldr	r2, [sp, #8]
 800cfda:	9303      	str	r3, [sp, #12]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d80c      	bhi.n	800cffa <__multiply+0x9e>
 800cfe0:	2e00      	cmp	r6, #0
 800cfe2:	dd03      	ble.n	800cfec <__multiply+0x90>
 800cfe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d05a      	beq.n	800d0a2 <__multiply+0x146>
 800cfec:	6106      	str	r6, [r0, #16]
 800cfee:	b005      	add	sp, #20
 800cff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff4:	f843 2b04 	str.w	r2, [r3], #4
 800cff8:	e7d8      	b.n	800cfac <__multiply+0x50>
 800cffa:	f8b3 a000 	ldrh.w	sl, [r3]
 800cffe:	f1ba 0f00 	cmp.w	sl, #0
 800d002:	d024      	beq.n	800d04e <__multiply+0xf2>
 800d004:	f104 0e14 	add.w	lr, r4, #20
 800d008:	46a9      	mov	r9, r5
 800d00a:	f04f 0c00 	mov.w	ip, #0
 800d00e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d012:	f8d9 1000 	ldr.w	r1, [r9]
 800d016:	fa1f fb82 	uxth.w	fp, r2
 800d01a:	b289      	uxth	r1, r1
 800d01c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d020:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d024:	f8d9 2000 	ldr.w	r2, [r9]
 800d028:	4461      	add	r1, ip
 800d02a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d02e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d032:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d036:	b289      	uxth	r1, r1
 800d038:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d03c:	4577      	cmp	r7, lr
 800d03e:	f849 1b04 	str.w	r1, [r9], #4
 800d042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d046:	d8e2      	bhi.n	800d00e <__multiply+0xb2>
 800d048:	9a01      	ldr	r2, [sp, #4]
 800d04a:	f845 c002 	str.w	ip, [r5, r2]
 800d04e:	9a03      	ldr	r2, [sp, #12]
 800d050:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d054:	3304      	adds	r3, #4
 800d056:	f1b9 0f00 	cmp.w	r9, #0
 800d05a:	d020      	beq.n	800d09e <__multiply+0x142>
 800d05c:	6829      	ldr	r1, [r5, #0]
 800d05e:	f104 0c14 	add.w	ip, r4, #20
 800d062:	46ae      	mov	lr, r5
 800d064:	f04f 0a00 	mov.w	sl, #0
 800d068:	f8bc b000 	ldrh.w	fp, [ip]
 800d06c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d070:	fb09 220b 	mla	r2, r9, fp, r2
 800d074:	4492      	add	sl, r2
 800d076:	b289      	uxth	r1, r1
 800d078:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d07c:	f84e 1b04 	str.w	r1, [lr], #4
 800d080:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d084:	f8be 1000 	ldrh.w	r1, [lr]
 800d088:	0c12      	lsrs	r2, r2, #16
 800d08a:	fb09 1102 	mla	r1, r9, r2, r1
 800d08e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d092:	4567      	cmp	r7, ip
 800d094:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d098:	d8e6      	bhi.n	800d068 <__multiply+0x10c>
 800d09a:	9a01      	ldr	r2, [sp, #4]
 800d09c:	50a9      	str	r1, [r5, r2]
 800d09e:	3504      	adds	r5, #4
 800d0a0:	e79a      	b.n	800cfd8 <__multiply+0x7c>
 800d0a2:	3e01      	subs	r6, #1
 800d0a4:	e79c      	b.n	800cfe0 <__multiply+0x84>
 800d0a6:	bf00      	nop
 800d0a8:	0800e557 	.word	0x0800e557
 800d0ac:	0800e5c8 	.word	0x0800e5c8

0800d0b0 <__pow5mult>:
 800d0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b4:	4615      	mov	r5, r2
 800d0b6:	f012 0203 	ands.w	r2, r2, #3
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	460f      	mov	r7, r1
 800d0be:	d007      	beq.n	800d0d0 <__pow5mult+0x20>
 800d0c0:	4c25      	ldr	r4, [pc, #148]	; (800d158 <__pow5mult+0xa8>)
 800d0c2:	3a01      	subs	r2, #1
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0ca:	f7ff fe9b 	bl	800ce04 <__multadd>
 800d0ce:	4607      	mov	r7, r0
 800d0d0:	10ad      	asrs	r5, r5, #2
 800d0d2:	d03d      	beq.n	800d150 <__pow5mult+0xa0>
 800d0d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d0d6:	b97c      	cbnz	r4, 800d0f8 <__pow5mult+0x48>
 800d0d8:	2010      	movs	r0, #16
 800d0da:	f7fd fea3 	bl	800ae24 <malloc>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	6270      	str	r0, [r6, #36]	; 0x24
 800d0e2:	b928      	cbnz	r0, 800d0f0 <__pow5mult+0x40>
 800d0e4:	4b1d      	ldr	r3, [pc, #116]	; (800d15c <__pow5mult+0xac>)
 800d0e6:	481e      	ldr	r0, [pc, #120]	; (800d160 <__pow5mult+0xb0>)
 800d0e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0ec:	f000 fbba 	bl	800d864 <__assert_func>
 800d0f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0f4:	6004      	str	r4, [r0, #0]
 800d0f6:	60c4      	str	r4, [r0, #12]
 800d0f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d100:	b94c      	cbnz	r4, 800d116 <__pow5mult+0x66>
 800d102:	f240 2171 	movw	r1, #625	; 0x271
 800d106:	4630      	mov	r0, r6
 800d108:	f7ff ff12 	bl	800cf30 <__i2b>
 800d10c:	2300      	movs	r3, #0
 800d10e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d112:	4604      	mov	r4, r0
 800d114:	6003      	str	r3, [r0, #0]
 800d116:	f04f 0900 	mov.w	r9, #0
 800d11a:	07eb      	lsls	r3, r5, #31
 800d11c:	d50a      	bpl.n	800d134 <__pow5mult+0x84>
 800d11e:	4639      	mov	r1, r7
 800d120:	4622      	mov	r2, r4
 800d122:	4630      	mov	r0, r6
 800d124:	f7ff ff1a 	bl	800cf5c <__multiply>
 800d128:	4639      	mov	r1, r7
 800d12a:	4680      	mov	r8, r0
 800d12c:	4630      	mov	r0, r6
 800d12e:	f7ff fe47 	bl	800cdc0 <_Bfree>
 800d132:	4647      	mov	r7, r8
 800d134:	106d      	asrs	r5, r5, #1
 800d136:	d00b      	beq.n	800d150 <__pow5mult+0xa0>
 800d138:	6820      	ldr	r0, [r4, #0]
 800d13a:	b938      	cbnz	r0, 800d14c <__pow5mult+0x9c>
 800d13c:	4622      	mov	r2, r4
 800d13e:	4621      	mov	r1, r4
 800d140:	4630      	mov	r0, r6
 800d142:	f7ff ff0b 	bl	800cf5c <__multiply>
 800d146:	6020      	str	r0, [r4, #0]
 800d148:	f8c0 9000 	str.w	r9, [r0]
 800d14c:	4604      	mov	r4, r0
 800d14e:	e7e4      	b.n	800d11a <__pow5mult+0x6a>
 800d150:	4638      	mov	r0, r7
 800d152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d156:	bf00      	nop
 800d158:	0800e718 	.word	0x0800e718
 800d15c:	0800e4e5 	.word	0x0800e4e5
 800d160:	0800e5c8 	.word	0x0800e5c8

0800d164 <__lshift>:
 800d164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d168:	460c      	mov	r4, r1
 800d16a:	6849      	ldr	r1, [r1, #4]
 800d16c:	6923      	ldr	r3, [r4, #16]
 800d16e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d172:	68a3      	ldr	r3, [r4, #8]
 800d174:	4607      	mov	r7, r0
 800d176:	4691      	mov	r9, r2
 800d178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d17c:	f108 0601 	add.w	r6, r8, #1
 800d180:	42b3      	cmp	r3, r6
 800d182:	db0b      	blt.n	800d19c <__lshift+0x38>
 800d184:	4638      	mov	r0, r7
 800d186:	f7ff fddb 	bl	800cd40 <_Balloc>
 800d18a:	4605      	mov	r5, r0
 800d18c:	b948      	cbnz	r0, 800d1a2 <__lshift+0x3e>
 800d18e:	4602      	mov	r2, r0
 800d190:	4b2a      	ldr	r3, [pc, #168]	; (800d23c <__lshift+0xd8>)
 800d192:	482b      	ldr	r0, [pc, #172]	; (800d240 <__lshift+0xdc>)
 800d194:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d198:	f000 fb64 	bl	800d864 <__assert_func>
 800d19c:	3101      	adds	r1, #1
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	e7ee      	b.n	800d180 <__lshift+0x1c>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f100 0114 	add.w	r1, r0, #20
 800d1a8:	f100 0210 	add.w	r2, r0, #16
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	4553      	cmp	r3, sl
 800d1b0:	db37      	blt.n	800d222 <__lshift+0xbe>
 800d1b2:	6920      	ldr	r0, [r4, #16]
 800d1b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1b8:	f104 0314 	add.w	r3, r4, #20
 800d1bc:	f019 091f 	ands.w	r9, r9, #31
 800d1c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d1c8:	d02f      	beq.n	800d22a <__lshift+0xc6>
 800d1ca:	f1c9 0e20 	rsb	lr, r9, #32
 800d1ce:	468a      	mov	sl, r1
 800d1d0:	f04f 0c00 	mov.w	ip, #0
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	fa02 f209 	lsl.w	r2, r2, r9
 800d1da:	ea42 020c 	orr.w	r2, r2, ip
 800d1de:	f84a 2b04 	str.w	r2, [sl], #4
 800d1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e6:	4298      	cmp	r0, r3
 800d1e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d1ec:	d8f2      	bhi.n	800d1d4 <__lshift+0x70>
 800d1ee:	1b03      	subs	r3, r0, r4
 800d1f0:	3b15      	subs	r3, #21
 800d1f2:	f023 0303 	bic.w	r3, r3, #3
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	f104 0215 	add.w	r2, r4, #21
 800d1fc:	4290      	cmp	r0, r2
 800d1fe:	bf38      	it	cc
 800d200:	2304      	movcc	r3, #4
 800d202:	f841 c003 	str.w	ip, [r1, r3]
 800d206:	f1bc 0f00 	cmp.w	ip, #0
 800d20a:	d001      	beq.n	800d210 <__lshift+0xac>
 800d20c:	f108 0602 	add.w	r6, r8, #2
 800d210:	3e01      	subs	r6, #1
 800d212:	4638      	mov	r0, r7
 800d214:	612e      	str	r6, [r5, #16]
 800d216:	4621      	mov	r1, r4
 800d218:	f7ff fdd2 	bl	800cdc0 <_Bfree>
 800d21c:	4628      	mov	r0, r5
 800d21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d222:	f842 0f04 	str.w	r0, [r2, #4]!
 800d226:	3301      	adds	r3, #1
 800d228:	e7c1      	b.n	800d1ae <__lshift+0x4a>
 800d22a:	3904      	subs	r1, #4
 800d22c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d230:	f841 2f04 	str.w	r2, [r1, #4]!
 800d234:	4298      	cmp	r0, r3
 800d236:	d8f9      	bhi.n	800d22c <__lshift+0xc8>
 800d238:	e7ea      	b.n	800d210 <__lshift+0xac>
 800d23a:	bf00      	nop
 800d23c:	0800e557 	.word	0x0800e557
 800d240:	0800e5c8 	.word	0x0800e5c8

0800d244 <__mcmp>:
 800d244:	b530      	push	{r4, r5, lr}
 800d246:	6902      	ldr	r2, [r0, #16]
 800d248:	690c      	ldr	r4, [r1, #16]
 800d24a:	1b12      	subs	r2, r2, r4
 800d24c:	d10e      	bne.n	800d26c <__mcmp+0x28>
 800d24e:	f100 0314 	add.w	r3, r0, #20
 800d252:	3114      	adds	r1, #20
 800d254:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d258:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d25c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d260:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d264:	42a5      	cmp	r5, r4
 800d266:	d003      	beq.n	800d270 <__mcmp+0x2c>
 800d268:	d305      	bcc.n	800d276 <__mcmp+0x32>
 800d26a:	2201      	movs	r2, #1
 800d26c:	4610      	mov	r0, r2
 800d26e:	bd30      	pop	{r4, r5, pc}
 800d270:	4283      	cmp	r3, r0
 800d272:	d3f3      	bcc.n	800d25c <__mcmp+0x18>
 800d274:	e7fa      	b.n	800d26c <__mcmp+0x28>
 800d276:	f04f 32ff 	mov.w	r2, #4294967295
 800d27a:	e7f7      	b.n	800d26c <__mcmp+0x28>

0800d27c <__mdiff>:
 800d27c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d280:	460c      	mov	r4, r1
 800d282:	4606      	mov	r6, r0
 800d284:	4611      	mov	r1, r2
 800d286:	4620      	mov	r0, r4
 800d288:	4690      	mov	r8, r2
 800d28a:	f7ff ffdb 	bl	800d244 <__mcmp>
 800d28e:	1e05      	subs	r5, r0, #0
 800d290:	d110      	bne.n	800d2b4 <__mdiff+0x38>
 800d292:	4629      	mov	r1, r5
 800d294:	4630      	mov	r0, r6
 800d296:	f7ff fd53 	bl	800cd40 <_Balloc>
 800d29a:	b930      	cbnz	r0, 800d2aa <__mdiff+0x2e>
 800d29c:	4b3a      	ldr	r3, [pc, #232]	; (800d388 <__mdiff+0x10c>)
 800d29e:	4602      	mov	r2, r0
 800d2a0:	f240 2132 	movw	r1, #562	; 0x232
 800d2a4:	4839      	ldr	r0, [pc, #228]	; (800d38c <__mdiff+0x110>)
 800d2a6:	f000 fadd 	bl	800d864 <__assert_func>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b4:	bfa4      	itt	ge
 800d2b6:	4643      	movge	r3, r8
 800d2b8:	46a0      	movge	r8, r4
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d2c0:	bfa6      	itte	ge
 800d2c2:	461c      	movge	r4, r3
 800d2c4:	2500      	movge	r5, #0
 800d2c6:	2501      	movlt	r5, #1
 800d2c8:	f7ff fd3a 	bl	800cd40 <_Balloc>
 800d2cc:	b920      	cbnz	r0, 800d2d8 <__mdiff+0x5c>
 800d2ce:	4b2e      	ldr	r3, [pc, #184]	; (800d388 <__mdiff+0x10c>)
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d2d6:	e7e5      	b.n	800d2a4 <__mdiff+0x28>
 800d2d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d2dc:	6926      	ldr	r6, [r4, #16]
 800d2de:	60c5      	str	r5, [r0, #12]
 800d2e0:	f104 0914 	add.w	r9, r4, #20
 800d2e4:	f108 0514 	add.w	r5, r8, #20
 800d2e8:	f100 0e14 	add.w	lr, r0, #20
 800d2ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d2f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2f4:	f108 0210 	add.w	r2, r8, #16
 800d2f8:	46f2      	mov	sl, lr
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d304:	fa1f f883 	uxth.w	r8, r3
 800d308:	fa11 f18b 	uxtah	r1, r1, fp
 800d30c:	0c1b      	lsrs	r3, r3, #16
 800d30e:	eba1 0808 	sub.w	r8, r1, r8
 800d312:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d316:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d31a:	fa1f f888 	uxth.w	r8, r8
 800d31e:	1419      	asrs	r1, r3, #16
 800d320:	454e      	cmp	r6, r9
 800d322:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d326:	f84a 3b04 	str.w	r3, [sl], #4
 800d32a:	d8e7      	bhi.n	800d2fc <__mdiff+0x80>
 800d32c:	1b33      	subs	r3, r6, r4
 800d32e:	3b15      	subs	r3, #21
 800d330:	f023 0303 	bic.w	r3, r3, #3
 800d334:	3304      	adds	r3, #4
 800d336:	3415      	adds	r4, #21
 800d338:	42a6      	cmp	r6, r4
 800d33a:	bf38      	it	cc
 800d33c:	2304      	movcc	r3, #4
 800d33e:	441d      	add	r5, r3
 800d340:	4473      	add	r3, lr
 800d342:	469e      	mov	lr, r3
 800d344:	462e      	mov	r6, r5
 800d346:	4566      	cmp	r6, ip
 800d348:	d30e      	bcc.n	800d368 <__mdiff+0xec>
 800d34a:	f10c 0203 	add.w	r2, ip, #3
 800d34e:	1b52      	subs	r2, r2, r5
 800d350:	f022 0203 	bic.w	r2, r2, #3
 800d354:	3d03      	subs	r5, #3
 800d356:	45ac      	cmp	ip, r5
 800d358:	bf38      	it	cc
 800d35a:	2200      	movcc	r2, #0
 800d35c:	441a      	add	r2, r3
 800d35e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d362:	b17b      	cbz	r3, 800d384 <__mdiff+0x108>
 800d364:	6107      	str	r7, [r0, #16]
 800d366:	e7a3      	b.n	800d2b0 <__mdiff+0x34>
 800d368:	f856 8b04 	ldr.w	r8, [r6], #4
 800d36c:	fa11 f288 	uxtah	r2, r1, r8
 800d370:	1414      	asrs	r4, r2, #16
 800d372:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d376:	b292      	uxth	r2, r2
 800d378:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d37c:	f84e 2b04 	str.w	r2, [lr], #4
 800d380:	1421      	asrs	r1, r4, #16
 800d382:	e7e0      	b.n	800d346 <__mdiff+0xca>
 800d384:	3f01      	subs	r7, #1
 800d386:	e7ea      	b.n	800d35e <__mdiff+0xe2>
 800d388:	0800e557 	.word	0x0800e557
 800d38c:	0800e5c8 	.word	0x0800e5c8

0800d390 <__d2b>:
 800d390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d394:	4689      	mov	r9, r1
 800d396:	2101      	movs	r1, #1
 800d398:	ec57 6b10 	vmov	r6, r7, d0
 800d39c:	4690      	mov	r8, r2
 800d39e:	f7ff fccf 	bl	800cd40 <_Balloc>
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	b930      	cbnz	r0, 800d3b4 <__d2b+0x24>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	4b25      	ldr	r3, [pc, #148]	; (800d440 <__d2b+0xb0>)
 800d3aa:	4826      	ldr	r0, [pc, #152]	; (800d444 <__d2b+0xb4>)
 800d3ac:	f240 310a 	movw	r1, #778	; 0x30a
 800d3b0:	f000 fa58 	bl	800d864 <__assert_func>
 800d3b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d3b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d3bc:	bb35      	cbnz	r5, 800d40c <__d2b+0x7c>
 800d3be:	2e00      	cmp	r6, #0
 800d3c0:	9301      	str	r3, [sp, #4]
 800d3c2:	d028      	beq.n	800d416 <__d2b+0x86>
 800d3c4:	4668      	mov	r0, sp
 800d3c6:	9600      	str	r6, [sp, #0]
 800d3c8:	f7ff fd82 	bl	800ced0 <__lo0bits>
 800d3cc:	9900      	ldr	r1, [sp, #0]
 800d3ce:	b300      	cbz	r0, 800d412 <__d2b+0x82>
 800d3d0:	9a01      	ldr	r2, [sp, #4]
 800d3d2:	f1c0 0320 	rsb	r3, r0, #32
 800d3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3da:	430b      	orrs	r3, r1
 800d3dc:	40c2      	lsrs	r2, r0
 800d3de:	6163      	str	r3, [r4, #20]
 800d3e0:	9201      	str	r2, [sp, #4]
 800d3e2:	9b01      	ldr	r3, [sp, #4]
 800d3e4:	61a3      	str	r3, [r4, #24]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	bf14      	ite	ne
 800d3ea:	2202      	movne	r2, #2
 800d3ec:	2201      	moveq	r2, #1
 800d3ee:	6122      	str	r2, [r4, #16]
 800d3f0:	b1d5      	cbz	r5, 800d428 <__d2b+0x98>
 800d3f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3f6:	4405      	add	r5, r0
 800d3f8:	f8c9 5000 	str.w	r5, [r9]
 800d3fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d400:	f8c8 0000 	str.w	r0, [r8]
 800d404:	4620      	mov	r0, r4
 800d406:	b003      	add	sp, #12
 800d408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d40c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d410:	e7d5      	b.n	800d3be <__d2b+0x2e>
 800d412:	6161      	str	r1, [r4, #20]
 800d414:	e7e5      	b.n	800d3e2 <__d2b+0x52>
 800d416:	a801      	add	r0, sp, #4
 800d418:	f7ff fd5a 	bl	800ced0 <__lo0bits>
 800d41c:	9b01      	ldr	r3, [sp, #4]
 800d41e:	6163      	str	r3, [r4, #20]
 800d420:	2201      	movs	r2, #1
 800d422:	6122      	str	r2, [r4, #16]
 800d424:	3020      	adds	r0, #32
 800d426:	e7e3      	b.n	800d3f0 <__d2b+0x60>
 800d428:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d42c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d430:	f8c9 0000 	str.w	r0, [r9]
 800d434:	6918      	ldr	r0, [r3, #16]
 800d436:	f7ff fd2b 	bl	800ce90 <__hi0bits>
 800d43a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d43e:	e7df      	b.n	800d400 <__d2b+0x70>
 800d440:	0800e557 	.word	0x0800e557
 800d444:	0800e5c8 	.word	0x0800e5c8

0800d448 <_calloc_r>:
 800d448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d44a:	fba1 2402 	umull	r2, r4, r1, r2
 800d44e:	b94c      	cbnz	r4, 800d464 <_calloc_r+0x1c>
 800d450:	4611      	mov	r1, r2
 800d452:	9201      	str	r2, [sp, #4]
 800d454:	f7fd fd6a 	bl	800af2c <_malloc_r>
 800d458:	9a01      	ldr	r2, [sp, #4]
 800d45a:	4605      	mov	r5, r0
 800d45c:	b930      	cbnz	r0, 800d46c <_calloc_r+0x24>
 800d45e:	4628      	mov	r0, r5
 800d460:	b003      	add	sp, #12
 800d462:	bd30      	pop	{r4, r5, pc}
 800d464:	220c      	movs	r2, #12
 800d466:	6002      	str	r2, [r0, #0]
 800d468:	2500      	movs	r5, #0
 800d46a:	e7f8      	b.n	800d45e <_calloc_r+0x16>
 800d46c:	4621      	mov	r1, r4
 800d46e:	f7fd fce9 	bl	800ae44 <memset>
 800d472:	e7f4      	b.n	800d45e <_calloc_r+0x16>

0800d474 <__sfputc_r>:
 800d474:	6893      	ldr	r3, [r2, #8]
 800d476:	3b01      	subs	r3, #1
 800d478:	2b00      	cmp	r3, #0
 800d47a:	b410      	push	{r4}
 800d47c:	6093      	str	r3, [r2, #8]
 800d47e:	da08      	bge.n	800d492 <__sfputc_r+0x1e>
 800d480:	6994      	ldr	r4, [r2, #24]
 800d482:	42a3      	cmp	r3, r4
 800d484:	db01      	blt.n	800d48a <__sfputc_r+0x16>
 800d486:	290a      	cmp	r1, #10
 800d488:	d103      	bne.n	800d492 <__sfputc_r+0x1e>
 800d48a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d48e:	f7fe badf 	b.w	800ba50 <__swbuf_r>
 800d492:	6813      	ldr	r3, [r2, #0]
 800d494:	1c58      	adds	r0, r3, #1
 800d496:	6010      	str	r0, [r2, #0]
 800d498:	7019      	strb	r1, [r3, #0]
 800d49a:	4608      	mov	r0, r1
 800d49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <__sfputs_r>:
 800d4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a4:	4606      	mov	r6, r0
 800d4a6:	460f      	mov	r7, r1
 800d4a8:	4614      	mov	r4, r2
 800d4aa:	18d5      	adds	r5, r2, r3
 800d4ac:	42ac      	cmp	r4, r5
 800d4ae:	d101      	bne.n	800d4b4 <__sfputs_r+0x12>
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e007      	b.n	800d4c4 <__sfputs_r+0x22>
 800d4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b8:	463a      	mov	r2, r7
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	f7ff ffda 	bl	800d474 <__sfputc_r>
 800d4c0:	1c43      	adds	r3, r0, #1
 800d4c2:	d1f3      	bne.n	800d4ac <__sfputs_r+0xa>
 800d4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4c8 <_vfiprintf_r>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	460d      	mov	r5, r1
 800d4ce:	b09d      	sub	sp, #116	; 0x74
 800d4d0:	4614      	mov	r4, r2
 800d4d2:	4698      	mov	r8, r3
 800d4d4:	4606      	mov	r6, r0
 800d4d6:	b118      	cbz	r0, 800d4e0 <_vfiprintf_r+0x18>
 800d4d8:	6983      	ldr	r3, [r0, #24]
 800d4da:	b90b      	cbnz	r3, 800d4e0 <_vfiprintf_r+0x18>
 800d4dc:	f7ff fb0c 	bl	800caf8 <__sinit>
 800d4e0:	4b89      	ldr	r3, [pc, #548]	; (800d708 <_vfiprintf_r+0x240>)
 800d4e2:	429d      	cmp	r5, r3
 800d4e4:	d11b      	bne.n	800d51e <_vfiprintf_r+0x56>
 800d4e6:	6875      	ldr	r5, [r6, #4]
 800d4e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4ea:	07d9      	lsls	r1, r3, #31
 800d4ec:	d405      	bmi.n	800d4fa <_vfiprintf_r+0x32>
 800d4ee:	89ab      	ldrh	r3, [r5, #12]
 800d4f0:	059a      	lsls	r2, r3, #22
 800d4f2:	d402      	bmi.n	800d4fa <_vfiprintf_r+0x32>
 800d4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4f6:	f7ff fba2 	bl	800cc3e <__retarget_lock_acquire_recursive>
 800d4fa:	89ab      	ldrh	r3, [r5, #12]
 800d4fc:	071b      	lsls	r3, r3, #28
 800d4fe:	d501      	bpl.n	800d504 <_vfiprintf_r+0x3c>
 800d500:	692b      	ldr	r3, [r5, #16]
 800d502:	b9eb      	cbnz	r3, 800d540 <_vfiprintf_r+0x78>
 800d504:	4629      	mov	r1, r5
 800d506:	4630      	mov	r0, r6
 800d508:	f7fe faf4 	bl	800baf4 <__swsetup_r>
 800d50c:	b1c0      	cbz	r0, 800d540 <_vfiprintf_r+0x78>
 800d50e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d510:	07dc      	lsls	r4, r3, #31
 800d512:	d50e      	bpl.n	800d532 <_vfiprintf_r+0x6a>
 800d514:	f04f 30ff 	mov.w	r0, #4294967295
 800d518:	b01d      	add	sp, #116	; 0x74
 800d51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51e:	4b7b      	ldr	r3, [pc, #492]	; (800d70c <_vfiprintf_r+0x244>)
 800d520:	429d      	cmp	r5, r3
 800d522:	d101      	bne.n	800d528 <_vfiprintf_r+0x60>
 800d524:	68b5      	ldr	r5, [r6, #8]
 800d526:	e7df      	b.n	800d4e8 <_vfiprintf_r+0x20>
 800d528:	4b79      	ldr	r3, [pc, #484]	; (800d710 <_vfiprintf_r+0x248>)
 800d52a:	429d      	cmp	r5, r3
 800d52c:	bf08      	it	eq
 800d52e:	68f5      	ldreq	r5, [r6, #12]
 800d530:	e7da      	b.n	800d4e8 <_vfiprintf_r+0x20>
 800d532:	89ab      	ldrh	r3, [r5, #12]
 800d534:	0598      	lsls	r0, r3, #22
 800d536:	d4ed      	bmi.n	800d514 <_vfiprintf_r+0x4c>
 800d538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d53a:	f7ff fb81 	bl	800cc40 <__retarget_lock_release_recursive>
 800d53e:	e7e9      	b.n	800d514 <_vfiprintf_r+0x4c>
 800d540:	2300      	movs	r3, #0
 800d542:	9309      	str	r3, [sp, #36]	; 0x24
 800d544:	2320      	movs	r3, #32
 800d546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d54a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d54e:	2330      	movs	r3, #48	; 0x30
 800d550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d714 <_vfiprintf_r+0x24c>
 800d554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d558:	f04f 0901 	mov.w	r9, #1
 800d55c:	4623      	mov	r3, r4
 800d55e:	469a      	mov	sl, r3
 800d560:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d564:	b10a      	cbz	r2, 800d56a <_vfiprintf_r+0xa2>
 800d566:	2a25      	cmp	r2, #37	; 0x25
 800d568:	d1f9      	bne.n	800d55e <_vfiprintf_r+0x96>
 800d56a:	ebba 0b04 	subs.w	fp, sl, r4
 800d56e:	d00b      	beq.n	800d588 <_vfiprintf_r+0xc0>
 800d570:	465b      	mov	r3, fp
 800d572:	4622      	mov	r2, r4
 800d574:	4629      	mov	r1, r5
 800d576:	4630      	mov	r0, r6
 800d578:	f7ff ff93 	bl	800d4a2 <__sfputs_r>
 800d57c:	3001      	adds	r0, #1
 800d57e:	f000 80aa 	beq.w	800d6d6 <_vfiprintf_r+0x20e>
 800d582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d584:	445a      	add	r2, fp
 800d586:	9209      	str	r2, [sp, #36]	; 0x24
 800d588:	f89a 3000 	ldrb.w	r3, [sl]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f000 80a2 	beq.w	800d6d6 <_vfiprintf_r+0x20e>
 800d592:	2300      	movs	r3, #0
 800d594:	f04f 32ff 	mov.w	r2, #4294967295
 800d598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d59c:	f10a 0a01 	add.w	sl, sl, #1
 800d5a0:	9304      	str	r3, [sp, #16]
 800d5a2:	9307      	str	r3, [sp, #28]
 800d5a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5a8:	931a      	str	r3, [sp, #104]	; 0x68
 800d5aa:	4654      	mov	r4, sl
 800d5ac:	2205      	movs	r2, #5
 800d5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5b2:	4858      	ldr	r0, [pc, #352]	; (800d714 <_vfiprintf_r+0x24c>)
 800d5b4:	f7f2 fe14 	bl	80001e0 <memchr>
 800d5b8:	9a04      	ldr	r2, [sp, #16]
 800d5ba:	b9d8      	cbnz	r0, 800d5f4 <_vfiprintf_r+0x12c>
 800d5bc:	06d1      	lsls	r1, r2, #27
 800d5be:	bf44      	itt	mi
 800d5c0:	2320      	movmi	r3, #32
 800d5c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5c6:	0713      	lsls	r3, r2, #28
 800d5c8:	bf44      	itt	mi
 800d5ca:	232b      	movmi	r3, #43	; 0x2b
 800d5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d5d6:	d015      	beq.n	800d604 <_vfiprintf_r+0x13c>
 800d5d8:	9a07      	ldr	r2, [sp, #28]
 800d5da:	4654      	mov	r4, sl
 800d5dc:	2000      	movs	r0, #0
 800d5de:	f04f 0c0a 	mov.w	ip, #10
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5e8:	3b30      	subs	r3, #48	; 0x30
 800d5ea:	2b09      	cmp	r3, #9
 800d5ec:	d94e      	bls.n	800d68c <_vfiprintf_r+0x1c4>
 800d5ee:	b1b0      	cbz	r0, 800d61e <_vfiprintf_r+0x156>
 800d5f0:	9207      	str	r2, [sp, #28]
 800d5f2:	e014      	b.n	800d61e <_vfiprintf_r+0x156>
 800d5f4:	eba0 0308 	sub.w	r3, r0, r8
 800d5f8:	fa09 f303 	lsl.w	r3, r9, r3
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	9304      	str	r3, [sp, #16]
 800d600:	46a2      	mov	sl, r4
 800d602:	e7d2      	b.n	800d5aa <_vfiprintf_r+0xe2>
 800d604:	9b03      	ldr	r3, [sp, #12]
 800d606:	1d19      	adds	r1, r3, #4
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	9103      	str	r1, [sp, #12]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	bfbb      	ittet	lt
 800d610:	425b      	neglt	r3, r3
 800d612:	f042 0202 	orrlt.w	r2, r2, #2
 800d616:	9307      	strge	r3, [sp, #28]
 800d618:	9307      	strlt	r3, [sp, #28]
 800d61a:	bfb8      	it	lt
 800d61c:	9204      	strlt	r2, [sp, #16]
 800d61e:	7823      	ldrb	r3, [r4, #0]
 800d620:	2b2e      	cmp	r3, #46	; 0x2e
 800d622:	d10c      	bne.n	800d63e <_vfiprintf_r+0x176>
 800d624:	7863      	ldrb	r3, [r4, #1]
 800d626:	2b2a      	cmp	r3, #42	; 0x2a
 800d628:	d135      	bne.n	800d696 <_vfiprintf_r+0x1ce>
 800d62a:	9b03      	ldr	r3, [sp, #12]
 800d62c:	1d1a      	adds	r2, r3, #4
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	9203      	str	r2, [sp, #12]
 800d632:	2b00      	cmp	r3, #0
 800d634:	bfb8      	it	lt
 800d636:	f04f 33ff 	movlt.w	r3, #4294967295
 800d63a:	3402      	adds	r4, #2
 800d63c:	9305      	str	r3, [sp, #20]
 800d63e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d724 <_vfiprintf_r+0x25c>
 800d642:	7821      	ldrb	r1, [r4, #0]
 800d644:	2203      	movs	r2, #3
 800d646:	4650      	mov	r0, sl
 800d648:	f7f2 fdca 	bl	80001e0 <memchr>
 800d64c:	b140      	cbz	r0, 800d660 <_vfiprintf_r+0x198>
 800d64e:	2340      	movs	r3, #64	; 0x40
 800d650:	eba0 000a 	sub.w	r0, r0, sl
 800d654:	fa03 f000 	lsl.w	r0, r3, r0
 800d658:	9b04      	ldr	r3, [sp, #16]
 800d65a:	4303      	orrs	r3, r0
 800d65c:	3401      	adds	r4, #1
 800d65e:	9304      	str	r3, [sp, #16]
 800d660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d664:	482c      	ldr	r0, [pc, #176]	; (800d718 <_vfiprintf_r+0x250>)
 800d666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d66a:	2206      	movs	r2, #6
 800d66c:	f7f2 fdb8 	bl	80001e0 <memchr>
 800d670:	2800      	cmp	r0, #0
 800d672:	d03f      	beq.n	800d6f4 <_vfiprintf_r+0x22c>
 800d674:	4b29      	ldr	r3, [pc, #164]	; (800d71c <_vfiprintf_r+0x254>)
 800d676:	bb1b      	cbnz	r3, 800d6c0 <_vfiprintf_r+0x1f8>
 800d678:	9b03      	ldr	r3, [sp, #12]
 800d67a:	3307      	adds	r3, #7
 800d67c:	f023 0307 	bic.w	r3, r3, #7
 800d680:	3308      	adds	r3, #8
 800d682:	9303      	str	r3, [sp, #12]
 800d684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d686:	443b      	add	r3, r7
 800d688:	9309      	str	r3, [sp, #36]	; 0x24
 800d68a:	e767      	b.n	800d55c <_vfiprintf_r+0x94>
 800d68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d690:	460c      	mov	r4, r1
 800d692:	2001      	movs	r0, #1
 800d694:	e7a5      	b.n	800d5e2 <_vfiprintf_r+0x11a>
 800d696:	2300      	movs	r3, #0
 800d698:	3401      	adds	r4, #1
 800d69a:	9305      	str	r3, [sp, #20]
 800d69c:	4619      	mov	r1, r3
 800d69e:	f04f 0c0a 	mov.w	ip, #10
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6a8:	3a30      	subs	r2, #48	; 0x30
 800d6aa:	2a09      	cmp	r2, #9
 800d6ac:	d903      	bls.n	800d6b6 <_vfiprintf_r+0x1ee>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d0c5      	beq.n	800d63e <_vfiprintf_r+0x176>
 800d6b2:	9105      	str	r1, [sp, #20]
 800d6b4:	e7c3      	b.n	800d63e <_vfiprintf_r+0x176>
 800d6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e7f0      	b.n	800d6a2 <_vfiprintf_r+0x1da>
 800d6c0:	ab03      	add	r3, sp, #12
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	462a      	mov	r2, r5
 800d6c6:	4b16      	ldr	r3, [pc, #88]	; (800d720 <_vfiprintf_r+0x258>)
 800d6c8:	a904      	add	r1, sp, #16
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	f7fd fd42 	bl	800b154 <_printf_float>
 800d6d0:	4607      	mov	r7, r0
 800d6d2:	1c78      	adds	r0, r7, #1
 800d6d4:	d1d6      	bne.n	800d684 <_vfiprintf_r+0x1bc>
 800d6d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6d8:	07d9      	lsls	r1, r3, #31
 800d6da:	d405      	bmi.n	800d6e8 <_vfiprintf_r+0x220>
 800d6dc:	89ab      	ldrh	r3, [r5, #12]
 800d6de:	059a      	lsls	r2, r3, #22
 800d6e0:	d402      	bmi.n	800d6e8 <_vfiprintf_r+0x220>
 800d6e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6e4:	f7ff faac 	bl	800cc40 <__retarget_lock_release_recursive>
 800d6e8:	89ab      	ldrh	r3, [r5, #12]
 800d6ea:	065b      	lsls	r3, r3, #25
 800d6ec:	f53f af12 	bmi.w	800d514 <_vfiprintf_r+0x4c>
 800d6f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6f2:	e711      	b.n	800d518 <_vfiprintf_r+0x50>
 800d6f4:	ab03      	add	r3, sp, #12
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	462a      	mov	r2, r5
 800d6fa:	4b09      	ldr	r3, [pc, #36]	; (800d720 <_vfiprintf_r+0x258>)
 800d6fc:	a904      	add	r1, sp, #16
 800d6fe:	4630      	mov	r0, r6
 800d700:	f7fd ffcc 	bl	800b69c <_printf_i>
 800d704:	e7e4      	b.n	800d6d0 <_vfiprintf_r+0x208>
 800d706:	bf00      	nop
 800d708:	0800e588 	.word	0x0800e588
 800d70c:	0800e5a8 	.word	0x0800e5a8
 800d710:	0800e568 	.word	0x0800e568
 800d714:	0800e724 	.word	0x0800e724
 800d718:	0800e72e 	.word	0x0800e72e
 800d71c:	0800b155 	.word	0x0800b155
 800d720:	0800d4a3 	.word	0x0800d4a3
 800d724:	0800e72a 	.word	0x0800e72a

0800d728 <_putc_r>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	460d      	mov	r5, r1
 800d72c:	4614      	mov	r4, r2
 800d72e:	4606      	mov	r6, r0
 800d730:	b118      	cbz	r0, 800d73a <_putc_r+0x12>
 800d732:	6983      	ldr	r3, [r0, #24]
 800d734:	b90b      	cbnz	r3, 800d73a <_putc_r+0x12>
 800d736:	f7ff f9df 	bl	800caf8 <__sinit>
 800d73a:	4b1c      	ldr	r3, [pc, #112]	; (800d7ac <_putc_r+0x84>)
 800d73c:	429c      	cmp	r4, r3
 800d73e:	d124      	bne.n	800d78a <_putc_r+0x62>
 800d740:	6874      	ldr	r4, [r6, #4]
 800d742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d744:	07d8      	lsls	r0, r3, #31
 800d746:	d405      	bmi.n	800d754 <_putc_r+0x2c>
 800d748:	89a3      	ldrh	r3, [r4, #12]
 800d74a:	0599      	lsls	r1, r3, #22
 800d74c:	d402      	bmi.n	800d754 <_putc_r+0x2c>
 800d74e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d750:	f7ff fa75 	bl	800cc3e <__retarget_lock_acquire_recursive>
 800d754:	68a3      	ldr	r3, [r4, #8]
 800d756:	3b01      	subs	r3, #1
 800d758:	2b00      	cmp	r3, #0
 800d75a:	60a3      	str	r3, [r4, #8]
 800d75c:	da05      	bge.n	800d76a <_putc_r+0x42>
 800d75e:	69a2      	ldr	r2, [r4, #24]
 800d760:	4293      	cmp	r3, r2
 800d762:	db1c      	blt.n	800d79e <_putc_r+0x76>
 800d764:	b2eb      	uxtb	r3, r5
 800d766:	2b0a      	cmp	r3, #10
 800d768:	d019      	beq.n	800d79e <_putc_r+0x76>
 800d76a:	6823      	ldr	r3, [r4, #0]
 800d76c:	1c5a      	adds	r2, r3, #1
 800d76e:	6022      	str	r2, [r4, #0]
 800d770:	701d      	strb	r5, [r3, #0]
 800d772:	b2ed      	uxtb	r5, r5
 800d774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d776:	07da      	lsls	r2, r3, #31
 800d778:	d405      	bmi.n	800d786 <_putc_r+0x5e>
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	059b      	lsls	r3, r3, #22
 800d77e:	d402      	bmi.n	800d786 <_putc_r+0x5e>
 800d780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d782:	f7ff fa5d 	bl	800cc40 <__retarget_lock_release_recursive>
 800d786:	4628      	mov	r0, r5
 800d788:	bd70      	pop	{r4, r5, r6, pc}
 800d78a:	4b09      	ldr	r3, [pc, #36]	; (800d7b0 <_putc_r+0x88>)
 800d78c:	429c      	cmp	r4, r3
 800d78e:	d101      	bne.n	800d794 <_putc_r+0x6c>
 800d790:	68b4      	ldr	r4, [r6, #8]
 800d792:	e7d6      	b.n	800d742 <_putc_r+0x1a>
 800d794:	4b07      	ldr	r3, [pc, #28]	; (800d7b4 <_putc_r+0x8c>)
 800d796:	429c      	cmp	r4, r3
 800d798:	bf08      	it	eq
 800d79a:	68f4      	ldreq	r4, [r6, #12]
 800d79c:	e7d1      	b.n	800d742 <_putc_r+0x1a>
 800d79e:	4629      	mov	r1, r5
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f7fe f954 	bl	800ba50 <__swbuf_r>
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	e7e3      	b.n	800d774 <_putc_r+0x4c>
 800d7ac:	0800e588 	.word	0x0800e588
 800d7b0:	0800e5a8 	.word	0x0800e5a8
 800d7b4:	0800e568 	.word	0x0800e568

0800d7b8 <__sread>:
 800d7b8:	b510      	push	{r4, lr}
 800d7ba:	460c      	mov	r4, r1
 800d7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7c0:	f000 f8d6 	bl	800d970 <_read_r>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	bfab      	itete	ge
 800d7c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7ca:	89a3      	ldrhlt	r3, [r4, #12]
 800d7cc:	181b      	addge	r3, r3, r0
 800d7ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7d2:	bfac      	ite	ge
 800d7d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7d6:	81a3      	strhlt	r3, [r4, #12]
 800d7d8:	bd10      	pop	{r4, pc}

0800d7da <__swrite>:
 800d7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7de:	461f      	mov	r7, r3
 800d7e0:	898b      	ldrh	r3, [r1, #12]
 800d7e2:	05db      	lsls	r3, r3, #23
 800d7e4:	4605      	mov	r5, r0
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	4616      	mov	r6, r2
 800d7ea:	d505      	bpl.n	800d7f8 <__swrite+0x1e>
 800d7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f000 f898 	bl	800d928 <_lseek_r>
 800d7f8:	89a3      	ldrh	r3, [r4, #12]
 800d7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d802:	81a3      	strh	r3, [r4, #12]
 800d804:	4632      	mov	r2, r6
 800d806:	463b      	mov	r3, r7
 800d808:	4628      	mov	r0, r5
 800d80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d80e:	f000 b817 	b.w	800d840 <_write_r>

0800d812 <__sseek>:
 800d812:	b510      	push	{r4, lr}
 800d814:	460c      	mov	r4, r1
 800d816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d81a:	f000 f885 	bl	800d928 <_lseek_r>
 800d81e:	1c43      	adds	r3, r0, #1
 800d820:	89a3      	ldrh	r3, [r4, #12]
 800d822:	bf15      	itete	ne
 800d824:	6560      	strne	r0, [r4, #84]	; 0x54
 800d826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d82a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d82e:	81a3      	strheq	r3, [r4, #12]
 800d830:	bf18      	it	ne
 800d832:	81a3      	strhne	r3, [r4, #12]
 800d834:	bd10      	pop	{r4, pc}

0800d836 <__sclose>:
 800d836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d83a:	f000 b831 	b.w	800d8a0 <_close_r>
	...

0800d840 <_write_r>:
 800d840:	b538      	push	{r3, r4, r5, lr}
 800d842:	4d07      	ldr	r5, [pc, #28]	; (800d860 <_write_r+0x20>)
 800d844:	4604      	mov	r4, r0
 800d846:	4608      	mov	r0, r1
 800d848:	4611      	mov	r1, r2
 800d84a:	2200      	movs	r2, #0
 800d84c:	602a      	str	r2, [r5, #0]
 800d84e:	461a      	mov	r2, r3
 800d850:	f7f5 fd53 	bl	80032fa <_write>
 800d854:	1c43      	adds	r3, r0, #1
 800d856:	d102      	bne.n	800d85e <_write_r+0x1e>
 800d858:	682b      	ldr	r3, [r5, #0]
 800d85a:	b103      	cbz	r3, 800d85e <_write_r+0x1e>
 800d85c:	6023      	str	r3, [r4, #0]
 800d85e:	bd38      	pop	{r3, r4, r5, pc}
 800d860:	20000bf8 	.word	0x20000bf8

0800d864 <__assert_func>:
 800d864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d866:	4614      	mov	r4, r2
 800d868:	461a      	mov	r2, r3
 800d86a:	4b09      	ldr	r3, [pc, #36]	; (800d890 <__assert_func+0x2c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4605      	mov	r5, r0
 800d870:	68d8      	ldr	r0, [r3, #12]
 800d872:	b14c      	cbz	r4, 800d888 <__assert_func+0x24>
 800d874:	4b07      	ldr	r3, [pc, #28]	; (800d894 <__assert_func+0x30>)
 800d876:	9100      	str	r1, [sp, #0]
 800d878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d87c:	4906      	ldr	r1, [pc, #24]	; (800d898 <__assert_func+0x34>)
 800d87e:	462b      	mov	r3, r5
 800d880:	f000 f81e 	bl	800d8c0 <fiprintf>
 800d884:	f000 f893 	bl	800d9ae <abort>
 800d888:	4b04      	ldr	r3, [pc, #16]	; (800d89c <__assert_func+0x38>)
 800d88a:	461c      	mov	r4, r3
 800d88c:	e7f3      	b.n	800d876 <__assert_func+0x12>
 800d88e:	bf00      	nop
 800d890:	20000044 	.word	0x20000044
 800d894:	0800e735 	.word	0x0800e735
 800d898:	0800e742 	.word	0x0800e742
 800d89c:	0800e770 	.word	0x0800e770

0800d8a0 <_close_r>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	4d06      	ldr	r5, [pc, #24]	; (800d8bc <_close_r+0x1c>)
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	602b      	str	r3, [r5, #0]
 800d8ac:	f7f5 fd41 	bl	8003332 <_close>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d102      	bne.n	800d8ba <_close_r+0x1a>
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	b103      	cbz	r3, 800d8ba <_close_r+0x1a>
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
 800d8bc:	20000bf8 	.word	0x20000bf8

0800d8c0 <fiprintf>:
 800d8c0:	b40e      	push	{r1, r2, r3}
 800d8c2:	b503      	push	{r0, r1, lr}
 800d8c4:	4601      	mov	r1, r0
 800d8c6:	ab03      	add	r3, sp, #12
 800d8c8:	4805      	ldr	r0, [pc, #20]	; (800d8e0 <fiprintf+0x20>)
 800d8ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ce:	6800      	ldr	r0, [r0, #0]
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	f7ff fdf9 	bl	800d4c8 <_vfiprintf_r>
 800d8d6:	b002      	add	sp, #8
 800d8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8dc:	b003      	add	sp, #12
 800d8de:	4770      	bx	lr
 800d8e0:	20000044 	.word	0x20000044

0800d8e4 <_fstat_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	4d07      	ldr	r5, [pc, #28]	; (800d904 <_fstat_r+0x20>)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	602b      	str	r3, [r5, #0]
 800d8f2:	f7f5 fd2a 	bl	800334a <_fstat>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	d102      	bne.n	800d900 <_fstat_r+0x1c>
 800d8fa:	682b      	ldr	r3, [r5, #0]
 800d8fc:	b103      	cbz	r3, 800d900 <_fstat_r+0x1c>
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	bd38      	pop	{r3, r4, r5, pc}
 800d902:	bf00      	nop
 800d904:	20000bf8 	.word	0x20000bf8

0800d908 <_isatty_r>:
 800d908:	b538      	push	{r3, r4, r5, lr}
 800d90a:	4d06      	ldr	r5, [pc, #24]	; (800d924 <_isatty_r+0x1c>)
 800d90c:	2300      	movs	r3, #0
 800d90e:	4604      	mov	r4, r0
 800d910:	4608      	mov	r0, r1
 800d912:	602b      	str	r3, [r5, #0]
 800d914:	f7f5 fd29 	bl	800336a <_isatty>
 800d918:	1c43      	adds	r3, r0, #1
 800d91a:	d102      	bne.n	800d922 <_isatty_r+0x1a>
 800d91c:	682b      	ldr	r3, [r5, #0]
 800d91e:	b103      	cbz	r3, 800d922 <_isatty_r+0x1a>
 800d920:	6023      	str	r3, [r4, #0]
 800d922:	bd38      	pop	{r3, r4, r5, pc}
 800d924:	20000bf8 	.word	0x20000bf8

0800d928 <_lseek_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d07      	ldr	r5, [pc, #28]	; (800d948 <_lseek_r+0x20>)
 800d92c:	4604      	mov	r4, r0
 800d92e:	4608      	mov	r0, r1
 800d930:	4611      	mov	r1, r2
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	f7f5 fd22 	bl	8003380 <_lseek>
 800d93c:	1c43      	adds	r3, r0, #1
 800d93e:	d102      	bne.n	800d946 <_lseek_r+0x1e>
 800d940:	682b      	ldr	r3, [r5, #0]
 800d942:	b103      	cbz	r3, 800d946 <_lseek_r+0x1e>
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	bd38      	pop	{r3, r4, r5, pc}
 800d948:	20000bf8 	.word	0x20000bf8

0800d94c <__ascii_mbtowc>:
 800d94c:	b082      	sub	sp, #8
 800d94e:	b901      	cbnz	r1, 800d952 <__ascii_mbtowc+0x6>
 800d950:	a901      	add	r1, sp, #4
 800d952:	b142      	cbz	r2, 800d966 <__ascii_mbtowc+0x1a>
 800d954:	b14b      	cbz	r3, 800d96a <__ascii_mbtowc+0x1e>
 800d956:	7813      	ldrb	r3, [r2, #0]
 800d958:	600b      	str	r3, [r1, #0]
 800d95a:	7812      	ldrb	r2, [r2, #0]
 800d95c:	1e10      	subs	r0, r2, #0
 800d95e:	bf18      	it	ne
 800d960:	2001      	movne	r0, #1
 800d962:	b002      	add	sp, #8
 800d964:	4770      	bx	lr
 800d966:	4610      	mov	r0, r2
 800d968:	e7fb      	b.n	800d962 <__ascii_mbtowc+0x16>
 800d96a:	f06f 0001 	mvn.w	r0, #1
 800d96e:	e7f8      	b.n	800d962 <__ascii_mbtowc+0x16>

0800d970 <_read_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4d07      	ldr	r5, [pc, #28]	; (800d990 <_read_r+0x20>)
 800d974:	4604      	mov	r4, r0
 800d976:	4608      	mov	r0, r1
 800d978:	4611      	mov	r1, r2
 800d97a:	2200      	movs	r2, #0
 800d97c:	602a      	str	r2, [r5, #0]
 800d97e:	461a      	mov	r2, r3
 800d980:	f7f5 fc9e 	bl	80032c0 <_read>
 800d984:	1c43      	adds	r3, r0, #1
 800d986:	d102      	bne.n	800d98e <_read_r+0x1e>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	b103      	cbz	r3, 800d98e <_read_r+0x1e>
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	20000bf8 	.word	0x20000bf8

0800d994 <__ascii_wctomb>:
 800d994:	b149      	cbz	r1, 800d9aa <__ascii_wctomb+0x16>
 800d996:	2aff      	cmp	r2, #255	; 0xff
 800d998:	bf85      	ittet	hi
 800d99a:	238a      	movhi	r3, #138	; 0x8a
 800d99c:	6003      	strhi	r3, [r0, #0]
 800d99e:	700a      	strbls	r2, [r1, #0]
 800d9a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d9a4:	bf98      	it	ls
 800d9a6:	2001      	movls	r0, #1
 800d9a8:	4770      	bx	lr
 800d9aa:	4608      	mov	r0, r1
 800d9ac:	4770      	bx	lr

0800d9ae <abort>:
 800d9ae:	b508      	push	{r3, lr}
 800d9b0:	2006      	movs	r0, #6
 800d9b2:	f000 f82b 	bl	800da0c <raise>
 800d9b6:	2001      	movs	r0, #1
 800d9b8:	f7f5 fc78 	bl	80032ac <_exit>

0800d9bc <_raise_r>:
 800d9bc:	291f      	cmp	r1, #31
 800d9be:	b538      	push	{r3, r4, r5, lr}
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	460d      	mov	r5, r1
 800d9c4:	d904      	bls.n	800d9d0 <_raise_r+0x14>
 800d9c6:	2316      	movs	r3, #22
 800d9c8:	6003      	str	r3, [r0, #0]
 800d9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9d2:	b112      	cbz	r2, 800d9da <_raise_r+0x1e>
 800d9d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9d8:	b94b      	cbnz	r3, 800d9ee <_raise_r+0x32>
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f000 f830 	bl	800da40 <_getpid_r>
 800d9e0:	462a      	mov	r2, r5
 800d9e2:	4601      	mov	r1, r0
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ea:	f000 b817 	b.w	800da1c <_kill_r>
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d00a      	beq.n	800da08 <_raise_r+0x4c>
 800d9f2:	1c59      	adds	r1, r3, #1
 800d9f4:	d103      	bne.n	800d9fe <_raise_r+0x42>
 800d9f6:	2316      	movs	r3, #22
 800d9f8:	6003      	str	r3, [r0, #0]
 800d9fa:	2001      	movs	r0, #1
 800d9fc:	e7e7      	b.n	800d9ce <_raise_r+0x12>
 800d9fe:	2400      	movs	r4, #0
 800da00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da04:	4628      	mov	r0, r5
 800da06:	4798      	blx	r3
 800da08:	2000      	movs	r0, #0
 800da0a:	e7e0      	b.n	800d9ce <_raise_r+0x12>

0800da0c <raise>:
 800da0c:	4b02      	ldr	r3, [pc, #8]	; (800da18 <raise+0xc>)
 800da0e:	4601      	mov	r1, r0
 800da10:	6818      	ldr	r0, [r3, #0]
 800da12:	f7ff bfd3 	b.w	800d9bc <_raise_r>
 800da16:	bf00      	nop
 800da18:	20000044 	.word	0x20000044

0800da1c <_kill_r>:
 800da1c:	b538      	push	{r3, r4, r5, lr}
 800da1e:	4d07      	ldr	r5, [pc, #28]	; (800da3c <_kill_r+0x20>)
 800da20:	2300      	movs	r3, #0
 800da22:	4604      	mov	r4, r0
 800da24:	4608      	mov	r0, r1
 800da26:	4611      	mov	r1, r2
 800da28:	602b      	str	r3, [r5, #0]
 800da2a:	f7f5 fc2f 	bl	800328c <_kill>
 800da2e:	1c43      	adds	r3, r0, #1
 800da30:	d102      	bne.n	800da38 <_kill_r+0x1c>
 800da32:	682b      	ldr	r3, [r5, #0]
 800da34:	b103      	cbz	r3, 800da38 <_kill_r+0x1c>
 800da36:	6023      	str	r3, [r4, #0]
 800da38:	bd38      	pop	{r3, r4, r5, pc}
 800da3a:	bf00      	nop
 800da3c:	20000bf8 	.word	0x20000bf8

0800da40 <_getpid_r>:
 800da40:	f7f5 bc1c 	b.w	800327c <_getpid>

0800da44 <_init>:
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da46:	bf00      	nop
 800da48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da4a:	bc08      	pop	{r3}
 800da4c:	469e      	mov	lr, r3
 800da4e:	4770      	bx	lr

0800da50 <_fini>:
 800da50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da52:	bf00      	nop
 800da54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da56:	bc08      	pop	{r3}
 800da58:	469e      	mov	lr, r3
 800da5a:	4770      	bx	lr
