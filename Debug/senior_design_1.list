
senior_design_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cdc  0800d838  0800d838  0001d838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e514  0800e514  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800e514  0800e514  0001e514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e51c  0800e51c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e51c  0800e51c  0001e51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e520  0800e520  0001e520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800e524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020214  2**0
                  CONTENTS
 10 .bss          000009b0  20000214  20000214  00020214  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bc4  20000bc4  00020214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a62  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000429f  00000000  00000000  00041ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a70  00000000  00000000  00045f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001900  00000000  00000000  000479b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002681b  00000000  00000000  000492b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eafa  00000000  00000000  0006fad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d79be  00000000  00000000  0008e5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00165f8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000082f8  00000000  00000000  00165fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d81c 	.word	0x0800d81c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	0800d81c 	.word	0x0800d81c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LTC6813_init_reg_limits>:

/* Helper function to initialize register limits. */
void LTC6813_init_reg_limits(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic // A two dimensional array that will store the data
							 )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
    for(uint8_t cic=0; cic<total_ic; cic++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e038      	b.n	8000f30 <LTC6813_init_reg_limits+0x84>
    {
        ic[cic].ic_reg.cell_channels=18;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	22e8      	movs	r2, #232	; 0xe8
 8000ec2:	fb02 f303 	mul.w	r3, r2, r3
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	2212      	movs	r2, #18
 8000ecc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ic[cic].ic_reg.stat_channels=4;
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	22e8      	movs	r2, #232	; 0xe8
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	2204      	movs	r2, #4
 8000ede:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        ic[cic].ic_reg.aux_channels=9;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	22e8      	movs	r2, #232	; 0xe8
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	2209      	movs	r2, #9
 8000ef0:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
        ic[cic].ic_reg.num_cv_reg=6;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	22e8      	movs	r2, #232	; 0xe8
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	2206      	movs	r2, #6
 8000f02:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
        ic[cic].ic_reg.num_gpio_reg=4;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	22e8      	movs	r2, #232	; 0xe8
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	2204      	movs	r2, #4
 8000f14:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
        ic[cic].ic_reg.num_stat_reg=2;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	22e8      	movs	r2, #232	; 0xe8
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	2202      	movs	r2, #2
 8000f26:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    for(uint8_t cic=0; cic<total_ic; cic++)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3c2      	bcc.n	8000ebe <LTC6813_init_reg_limits+0x12>
    }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LTC6813_adcv>:
/* Starts cell voltage conversion */
void LTC6813_adcv(uint8_t MD, //ADC Mode
				  uint8_t DCP, //Discharge Permit
				  uint8_t CH //Cell Channels to be measured
				 )
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	460b      	mov	r3, r1
 8000f52:	71bb      	strb	r3, [r7, #6]
 8000f54:	4613      	mov	r3, r2
 8000f56:	717b      	strb	r3, [r7, #5]
    LTC681x_adcv(MD,DCP,CH);
 8000f58:	797a      	ldrb	r2, [r7, #5]
 8000f5a:	79b9      	ldrb	r1, [r7, #6]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fb1e 	bl	80015a0 <LTC681x_adcv>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <LTC6813_rdcv>:
/*  Reads and parses the LTC6813 cell voltage registers */
uint8_t LTC6813_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	603a      	str	r2, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
	pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8000f80:	79b9      	ldrb	r1, [r7, #6]
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fb35 	bl	80015f6 <LTC681x_rdcv>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
	return(pec_error);
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <LTC6813_pollAdc>:
	return(LTC681x_pladc());
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6813_pollAdc()
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
	return(LTC681x_pollAdc());
 8000f9e:	f000 fcaf 	bl	8001900 <LTC681x_pollAdc>
 8000fa2:	4603      	mov	r3, r0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LTC6813_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6813_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic // A two dimensional array that will store the data
							 )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
	LTC681x_reset_crc_count(total_ic,ic);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	6839      	ldr	r1, [r7, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fe6f 	bl	8001c9c <LTC681x_reset_crc_count>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <LTC6813_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC6813_init_cfg(uint8_t total_ic, cell_asic *ic)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	6039      	str	r1, [r7, #0]
 8000fd0:	71fb      	strb	r3, [r7, #7]
   LTC681x_init_cfg(total_ic,ic);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	6839      	ldr	r1, [r7, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fec6 	bl	8001d68 <LTC681x_init_cfg>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <LTC6813_set_cfgr>:

/* Helper function to set CFGR variable */
void LTC6813_set_cfgr(uint8_t nIC, cell_asic *ic, uint8_t refon, uint8_t adcopt, uint8_t gpio[5],uint8_t dcc[12],uint8_t dcto[4], uint16_t uv, uint16_t  ov)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6039      	str	r1, [r7, #0]
 8000fec:	4611      	mov	r1, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	71bb      	strb	r3, [r7, #6]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC,ic,refon);
 8000ffc:	79ba      	ldrb	r2, [r7, #6]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	6839      	ldr	r1, [r7, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 feda 	bl	8001dbc <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8001008:	797a      	ldrb	r2, [r7, #5]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	6839      	ldr	r1, [r7, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 ff08 	bl	8001e24 <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	6839      	ldr	r1, [r7, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 ff36 	bl	8001e8c <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 ff80 	bl	8001f2c <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	6839      	ldr	r1, [r7, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f809 	bl	800204a <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8001038:	8bba      	ldrh	r2, [r7, #28]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 f853 	bl	80020ea <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 8001044:	8c3a      	ldrh	r2, [r7, #32]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	6839      	ldr	r1, [r7, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f001 f893 	bl	8002176 <LTC681x_set_cfgr_ov>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <LTC6813_init_cfgb>:
    LTC681x_set_cfgr_ov( nIC, ic, ov);
}

/* Helper Function to initialize the CFGRB data structures */
void LTC6813_init_cfgb(uint8_t total_ic,cell_asic *ic)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e016      	b.n	8001098 <LTC6813_init_cfgb+0x40>
    {
		for(int j =0; j<6;j++)
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	e00d      	b.n	800108c <LTC6813_init_cfgb+0x34>
        {
            ic[current_ic].configb.tx_data[j] = 0;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	22e8      	movs	r2, #232	; 0xe8
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	441a      	add	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4413      	add	r3, r2
 8001080:	330f      	adds	r3, #15
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
		for(int j =0; j<6;j++)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	3301      	adds	r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b05      	cmp	r3, #5
 8001090:	ddee      	ble.n	8001070 <LTC6813_init_cfgb+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3301      	adds	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3e4      	bcc.n	800106a <LTC6813_init_cfgb+0x12>
        }
    }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LTC6813_set_cfgrb>:

/* Helper Function to set the configuration register B */
void LTC6813_set_cfgrb(uint8_t nIC, cell_asic *ic,uint8_t fdrf,uint8_t dtmen,uint8_t ps[2],uint8_t gpiobits[4],uint8_t dccbits[7])
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	4611      	mov	r1, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	460b      	mov	r3, r1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	4613      	mov	r3, r2
 80010c4:	717b      	strb	r3, [r7, #5]
    LTC6813_set_cfgrb_fdrf(nIC,ic,fdrf);
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f81c 	bl	800110a <LTC6813_set_cfgrb_fdrf>
    LTC6813_set_cfgrb_dtmen(nIC,ic,dtmen);
 80010d2:	797a      	ldrb	r2, [r7, #5]
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f84a 	bl	8001172 <LTC6813_set_cfgrb_dtmen>
    LTC6813_set_cfgrb_ps(nIC,ic,ps);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	6839      	ldr	r1, [r7, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f878 	bl	80011da <LTC6813_set_cfgrb_ps>
    LTC6813_set_cfgrb_gpio_b(nIC,ic,gpiobits);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f8c2 	bl	800127a <LTC6813_set_cfgrb_gpio_b>
	LTC6813_set_cfgrb_dcc_b(nIC,ic,dccbits);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f90a 	bl	8001316 <LTC6813_set_cfgrb_dcc_b>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <LTC6813_set_cfgrb_fdrf>:

/* Helper function to set the FDRF bit */
void LTC6813_set_cfgrb_fdrf(uint8_t nIC, cell_asic *ic, uint8_t fdrf)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	6039      	str	r1, [r7, #0]
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	4613      	mov	r3, r2
 8001118:	71bb      	strb	r3, [r7, #6]
	if(fdrf) ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x40;
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d011      	beq.n	8001144 <LTC6813_set_cfgrb_fdrf+0x3a>
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	22e8      	movs	r2, #232	; 0xe8
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	7c1a      	ldrb	r2, [r3, #16]
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	21e8      	movs	r1, #232	; 0xe8
 8001132:	fb01 f303 	mul.w	r3, r1, r3
 8001136:	6839      	ldr	r1, [r7, #0]
 8001138:	440b      	add	r3, r1
 800113a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	741a      	strb	r2, [r3, #16]
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xBF;
}
 8001142:	e010      	b.n	8001166 <LTC6813_set_cfgrb_fdrf+0x5c>
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xBF;
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	22e8      	movs	r2, #232	; 0xe8
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	4413      	add	r3, r2
 8001150:	7c1a      	ldrb	r2, [r3, #16]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	21e8      	movs	r1, #232	; 0xe8
 8001156:	fb01 f303 	mul.w	r3, r1, r3
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	440b      	add	r3, r1
 800115e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	741a      	strb	r2, [r3, #16]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LTC6813_set_cfgrb_dtmen>:

/* Helper function to set the DTMEN bit */
void LTC6813_set_cfgrb_dtmen(uint8_t nIC, cell_asic *ic, uint8_t dtmen)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	6039      	str	r1, [r7, #0]
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	4613      	mov	r3, r2
 8001180:	71bb      	strb	r3, [r7, #6]
	if(dtmen) ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x08;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d011      	beq.n	80011ac <LTC6813_set_cfgrb_dtmen+0x3a>
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	22e8      	movs	r2, #232	; 0xe8
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	7c1a      	ldrb	r2, [r3, #16]
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	21e8      	movs	r1, #232	; 0xe8
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	440b      	add	r3, r1
 80011a2:	f042 0208 	orr.w	r2, r2, #8
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	741a      	strb	r2, [r3, #16]
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xF7;
}
 80011aa:	e010      	b.n	80011ce <LTC6813_set_cfgrb_dtmen+0x5c>
	else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xF7;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	22e8      	movs	r2, #232	; 0xe8
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	7c1a      	ldrb	r2, [r3, #16]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	21e8      	movs	r1, #232	; 0xe8
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	440b      	add	r3, r1
 80011c6:	f022 0208 	bic.w	r2, r2, #8
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	741a      	strb	r2, [r3, #16]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LTC6813_set_cfgrb_ps>:

/* Helper function to set the PATH SELECT bit */
void LTC6813_set_cfgrb_ps(uint8_t nIC, cell_asic *ic, uint8_t ps[])
{
 80011da:	b480      	push	{r7}
 80011dc:	b087      	sub	sp, #28
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<2;i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e03b      	b.n	8001266 <LTC6813_set_cfgrb_ps+0x8c>
	{
	  if(ps[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|(0x01<<(i+4));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d018      	beq.n	800122c <LTC6813_set_cfgrb_ps+0x52>
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	22e8      	movs	r2, #232	; 0xe8
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	7c1b      	ldrb	r3, [r3, #16]
 8001208:	b25a      	sxtb	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3304      	adds	r3, #4
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	b25b      	sxtb	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b259      	sxtb	r1, r3
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	22e8      	movs	r2, #232	; 0xe8
 800121e:	fb02 f303 	mul.w	r3, r2, r3
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	b2ca      	uxtb	r2, r1
 8001228:	741a      	strb	r2, [r3, #16]
 800122a:	e019      	b.n	8001260 <LTC6813_set_cfgrb_ps+0x86>
	  else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&(~(0x01<<(i+4)));
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	22e8      	movs	r2, #232	; 0xe8
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	4413      	add	r3, r2
 8001238:	7c1b      	ldrb	r3, [r3, #16]
 800123a:	b25a      	sxtb	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3304      	adds	r3, #4
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	b25b      	sxtb	r3, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	b25b      	sxtb	r3, r3
 800124c:	4013      	ands	r3, r2
 800124e:	b259      	sxtb	r1, r3
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	22e8      	movs	r2, #232	; 0xe8
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	b2ca      	uxtb	r2, r1
 800125e:	741a      	strb	r2, [r3, #16]
	for(int i =0;i<2;i++)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b01      	cmp	r3, #1
 800126a:	ddc0      	ble.n	80011ee <LTC6813_set_cfgrb_ps+0x14>
	}
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LTC6813_set_cfgrb_gpio_b>:

/*  Helper function to set the gpio bits in configb b register  */
void LTC6813_set_cfgrb_gpio_b(uint8_t nIC, cell_asic *ic, uint8_t gpiobits[])
{
 800127a:	b480      	push	{r7}
 800127c:	b087      	sub	sp, #28
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e039      	b.n	8001302 <LTC6813_set_cfgrb_gpio_b+0x88>
	{
	  if(gpiobits[i])ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]|(0x01<<i);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d017      	beq.n	80012ca <LTC6813_set_cfgrb_gpio_b+0x50>
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	22e8      	movs	r2, #232	; 0xe8
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	4413      	add	r3, r2
 80012a6:	7bdb      	ldrb	r3, [r3, #15]
 80012a8:	b25a      	sxtb	r2, r3
 80012aa:	2101      	movs	r1, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b259      	sxtb	r1, r3
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	22e8      	movs	r2, #232	; 0xe8
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	b2ca      	uxtb	r2, r1
 80012c6:	73da      	strb	r2, [r3, #15]
 80012c8:	e018      	b.n	80012fc <LTC6813_set_cfgrb_gpio_b+0x82>
	  else ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]&(~(0x01<<i));
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	22e8      	movs	r2, #232	; 0xe8
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	4413      	add	r3, r2
 80012d6:	7bdb      	ldrb	r3, [r3, #15]
 80012d8:	b25a      	sxtb	r2, r3
 80012da:	2101      	movs	r1, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	4013      	ands	r3, r2
 80012ea:	b259      	sxtb	r1, r3
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	22e8      	movs	r2, #232	; 0xe8
 80012f0:	fb02 f303 	mul.w	r3, r2, r3
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2ca      	uxtb	r2, r1
 80012fa:	73da      	strb	r2, [r3, #15]
	for(int i =0;i<4;i++)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b03      	cmp	r3, #3
 8001306:	ddc2      	ble.n	800128e <LTC6813_set_cfgrb_gpio_b+0x14>
	}
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LTC6813_set_cfgrb_dcc_b>:

/*  Helper function to set the dcc bits in configb b register */
void LTC6813_set_cfgrb_dcc_b(uint8_t nIC, cell_asic *ic, uint8_t dccbits[])
{
 8001316:	b480      	push	{r7}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<7;i++)
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	e0ac      	b.n	8001484 <LTC6813_set_cfgrb_dcc_b+0x16e>
	{
		if(i==0)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d128      	bne.n	8001382 <LTC6813_set_cfgrb_dcc_b+0x6c>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|0x04;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d011      	beq.n	8001360 <LTC6813_set_cfgrb_dcc_b+0x4a>
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	22e8      	movs	r2, #232	; 0xe8
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	7c1a      	ldrb	r2, [r3, #16]
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	21e8      	movs	r1, #232	; 0xe8
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	440b      	add	r3, r1
 8001356:	f042 0204 	orr.w	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	741a      	strb	r2, [r3, #16]
 800135e:	e010      	b.n	8001382 <LTC6813_set_cfgrb_dcc_b+0x6c>
			else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&0xFB;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	22e8      	movs	r2, #232	; 0xe8
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	4413      	add	r3, r2
 800136c:	7c1a      	ldrb	r2, [r3, #16]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	21e8      	movs	r1, #232	; 0xe8
 8001372:	fb01 f303 	mul.w	r3, r1, r3
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	440b      	add	r3, r1
 800137a:	f022 0204 	bic.w	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	741a      	strb	r2, [r3, #16]
		}
		if(i>0 && i<5)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2b00      	cmp	r3, #0
 8001386:	dd3b      	ble.n	8001400 <LTC6813_set_cfgrb_dcc_b+0xea>
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b04      	cmp	r3, #4
 800138c:	dc38      	bgt.n	8001400 <LTC6813_set_cfgrb_dcc_b+0xea>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]|(0x01<<(i+3));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d018      	beq.n	80013cc <LTC6813_set_cfgrb_dcc_b+0xb6>
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	22e8      	movs	r2, #232	; 0xe8
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	4413      	add	r3, r2
 80013a6:	7bdb      	ldrb	r3, [r3, #15]
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3303      	adds	r3, #3
 80013ae:	2101      	movs	r1, #1
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b259      	sxtb	r1, r3
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	22e8      	movs	r2, #232	; 0xe8
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	4413      	add	r3, r2
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	73da      	strb	r2, [r3, #15]
 80013ca:	e019      	b.n	8001400 <LTC6813_set_cfgrb_dcc_b+0xea>
			else ic[nIC].configb.tx_data[0] = ic[nIC].configb.tx_data[0]&(~(0x01<<(i+3)));
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	22e8      	movs	r2, #232	; 0xe8
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	4413      	add	r3, r2
 80013d8:	7bdb      	ldrb	r3, [r3, #15]
 80013da:	b25a      	sxtb	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3303      	adds	r3, #3
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	b259      	sxtb	r1, r3
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	22e8      	movs	r2, #232	; 0xe8
 80013f4:	fb02 f303 	mul.w	r3, r2, r3
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	4413      	add	r3, r2
 80013fc:	b2ca      	uxtb	r2, r1
 80013fe:	73da      	strb	r2, [r3, #15]
		}
		if(i>4 && i<7)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2b04      	cmp	r3, #4
 8001404:	dd3b      	ble.n	800147e <LTC6813_set_cfgrb_dcc_b+0x168>
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b06      	cmp	r3, #6
 800140a:	dc38      	bgt.n	800147e <LTC6813_set_cfgrb_dcc_b+0x168>
		{
			if(dccbits[i])ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]|(0x01<<(i-5));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d018      	beq.n	800144a <LTC6813_set_cfgrb_dcc_b+0x134>
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	22e8      	movs	r2, #232	; 0xe8
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	4413      	add	r3, r2
 8001424:	7c1b      	ldrb	r3, [r3, #16]
 8001426:	b25a      	sxtb	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3b05      	subs	r3, #5
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	b25b      	sxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b259      	sxtb	r1, r3
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	22e8      	movs	r2, #232	; 0xe8
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4413      	add	r3, r2
 8001444:	b2ca      	uxtb	r2, r1
 8001446:	741a      	strb	r2, [r3, #16]
 8001448:	e019      	b.n	800147e <LTC6813_set_cfgrb_dcc_b+0x168>
			else ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1]&(~(0x01<<(i-5)));
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	22e8      	movs	r2, #232	; 0xe8
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	4413      	add	r3, r2
 8001456:	7c1b      	ldrb	r3, [r3, #16]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3b05      	subs	r3, #5
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	b25b      	sxtb	r3, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4013      	ands	r3, r2
 800146c:	b259      	sxtb	r1, r3
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	22e8      	movs	r2, #232	; 0xe8
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4413      	add	r3, r2
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	741a      	strb	r2, [r3, #16]
	for(int i =0;i<7;i++)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b06      	cmp	r3, #6
 8001488:	f77f af4f 	ble.w	800132a <LTC6813_set_cfgrb_dcc_b+0x14>
		}
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <init_app_data_6813>:

void init_app_data_6813(app_data app_data_init)
{
 800149c:	b084      	sub	sp, #16
 800149e:	b5b0      	push	{r4, r5, r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af02      	add	r7, sp, #8
 80014a4:	f107 0410 	add.w	r4, r7, #16
 80014a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	a_d = app_data_init;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <init_app_data_6813+0x38>)
 80014ae:	461d      	mov	r5, r3
 80014b0:	f107 0410 	add.w	r4, r7, #16
 80014b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	602b      	str	r3, [r5, #0]
	init_app_data_681x(a_d);
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <init_app_data_6813+0x38>)
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	9200      	str	r2, [sp, #0]
 80014c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c4:	f000 ff36 	bl	8002334 <init_app_data_681x>
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014d0:	b004      	add	sp, #16
 80014d2:	4770      	bx	lr
 80014d4:	20000230 	.word	0x20000230

080014d8 <cmd_68>:
	}
}

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	cmd[0] = tx_cmd[0];
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	785b      	ldrb	r3, [r3, #1]
 80014ea:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	4619      	mov	r1, r3
 80014f2:	2002      	movs	r0, #2
 80014f4:	f000 f820 	bl	8001538 <pec15_calc>
 80014f8:	4603      	mov	r3, r0
 80014fa:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2110      	movs	r1, #16
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <cmd_68+0x5c>)
 8001512:	f002 fae1 	bl	8003ad8 <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4619      	mov	r1, r3
 800151c:	2004      	movs	r0, #4
 800151e:	f000 fe6d 	bl	80021fc <spi_write_array>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	2110      	movs	r1, #16
 8001526:	4803      	ldr	r0, [pc, #12]	; (8001534 <cmd_68+0x5c>)
 8001528:	f002 fad6 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40020000 	.word	0x40020000

08001538 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
 8001544:	2310      	movs	r3, #16
 8001546:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8001548:	2300      	movs	r3, #0
 800154a:	737b      	strb	r3, [r7, #13]
 800154c:	e019      	b.n	8001582 <pec15_calc+0x4a>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 800154e:	89fb      	ldrh	r3, [r7, #14]
 8001550:	09db      	lsrs	r3, r3, #7
 8001552:	b29a      	uxth	r2, r3
 8001554:	7b7b      	ldrb	r3, [r7, #13]
 8001556:	6839      	ldr	r1, [r7, #0]
 8001558:	440b      	add	r3, r1
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4053      	eors	r3, r2
 8001560:	b29b      	uxth	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	817b      	strh	r3, [r7, #10]
			remainder = (remainder<<8)^crc15Table[addr];
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21a      	sxth	r2, r3
 800156c:	897b      	ldrh	r3, [r7, #10]
 800156e:	490b      	ldr	r1, [pc, #44]	; (800159c <pec15_calc+0x64>)
 8001570:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4053      	eors	r3, r2
 8001578:	b21b      	sxth	r3, r3
 800157a:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 800157c:	7b7b      	ldrb	r3, [r7, #13]
 800157e:	3301      	adds	r3, #1
 8001580:	737b      	strb	r3, [r7, #13]
 8001582:	7b7a      	ldrb	r2, [r7, #13]
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	429a      	cmp	r2, r3
 8001588:	d3e1      	bcc.n	800154e <pec15_calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	b29b      	uxth	r3, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	0800df20 	.word	0x0800df20

080015a0 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv( uint8_t MD, //ADC Mode
				   uint8_t DCP, //Discharge Permit
				   uint8_t CH //Cell Channels to be measured
                 )
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
 80015aa:	460b      	mov	r3, r1
 80015ac:	71bb      	strb	r3, [r7, #6]
 80015ae:	4613      	mov	r3, r2
 80015b0:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	105b      	asrs	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3302      	adds	r3, #2
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	733b      	strb	r3, [r7, #12]
	md_bits = (MD & 0x01) << 7;
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	01db      	lsls	r3, r3, #7
 80015ca:	73fb      	strb	r3, [r7, #15]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	4413      	add	r3, r2
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	797b      	ldrb	r3, [r7, #5]
 80015da:	4413      	add	r3, r2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	3360      	adds	r3, #96	; 0x60
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff75 	bl	80014d8 <cmd_68>
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <LTC681x_rdcv>:
*/
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // The number of ICs in the system
                     cell_asic *ic // Array of the parsed cell codes
                    )
{
 80015f6:	b5b0      	push	{r4, r5, r7, lr}
 80015f8:	b088      	sub	sp, #32
 80015fa:	af02      	add	r7, sp, #8
 80015fc:	4603      	mov	r3, r0
 80015fe:	603a      	str	r2, [r7, #0]
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	460b      	mov	r3, r1
 8001604:	71bb      	strb	r3, [r7, #6]
	int8_t pec_error = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	75bb      	strb	r3, [r7, #22]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4618      	mov	r0, r3
 8001614:	f009 faf2 	bl	800abfc <malloc>
 8001618:	4603      	mov	r3, r0
 800161a:	60bb      	str	r3, [r7, #8]

	if (reg == 0)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d148      	bne.n	80016b4 <LTC681x_rdcv+0xbe>
	{
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8001622:	2301      	movs	r3, #1
 8001624:	757b      	strb	r3, [r7, #21]
 8001626:	e03e      	b.n	80016a6 <LTC681x_rdcv+0xb0>
		{
			LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 8001628:	79b9      	ldrb	r1, [r7, #6]
 800162a:	7d7b      	ldrb	r3, [r7, #21]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f890 	bl	8001754 <LTC681x_rdcv_reg>
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	e02e      	b.n	8001698 <LTC681x_rdcv+0xa2>
			{
			if (ic->isospi_reverse == 0)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <LTC681x_rdcv+0x54>
			{
			  c_ic = current_ic;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	75bb      	strb	r3, [r7, #22]
 8001648:	e006      	b.n	8001658 <LTC681x_rdcv+0x62>
			}
			else
			{
			  c_ic = total_ic - current_ic - 1;
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	79ba      	ldrb	r2, [r7, #6]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	b2d8      	uxtb	r0, r3
												&ic[c_ic].cells.c_codes[0],
 800165c:	7dbb      	ldrb	r3, [r7, #22]
 800165e:	22e8      	movs	r2, #232	; 0xe8
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001668:	f103 041e 	add.w	r4, r3, #30
												&ic[c_ic].cells.pec_match[0]);
 800166c:	7dbb      	ldrb	r3, [r7, #22]
 800166e:	22e8      	movs	r2, #232	; 0xe8
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001678:	3342      	adds	r3, #66	; 0x42
 800167a:	7d79      	ldrb	r1, [r7, #21]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4623      	mov	r3, r4
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	f000 f8cb 	bl	800181c <parse_cells>
 8001686:	4603      	mov	r3, r0
 8001688:	b2da      	uxtb	r2, r3
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	4413      	add	r3, r2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	75fb      	strb	r3, [r7, #23]
			for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	3301      	adds	r3, #1
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbcc      	blt.n	800163a <LTC681x_rdcv+0x44>
		for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 80016a0:	7d7b      	ldrb	r3, [r7, #21]
 80016a2:	3301      	adds	r3, #1
 80016a4:	757b      	strb	r3, [r7, #21]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80016ac:	7d7a      	ldrb	r2, [r7, #21]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d9ba      	bls.n	8001628 <LTC681x_rdcv+0x32>
 80016b2:	e040      	b.n	8001736 <LTC681x_rdcv+0x140>
		}
	}

	else
	{
		LTC681x_rdcv_reg(reg, total_ic,cell_data);
 80016b4:	79b9      	ldrb	r1, [r7, #6]
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f84a 	bl	8001754 <LTC681x_rdcv_reg>

		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e033      	b.n	800172e <LTC681x_rdcv+0x138>
		{
			if (ic->isospi_reverse == 0)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <LTC681x_rdcv+0xe0>
			{
			c_ic = current_ic;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	75bb      	strb	r3, [r7, #22]
 80016d4:	e006      	b.n	80016e4 <LTC681x_rdcv+0xee>
			}
			else
			{
			c_ic = total_ic - current_ic - 1;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	79ba      	ldrb	r2, [r7, #6]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	75bb      	strb	r3, [r7, #22]
			}
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	b2d8      	uxtb	r0, r3
 80016e8:	7dbb      	ldrb	r3, [r7, #22]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	461a      	mov	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	189c      	adds	r4, r3, r2
											  &ic[c_ic].cells.c_codes[0],
 80016f2:	7dbb      	ldrb	r3, [r7, #22]
 80016f4:	22e8      	movs	r2, #232	; 0xe8
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 80016fe:	f103 051e 	add.w	r5, r3, #30
											  &ic[c_ic].cells.pec_match[0]);
 8001702:	7dbb      	ldrb	r3, [r7, #22]
 8001704:	22e8      	movs	r2, #232	; 0xe8
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	4413      	add	r3, r2
			pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 800170e:	3342      	adds	r3, #66	; 0x42
 8001710:	79f9      	ldrb	r1, [r7, #7]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	462b      	mov	r3, r5
 8001716:	4622      	mov	r2, r4
 8001718:	f000 f880 	bl	800181c <parse_cells>
 800171c:	4603      	mov	r3, r0
 800171e:	b2da      	uxtb	r2, r3
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	4413      	add	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	75fb      	strb	r3, [r7, #23]
		for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbc7      	blt.n	80016c6 <LTC681x_rdcv+0xd0>
		}
	}
	LTC681x_check_pec(total_ic,CELL,ic);
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	2101      	movs	r1, #1
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f909 	bl	8001954 <LTC681x_check_pec>
	free(cell_data);
 8001742:	68b8      	ldr	r0, [r7, #8]
 8001744:	f009 fa62 	bl	800ac0c <free>

	return(pec_error);
 8001748:	7dfb      	ldrb	r3, [r7, #23]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001754 <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	603a      	str	r2, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
 8001760:	460b      	mov	r3, r1
 8001762:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8001764:	2308      	movs	r3, #8
 8001766:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //1: RDCVA
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d104      	bne.n	8001778 <LTC681x_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 800176e:	2304      	movs	r3, #4
 8001770:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	723b      	strb	r3, [r7, #8]
 8001776:	e026      	b.n	80017c6 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 2) //2: RDCVB
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d104      	bne.n	8001788 <LTC681x_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 800177e:	2306      	movs	r3, #6
 8001780:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001782:	2300      	movs	r3, #0
 8001784:	723b      	strb	r3, [r7, #8]
 8001786:	e01e      	b.n	80017c6 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 3) //3: RDCVC
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d104      	bne.n	8001798 <LTC681x_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 800178e:	2308      	movs	r3, #8
 8001790:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 8001792:	2300      	movs	r3, #0
 8001794:	723b      	strb	r3, [r7, #8]
 8001796:	e016      	b.n	80017c6 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 4) //4: RDCVD
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b04      	cmp	r3, #4
 800179c:	d104      	bne.n	80017a8 <LTC681x_rdcv_reg+0x54>
	{
		cmd[1] = 0x0A;
 800179e:	230a      	movs	r3, #10
 80017a0:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017a2:	2300      	movs	r3, #0
 80017a4:	723b      	strb	r3, [r7, #8]
 80017a6:	e00e      	b.n	80017c6 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 5) //4: RDCVE
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d104      	bne.n	80017b8 <LTC681x_rdcv_reg+0x64>
	{
		cmd[1] = 0x09;
 80017ae:	2309      	movs	r3, #9
 80017b0:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017b2:	2300      	movs	r3, #0
 80017b4:	723b      	strb	r3, [r7, #8]
 80017b6:	e006      	b.n	80017c6 <LTC681x_rdcv_reg+0x72>
	}
	else if (reg == 6) //4: RDCVF
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d103      	bne.n	80017c6 <LTC681x_rdcv_reg+0x72>
	{
		cmd[1] = 0x0B;
 80017be:	230b      	movs	r3, #11
 80017c0:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80017c2:	2300      	movs	r3, #0
 80017c4:	723b      	strb	r3, [r7, #8]
	}

	cmd_pec = pec15_calc(2, cmd);
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7ff feb3 	bl	8001538 <pec15_calc>
 80017d2:	4603      	mov	r3, r0
 80017d4:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80017d6:	89bb      	ldrh	r3, [r7, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80017e0:	89bb      	ldrh	r3, [r7, #12]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2110      	movs	r1, #16
 80017ea:	480b      	ldr	r0, [pc, #44]	; (8001818 <LTC681x_rdcv_reg+0xc4>)
 80017ec:	f002 f974 	bl	8003ad8 <HAL_GPIO_WritePin>
	spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	fb12 f303 	smulbb	r3, r2, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f107 0008 	add.w	r0, r7, #8
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	2104      	movs	r1, #4
 8001802:	f000 fd2f 	bl	8002264 <spi_write_read>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	2110      	movs	r1, #16
 800180a:	4803      	ldr	r0, [pc, #12]	; (8001818 <LTC681x_rdcv_reg+0xc4>)
 800180c:	f002 f964 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40020000 	.word	0x40020000

0800181c <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	60ba      	str	r2, [r7, #8]
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	460b      	mov	r3, r1
 800182c:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 800182e:	2306      	movs	r3, #6
 8001830:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 8001832:	2303      	movs	r3, #3
 8001834:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8001840:	2300      	movs	r3, #0
 8001842:	777b      	strb	r3, [r7, #29]
 8001844:	e020      	b.n	8001888 <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8001846:	7fbb      	ldrb	r3, [r7, #30]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b29a      	uxth	r2, r3
 8001850:	7fbb      	ldrb	r3, [r7, #30]
 8001852:	3301      	adds	r3, #1
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	440b      	add	r3, r1
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	b29b      	uxth	r3, r3
 8001860:	4413      	add	r3, r2
 8001862:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001864:	7f7a      	ldrb	r2, [r7, #29]
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	3b01      	subs	r3, #1
 800186a:	7ef9      	ldrb	r1, [r7, #27]
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	8aba      	ldrh	r2, [r7, #20]
 800187a:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 800187c:	7fbb      	ldrb	r3, [r7, #30]
 800187e:	3302      	adds	r3, #2
 8001880:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8001882:	7f7b      	ldrb	r3, [r7, #29]
 8001884:	3301      	adds	r3, #1
 8001886:	777b      	strb	r3, [r7, #29]
 8001888:	7f7a      	ldrb	r2, [r7, #29]
 800188a:	7efb      	ldrb	r3, [r7, #27]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3da      	bcc.n	8001846 <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001890:	7fbb      	ldrb	r3, [r7, #30]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	7fbb      	ldrb	r3, [r7, #30]
 800189e:	3301      	adds	r3, #1
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	440b      	add	r3, r1
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes
	data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	461a      	mov	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	441a      	add	r2, r3
 80018b8:	7f3b      	ldrb	r3, [r7, #28]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fe3b 	bl	8001538 <pec15_calc>
 80018c2:	4603      	mov	r3, r0
 80018c4:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 80018c6:	8b3a      	ldrh	r2, [r7, #24]
 80018c8:	8afb      	ldrh	r3, [r7, #22]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d008      	beq.n	80018e0 <parse_cells+0xc4>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 80018ce:	2301      	movs	r3, #1
 80018d0:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 80018d2:	7bbb      	ldrb	r3, [r7, #14]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018d8:	4413      	add	r3, r2
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	e005      	b.n	80018ec <parse_cells+0xd0>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e6:	4413      	add	r3, r2
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 80018ec:	7fbb      	ldrb	r3, [r7, #30]
 80018ee:	3302      	adds	r3, #2
 80018f0:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 80018f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <LTC681x_pollAdc>:
	return(adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001912:	2307      	movs	r3, #7
 8001914:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8001916:	2314      	movs	r3, #20
 8001918:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	2002      	movs	r0, #2
 8001920:	f7ff fe0a 	bl	8001538 <pec15_calc>
 8001924:	4603      	mov	r3, r0
 8001926:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001928:	893b      	ldrh	r3, [r7, #8]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	b29b      	uxth	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 8001932:	893b      	ldrh	r3, [r7, #8]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2110      	movs	r1, #16
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <LTC681x_pollAdc+0x50>)
 800193e:	f002 f8cb 	bl	8003ad8 <HAL_GPIO_WritePin>
	while(1){
	spi_write_array(4,cmd);
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	4619      	mov	r1, r3
 8001946:	2004      	movs	r0, #4
 8001948:	f000 fc58 	bl	80021fc <spi_write_array>
 800194c:	e7f9      	b.n	8001942 <LTC681x_pollAdc+0x42>
 800194e:	bf00      	nop
 8001950:	40020000 	.word	0x40020000

08001954 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8001954:	b480      	push	{r7}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	603a      	str	r2, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	460b      	mov	r3, r1
 8001962:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	2b04      	cmp	r3, #4
 8001968:	f200 8191 	bhi.w	8001c8e <LTC681x_check_pec+0x33a>
 800196c:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <LTC681x_check_pec+0x20>)
 800196e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001972:	bf00      	nop
 8001974:	08001989 	.word	0x08001989
 8001978:	08001a85 	.word	0x08001a85
 800197c:	08001b37 	.word	0x08001b37
 8001980:	08001be3 	.word	0x08001be3
 8001984:	08001a07 	.word	0x08001a07
	{
		case CFGRR:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
 800198c:	e036      	b.n	80019fc <LTC681x_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	22e8      	movs	r2, #232	; 0xe8
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	4413      	add	r3, r2
 800199a:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	22e8      	movs	r2, #232	; 0xe8
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	7b9b      	ldrb	r3, [r3, #14]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	20e8      	movs	r0, #232	; 0xe8
 80019b2:	fb00 f303 	mul.w	r3, r0, r3
 80019b6:	6838      	ldr	r0, [r7, #0]
 80019b8:	4403      	add	r3, r0
 80019ba:	440a      	add	r2, r1
 80019bc:	b292      	uxth	r2, r2
 80019be:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	22e8      	movs	r2, #232	; 0xe8
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	4413      	add	r3, r2
 80019ce:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	22e8      	movs	r2, #232	; 0xe8
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	7b9b      	ldrb	r3, [r3, #14]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	20e8      	movs	r0, #232	; 0xe8
 80019e6:	fb00 f303 	mul.w	r3, r0, r3
 80019ea:	6838      	ldr	r0, [r7, #0]
 80019ec:	4403      	add	r3, r0
 80019ee:	440a      	add	r2, r1
 80019f0:	b292      	uxth	r2, r2
 80019f2:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	3301      	adds	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbc4      	blt.n	800198e <LTC681x_check_pec+0x3a>
		  }
		break;
 8001a04:	e144      	b.n	8001c90 <LTC681x_check_pec+0x33c>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	e036      	b.n	8001a7a <LTC681x_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	22e8      	movs	r2, #232	; 0xe8
 8001a10:	fb02 f303 	mul.w	r3, r2, r3
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	22e8      	movs	r2, #232	; 0xe8
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	7f5b      	ldrb	r3, [r3, #29]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	20e8      	movs	r0, #232	; 0xe8
 8001a30:	fb00 f303 	mul.w	r3, r0, r3
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	4403      	add	r3, r0
 8001a38:	440a      	add	r2, r1
 8001a3a:	b292      	uxth	r2, r2
 8001a3c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	22e8      	movs	r2, #232	; 0xe8
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	22e8      	movs	r2, #232	; 0xe8
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	7f5b      	ldrb	r3, [r3, #29]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	20e8      	movs	r0, #232	; 0xe8
 8001a64:	fb00 f303 	mul.w	r3, r0, r3
 8001a68:	6838      	ldr	r0, [r7, #0]
 8001a6a:	4403      	add	r3, r0
 8001a6c:	440a      	add	r2, r1
 8001a6e:	b292      	uxth	r2, r2
 8001a70:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	3301      	adds	r3, #1
 8001a78:	623b      	str	r3, [r7, #32]
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dbc4      	blt.n	8001a0c <LTC681x_check_pec+0xb8>
		  }
		break;
 8001a82:	e105      	b.n	8001c90 <LTC681x_check_pec+0x33c>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	e050      	b.n	8001b2c <LTC681x_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	e043      	b.n	8001b18 <LTC681x_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	22e8      	movs	r2, #232	; 0xe8
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	22e8      	movs	r2, #232	; 0xe8
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	441a      	add	r2, r3
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4413      	add	r3, r2
 8001ab0:	3342      	adds	r3, #66	; 0x42
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	20e8      	movs	r0, #232	; 0xe8
 8001aba:	fb00 f303 	mul.w	r3, r0, r3
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	4403      	add	r3, r0
 8001ac2:	440a      	add	r2, r1
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	22e8      	movs	r2, #232	; 0xe8
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	441a      	add	r2, r3
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	3360      	adds	r3, #96	; 0x60
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	8899      	ldrh	r1, [r3, #4]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	22e8      	movs	r2, #232	; 0xe8
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	441a      	add	r2, r3
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	4413      	add	r3, r2
 8001af0:	3342      	adds	r3, #66	; 0x42
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	20e8      	movs	r0, #232	; 0xe8
 8001afa:	fb00 f202 	mul.w	r2, r0, r2
 8001afe:	6838      	ldr	r0, [r7, #0]
 8001b00:	4402      	add	r2, r0
 8001b02:	440b      	add	r3, r1
 8001b04:	b299      	uxth	r1, r3
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	3360      	adds	r3, #96	; 0x60
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	460a      	mov	r2, r1
 8001b10:	809a      	strh	r2, [r3, #4]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	3301      	adds	r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8001b1e:	461a      	mov	r2, r3
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	dbb4      	blt.n	8001a90 <LTC681x_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbaa      	blt.n	8001a8a <LTC681x_check_pec+0x136>
			}
		  }
		break;
 8001b34:	e0ac      	b.n	8001c90 <LTC681x_check_pec+0x33c>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e04d      	b.n	8001bd8 <LTC681x_check_pec+0x284>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	e040      	b.n	8001bc4 <LTC681x_check_pec+0x270>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	22e8      	movs	r2, #232	; 0xe8
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	22e8      	movs	r2, #232	; 0xe8
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	441a      	add	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4413      	add	r3, r2
 8001b62:	335a      	adds	r3, #90	; 0x5a
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	20e8      	movs	r0, #232	; 0xe8
 8001b6c:	fb00 f303 	mul.w	r3, r0, r3
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	4403      	add	r3, r0
 8001b74:	440a      	add	r2, r1
 8001b76:	b292      	uxth	r2, r2
 8001b78:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	22e8      	movs	r2, #232	; 0xe8
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	3268      	adds	r2, #104	; 0x68
 8001b8c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	22e8      	movs	r2, #232	; 0xe8
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	441a      	add	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	335a      	adds	r3, #90	; 0x5a
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	20e8      	movs	r0, #232	; 0xe8
 8001baa:	fb00 f303 	mul.w	r3, r0, r3
 8001bae:	6838      	ldr	r0, [r7, #0]
 8001bb0:	4403      	add	r3, r0
 8001bb2:	440a      	add	r2, r1
 8001bb4:	b291      	uxth	r1, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	3268      	adds	r2, #104	; 0x68
 8001bba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	dbb7      	blt.n	8001b42 <LTC681x_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbad      	blt.n	8001b3c <LTC681x_check_pec+0x1e8>
			}
		  }

		break;
 8001be0:	e056      	b.n	8001c90 <LTC681x_check_pec+0x33c>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e04d      	b.n	8001c84 <LTC681x_check_pec+0x330>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	e040      	b.n	8001c70 <LTC681x_check_pec+0x31c>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	22e8      	movs	r2, #232	; 0xe8
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	22e8      	movs	r2, #232	; 0xe8
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	441a      	add	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	336b      	adds	r3, #107	; 0x6b
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	20e8      	movs	r0, #232	; 0xe8
 8001c18:	fb00 f303 	mul.w	r3, r0, r3
 8001c1c:	6838      	ldr	r0, [r7, #0]
 8001c1e:	4403      	add	r3, r0
 8001c20:	440a      	add	r2, r1
 8001c22:	b292      	uxth	r2, r2
 8001c24:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	22e8      	movs	r2, #232	; 0xe8
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	326c      	adds	r2, #108	; 0x6c
 8001c38:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	22e8      	movs	r2, #232	; 0xe8
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	441a      	add	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	336b      	adds	r3, #107	; 0x6b
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	20e8      	movs	r0, #232	; 0xe8
 8001c56:	fb00 f303 	mul.w	r3, r0, r3
 8001c5a:	6838      	ldr	r0, [r7, #0]
 8001c5c:	4403      	add	r3, r0
 8001c5e:	440a      	add	r2, r1
 8001c60:	b291      	uxth	r1, r2
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	326c      	adds	r2, #108	; 0x6c
 8001c66:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001c76:	3b01      	subs	r3, #1
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbb7      	blt.n	8001bee <LTC681x_check_pec+0x29a>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbad      	blt.n	8001be8 <LTC681x_check_pec+0x294>
			}
		  }
		break;
 8001c8c:	e000      	b.n	8001c90 <LTC681x_check_pec+0x33c>
		default:
		break;
 8001c8e:	bf00      	nop
	}
}
 8001c90:	bf00      	nop
 8001c92:	372c      	adds	r7, #44	; 0x2c
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e051      	b.n	8001d52 <LTC681x_reset_crc_count+0xb6>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	22e8      	movs	r2, #232	; 0xe8
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		ic[current_ic].crc_count.cfgr_pec = 0;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	22e8      	movs	r2, #232	; 0xe8
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		for (int i=0; i<6; i++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	e00e      	b.n	8001cf6 <LTC681x_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	22e8      	movs	r2, #232	; 0xe8
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	441a      	add	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	3360      	adds	r3, #96	; 0x60
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	2200      	movs	r2, #0
 8001cee:	809a      	strh	r2, [r3, #4]
		for (int i=0; i<6; i++)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	dded      	ble.n	8001cd8 <LTC681x_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	e00d      	b.n	8001d1e <LTC681x_reset_crc_count+0x82>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	22e8      	movs	r2, #232	; 0xe8
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	3268      	adds	r2, #104	; 0x68
 8001d12:	2100      	movs	r1, #0
 8001d14:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<4; i++)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	ddee      	ble.n	8001d02 <LTC681x_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	e00d      	b.n	8001d46 <LTC681x_reset_crc_count+0xaa>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	22e8      	movs	r2, #232	; 0xe8
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	326c      	adds	r2, #108	; 0x6c
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=0; i<2; i++)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	3301      	adds	r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	ddee      	ble.n	8001d2a <LTC681x_reset_crc_count+0x8e>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	dba9      	blt.n	8001cae <LTC681x_reset_crc_count+0x12>
		}
	}
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e015      	b.n	8001da6 <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	e00c      	b.n	8001d9a <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	22e8      	movs	r2, #232	; 0xe8
 8001d84:	fb02 f303 	mul.w	r3, r2, r3
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	441a      	add	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4413      	add	r3, r2
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3301      	adds	r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	ddef      	ble.n	8001d80 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	3301      	adds	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3e5      	bcc.n	8001d7a <LTC681x_init_cfg+0x12>
		}
	}
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LTC681x_set_cfgr_refon>:
	LTC681x_set_cfgr_ov(nIC, ic, ov);
}

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, uint8_t refon)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d011      	beq.n	8001df6 <LTC681x_set_cfgr_refon+0x3a>
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	22e8      	movs	r2, #232	; 0xe8
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	21e8      	movs	r1, #232	; 0xe8
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	6839      	ldr	r1, [r7, #0]
 8001dea:	440b      	add	r3, r1
 8001dec:	f042 0204 	orr.w	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8001df4:	e010      	b.n	8001e18 <LTC681x_set_cfgr_refon+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	22e8      	movs	r2, #232	; 0xe8
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	21e8      	movs	r1, #232	; 0xe8
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	440b      	add	r3, r1
 8001e10:	f022 0204 	bic.w	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, uint8_t adcopt)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71bb      	strb	r3, [r7, #6]
	if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 8001e34:	79bb      	ldrb	r3, [r7, #6]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d011      	beq.n	8001e5e <LTC681x_set_cfgr_adcopt+0x3a>
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	22e8      	movs	r2, #232	; 0xe8
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	21e8      	movs	r1, #232	; 0xe8
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	6839      	ldr	r1, [r7, #0]
 8001e52:	440b      	add	r3, r1
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	701a      	strb	r2, [r3, #0]
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8001e5c:	e010      	b.n	8001e80 <LTC681x_set_cfgr_adcopt+0x5c>
	else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	22e8      	movs	r2, #232	; 0xe8
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	21e8      	movs	r1, #232	; 0xe8
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	440b      	add	r3, r1
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,uint8_t gpio[5])
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<5; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e03b      	b.n	8001f18 <LTC681x_set_cfgr_gpio+0x8c>
	{
		if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d018      	beq.n	8001ede <LTC681x_set_cfgr_gpio+0x52>
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	22e8      	movs	r2, #232	; 0xe8
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	b25a      	sxtb	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3303      	adds	r3, #3
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	b25b      	sxtb	r3, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b259      	sxtb	r1, r3
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	22e8      	movs	r2, #232	; 0xe8
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2ca      	uxtb	r2, r1
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e019      	b.n	8001f12 <LTC681x_set_cfgr_gpio+0x86>
		else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	22e8      	movs	r2, #232	; 0xe8
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b25a      	sxtb	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	4013      	ands	r3, r2
 8001f00:	b259      	sxtb	r1, r3
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	22e8      	movs	r2, #232	; 0xe8
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<5; i++)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	ddc0      	ble.n	8001ea0 <LTC681x_set_cfgr_gpio+0x14>
	}
}
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic,uint8_t dcc[12])
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	73fb      	strb	r3, [r7, #15]
	for (int i =0; i<8; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e039      	b.n	8001fb4 <LTC681x_set_cfgr_dis+0x88>
	{
		if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d017      	beq.n	8001f7c <LTC681x_set_cfgr_dis+0x50>
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	22e8      	movs	r2, #232	; 0xe8
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	4413      	add	r3, r2
 8001f58:	791b      	ldrb	r3, [r3, #4]
 8001f5a:	b25a      	sxtb	r2, r3
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	b25b      	sxtb	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b259      	sxtb	r1, r3
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	22e8      	movs	r2, #232	; 0xe8
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	4413      	add	r3, r2
 8001f76:	b2ca      	uxtb	r2, r1
 8001f78:	711a      	strb	r2, [r3, #4]
 8001f7a:	e018      	b.n	8001fae <LTC681x_set_cfgr_dis+0x82>
		else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	22e8      	movs	r2, #232	; 0xe8
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	4413      	add	r3, r2
 8001f88:	791b      	ldrb	r3, [r3, #4]
 8001f8a:	b25a      	sxtb	r2, r3
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	b259      	sxtb	r1, r3
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	22e8      	movs	r2, #232	; 0xe8
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4413      	add	r3, r2
 8001faa:	b2ca      	uxtb	r2, r1
 8001fac:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<8; i++)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b07      	cmp	r3, #7
 8001fb8:	ddc2      	ble.n	8001f40 <LTC681x_set_cfgr_dis+0x14>
	}
	for (int i =0; i<4; i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e03a      	b.n	8002036 <LTC681x_set_cfgr_dis+0x10a>
	{
		if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	3308      	adds	r3, #8
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d017      	beq.n	8001ffe <LTC681x_set_cfgr_dis+0xd2>
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	22e8      	movs	r2, #232	; 0xe8
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	4413      	add	r3, r2
 8001fda:	795b      	ldrb	r3, [r3, #5]
 8001fdc:	b25a      	sxtb	r2, r3
 8001fde:	2101      	movs	r1, #1
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	b259      	sxtb	r1, r3
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	22e8      	movs	r2, #232	; 0xe8
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2ca      	uxtb	r2, r1
 8001ffa:	715a      	strb	r2, [r3, #5]
 8001ffc:	e018      	b.n	8002030 <LTC681x_set_cfgr_dis+0x104>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	22e8      	movs	r2, #232	; 0xe8
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	4413      	add	r3, r2
 800200a:	795b      	ldrb	r3, [r3, #5]
 800200c:	b25a      	sxtb	r2, r3
 800200e:	2101      	movs	r1, #1
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	b25b      	sxtb	r3, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	b25b      	sxtb	r3, r3
 800201c:	4013      	ands	r3, r2
 800201e:	b259      	sxtb	r1, r3
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	22e8      	movs	r2, #232	; 0xe8
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	4413      	add	r3, r2
 800202c:	b2ca      	uxtb	r2, r1
 800202e:	715a      	strb	r2, [r3, #5]
	for (int i =0; i<4; i++)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	3301      	adds	r3, #1
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b03      	cmp	r3, #3
 800203a:	ddc1      	ble.n	8001fc0 <LTC681x_set_cfgr_dis+0x94>
	}
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,uint8_t dcto[4])
{
 800204a:	b480      	push	{r7}
 800204c:	b087      	sub	sp, #28
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e03b      	b.n	80020d6 <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d018      	beq.n	800209c <LTC681x_set_cfgr_dcto+0x52>
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	22e8      	movs	r2, #232	; 0xe8
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	4413      	add	r3, r2
 8002076:	795b      	ldrb	r3, [r3, #5]
 8002078:	b25a      	sxtb	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3304      	adds	r3, #4
 800207e:	2101      	movs	r1, #1
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	b25b      	sxtb	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b259      	sxtb	r1, r3
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	22e8      	movs	r2, #232	; 0xe8
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4413      	add	r3, r2
 8002096:	b2ca      	uxtb	r2, r1
 8002098:	715a      	strb	r2, [r3, #5]
 800209a:	e019      	b.n	80020d0 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	22e8      	movs	r2, #232	; 0xe8
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	4413      	add	r3, r2
 80020a8:	795b      	ldrb	r3, [r3, #5]
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3304      	adds	r3, #4
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	4013      	ands	r3, r2
 80020be:	b259      	sxtb	r1, r3
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	22e8      	movs	r2, #232	; 0xe8
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	4413      	add	r3, r2
 80020cc:	b2ca      	uxtb	r2, r1
 80020ce:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	ddc0      	ble.n	800205e <LTC681x_set_cfgr_dcto+0x14>
	}
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic,uint16_t uv)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	6039      	str	r1, [r7, #0]
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4613      	mov	r3, r2
 80020f8:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv/16)-1;
 80020fa:	88bb      	ldrh	r3, [r7, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	22e8      	movs	r2, #232	; 0xe8
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4413      	add	r3, r2
 8002110:	89fa      	ldrh	r2, [r7, #14]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	705a      	strb	r2, [r3, #1]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	22e8      	movs	r2, #232	; 0xe8
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	4413      	add	r3, r2
 8002122:	789a      	ldrb	r2, [r3, #2]
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	21e8      	movs	r1, #232	; 0xe8
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	440b      	add	r3, r1
 8002130:	f022 020f 	bic.w	r2, r2, #15
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	22e8      	movs	r2, #232	; 0xe8
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	4413      	add	r3, r2
 8002144:	789b      	ldrb	r3, [r3, #2]
 8002146:	b25a      	sxtb	r2, r3
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b29b      	uxth	r3, r3
 800214e:	b25b      	sxtb	r3, r3
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	b25b      	sxtb	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b259      	sxtb	r1, r3
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	22e8      	movs	r2, #232	; 0xe8
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	4413      	add	r3, r2
 8002166:	b2ca      	uxtb	r2, r1
 8002168:	709a      	strb	r2, [r3, #2]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic,uint16_t ov)
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	6039      	str	r1, [r7, #0]
 8002180:	71fb      	strb	r3, [r7, #7]
 8002182:	4613      	mov	r3, r2
 8002184:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov/16);
 8002186:	88bb      	ldrh	r3, [r7, #4]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	81fb      	strh	r3, [r7, #14]
	ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 800218c:	89fb      	ldrh	r3, [r7, #14]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	b299      	uxth	r1, r3
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	22e8      	movs	r2, #232	; 0xe8
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	4413      	add	r3, r2
 800219e:	b2ca      	uxtb	r2, r1
 80021a0:	70da      	strb	r2, [r3, #3]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	22e8      	movs	r2, #232	; 0xe8
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4413      	add	r3, r2
 80021ae:	789a      	ldrb	r2, [r3, #2]
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	21e8      	movs	r1, #232	; 0xe8
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	6839      	ldr	r1, [r7, #0]
 80021ba:	440b      	add	r3, r1
 80021bc:	f002 020f 	and.w	r2, r2, #15
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	709a      	strb	r2, [r3, #2]
	ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	22e8      	movs	r2, #232	; 0xe8
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	789b      	ldrb	r3, [r3, #2]
 80021d2:	b25a      	sxtb	r2, r3
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b259      	sxtb	r1, r3
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	22e8      	movs	r2, #232	; 0xe8
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	b2ca      	uxtb	r2, r1
 80021ec:	709a      	strb	r2, [r3, #2]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <spi_write_array>:
Writes an array of bytes out of the SPI port
*/
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
                     uint8_t data[] //Array of bytes to be written on the SPI port
                    )
{printf("spi write\r\n");
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
 8002208:	4812      	ldr	r0, [pc, #72]	; (8002254 <spi_write_array+0x58>)
 800220a:	f009 faf5 	bl	800b7f8 <puts>
  for (uint8_t i = 0; i < len; i++)
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e014      	b.n	800223e <spi_write_array+0x42>
  {
    //SPI.transfer((int8_t)data[i]);
    HAL_SPI_Transmit(&a_d.hspi1, data[i],1,100);
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	4413      	add	r3, r2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	2364      	movs	r3, #100	; 0x64
 8002220:	2201      	movs	r2, #1
 8002222:	480d      	ldr	r0, [pc, #52]	; (8002258 <spi_write_array+0x5c>)
 8002224:	f003 fd9d 	bl	8005d62 <HAL_SPI_Transmit>
    printf("%x ",data[i]);
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	480a      	ldr	r0, [pc, #40]	; (800225c <spi_write_array+0x60>)
 8002234:	f009 fa44 	bl	800b6c0 <iprintf>
  for (uint8_t i = 0; i < len; i++)
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	3301      	adds	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	429a      	cmp	r2, r3
 8002244:	d3e6      	bcc.n	8002214 <spi_write_array+0x18>
  }
  printf("\r\n");
 8002246:	4806      	ldr	r0, [pc, #24]	; (8002260 <spi_write_array+0x64>)
 8002248:	f009 fad6 	bl	800b7f8 <puts>
}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	0800d8cc 	.word	0x0800d8cc
 8002258:	20000248 	.word	0x20000248
 800225c:	0800d8d8 	.word	0x0800d8d8
 8002260:	0800d8c8 	.word	0x0800d8c8

08002264 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
                    uint8_t tx_len, //length of the tx data arry
                    uint8_t *rx_data,//Input: array that will store the data read by the SPI port
                    uint8_t rx_len //Option: number of bytes to be read from the SPI port
                   )
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	461a      	mov	r2, r3
 8002270:	460b      	mov	r3, r1
 8002272:	72fb      	strb	r3, [r7, #11]
 8002274:	4613      	mov	r3, r2
 8002276:	72bb      	strb	r3, [r7, #10]
  for (uint8_t i = 0; i < tx_len; i++)
 8002278:	2300      	movs	r3, #0
 800227a:	75fb      	strb	r3, [r7, #23]
 800227c:	e00c      	b.n	8002298 <spi_write_read+0x34>
  {
    //SPI.transfer(tx_Data[i]);
    HAL_SPI_Transmit(&a_d.hspi1, tx_Data[i],1,100);
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	4619      	mov	r1, r3
 8002288:	2364      	movs	r3, #100	; 0x64
 800228a:	2201      	movs	r2, #1
 800228c:	4826      	ldr	r0, [pc, #152]	; (8002328 <spi_write_read+0xc4>)
 800228e:	f003 fd68 	bl	8005d62 <HAL_SPI_Transmit>
  for (uint8_t i = 0; i < tx_len; i++)
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	3301      	adds	r3, #1
 8002296:	75fb      	strb	r3, [r7, #23]
 8002298:	7dfa      	ldrb	r2, [r7, #23]
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	429a      	cmp	r2, r3
 800229e:	d3ee      	bcc.n	800227e <spi_write_read+0x1a>
  }
  for(uint8_t i = 0; i<tx_len; i++){
 80022a0:	2300      	movs	r3, #0
 80022a2:	75bb      	strb	r3, [r7, #22]
 80022a4:	e00a      	b.n	80022bc <spi_write_read+0x58>
  	printf("%x\r\n",tx_Data[i]);
 80022a6:	7dbb      	ldrb	r3, [r7, #22]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	4619      	mov	r1, r3
 80022b0:	481e      	ldr	r0, [pc, #120]	; (800232c <spi_write_read+0xc8>)
 80022b2:	f009 fa05 	bl	800b6c0 <iprintf>
  for(uint8_t i = 0; i<tx_len; i++){
 80022b6:	7dbb      	ldrb	r3, [r7, #22]
 80022b8:	3301      	adds	r3, #1
 80022ba:	75bb      	strb	r3, [r7, #22]
 80022bc:	7dba      	ldrb	r2, [r7, #22]
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3f0      	bcc.n	80022a6 <spi_write_read+0x42>
  }
  printf("next cell\r\n");
 80022c4:	481a      	ldr	r0, [pc, #104]	; (8002330 <spi_write_read+0xcc>)
 80022c6:	f009 fa97 	bl	800b7f8 <puts>
  for (uint8_t i = 0; i < rx_len; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	757b      	strb	r3, [r7, #21]
 80022ce:	e00e      	b.n	80022ee <spi_write_read+0x8a>
  {

    //rx_data[i] = (uint8_t)SPI.transfer(0xFF);
    HAL_SPI_TransmitReceive(&a_d.hspi1, 0xFF,rx_data[i],1,100);
 80022d0:	7d7b      	ldrb	r3, [r7, #21]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	2364      	movs	r3, #100	; 0x64
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2301      	movs	r3, #1
 80022e0:	21ff      	movs	r1, #255	; 0xff
 80022e2:	4811      	ldr	r0, [pc, #68]	; (8002328 <spi_write_read+0xc4>)
 80022e4:	f003 fe79 	bl	8005fda <HAL_SPI_TransmitReceive>
  for (uint8_t i = 0; i < rx_len; i++)
 80022e8:	7d7b      	ldrb	r3, [r7, #21]
 80022ea:	3301      	adds	r3, #1
 80022ec:	757b      	strb	r3, [r7, #21]
 80022ee:	7d7a      	ldrb	r2, [r7, #21]
 80022f0:	7abb      	ldrb	r3, [r7, #10]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3ec      	bcc.n	80022d0 <spi_write_read+0x6c>
    //rx_data[i] = rx_data[i];
  }
  for(uint8_t i = 0; i<rx_len; i++){
 80022f6:	2300      	movs	r3, #0
 80022f8:	753b      	strb	r3, [r7, #20]
 80022fa:	e00a      	b.n	8002312 <spi_write_read+0xae>
  	printf("%x\r\n",rx_data[i]);
 80022fc:	7d3b      	ldrb	r3, [r7, #20]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	4809      	ldr	r0, [pc, #36]	; (800232c <spi_write_read+0xc8>)
 8002308:	f009 f9da 	bl	800b6c0 <iprintf>
  for(uint8_t i = 0; i<rx_len; i++){
 800230c:	7d3b      	ldrb	r3, [r7, #20]
 800230e:	3301      	adds	r3, #1
 8002310:	753b      	strb	r3, [r7, #20]
 8002312:	7d3a      	ldrb	r2, [r7, #20]
 8002314:	7abb      	ldrb	r3, [r7, #10]
 8002316:	429a      	cmp	r2, r3
 8002318:	d3f0      	bcc.n	80022fc <spi_write_read+0x98>
  }
  printf("next cell\r\n");
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <spi_write_read+0xcc>)
 800231c:	f009 fa6c 	bl	800b7f8 <puts>

}
 8002320:	bf00      	nop
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000248 	.word	0x20000248
 800232c:	0800d8dc 	.word	0x0800d8dc
 8002330:	0800d8e4 	.word	0x0800d8e4

08002334 <init_app_data_681x>:
  printf("%x\r\n",data);
  return(data);
}

void init_app_data_681x(app_data app_data_init)
{
 8002334:	b084      	sub	sp, #16
 8002336:	b4b0      	push	{r4, r5, r7}
 8002338:	af00      	add	r7, sp, #0
 800233a:	f107 040c 	add.w	r4, r7, #12
 800233e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	a_d = app_data_init;
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <init_app_data_681x+0x28>)
 8002344:	461d      	mov	r5, r3
 8002346:	f107 040c 	add.w	r4, r7, #12
 800234a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	602b      	str	r3, [r5, #0]
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	bcb0      	pop	{r4, r5, r7}
 8002358:	b004      	add	sp, #16
 800235a:	4770      	bx	lr
 800235c:	20000244 	.word	0x20000244

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8002366:	af06      	add	r7, sp, #24
  char uart_buf[50];
  int uart_buf_len;
  char spi_buf[20];
  char spi_tx_buffer[200];
  char spi_rx_buffer[200];
  uint16_t spi_transfer_size = 200;
 8002368:	23c8      	movs	r3, #200	; 0xc8
 800236a:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
  uint8_t addr;
  uint8_t wip;
  app_data a_d;
  a_d.hcan1 = &hcan1;
 800236e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002372:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002376:	4a7a      	ldr	r2, [pc, #488]	; (8002560 <main+0x200>)
 8002378:	601a      	str	r2, [r3, #0]
  a_d.hspi1 = &hspi1;
 800237a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800237e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002382:	4a78      	ldr	r2, [pc, #480]	; (8002564 <main+0x204>)
 8002384:	605a      	str	r2, [r3, #4]
  a_d.hspi2 = &hspi2;
 8002386:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800238a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800238e:	4a76      	ldr	r2, [pc, #472]	; (8002568 <main+0x208>)
 8002390:	609a      	str	r2, [r3, #8]
  a_d.huart2 = &huart2;
 8002392:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002396:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800239a:	4a74      	ldr	r2, [pc, #464]	; (800256c <main+0x20c>)
 800239c:	60da      	str	r2, [r3, #12]
  a_d.htim1 = &htim1;
 800239e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80023a2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80023a6:	4a72      	ldr	r2, [pc, #456]	; (8002570 <main+0x210>)
 80023a8:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023aa:	f000 ff55 	bl	8003258 <HAL_Init>

  /* USER CODE BEGIN Init */
  LTC6813_init_cfg(TOTAL_IC, BMS_IC);
 80023ae:	4971      	ldr	r1, [pc, #452]	; (8002574 <main+0x214>)
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7fe fe08 	bl	8000fc6 <LTC6813_init_cfg>
  LTC6813_init_cfgb(TOTAL_IC,BMS_IC);
 80023b6:	496f      	ldr	r1, [pc, #444]	; (8002574 <main+0x214>)
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7fe fe4d 	bl	8001058 <LTC6813_init_cfgb>
  for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++)
 80023be:	2300      	movs	r3, #0
 80023c0:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80023c4:	e02a      	b.n	800241c <main+0xbc>
  {
    LTC6813_set_cfgr(current_ic,BMS_IC,REFON,ADCOPT,GPIOBITS_A,DCCBITS_A, DCTOBITS, UV, OV);
 80023c6:	4b6c      	ldr	r3, [pc, #432]	; (8002578 <main+0x218>)
 80023c8:	7819      	ldrb	r1, [r3, #0]
 80023ca:	4b6c      	ldr	r3, [pc, #432]	; (800257c <main+0x21c>)
 80023cc:	781c      	ldrb	r4, [r3, #0]
 80023ce:	4b6c      	ldr	r3, [pc, #432]	; (8002580 <main+0x220>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	4a6c      	ldr	r2, [pc, #432]	; (8002584 <main+0x224>)
 80023d4:	8812      	ldrh	r2, [r2, #0]
 80023d6:	f897 01f7 	ldrb.w	r0, [r7, #503]	; 0x1f7
 80023da:	9204      	str	r2, [sp, #16]
 80023dc:	9303      	str	r3, [sp, #12]
 80023de:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <main+0x228>)
 80023e0:	9302      	str	r3, [sp, #8]
 80023e2:	4b6a      	ldr	r3, [pc, #424]	; (800258c <main+0x22c>)
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <main+0x230>)
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4623      	mov	r3, r4
 80023ec:	460a      	mov	r2, r1
 80023ee:	4961      	ldr	r1, [pc, #388]	; (8002574 <main+0x214>)
 80023f0:	f7fe fdf8 	bl	8000fe4 <LTC6813_set_cfgr>
    LTC6813_set_cfgrb(current_ic,BMS_IC,FDRF,DTMEN,PSBITS,GPIOBITS_B,DCCBITS_B);
 80023f4:	4b67      	ldr	r3, [pc, #412]	; (8002594 <main+0x234>)
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	4b67      	ldr	r3, [pc, #412]	; (8002598 <main+0x238>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f897 01f7 	ldrb.w	r0, [r7, #503]	; 0x1f7
 8002400:	4966      	ldr	r1, [pc, #408]	; (800259c <main+0x23c>)
 8002402:	9102      	str	r1, [sp, #8]
 8002404:	4966      	ldr	r1, [pc, #408]	; (80025a0 <main+0x240>)
 8002406:	9101      	str	r1, [sp, #4]
 8002408:	4966      	ldr	r1, [pc, #408]	; (80025a4 <main+0x244>)
 800240a:	9100      	str	r1, [sp, #0]
 800240c:	4959      	ldr	r1, [pc, #356]	; (8002574 <main+0x214>)
 800240e:	f7fe fe4e 	bl	80010ae <LTC6813_set_cfgrb>
  for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++)
 8002412:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002416:	3301      	adds	r3, #1
 8002418:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 800241c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0d0      	beq.n	80023c6 <main+0x66>
  }
  LTC6813_reset_crc_count(TOTAL_IC,BMS_IC);
 8002424:	4953      	ldr	r1, [pc, #332]	; (8002574 <main+0x214>)
 8002426:	2001      	movs	r0, #1
 8002428:	f7fe fdbe 	bl	8000fa8 <LTC6813_reset_crc_count>
  LTC6813_init_reg_limits(TOTAL_IC,BMS_IC);
 800242c:	4951      	ldr	r1, [pc, #324]	; (8002574 <main+0x214>)
 800242e:	2001      	movs	r0, #1
 8002430:	f7fe fd3c 	bl	8000eac <LTC6813_init_reg_limits>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002434:	f000 f8c6 	bl	80025c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  init_appdata(a_d);
 8002438:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800243c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002446:	f000 fc3f 	bl	8002cc8 <init_appdata>
  //usleep(3);
  HAL_Delay(1);
 800244a:	2001      	movs	r0, #1
 800244c:	f000 ff76 	bl	800333c <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002450:	f000 fa3e 	bl	80028d0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002454:	f000 f920 	bl	8002698 <MX_CAN1_Init>
  MX_SPI1_Init();
 8002458:	f000 f954 	bl	8002704 <MX_SPI1_Init>
  MX_SPI2_Init();
 800245c:	f000 f988 	bl	8002770 <MX_SPI2_Init>
  MX_USB_HOST_Init();
 8002460:	f008 f89a 	bl	800a598 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8002464:	f000 fa0a 	bl	800287c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002468:	f000 f9b8 	bl	80027dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  for(int i = 0; i<200; i++){
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8002472:	e010      	b.n	8002496 <main+0x136>
	  spi_tx_buffer[i] = i;
 8002474:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002478:	b2d9      	uxtb	r1, r3
 800247a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800247e:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8002482:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002486:	4413      	add	r3, r2
 8002488:	460a      	mov	r2, r1
 800248a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<200; i++){
 800248c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002490:	3301      	adds	r3, #1
 8002492:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8002496:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800249a:	2bc7      	cmp	r3, #199	; 0xc7
 800249c:	ddea      	ble.n	8002474 <main+0x114>
  }
  while (0)
 800249e:	bf00      	nop

         //HAL_Delay(1000);
    /* USER CODE END WHILE */	
	}
  // CS pin should default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80024a0:	2201      	movs	r2, #1
 80024a2:	2140      	movs	r1, #64	; 0x40
 80024a4:	4840      	ldr	r0, [pc, #256]	; (80025a8 <main+0x248>)
 80024a6:	f001 fb17 	bl	8003ad8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("hi\r\n");
 80024aa:	4840      	ldr	r0, [pc, #256]	; (80025ac <main+0x24c>)
 80024ac:	f009 f9a4 	bl	800b7f8 <puts>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80024b6:	483e      	ldr	r0, [pc, #248]	; (80025b0 <main+0x250>)
 80024b8:	f001 fb0e 	bl	8003ad8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80024bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c0:	f000 ff3c 	bl	800333c <HAL_Delay>
  //turn off rgb leds
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80024ca:	4839      	ldr	r0, [pc, #228]	; (80025b0 <main+0x250>)
 80024cc:	f001 fb04 	bl	8003ad8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80024d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024d4:	f000 ff32 	bl	800333c <HAL_Delay>
  {
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
	  //HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);
	  //HAL_SPI_TransmitReceive(&hspi1, (uint8_t *) spi_tx_buffer,(uint8_t *) spi_rx_buffer,spi_transfer_size,100);
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	  printf("starting cell voltage reading loop\r\n");
 80024d8:	4836      	ldr	r0, [pc, #216]	; (80025b4 <main+0x254>)
 80024da:	f009 f98d 	bl	800b7f8 <puts>
	  //wakeup_sleep(TOTAL_IC);
	  //printf("pass1\r\n");
	  LTC6813_adcv(ADC_CONVERSION_MODE,ADC_DCP,CELL_CH_TO_CONVERT);
 80024de:	2302      	movs	r3, #2
 80024e0:	2100      	movs	r1, #0
 80024e2:	2200      	movs	r2, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fd2e 	bl	8000f46 <LTC6813_adcv>
	  //printf("pass2\r\n");
	  conv_time = LTC6813_pollAdc();
 80024ea:	f7fe fd56 	bl	8000f9a <LTC6813_pollAdc>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <main+0x258>)
 80024f2:	6013      	str	r3, [r2, #0]
	  printf("start ADC\r\n");
 80024f4:	4831      	ldr	r0, [pc, #196]	; (80025bc <main+0x25c>)
 80024f6:	f009 f97f 	bl	800b7f8 <puts>
	  HAL_Delay(1000);
 80024fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024fe:	f000 ff1d 	bl	800333c <HAL_Delay>

	  //printf("pass3\r\n");
	  print_conv_time(conv_time);
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <main+0x258>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fb26 	bl	8002b58 <print_conv_time>
	  //printf("Cell Voltages:\r\n");

      //wakeup_sleep(TOTAL_IC);
      error = LTC6813_rdcv(SEL_ALL_REG,TOTAL_IC,BMS_IC); // Set to read back all cell voltage registers
 800250c:	2300      	movs	r3, #0
 800250e:	4a19      	ldr	r2, [pc, #100]	; (8002574 <main+0x214>)
 8002510:	2101      	movs	r1, #1
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fd2a 	bl	8000f6c <LTC6813_rdcv>
 8002518:	4603      	mov	r3, r0
 800251a:	b25a      	sxtb	r2, r3
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <main+0x260>)
 800251e:	701a      	strb	r2, [r3, #0]
      check_error(error);
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <main+0x260>)
 8002522:	f993 3000 	ldrsb.w	r3, [r3]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fb38 	bl	8002b9c <check_error>
      print_cells(DATALOG_DISABLED);
 800252c:	2000      	movs	r0, #0
 800252e:	f000 fb47 	bl	8002bc0 <print_cells>

      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002538:	481d      	ldr	r0, [pc, #116]	; (80025b0 <main+0x250>)
 800253a:	f001 facd 	bl	8003ad8 <HAL_GPIO_WritePin>
      HAL_Delay(10000);
 800253e:	f242 7010 	movw	r0, #10000	; 0x2710
 8002542:	f000 fefb 	bl	800333c <HAL_Delay>
      //turn off rgb leds
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002546:	2200      	movs	r2, #0
 8002548:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800254c:	4818      	ldr	r0, [pc, #96]	; (80025b0 <main+0x250>)
 800254e:	f001 fac3 	bl	8003ad8 <HAL_GPIO_WritePin>
      HAL_Delay(10000);
 8002552:	f242 7010 	movw	r0, #10000	; 0x2710
 8002556:	f000 fef1 	bl	800333c <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800255a:	f008 f843 	bl	800a5e4 <MX_USB_HOST_Process>
	  printf("starting cell voltage reading loop\r\n");
 800255e:	e7bb      	b.n	80024d8 <main+0x178>
 8002560:	20000258 	.word	0x20000258
 8002564:	20000280 	.word	0x20000280
 8002568:	200002d8 	.word	0x200002d8
 800256c:	20000378 	.word	0x20000378
 8002570:	20000330 	.word	0x20000330
 8002574:	200003c4 	.word	0x200003c4
 8002578:	20000000 	.word	0x20000000
 800257c:	200004ac 	.word	0x200004ac
 8002580:	2000000a 	.word	0x2000000a
 8002584:	2000000c 	.word	0x2000000c
 8002588:	20000010 	.word	0x20000010
 800258c:	200004b4 	.word	0x200004b4
 8002590:	20000004 	.word	0x20000004
 8002594:	200004c7 	.word	0x200004c7
 8002598:	20000014 	.word	0x20000014
 800259c:	200004c0 	.word	0x200004c0
 80025a0:	200004b0 	.word	0x200004b0
 80025a4:	200004c8 	.word	0x200004c8
 80025a8:	40020400 	.word	0x40020400
 80025ac:	0800d8f0 	.word	0x0800d8f0
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	0800d8f4 	.word	0x0800d8f4
 80025b8:	200003c0 	.word	0x200003c0
 80025bc:	0800d918 	.word	0x0800d918
 80025c0:	200003bc 	.word	0x200003bc

080025c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b094      	sub	sp, #80	; 0x50
 80025c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ca:	f107 0320 	add.w	r3, r7, #32
 80025ce:	2230      	movs	r2, #48	; 0x30
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f008 fb22 	bl	800ac1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <SystemClock_Config+0xcc>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	4a27      	ldr	r2, [pc, #156]	; (8002690 <SystemClock_Config+0xcc>)
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f6:	6413      	str	r3, [r2, #64]	; 0x40
 80025f8:	4b25      	ldr	r3, [pc, #148]	; (8002690 <SystemClock_Config+0xcc>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002604:	2300      	movs	r3, #0
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <SystemClock_Config+0xd0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a21      	ldr	r2, [pc, #132]	; (8002694 <SystemClock_Config+0xd0>)
 800260e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <SystemClock_Config+0xd0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002620:	2301      	movs	r3, #1
 8002622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800262a:	2302      	movs	r3, #2
 800262c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800262e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002634:	2308      	movs	r3, #8
 8002636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002638:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800263e:	2302      	movs	r3, #2
 8002640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002642:	2307      	movs	r3, #7
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002646:	f107 0320 	add.w	r3, r7, #32
 800264a:	4618      	mov	r0, r3
 800264c:	f002 fe68 	bl	8005320 <HAL_RCC_OscConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002656:	f000 fb4c 	bl	8002cf2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800265a:	230f      	movs	r3, #15
 800265c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800265e:	2302      	movs	r3, #2
 8002660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800266a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800266c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002672:	f107 030c 	add.w	r3, r7, #12
 8002676:	2105      	movs	r1, #5
 8002678:	4618      	mov	r0, r3
 800267a:	f003 f8c9 	bl	8005810 <HAL_RCC_ClockConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002684:	f000 fb35 	bl	8002cf2 <Error_Handler>
  }
}
 8002688:	bf00      	nop
 800268a:	3750      	adds	r7, #80	; 0x50
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000

08002698 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <MX_CAN1_Init+0x64>)
 800269e:	4a18      	ldr	r2, [pc, #96]	; (8002700 <MX_CAN1_Init+0x68>)
 80026a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <MX_CAN1_Init+0x64>)
 80026a4:	2206      	movs	r2, #6
 80026a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <MX_CAN1_Init+0x64>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <MX_CAN1_Init+0x64>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <MX_CAN1_Init+0x64>)
 80026b6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80026ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <MX_CAN1_Init+0x64>)
 80026be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <MX_CAN1_Init+0x64>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <MX_CAN1_Init+0x64>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <MX_CAN1_Init+0x64>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <MX_CAN1_Init+0x64>)
 80026d8:	2200      	movs	r2, #0
 80026da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <MX_CAN1_Init+0x64>)
 80026de:	2200      	movs	r2, #0
 80026e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <MX_CAN1_Init+0x64>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80026e8:	4804      	ldr	r0, [pc, #16]	; (80026fc <MX_CAN1_Init+0x64>)
 80026ea:	f000 fe4b 	bl	8003384 <HAL_CAN_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80026f4:	f000 fafd 	bl	8002cf2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000258 	.word	0x20000258
 8002700:	40006400 	.word	0x40006400

08002704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002708:	4b17      	ldr	r3, [pc, #92]	; (8002768 <MX_SPI1_Init+0x64>)
 800270a:	4a18      	ldr	r2, [pc, #96]	; (800276c <MX_SPI1_Init+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <MX_SPI1_Init+0x64>)
 8002710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <MX_SPI1_Init+0x64>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <MX_SPI1_Init+0x64>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_SPI1_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <MX_SPI1_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_SPI1_Init+0x64>)
 8002730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_SPI1_Init+0x64>)
 8002738:	2238      	movs	r2, #56	; 0x38
 800273a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <MX_SPI1_Init+0x64>)
 800273e:	2200      	movs	r2, #0
 8002740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_SPI1_Init+0x64>)
 8002744:	2200      	movs	r2, #0
 8002746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <MX_SPI1_Init+0x64>)
 800274a:	2200      	movs	r2, #0
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_SPI1_Init+0x64>)
 8002750:	220a      	movs	r2, #10
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002754:	4804      	ldr	r0, [pc, #16]	; (8002768 <MX_SPI1_Init+0x64>)
 8002756:	f003 fa7b 	bl	8005c50 <HAL_SPI_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002760:	f000 fac7 	bl	8002cf2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000280 	.word	0x20000280
 800276c:	40013000 	.word	0x40013000

08002770 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <MX_SPI2_Init+0x64>)
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <MX_SPI2_Init+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <MX_SPI2_Init+0x64>)
 800277c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002780:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <MX_SPI2_Init+0x64>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <MX_SPI2_Init+0x64>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <MX_SPI2_Init+0x64>)
 8002790:	2202      	movs	r2, #2
 8002792:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <MX_SPI2_Init+0x64>)
 8002796:	2201      	movs	r2, #1
 8002798:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <MX_SPI2_Init+0x64>)
 800279c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <MX_SPI2_Init+0x64>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <MX_SPI2_Init+0x64>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <MX_SPI2_Init+0x64>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <MX_SPI2_Init+0x64>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <MX_SPI2_Init+0x64>)
 80027bc:	220a      	movs	r2, #10
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <MX_SPI2_Init+0x64>)
 80027c2:	f003 fa45 	bl	8005c50 <HAL_SPI_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80027cc:	f000 fa91 	bl	8002cf2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200002d8 	.word	0x200002d8
 80027d8:	40003800 	.word	0x40003800

080027dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f0:	463b      	mov	r3, r7
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <MX_TIM1_Init+0x98>)
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <MX_TIM1_Init+0x9c>)
 80027fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <MX_TIM1_Init+0x98>)
 8002800:	22a7      	movs	r2, #167	; 0xa7
 8002802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <MX_TIM1_Init+0x98>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800280a:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <MX_TIM1_Init+0x98>)
 800280c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002810:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <MX_TIM1_Init+0x98>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <MX_TIM1_Init+0x98>)
 800281a:	2200      	movs	r2, #0
 800281c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <MX_TIM1_Init+0x98>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002824:	4813      	ldr	r0, [pc, #76]	; (8002874 <MX_TIM1_Init+0x98>)
 8002826:	f003 fe45 	bl	80064b4 <HAL_TIM_Base_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002830:	f000 fa5f 	bl	8002cf2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4619      	mov	r1, r3
 8002840:	480c      	ldr	r0, [pc, #48]	; (8002874 <MX_TIM1_Init+0x98>)
 8002842:	f003 fe86 	bl	8006552 <HAL_TIM_ConfigClockSource>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800284c:	f000 fa51 	bl	8002cf2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002850:	2300      	movs	r3, #0
 8002852:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002858:	463b      	mov	r3, r7
 800285a:	4619      	mov	r1, r3
 800285c:	4805      	ldr	r0, [pc, #20]	; (8002874 <MX_TIM1_Init+0x98>)
 800285e:	f004 f879 	bl	8006954 <HAL_TIMEx_MasterConfigSynchronization>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002868:	f000 fa43 	bl	8002cf2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800286c:	bf00      	nop
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000330 	.word	0x20000330
 8002878:	40010000 	.word	0x40010000

0800287c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <MX_USART2_UART_Init+0x4c>)
 8002882:	4a12      	ldr	r2, [pc, #72]	; (80028cc <MX_USART2_UART_Init+0x50>)
 8002884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <MX_USART2_UART_Init+0x4c>)
 8002888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800288c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <MX_USART2_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <MX_USART2_UART_Init+0x4c>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <MX_USART2_UART_Init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <MX_USART2_UART_Init+0x4c>)
 80028a2:	220c      	movs	r2, #12
 80028a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <MX_USART2_UART_Init+0x4c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <MX_USART2_UART_Init+0x4c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <MX_USART2_UART_Init+0x4c>)
 80028b4:	f004 f8ca 	bl	8006a4c <HAL_UART_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028be:	f000 fa18 	bl	8002cf2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000378 	.word	0x20000378
 80028cc:	40004400 	.word	0x40004400

080028d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08c      	sub	sp, #48	; 0x30
 80028d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d6:	f107 031c 	add.w	r3, r7, #28
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	60da      	str	r2, [r3, #12]
 80028e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	4b8c      	ldr	r3, [pc, #560]	; (8002b1c <MX_GPIO_Init+0x24c>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a8b      	ldr	r2, [pc, #556]	; (8002b1c <MX_GPIO_Init+0x24c>)
 80028f0:	f043 0310 	orr.w	r3, r3, #16
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b89      	ldr	r3, [pc, #548]	; (8002b1c <MX_GPIO_Init+0x24c>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	4b85      	ldr	r3, [pc, #532]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a84      	ldr	r2, [pc, #528]	; (8002b1c <MX_GPIO_Init+0x24c>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b82      	ldr	r3, [pc, #520]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	4b7e      	ldr	r3, [pc, #504]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a7d      	ldr	r2, [pc, #500]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b7b      	ldr	r3, [pc, #492]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b77      	ldr	r3, [pc, #476]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a76      	ldr	r2, [pc, #472]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b74      	ldr	r3, [pc, #464]	; (8002b1c <MX_GPIO_Init+0x24c>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <MX_GPIO_Init+0x24c>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a6f      	ldr	r2, [pc, #444]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b6d      	ldr	r3, [pc, #436]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	4b69      	ldr	r3, [pc, #420]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a68      	ldr	r2, [pc, #416]	; (8002b1c <MX_GPIO_Init+0x24c>)
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b66      	ldr	r3, [pc, #408]	; (8002b1c <MX_GPIO_Init+0x24c>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800298e:	2200      	movs	r2, #0
 8002990:	2108      	movs	r1, #8
 8002992:	4863      	ldr	r0, [pc, #396]	; (8002b20 <MX_GPIO_Init+0x250>)
 8002994:	f001 f8a0 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002998:	2201      	movs	r2, #1
 800299a:	2101      	movs	r1, #1
 800299c:	4861      	ldr	r0, [pc, #388]	; (8002b24 <MX_GPIO_Init+0x254>)
 800299e:	f001 f89b 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_CS_GPIO_Port, GPIO_CS_Pin, GPIO_PIN_RESET);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2110      	movs	r1, #16
 80029a6:	4860      	ldr	r0, [pc, #384]	; (8002b28 <MX_GPIO_Init+0x258>)
 80029a8:	f001 f896 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80029ac:	2200      	movs	r2, #0
 80029ae:	f24f 0110 	movw	r1, #61456	; 0xf010
 80029b2:	485e      	ldr	r0, [pc, #376]	; (8002b2c <MX_GPIO_Init+0x25c>)
 80029b4:	f001 f890 	bl	8003ad8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80029b8:	2308      	movs	r3, #8
 80029ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029bc:	2301      	movs	r3, #1
 80029be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	4619      	mov	r1, r3
 80029ce:	4854      	ldr	r0, [pc, #336]	; (8002b20 <MX_GPIO_Init+0x250>)
 80029d0:	f000 fee6 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80029d4:	2301      	movs	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d8:	2301      	movs	r3, #1
 80029da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	4619      	mov	r1, r3
 80029ea:	484e      	ldr	r0, [pc, #312]	; (8002b24 <MX_GPIO_Init+0x254>)
 80029ec:	f000 fed8 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80029f0:	2308      	movs	r3, #8
 80029f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a00:	2305      	movs	r3, #5
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4846      	ldr	r0, [pc, #280]	; (8002b24 <MX_GPIO_Init+0x254>)
 8002a0c:	f000 fec8 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a10:	2301      	movs	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	4619      	mov	r1, r3
 8002a24:	4840      	ldr	r0, [pc, #256]	; (8002b28 <MX_GPIO_Init+0x258>)
 8002a26:	f000 febb 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_CS_Pin;
 8002a2a:	2310      	movs	r3, #16
 8002a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIO_CS_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4839      	ldr	r0, [pc, #228]	; (8002b28 <MX_GPIO_Init+0x258>)
 8002a42:	f000 fead 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a46:	2304      	movs	r3, #4
 8002a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	4619      	mov	r1, r3
 8002a58:	4835      	ldr	r0, [pc, #212]	; (8002b30 <MX_GPIO_Init+0x260>)
 8002a5a:	f000 fea1 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a70:	2305      	movs	r3, #5
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	4619      	mov	r1, r3
 8002a7a:	482d      	ldr	r0, [pc, #180]	; (8002b30 <MX_GPIO_Init+0x260>)
 8002a7c:	f000 fe90 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002a80:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002a84:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a86:	2301      	movs	r3, #1
 8002a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	4619      	mov	r1, r3
 8002a98:	4824      	ldr	r0, [pc, #144]	; (8002b2c <MX_GPIO_Init+0x25c>)
 8002a9a:	f000 fe81 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002a9e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ab0:	2306      	movs	r3, #6
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4619      	mov	r1, r3
 8002aba:	481a      	ldr	r0, [pc, #104]	; (8002b24 <MX_GPIO_Init+0x254>)
 8002abc:	f000 fe70 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4816      	ldr	r0, [pc, #88]	; (8002b2c <MX_GPIO_Init+0x25c>)
 8002ad4:	f000 fe64 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002ad8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ade:	2312      	movs	r3, #18
 8002ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aea:	2304      	movs	r3, #4
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	4619      	mov	r1, r3
 8002af4:	480e      	ldr	r0, [pc, #56]	; (8002b30 <MX_GPIO_Init+0x260>)
 8002af6:	f000 fe53 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002afa:	2302      	movs	r3, #2
 8002afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002afe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4804      	ldr	r0, [pc, #16]	; (8002b20 <MX_GPIO_Init+0x250>)
 8002b10:	f000 fe46 	bl	80037a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b14:	bf00      	nop
 8002b16:	3730      	adds	r7, #48	; 0x30
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020c00 	.word	0x40020c00
 8002b30:	40020400 	.word	0x40020400

08002b34 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002b3c:	1d39      	adds	r1, r7, #4
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	2201      	movs	r2, #1
 8002b44:	4803      	ldr	r0, [pc, #12]	; (8002b54 <__io_putchar+0x20>)
 8002b46:	f003 ffce 	bl	8006ae6 <HAL_UART_Transmit>
  return ch;
 8002b4a:	687b      	ldr	r3, [r7, #4]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000378 	.word	0x20000378

08002b58 <print_conv_time>:

	}
}

void print_conv_time(uint32_t conv_time)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint16_t m_factor=1000;  // to print in ms
 8002b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b64:	81fb      	strh	r3, [r7, #14]

  //Serial.print(F("Conversion completed in:"));
  //Serial.print(((float)conv_time/m_factor), 1);
  //Serial.println(F("ms \n"));
  printf("Conversion completed in %f ms\r\n",(float)conv_time/m_factor);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b70:	89fb      	ldrh	r3, [r7, #14]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b7e:	ee16 0a90 	vmov	r0, s13
 8002b82:	f7fd fce1 	bl	8000548 <__aeabi_f2d>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4803      	ldr	r0, [pc, #12]	; (8002b98 <print_conv_time+0x40>)
 8002b8c:	f008 fd98 	bl	800b6c0 <iprintf>
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	0800d924 	.word	0x0800d924

08002b9c <check_error>:

void check_error(int error)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if (error == -1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d102      	bne.n	8002bb2 <check_error+0x16>
  {
    printf("A PEC error was detected in the received data\r\n");
 8002bac:	4803      	ldr	r0, [pc, #12]	; (8002bbc <check_error+0x20>)
 8002bae:	f008 fe23 	bl	800b7f8 <puts>
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	0800d944 	.word	0x0800d944

08002bc0 <print_cells>:

void print_cells(uint8_t datalog_en)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  for (int current_ic = 0 ; current_ic < TOTAL_IC; current_ic++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e05f      	b.n	8002c90 <print_cells+0xd0>
  {
    if (datalog_en == 0)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d131      	bne.n	8002c3a <print_cells+0x7a>
    {
      //Serial.print(" IC ");
      //Serial.print(current_ic+1,DEC);
      //Serial.print(", ");
      printf(" IC %d,",current_ic+1);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4834      	ldr	r0, [pc, #208]	; (8002cb0 <print_cells+0xf0>)
 8002bde:	f008 fd6f 	bl	800b6c0 <iprintf>
      for (int i=0; i<BMS_IC[0].ic_reg.cell_channels; i++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	e01d      	b.n	8002c24 <print_cells+0x64>
        //Serial.print(" C");
        //Serial.print(i+1,DEC);
        //Serial.print(":");
        //Serial.print(BMS_IC[current_ic].cells.c_codes[i]*0.0001,4);
        //Serial.print(",");
        printf(" C %d:%f,",i+1,BMS_IC[current_ic].cells.c_codes[i]*0.0001);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1c5c      	adds	r4, r3, #1
 8002bec:	4931      	ldr	r1, [pc, #196]	; (8002cb4 <print_cells+0xf4>)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2274      	movs	r2, #116	; 0x74
 8002bf2:	fb03 f202 	mul.w	r2, r3, r2
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	440b      	add	r3, r1
 8002c00:	88db      	ldrh	r3, [r3, #6]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fc8e 	bl	8000524 <__aeabi_i2d>
 8002c08:	a327      	add	r3, pc, #156	; (adr r3, 8002ca8 <print_cells+0xe8>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f7fd fcf3 	bl	80005f8 <__aeabi_dmul>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4621      	mov	r1, r4
 8002c18:	4827      	ldr	r0, [pc, #156]	; (8002cb8 <print_cells+0xf8>)
 8002c1a:	f008 fd51 	bl	800b6c0 <iprintf>
      for (int i=0; i<BMS_IC[0].ic_reg.cell_channels; i++)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	3301      	adds	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <print_cells+0xf4>)
 8002c26:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	dbda      	blt.n	8002be8 <print_cells+0x28>
      }
      //Serial.println();
      printf("\r\n");
 8002c32:	4822      	ldr	r0, [pc, #136]	; (8002cbc <print_cells+0xfc>)
 8002c34:	f008 fde0 	bl	800b7f8 <puts>
 8002c38:	e027      	b.n	8002c8a <print_cells+0xca>
    }
    else
    {
      //Serial.print(" Cells, ");
      printf(" Cells, ");
 8002c3a:	4821      	ldr	r0, [pc, #132]	; (8002cc0 <print_cells+0x100>)
 8002c3c:	f008 fd40 	bl	800b6c0 <iprintf>
      for (int i=0; i<BMS_IC[0].ic_reg.cell_channels; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e01a      	b.n	8002c7c <print_cells+0xbc>
      {
        //Serial.print(BMS_IC[current_ic].cells.c_codes[i]*0.0001,4);
        //Serial.print(",");
        printf("%f,",BMS_IC[current_ic].cells.c_codes[i]*0.0001);
 8002c46:	491b      	ldr	r1, [pc, #108]	; (8002cb4 <print_cells+0xf4>)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2274      	movs	r2, #116	; 0x74
 8002c4c:	fb03 f202 	mul.w	r2, r3, r2
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4413      	add	r3, r2
 8002c54:	330c      	adds	r3, #12
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	440b      	add	r3, r1
 8002c5a:	88db      	ldrh	r3, [r3, #6]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc61 	bl	8000524 <__aeabi_i2d>
 8002c62:	a311      	add	r3, pc, #68	; (adr r3, 8002ca8 <print_cells+0xe8>)
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	f7fd fcc6 	bl	80005f8 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4814      	ldr	r0, [pc, #80]	; (8002cc4 <print_cells+0x104>)
 8002c72:	f008 fd25 	bl	800b6c0 <iprintf>
      for (int i=0; i<BMS_IC[0].ic_reg.cell_channels; i++)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <print_cells+0xf4>)
 8002c7e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4293      	cmp	r3, r2
 8002c88:	dbdd      	blt.n	8002c46 <print_cells+0x86>
  for (int current_ic = 0 ; current_ic < TOTAL_IC; current_ic++)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dd9c      	ble.n	8002bd0 <print_cells+0x10>
      }
    }
  }
  //Serial.println("\n");
  printf("\r\n");
 8002c96:	4809      	ldr	r0, [pc, #36]	; (8002cbc <print_cells+0xfc>)
 8002c98:	f008 fdae 	bl	800b7f8 <puts>
}
 8002c9c:	bf00      	nop
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd90      	pop	{r4, r7, pc}
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	eb1c432d 	.word	0xeb1c432d
 8002cac:	3f1a36e2 	.word	0x3f1a36e2
 8002cb0:	0800d974 	.word	0x0800d974
 8002cb4:	200003c4 	.word	0x200003c4
 8002cb8:	0800d97c 	.word	0x0800d97c
 8002cbc:	0800d988 	.word	0x0800d988
 8002cc0:	0800d98c 	.word	0x0800d98c
 8002cc4:	0800d998 	.word	0x0800d998

08002cc8 <init_appdata>:

void init_appdata(app_data a_d)
{
 8002cc8:	b084      	sub	sp, #16
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af02      	add	r7, sp, #8
 8002cd0:	f107 0c08 	add.w	ip, r7, #8
 8002cd4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	init_app_data_6813(a_d);
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	f107 0308 	add.w	r3, r7, #8
 8002ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ce2:	f7fe fbdb 	bl	800149c <init_app_data_6813>
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cee:	b004      	add	sp, #16
 8002cf0:	4770      	bx	lr

08002cf2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf6:	b672      	cpsid	i
}
 8002cf8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cfa:	e7fe      	b.n	8002cfa <Error_Handler+0x8>

08002cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d10:	6453      	str	r3, [r2, #68]	; 0x44
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_MspInit+0x4c>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d3a:	2007      	movs	r0, #7
 8002d3c:	f000 fcee 	bl	800371c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <HAL_CAN_MspInit+0x84>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d12b      	bne.n	8002dc6 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <HAL_CAN_MspInit+0x88>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <HAL_CAN_MspInit+0x88>)
 8002d78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_CAN_MspInit+0x88>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_CAN_MspInit+0x88>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a10      	ldr	r2, [pc, #64]	; (8002dd4 <HAL_CAN_MspInit+0x88>)
 8002d94:	f043 0308 	orr.w	r3, r3, #8
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_CAN_MspInit+0x88>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002da6:	2303      	movs	r3, #3
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002db6:	2309      	movs	r3, #9
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <HAL_CAN_MspInit+0x8c>)
 8002dc2:	f000 fced 	bl	80037a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002dc6:	bf00      	nop
 8002dc8:	3728      	adds	r7, #40	; 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40006400 	.word	0x40006400
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020c00 	.word	0x40020c00

08002ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	; 0x30
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 031c 	add.w	r3, r7, #28
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a41      	ldr	r2, [pc, #260]	; (8002f00 <HAL_SPI_MspInit+0x124>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d12c      	bne.n	8002e58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	4a3f      	ldr	r2, [pc, #252]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e36:	23e0      	movs	r3, #224	; 0xe0
 8002e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e42:	2303      	movs	r3, #3
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e46:	2305      	movs	r3, #5
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4a:	f107 031c 	add.w	r3, r7, #28
 8002e4e:	4619      	mov	r1, r3
 8002e50:	482d      	ldr	r0, [pc, #180]	; (8002f08 <HAL_SPI_MspInit+0x12c>)
 8002e52:	f000 fca5 	bl	80037a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e56:	e04f      	b.n	8002ef8 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2b      	ldr	r2, [pc, #172]	; (8002f0c <HAL_SPI_MspInit+0x130>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d14a      	bne.n	8002ef8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_SPI_MspInit+0x128>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ec6:	2305      	movs	r3, #5
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eca:	f107 031c 	add.w	r3, r7, #28
 8002ece:	4619      	mov	r1, r3
 8002ed0:	480f      	ldr	r0, [pc, #60]	; (8002f10 <HAL_SPI_MspInit+0x134>)
 8002ed2:	f000 fc65 	bl	80037a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002ed6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ee8:	2305      	movs	r3, #5
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eec:	f107 031c 	add.w	r3, r7, #28
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4808      	ldr	r0, [pc, #32]	; (8002f14 <HAL_SPI_MspInit+0x138>)
 8002ef4:	f000 fc54 	bl	80037a0 <HAL_GPIO_Init>
}
 8002ef8:	bf00      	nop
 8002efa:	3730      	adds	r7, #48	; 0x30
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40013000 	.word	0x40013000
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40020000 	.word	0x40020000
 8002f0c:	40003800 	.word	0x40003800
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40020400 	.word	0x40020400

08002f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <HAL_TIM_Base_MspInit+0x3c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10d      	bne.n	8002f46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_TIM_Base_MspInit+0x40>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <HAL_TIM_Base_MspInit+0x40>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_TIM_Base_MspInit+0x40>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_UART_MspInit+0x84>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d12b      	bne.n	8002fd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <HAL_UART_MspInit+0x88>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <HAL_UART_MspInit+0x88>)
 8002f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <HAL_UART_MspInit+0x88>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_UART_MspInit+0x88>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <HAL_UART_MspInit+0x88>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_UART_MspInit+0x88>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fc6:	2307      	movs	r3, #7
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <HAL_UART_MspInit+0x8c>)
 8002fd2:	f000 fbe5 	bl	80037a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fd6:	bf00      	nop
 8002fd8:	3728      	adds	r7, #40	; 0x28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40004400 	.word	0x40004400
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40020000 	.word	0x40020000

08002fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <NMI_Handler+0x4>

08002ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff6:	e7fe      	b.n	8002ff6 <HardFault_Handler+0x4>

08002ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ffc:	e7fe      	b.n	8002ffc <MemManage_Handler+0x4>

08002ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003002:	e7fe      	b.n	8003002 <BusFault_Handler+0x4>

08003004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003008:	e7fe      	b.n	8003008 <UsageFault_Handler+0x4>

0800300a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003038:	f000 f960 	bl	80032fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}

08003040 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <OTG_FS_IRQHandler+0x10>)
 8003046:	f000 ffcb 	bl	8003fe0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200008b0 	.word	0x200008b0

08003054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return 1;
 8003058:	2301      	movs	r3, #1
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <_kill>:

int _kill(int pid, int sig)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800306e:	f007 fd9b 	bl	800aba8 <__errno>
 8003072:	4603      	mov	r3, r0
 8003074:	2216      	movs	r2, #22
 8003076:	601a      	str	r2, [r3, #0]
  return -1;
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <_exit>:

void _exit (int status)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800308c:	f04f 31ff 	mov.w	r1, #4294967295
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ffe7 	bl	8003064 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003096:	e7fe      	b.n	8003096 <_exit+0x12>

08003098 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	e00a      	b.n	80030c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030aa:	f3af 8000 	nop.w
 80030ae:	4601      	mov	r1, r0
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	60ba      	str	r2, [r7, #8]
 80030b6:	b2ca      	uxtb	r2, r1
 80030b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3301      	adds	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	dbf0      	blt.n	80030aa <_read+0x12>
  }

  return len;
 80030c8:	687b      	ldr	r3, [r7, #4]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e009      	b.n	80030f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	60ba      	str	r2, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fd21 	bl	8002b34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	3301      	adds	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	dbf1      	blt.n	80030e4 <_write+0x12>
  }
  return len;
 8003100:	687b      	ldr	r3, [r7, #4]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_close>:

int _close(int file)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003132:	605a      	str	r2, [r3, #4]
  return 0;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <_isatty>:

int _isatty(int file)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <_sbrk+0x5c>)
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <_sbrk+0x60>)
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <_sbrk+0x64>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <_sbrk+0x64>)
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <_sbrk+0x68>)
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <_sbrk+0x64>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d207      	bcs.n	80031b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a4:	f007 fd00 	bl	800aba8 <__errno>
 80031a8:	4603      	mov	r3, r0
 80031aa:	220c      	movs	r2, #12
 80031ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295
 80031b2:	e009      	b.n	80031c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <_sbrk+0x64>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <_sbrk+0x64>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <_sbrk+0x64>)
 80031c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20020000 	.word	0x20020000
 80031d4:	00000400 	.word	0x00000400
 80031d8:	200004cc 	.word	0x200004cc
 80031dc:	20000bc8 	.word	0x20000bc8

080031e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <SystemInit+0x20>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <SystemInit+0x20>)
 80031ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800323c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003208:	480d      	ldr	r0, [pc, #52]	; (8003240 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800320a:	490e      	ldr	r1, [pc, #56]	; (8003244 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800320c:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003210:	e002      	b.n	8003218 <LoopCopyDataInit>

08003212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003216:	3304      	adds	r3, #4

08003218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800321a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800321c:	d3f9      	bcc.n	8003212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800321e:	4a0b      	ldr	r2, [pc, #44]	; (800324c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003220:	4c0b      	ldr	r4, [pc, #44]	; (8003250 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003224:	e001      	b.n	800322a <LoopFillZerobss>

08003226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003228:	3204      	adds	r2, #4

0800322a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800322a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800322c:	d3fb      	bcc.n	8003226 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800322e:	f7ff ffd7 	bl	80031e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003232:	f007 fcbf 	bl	800abb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003236:	f7ff f893 	bl	8002360 <main>
  bx  lr    
 800323a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800323c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003244:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003248:	0800e524 	.word	0x0800e524
  ldr r2, =_sbss
 800324c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8003250:	20000bc4 	.word	0x20000bc4

08003254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003254:	e7fe      	b.n	8003254 <ADC_IRQHandler>
	...

08003258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <HAL_Init+0x40>)
 8003262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_Init+0x40>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <HAL_Init+0x40>)
 800326e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_Init+0x40>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_Init+0x40>)
 800327a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003280:	2003      	movs	r0, #3
 8003282:	f000 fa4b 	bl	800371c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003286:	2000      	movs	r0, #0
 8003288:	f000 f808 	bl	800329c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800328c:	f7ff fd36 	bl	8002cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023c00 	.word	0x40023c00

0800329c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_InitTick+0x54>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_InitTick+0x58>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fa63 	bl	8003786 <HAL_SYSTICK_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e00e      	b.n	80032e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b0f      	cmp	r3, #15
 80032ce:	d80a      	bhi.n	80032e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d0:	2200      	movs	r2, #0
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295
 80032d8:	f000 fa2b 	bl	8003732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032dc:	4a06      	ldr	r2, [pc, #24]	; (80032f8 <HAL_InitTick+0x5c>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000018 	.word	0x20000018
 80032f4:	20000020 	.word	0x20000020
 80032f8:	2000001c 	.word	0x2000001c

080032fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_IncTick+0x20>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_IncTick+0x24>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4413      	add	r3, r2
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_IncTick+0x24>)
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000020 	.word	0x20000020
 8003320:	200004d0 	.word	0x200004d0

08003324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return uwTick;
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <HAL_GetTick+0x14>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	200004d0 	.word	0x200004d0

0800333c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7ff ffee 	bl	8003324 <HAL_GetTick>
 8003348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d005      	beq.n	8003362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_Delay+0x44>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003362:	bf00      	nop
 8003364:	f7ff ffde 	bl	8003324 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	429a      	cmp	r2, r3
 8003372:	d8f7      	bhi.n	8003364 <HAL_Delay+0x28>
  {
  }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000020 	.word	0x20000020

08003384 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e0ed      	b.n	8003572 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fcd2 	bl	8002d4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b8:	f7ff ffb4 	bl	8003324 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033be:	e012      	b.n	80033e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033c0:	f7ff ffb0 	bl	8003324 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b0a      	cmp	r3, #10
 80033cc:	d90b      	bls.n	80033e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2205      	movs	r2, #5
 80033de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0c5      	b.n	8003572 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0e5      	beq.n	80033c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0202 	bic.w	r2, r2, #2
 8003402:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003404:	f7ff ff8e 	bl	8003324 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800340a:	e012      	b.n	8003432 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800340c:	f7ff ff8a 	bl	8003324 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b0a      	cmp	r3, #10
 8003418:	d90b      	bls.n	8003432 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2205      	movs	r2, #5
 800342a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e09f      	b.n	8003572 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e5      	bne.n	800340c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	7e1b      	ldrb	r3, [r3, #24]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d108      	bne.n	800345a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e007      	b.n	800346a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7e5b      	ldrb	r3, [r3, #25]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d108      	bne.n	8003484 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e007      	b.n	8003494 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003492:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7e9b      	ldrb	r3, [r3, #26]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d108      	bne.n	80034ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0220 	orr.w	r2, r2, #32
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e007      	b.n	80034be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0220 	bic.w	r2, r2, #32
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7edb      	ldrb	r3, [r3, #27]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d108      	bne.n	80034d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0210 	bic.w	r2, r2, #16
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e007      	b.n	80034e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0210 	orr.w	r2, r2, #16
 80034e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7f1b      	ldrb	r3, [r3, #28]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d108      	bne.n	8003502 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0208 	orr.w	r2, r2, #8
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	e007      	b.n	8003512 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0208 	bic.w	r2, r2, #8
 8003510:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	7f5b      	ldrb	r3, [r3, #29]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d108      	bne.n	800352c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0204 	orr.w	r2, r2, #4
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e007      	b.n	800353c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0204 	bic.w	r2, r2, #4
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	ea42 0103 	orr.w	r1, r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	1e5a      	subs	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003598:	4013      	ands	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ae:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	60d3      	str	r3, [r2, #12]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <__NVIC_GetPriorityGrouping+0x18>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	f003 0307 	and.w	r3, r3, #7
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	db0b      	blt.n	800360a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4907      	ldr	r1, [pc, #28]	; (8003618 <__NVIC_EnableIRQ+0x38>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2001      	movs	r0, #1
 8003602:	fa00 f202 	lsl.w	r2, r0, r2
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000e100 	.word	0xe000e100

0800361c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362c:	2b00      	cmp	r3, #0
 800362e:	db0a      	blt.n	8003646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	490c      	ldr	r1, [pc, #48]	; (8003668 <__NVIC_SetPriority+0x4c>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	440b      	add	r3, r1
 8003640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003644:	e00a      	b.n	800365c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4908      	ldr	r1, [pc, #32]	; (800366c <__NVIC_SetPriority+0x50>)
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	3b04      	subs	r3, #4
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	440b      	add	r3, r1
 800365a:	761a      	strb	r2, [r3, #24]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000e100 	.word	0xe000e100
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	; 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f1c3 0307 	rsb	r3, r3, #7
 800368a:	2b04      	cmp	r3, #4
 800368c:	bf28      	it	cs
 800368e:	2304      	movcs	r3, #4
 8003690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3304      	adds	r3, #4
 8003696:	2b06      	cmp	r3, #6
 8003698:	d902      	bls.n	80036a0 <NVIC_EncodePriority+0x30>
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3b03      	subs	r3, #3
 800369e:	e000      	b.n	80036a2 <NVIC_EncodePriority+0x32>
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	401a      	ands	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b8:	f04f 31ff 	mov.w	r1, #4294967295
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	43d9      	mvns	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	4313      	orrs	r3, r2
         );
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3724      	adds	r7, #36	; 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e8:	d301      	bcc.n	80036ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00f      	b.n	800370e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <SysTick_Config+0x40>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f6:	210f      	movs	r1, #15
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	f7ff ff8e 	bl	800361c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <SysTick_Config+0x40>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <SysTick_Config+0x40>)
 8003708:	2207      	movs	r2, #7
 800370a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	e000e010 	.word	0xe000e010

0800371c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff29 	bl	800357c <__NVIC_SetPriorityGrouping>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003744:	f7ff ff3e 	bl	80035c4 <__NVIC_GetPriorityGrouping>
 8003748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	6978      	ldr	r0, [r7, #20]
 8003750:	f7ff ff8e 	bl	8003670 <NVIC_EncodePriority>
 8003754:	4602      	mov	r2, r0
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff5d 	bl	800361c <__NVIC_SetPriority>
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff31 	bl	80035e0 <__NVIC_EnableIRQ>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffa2 	bl	80036d8 <SysTick_Config>
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e16b      	b.n	8003a94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f040 815a 	bne.w	8003a8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d005      	beq.n	80037f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d130      	bne.n	8003854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2203      	movs	r2, #3
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003828:	2201      	movs	r2, #1
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 0201 	and.w	r2, r3, #1
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b03      	cmp	r3, #3
 800385e:	d017      	beq.n	8003890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d123      	bne.n	80038e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	08da      	lsrs	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80b4 	beq.w	8003a8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b60      	ldr	r3, [pc, #384]	; (8003aac <HAL_GPIO_Init+0x30c>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a5f      	ldr	r2, [pc, #380]	; (8003aac <HAL_GPIO_Init+0x30c>)
 8003930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b5d      	ldr	r3, [pc, #372]	; (8003aac <HAL_GPIO_Init+0x30c>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003942:	4a5b      	ldr	r2, [pc, #364]	; (8003ab0 <HAL_GPIO_Init+0x310>)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	220f      	movs	r2, #15
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a52      	ldr	r2, [pc, #328]	; (8003ab4 <HAL_GPIO_Init+0x314>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d02b      	beq.n	80039c6 <HAL_GPIO_Init+0x226>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a51      	ldr	r2, [pc, #324]	; (8003ab8 <HAL_GPIO_Init+0x318>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d025      	beq.n	80039c2 <HAL_GPIO_Init+0x222>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a50      	ldr	r2, [pc, #320]	; (8003abc <HAL_GPIO_Init+0x31c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01f      	beq.n	80039be <HAL_GPIO_Init+0x21e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4f      	ldr	r2, [pc, #316]	; (8003ac0 <HAL_GPIO_Init+0x320>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d019      	beq.n	80039ba <HAL_GPIO_Init+0x21a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4e      	ldr	r2, [pc, #312]	; (8003ac4 <HAL_GPIO_Init+0x324>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_GPIO_Init+0x216>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4d      	ldr	r2, [pc, #308]	; (8003ac8 <HAL_GPIO_Init+0x328>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00d      	beq.n	80039b2 <HAL_GPIO_Init+0x212>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4c      	ldr	r2, [pc, #304]	; (8003acc <HAL_GPIO_Init+0x32c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <HAL_GPIO_Init+0x20e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4b      	ldr	r2, [pc, #300]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_GPIO_Init+0x20a>
 80039a6:	2307      	movs	r3, #7
 80039a8:	e00e      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039aa:	2308      	movs	r3, #8
 80039ac:	e00c      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039ae:	2306      	movs	r3, #6
 80039b0:	e00a      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039b2:	2305      	movs	r3, #5
 80039b4:	e008      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039b6:	2304      	movs	r3, #4
 80039b8:	e006      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e004      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039be:	2302      	movs	r3, #2
 80039c0:	e002      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039c6:	2300      	movs	r3, #0
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	f002 0203 	and.w	r2, r2, #3
 80039ce:	0092      	lsls	r2, r2, #2
 80039d0:	4093      	lsls	r3, r2
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d8:	4935      	ldr	r1, [pc, #212]	; (8003ab0 <HAL_GPIO_Init+0x310>)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039e6:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <HAL_GPIO_Init+0x334>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a0a:	4a32      	ldr	r2, [pc, #200]	; (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a10:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a34:	4a27      	ldr	r2, [pc, #156]	; (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a3a:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a64:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a88:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <HAL_GPIO_Init+0x334>)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3301      	adds	r3, #1
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b0f      	cmp	r3, #15
 8003a98:	f67f ae90 	bls.w	80037bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	3724      	adds	r7, #36	; 0x24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40013800 	.word	0x40013800
 8003ab4:	40020000 	.word	0x40020000
 8003ab8:	40020400 	.word	0x40020400
 8003abc:	40020800 	.word	0x40020800
 8003ac0:	40020c00 	.word	0x40020c00
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40021400 	.word	0x40021400
 8003acc:	40021800 	.word	0x40021800
 8003ad0:	40021c00 	.word	0x40021c00
 8003ad4:	40013c00 	.word	0x40013c00

08003ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae8:	787b      	ldrb	r3, [r7, #1]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af4:	e003      	b.n	8003afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	041a      	lsls	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	619a      	str	r2, [r3, #24]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0c:	b08f      	sub	sp, #60	; 0x3c
 8003b0e:	af0a      	add	r7, sp, #40	; 0x28
 8003b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e054      	b.n	8003bc6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f006 fd8c 	bl	800a654 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2203      	movs	r2, #3
 8003b40:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 fbaa 	bl	80072b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	687e      	ldr	r6, [r7, #4]
 8003b68:	466d      	mov	r5, sp
 8003b6a:	f106 0410 	add.w	r4, r6, #16
 8003b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b7e:	1d33      	adds	r3, r6, #4
 8003b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b82:	6838      	ldr	r0, [r7, #0]
 8003b84:	f003 fb24 	bl	80071d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f003 fba1 	bl	80072d6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	687e      	ldr	r6, [r7, #4]
 8003b9c:	466d      	mov	r5, sp
 8003b9e:	f106 0410 	add.w	r4, r6, #16
 8003ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003baa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bae:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bb2:	1d33      	adds	r3, r6, #4
 8003bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bb6:	6838      	ldr	r0, [r7, #0]
 8003bb8:	f003 fd2a 	bl	8007610 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003bce:	b590      	push	{r4, r7, lr}
 8003bd0:	b089      	sub	sp, #36	; 0x24
 8003bd2:	af04      	add	r7, sp, #16
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	4608      	mov	r0, r1
 8003bd8:	4611      	mov	r1, r2
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4603      	mov	r3, r0
 8003bde:	70fb      	strb	r3, [r7, #3]
 8003be0:	460b      	mov	r3, r1
 8003be2:	70bb      	strb	r3, [r7, #2]
 8003be4:	4613      	mov	r3, r2
 8003be6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_HCD_HC_Init+0x28>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e076      	b.n	8003ce4 <HAL_HCD_HC_Init+0x116>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	212c      	movs	r1, #44	; 0x2c
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	333d      	adds	r3, #61	; 0x3d
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	212c      	movs	r1, #44	; 0x2c
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3338      	adds	r3, #56	; 0x38
 8003c1e:	787a      	ldrb	r2, [r7, #1]
 8003c20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	212c      	movs	r1, #44	; 0x2c
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3340      	adds	r3, #64	; 0x40
 8003c30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003c32:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3339      	adds	r3, #57	; 0x39
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	333f      	adds	r3, #63	; 0x3f
 8003c54:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003c58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	78ba      	ldrb	r2, [r7, #2]
 8003c5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c62:	b2d0      	uxtb	r0, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	212c      	movs	r1, #44	; 0x2c
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	333a      	adds	r3, #58	; 0x3a
 8003c70:	4602      	mov	r2, r0
 8003c72:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003c74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	da09      	bge.n	8003c90 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	333b      	adds	r3, #59	; 0x3b
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	e008      	b.n	8003ca2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	333b      	adds	r3, #59	; 0x3b
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	333c      	adds	r3, #60	; 0x3c
 8003cb0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003cb4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	787c      	ldrb	r4, [r7, #1]
 8003cbc:	78ba      	ldrb	r2, [r7, #2]
 8003cbe:	78f9      	ldrb	r1, [r7, #3]
 8003cc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cc2:	9302      	str	r3, [sp, #8]
 8003cc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	f003 fe23 	bl	800791c <USB_HC_Init>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd90      	pop	{r4, r7, pc}

08003cec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_HCD_HC_Halt+0x1e>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e00f      	b.n	8003d2a <HAL_HCD_HC_Halt+0x3e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 f873 	bl	8007e06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	461a      	mov	r2, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	70fb      	strb	r3, [r7, #3]
 8003d46:	460b      	mov	r3, r1
 8003d48:	70bb      	strb	r3, [r7, #2]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	333b      	adds	r3, #59	; 0x3b
 8003d5c:	78ba      	ldrb	r2, [r7, #2]
 8003d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	333f      	adds	r3, #63	; 0x3f
 8003d6e:	787a      	ldrb	r2, [r7, #1]
 8003d70:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003d72:	7c3b      	ldrb	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d112      	bne.n	8003d9e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	3342      	adds	r3, #66	; 0x42
 8003d86:	2203      	movs	r2, #3
 8003d88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	333d      	adds	r3, #61	; 0x3d
 8003d98:	7f3a      	ldrb	r2, [r7, #28]
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e008      	b.n	8003db0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	3342      	adds	r3, #66	; 0x42
 8003dac:	2202      	movs	r2, #2
 8003dae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003db0:	787b      	ldrb	r3, [r7, #1]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	f200 80c6 	bhi.w	8003f44 <HAL_HCD_HC_SubmitRequest+0x210>
 8003db8:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003f31 	.word	0x08003f31
 8003dc8:	08003e35 	.word	0x08003e35
 8003dcc:	08003eb3 	.word	0x08003eb3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003dd0:	7c3b      	ldrb	r3, [r7, #16]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	f040 80b8 	bne.w	8003f48 <HAL_HCD_HC_SubmitRequest+0x214>
 8003dd8:	78bb      	ldrb	r3, [r7, #2]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 80b4 	bne.w	8003f48 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003de0:	8b3b      	ldrh	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d108      	bne.n	8003df8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	212c      	movs	r1, #44	; 0x2c
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	3355      	adds	r3, #85	; 0x55
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	212c      	movs	r1, #44	; 0x2c
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	4413      	add	r3, r2
 8003e04:	3355      	adds	r3, #85	; 0x55
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	212c      	movs	r1, #44	; 0x2c
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	3342      	adds	r3, #66	; 0x42
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e1e:	e093      	b.n	8003f48 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	212c      	movs	r1, #44	; 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3342      	adds	r3, #66	; 0x42
 8003e2e:	2202      	movs	r2, #2
 8003e30:	701a      	strb	r2, [r3, #0]
      break;
 8003e32:	e089      	b.n	8003f48 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003e34:	78bb      	ldrb	r3, [r7, #2]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11d      	bne.n	8003e76 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	212c      	movs	r1, #44	; 0x2c
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	3355      	adds	r3, #85	; 0x55
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	212c      	movs	r1, #44	; 0x2c
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	4413      	add	r3, r2
 8003e5a:	3342      	adds	r3, #66	; 0x42
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003e60:	e073      	b.n	8003f4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3342      	adds	r3, #66	; 0x42
 8003e70:	2202      	movs	r2, #2
 8003e72:	701a      	strb	r2, [r3, #0]
      break;
 8003e74:	e069      	b.n	8003f4a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	3354      	adds	r3, #84	; 0x54
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	3342      	adds	r3, #66	; 0x42
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
      break;
 8003e9c:	e055      	b.n	8003f4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	212c      	movs	r1, #44	; 0x2c
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3342      	adds	r3, #66	; 0x42
 8003eac:	2202      	movs	r2, #2
 8003eae:	701a      	strb	r2, [r3, #0]
      break;
 8003eb0:	e04b      	b.n	8003f4a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003eb2:	78bb      	ldrb	r3, [r7, #2]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d11d      	bne.n	8003ef4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3355      	adds	r3, #85	; 0x55
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	212c      	movs	r1, #44	; 0x2c
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3342      	adds	r3, #66	; 0x42
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003ede:	e034      	b.n	8003f4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	212c      	movs	r1, #44	; 0x2c
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	4413      	add	r3, r2
 8003eec:	3342      	adds	r3, #66	; 0x42
 8003eee:	2202      	movs	r2, #2
 8003ef0:	701a      	strb	r2, [r3, #0]
      break;
 8003ef2:	e02a      	b.n	8003f4a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	212c      	movs	r1, #44	; 0x2c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	3354      	adds	r3, #84	; 0x54
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	3342      	adds	r3, #66	; 0x42
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
      break;
 8003f1a:	e016      	b.n	8003f4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	212c      	movs	r1, #44	; 0x2c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	3342      	adds	r3, #66	; 0x42
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	701a      	strb	r2, [r3, #0]
      break;
 8003f2e:	e00c      	b.n	8003f4a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	212c      	movs	r1, #44	; 0x2c
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3342      	adds	r3, #66	; 0x42
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
      break;
 8003f42:	e002      	b.n	8003f4a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003f44:	bf00      	nop
 8003f46:	e000      	b.n	8003f4a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003f48:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	212c      	movs	r1, #44	; 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	3344      	adds	r3, #68	; 0x44
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	8b3a      	ldrh	r2, [r7, #24]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	202c      	movs	r0, #44	; 0x2c
 8003f64:	fb00 f303 	mul.w	r3, r0, r3
 8003f68:	440b      	add	r3, r1
 8003f6a:	334c      	adds	r3, #76	; 0x4c
 8003f6c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	212c      	movs	r1, #44	; 0x2c
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	3360      	adds	r3, #96	; 0x60
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	212c      	movs	r1, #44	; 0x2c
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3350      	adds	r3, #80	; 0x50
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3339      	adds	r3, #57	; 0x39
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	3361      	adds	r3, #97	; 0x61
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	222c      	movs	r2, #44	; 0x2c
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	3338      	adds	r3, #56	; 0x38
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	18d1      	adds	r1, r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f003 fdc6 	bl	8007b60 <USB_HC_StartXfer>
 8003fd4:	4603      	mov	r3, r0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop

08003fe0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f003 fac7 	bl	800758a <USB_GetMode>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	f040 80f6 	bne.w	80041f0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f003 faab 	bl	8007564 <USB_ReadInterrupts>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80ec 	beq.w	80041ee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f003 faa2 	bl	8007564 <USB_ReadInterrupts>
 8004020:	4603      	mov	r3, r0
 8004022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800402a:	d104      	bne.n	8004036 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004034:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f003 fa92 	bl	8007564 <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404a:	d104      	bne.n	8004056 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004054:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f003 fa82 	bl	8007564 <USB_ReadInterrupts>
 8004060:	4603      	mov	r3, r0
 8004062:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004066:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800406a:	d104      	bne.n	8004076 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004074:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f003 fa72 	bl	8007564 <USB_ReadInterrupts>
 8004080:	4603      	mov	r3, r0
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b02      	cmp	r3, #2
 8004088:	d103      	bne.n	8004092 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2202      	movs	r2, #2
 8004090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f003 fa64 	bl	8007564 <USB_ReadInterrupts>
 800409c:	4603      	mov	r3, r0
 800409e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a6:	d11c      	bne.n	80040e2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80040b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10f      	bne.n	80040e2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80040c2:	2110      	movs	r1, #16
 80040c4:	6938      	ldr	r0, [r7, #16]
 80040c6:	f003 f953 	bl	8007370 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80040ca:	6938      	ldr	r0, [r7, #16]
 80040cc:	f003 f984 	bl	80073d8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2101      	movs	r1, #1
 80040d6:	4618      	mov	r0, r3
 80040d8:	f003 fb5a 	bl	8007790 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f006 fb37 	bl	800a750 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f003 fa3c 	bl	8007564 <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f6:	d102      	bne.n	80040fe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f001 f89e 	bl	800523a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f003 fa2e 	bl	8007564 <USB_ReadInterrupts>
 8004108:	4603      	mov	r3, r0
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b08      	cmp	r3, #8
 8004110:	d106      	bne.n	8004120 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f006 fb00 	bl	800a718 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2208      	movs	r2, #8
 800411e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f003 fa1d 	bl	8007564 <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b10      	cmp	r3, #16
 8004132:	d101      	bne.n	8004138 <HAL_HCD_IRQHandler+0x158>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <HAL_HCD_IRQHandler+0x15a>
 8004138:	2300      	movs	r3, #0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d012      	beq.n	8004164 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699a      	ldr	r2, [r3, #24]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0210 	bic.w	r2, r2, #16
 800414c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 ffa1 	bl	8005096 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0210 	orr.w	r2, r2, #16
 8004162:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f003 f9fb 	bl	8007564 <USB_ReadInterrupts>
 800416e:	4603      	mov	r3, r0
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004178:	d13a      	bne.n	80041f0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f003 fe30 	bl	8007de4 <USB_HC_ReadInterrupt>
 8004184:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e025      	b.n	80041d8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d018      	beq.n	80041d2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b6:	d106      	bne.n	80041c6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8ab 	bl	800431a <HCD_HC_IN_IRQHandler>
 80041c4:	e005      	b.n	80041d2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fbf9 	bl	80049c4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	3301      	adds	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d3d4      	bcc.n	800418c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ea:	615a      	str	r2, [r3, #20]
 80041ec:	e000      	b.n	80041f0 <HAL_HCD_IRQHandler+0x210>
      return;
 80041ee:	bf00      	nop
    }
  }
}
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_HCD_Start+0x16>
 8004208:	2302      	movs	r3, #2
 800420a:	e013      	b.n	8004234 <HAL_HCD_Start+0x3e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2101      	movs	r1, #1
 800421a:	4618      	mov	r0, r3
 800421c:	f003 fb1c 	bl	8007858 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f003 f834 	bl	8007292 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_HCD_Stop+0x16>
 800424e:	2302      	movs	r3, #2
 8004250:	e00d      	b.n	800426e <HAL_HCD_Stop+0x32>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f003 ff0a 	bl	8008078 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f003 fabe 	bl	8007804 <USB_ResetPort>
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	212c      	movs	r1, #44	; 0x2c
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	4413      	add	r3, r2
 80042aa:	3360      	adds	r3, #96	; 0x60
 80042ac:	781b      	ldrb	r3, [r3, #0]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	3350      	adds	r3, #80	; 0x50
 80042d4:	681b      	ldr	r3, [r3, #0]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f003 fb02 	bl	80078f8 <USB_GetCurrentFrame>
 80042f4:	4603      	mov	r3, r0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f003 fadd 	bl	80078ca <USB_GetHostSpeed>
 8004310:	4603      	mov	r3, r0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4413      	add	r3, r2
 800433c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b04      	cmp	r3, #4
 8004348:	d11a      	bne.n	8004380 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004356:	461a      	mov	r2, r3
 8004358:	2304      	movs	r3, #4
 800435a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3361      	adds	r3, #97	; 0x61
 800436a:	2206      	movs	r2, #6
 800436c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f003 fd44 	bl	8007e06 <USB_HC_Halt>
 800437e:	e0af      	b.n	80044e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004396:	d11b      	bne.n	80043d0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a4:	461a      	mov	r2, r3
 80043a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	212c      	movs	r1, #44	; 0x2c
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	3361      	adds	r3, #97	; 0x61
 80043ba:	2207      	movs	r2, #7
 80043bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f003 fd1c 	bl	8007e06 <USB_HC_Halt>
 80043ce:	e087      	b.n	80044e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d109      	bne.n	80043fa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f2:	461a      	mov	r2, r3
 80043f4:	2320      	movs	r3, #32
 80043f6:	6093      	str	r3, [r2, #8]
 80043f8:	e072      	b.n	80044e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b08      	cmp	r3, #8
 800440e:	d11a      	bne.n	8004446 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441c:	461a      	mov	r2, r3
 800441e:	2308      	movs	r3, #8
 8004420:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	3361      	adds	r3, #97	; 0x61
 8004430:	2205      	movs	r2, #5
 8004432:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f003 fce1 	bl	8007e06 <USB_HC_Halt>
 8004444:	e04c      	b.n	80044e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445c:	d11b      	bne.n	8004496 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	461a      	mov	r2, r3
 800446c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004470:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	212c      	movs	r1, #44	; 0x2c
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	4413      	add	r3, r2
 800447e:	3361      	adds	r3, #97	; 0x61
 8004480:	2208      	movs	r2, #8
 8004482:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f003 fcb9 	bl	8007e06 <USB_HC_Halt>
 8004494:	e024      	b.n	80044e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4413      	add	r3, r2
 800449e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d119      	bne.n	80044e0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b8:	461a      	mov	r2, r3
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	212c      	movs	r1, #44	; 0x2c
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	4413      	add	r3, r2
 80044ca:	3361      	adds	r3, #97	; 0x61
 80044cc:	2206      	movs	r2, #6
 80044ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f003 fc93 	bl	8007e06 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f6:	d112      	bne.n	800451e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f003 fc7f 	bl	8007e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	461a      	mov	r2, r3
 8004516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800451a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800451c:	e24e      	b.n	80049bc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 80df 	bne.w	80046f4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d019      	beq.n	8004572 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	212c      	movs	r1, #44	; 0x2c
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	3348      	adds	r3, #72	; 0x48
 800454c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	0159      	lsls	r1, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	440b      	add	r3, r1
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004560:	1ad2      	subs	r2, r2, r3
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	202c      	movs	r0, #44	; 0x2c
 8004568:	fb00 f303 	mul.w	r3, r0, r3
 800456c:	440b      	add	r3, r1
 800456e:	3350      	adds	r3, #80	; 0x50
 8004570:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	212c      	movs	r1, #44	; 0x2c
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	3361      	adds	r3, #97	; 0x61
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	335c      	adds	r3, #92	; 0x5c
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4413      	add	r3, r2
 800459e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a2:	461a      	mov	r2, r3
 80045a4:	2301      	movs	r3, #1
 80045a6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	212c      	movs	r1, #44	; 0x2c
 80045ae:	fb01 f303 	mul.w	r3, r1, r3
 80045b2:	4413      	add	r3, r2
 80045b4:	333f      	adds	r3, #63	; 0x3f
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	212c      	movs	r1, #44	; 0x2c
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	333f      	adds	r3, #63	; 0x3f
 80045ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d111      	bne.n	80045f4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f003 fc13 	bl	8007e06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	461a      	mov	r2, r3
 80045ee:	2310      	movs	r3, #16
 80045f0:	6093      	str	r3, [r2, #8]
 80045f2:	e03a      	b.n	800466a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	212c      	movs	r1, #44	; 0x2c
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	333f      	adds	r3, #63	; 0x3f
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d009      	beq.n	800461c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	333f      	adds	r3, #63	; 0x3f
 8004616:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004618:	2b01      	cmp	r3, #1
 800461a:	d126      	bne.n	800466a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	440a      	add	r2, r1
 8004632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004636:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800463a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	212c      	movs	r1, #44	; 0x2c
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	4413      	add	r3, r2
 8004648:	3360      	adds	r3, #96	; 0x60
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	b2d9      	uxtb	r1, r3
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	202c      	movs	r0, #44	; 0x2c
 8004658:	fb00 f303 	mul.w	r3, r0, r3
 800465c:	4413      	add	r3, r2
 800465e:	3360      	adds	r3, #96	; 0x60
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f006 f881 	bl	800a76c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d12b      	bne.n	80046ca <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3348      	adds	r3, #72	; 0x48
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	202c      	movs	r0, #44	; 0x2c
 8004688:	fb00 f202 	mul.w	r2, r0, r2
 800468c:	440a      	add	r2, r1
 800468e:	3240      	adds	r2, #64	; 0x40
 8004690:	8812      	ldrh	r2, [r2, #0]
 8004692:	fbb3 f3f2 	udiv	r3, r3, r2
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 818e 	beq.w	80049bc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	3354      	adds	r3, #84	; 0x54
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f083 0301 	eor.w	r3, r3, #1
 80046b4:	b2d8      	uxtb	r0, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	3354      	adds	r3, #84	; 0x54
 80046c4:	4602      	mov	r2, r0
 80046c6:	701a      	strb	r2, [r3, #0]
}
 80046c8:	e178      	b.n	80049bc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	3354      	adds	r3, #84	; 0x54
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	f083 0301 	eor.w	r3, r3, #1
 80046de:	b2d8      	uxtb	r0, r3
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	212c      	movs	r1, #44	; 0x2c
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	3354      	adds	r3, #84	; 0x54
 80046ee:	4602      	mov	r2, r0
 80046f0:	701a      	strb	r2, [r3, #0]
}
 80046f2:	e163      	b.n	80049bc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	f040 80f6 	bne.w	80048f8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	212c      	movs	r1, #44	; 0x2c
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	4413      	add	r3, r2
 8004718:	3361      	adds	r3, #97	; 0x61
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d109      	bne.n	8004734 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	212c      	movs	r1, #44	; 0x2c
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	4413      	add	r3, r2
 800472c:	3360      	adds	r3, #96	; 0x60
 800472e:	2201      	movs	r2, #1
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e0c9      	b.n	80048c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	212c      	movs	r1, #44	; 0x2c
 800473a:	fb01 f303 	mul.w	r3, r1, r3
 800473e:	4413      	add	r3, r2
 8004740:	3361      	adds	r3, #97	; 0x61
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b05      	cmp	r3, #5
 8004746:	d109      	bne.n	800475c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	212c      	movs	r1, #44	; 0x2c
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	4413      	add	r3, r2
 8004754:	3360      	adds	r3, #96	; 0x60
 8004756:	2205      	movs	r2, #5
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e0b5      	b.n	80048c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	212c      	movs	r1, #44	; 0x2c
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	4413      	add	r3, r2
 8004768:	3361      	adds	r3, #97	; 0x61
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b06      	cmp	r3, #6
 800476e:	d009      	beq.n	8004784 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	212c      	movs	r1, #44	; 0x2c
 8004776:	fb01 f303 	mul.w	r3, r1, r3
 800477a:	4413      	add	r3, r2
 800477c:	3361      	adds	r3, #97	; 0x61
 800477e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004780:	2b08      	cmp	r3, #8
 8004782:	d150      	bne.n	8004826 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	212c      	movs	r1, #44	; 0x2c
 800478a:	fb01 f303 	mul.w	r3, r1, r3
 800478e:	4413      	add	r3, r2
 8004790:	335c      	adds	r3, #92	; 0x5c
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	202c      	movs	r0, #44	; 0x2c
 800479c:	fb00 f303 	mul.w	r3, r0, r3
 80047a0:	440b      	add	r3, r1
 80047a2:	335c      	adds	r3, #92	; 0x5c
 80047a4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	212c      	movs	r1, #44	; 0x2c
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	4413      	add	r3, r2
 80047b2:	335c      	adds	r3, #92	; 0x5c
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d912      	bls.n	80047e0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	212c      	movs	r1, #44	; 0x2c
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	4413      	add	r3, r2
 80047c6:	335c      	adds	r3, #92	; 0x5c
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	212c      	movs	r1, #44	; 0x2c
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	3360      	adds	r3, #96	; 0x60
 80047da:	2204      	movs	r2, #4
 80047dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047de:	e073      	b.n	80048c8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	212c      	movs	r1, #44	; 0x2c
 80047e6:	fb01 f303 	mul.w	r3, r1, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	3360      	adds	r3, #96	; 0x60
 80047ee:	2202      	movs	r2, #2
 80047f0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004808:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004810:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	461a      	mov	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004824:	e050      	b.n	80048c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	212c      	movs	r1, #44	; 0x2c
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	3361      	adds	r3, #97	; 0x61
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d122      	bne.n	8004880 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	212c      	movs	r1, #44	; 0x2c
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	4413      	add	r3, r2
 8004846:	3360      	adds	r3, #96	; 0x60
 8004848:	2202      	movs	r2, #2
 800484a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4413      	add	r3, r2
 8004854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004862:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800486a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4413      	add	r3, r2
 8004874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004878:	461a      	mov	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e023      	b.n	80048c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	212c      	movs	r1, #44	; 0x2c
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	4413      	add	r3, r2
 800488c:	3361      	adds	r3, #97	; 0x61
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b07      	cmp	r3, #7
 8004892:	d119      	bne.n	80048c8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	212c      	movs	r1, #44	; 0x2c
 800489a:	fb01 f303 	mul.w	r3, r1, r3
 800489e:	4413      	add	r3, r2
 80048a0:	335c      	adds	r3, #92	; 0x5c
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	202c      	movs	r0, #44	; 0x2c
 80048ac:	fb00 f303 	mul.w	r3, r0, r3
 80048b0:	440b      	add	r3, r1
 80048b2:	335c      	adds	r3, #92	; 0x5c
 80048b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	212c      	movs	r1, #44	; 0x2c
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	3360      	adds	r3, #96	; 0x60
 80048c4:	2204      	movs	r2, #4
 80048c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d4:	461a      	mov	r2, r3
 80048d6:	2302      	movs	r3, #2
 80048d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	b2d9      	uxtb	r1, r3
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	202c      	movs	r0, #44	; 0x2c
 80048e4:	fb00 f303 	mul.w	r3, r0, r3
 80048e8:	4413      	add	r3, r2
 80048ea:	3360      	adds	r3, #96	; 0x60
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f005 ff3b 	bl	800a76c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048f6:	e061      	b.n	80049bc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b10      	cmp	r3, #16
 800490c:	d156      	bne.n	80049bc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	212c      	movs	r1, #44	; 0x2c
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	4413      	add	r3, r2
 800491a:	333f      	adds	r3, #63	; 0x3f
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b03      	cmp	r3, #3
 8004920:	d111      	bne.n	8004946 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	212c      	movs	r1, #44	; 0x2c
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	4413      	add	r3, r2
 800492e:	335c      	adds	r3, #92	; 0x5c
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f003 fa61 	bl	8007e06 <USB_HC_Halt>
 8004944:	e031      	b.n	80049aa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	333f      	adds	r3, #63	; 0x3f
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	212c      	movs	r1, #44	; 0x2c
 8004960:	fb01 f303 	mul.w	r3, r1, r3
 8004964:	4413      	add	r3, r2
 8004966:	333f      	adds	r3, #63	; 0x3f
 8004968:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800496a:	2b02      	cmp	r3, #2
 800496c:	d11d      	bne.n	80049aa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	212c      	movs	r1, #44	; 0x2c
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	4413      	add	r3, r2
 800497a:	335c      	adds	r3, #92	; 0x5c
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d110      	bne.n	80049aa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	3361      	adds	r3, #97	; 0x61
 8004996:	2203      	movs	r2, #3
 8004998:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f003 fa2e 	bl	8007e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b6:	461a      	mov	r2, r3
 80049b8:	2310      	movs	r3, #16
 80049ba:	6093      	str	r3, [r2, #8]
}
 80049bc:	bf00      	nop
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d11a      	bne.n	8004a2a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	461a      	mov	r2, r3
 8004a02:	2304      	movs	r3, #4
 8004a04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	212c      	movs	r1, #44	; 0x2c
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	4413      	add	r3, r2
 8004a12:	3361      	adds	r3, #97	; 0x61
 8004a14:	2206      	movs	r2, #6
 8004a16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f003 f9ef 	bl	8007e06 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004a28:	e331      	b.n	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d12e      	bne.n	8004a9e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2320      	movs	r3, #32
 8004a50:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	212c      	movs	r1, #44	; 0x2c
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	333d      	adds	r3, #61	; 0x3d
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	f040 8313 	bne.w	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	212c      	movs	r1, #44	; 0x2c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	333d      	adds	r3, #61	; 0x3d
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	212c      	movs	r1, #44	; 0x2c
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	4413      	add	r3, r2
 8004a86:	3360      	adds	r3, #96	; 0x60
 8004a88:	2202      	movs	r2, #2
 8004a8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f003 f9b5 	bl	8007e06 <USB_HC_Halt>
}
 8004a9c:	e2f7      	b.n	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab4:	d112      	bne.n	8004adc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ac8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f003 f996 	bl	8007e06 <USB_HC_Halt>
}
 8004ada:	e2d8      	b.n	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d140      	bne.n	8004b74 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	335c      	adds	r3, #92	; 0x5c
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d111      	bne.n	8004b3e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	333d      	adds	r3, #61	; 0x3d
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2340      	movs	r3, #64	; 0x40
 8004b3c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	212c      	movs	r1, #44	; 0x2c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3361      	adds	r3, #97	; 0x61
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f003 f94a 	bl	8007e06 <USB_HC_Halt>
}
 8004b72:	e28c      	b.n	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d12c      	bne.n	8004be4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	212c      	movs	r1, #44	; 0x2c
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	3361      	adds	r3, #97	; 0x61
 8004b98:	2204      	movs	r2, #4
 8004b9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	212c      	movs	r1, #44	; 0x2c
 8004ba2:	fb01 f303 	mul.w	r3, r1, r3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	333d      	adds	r3, #61	; 0x3d
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	212c      	movs	r1, #44	; 0x2c
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	4413      	add	r3, r2
 8004bba:	335c      	adds	r3, #92	; 0x5c
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f003 f91b 	bl	8007e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2340      	movs	r3, #64	; 0x40
 8004be0:	6093      	str	r3, [r2, #8]
}
 8004be2:	e254      	b.n	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d11a      	bne.n	8004c30 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c06:	461a      	mov	r2, r3
 8004c08:	2308      	movs	r3, #8
 8004c0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	212c      	movs	r1, #44	; 0x2c
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	4413      	add	r3, r2
 8004c18:	3361      	adds	r3, #97	; 0x61
 8004c1a:	2205      	movs	r2, #5
 8004c1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f003 f8ec 	bl	8007e06 <USB_HC_Halt>
}
 8004c2e:	e22e      	b.n	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d140      	bne.n	8004cc8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	212c      	movs	r1, #44	; 0x2c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	335c      	adds	r3, #92	; 0x5c
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	212c      	movs	r1, #44	; 0x2c
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	3361      	adds	r3, #97	; 0x61
 8004c66:	2203      	movs	r2, #3
 8004c68:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	333d      	adds	r3, #61	; 0x3d
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d112      	bne.n	8004ca4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	212c      	movs	r1, #44	; 0x2c
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	333c      	adds	r3, #60	; 0x3c
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	212c      	movs	r1, #44	; 0x2c
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	333d      	adds	r3, #61	; 0x3d
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f003 f8a9 	bl	8007e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	6093      	str	r3, [r2, #8]
}
 8004cc6:	e1e2      	b.n	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d164      	bne.n	8004da8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d111      	bne.n	8004d0a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	212c      	movs	r1, #44	; 0x2c
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3361      	adds	r3, #97	; 0x61
 8004cf4:	2206      	movs	r2, #6
 8004cf6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f003 f87f 	bl	8007e06 <USB_HC_Halt>
 8004d08:	e044      	b.n	8004d94 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	335c      	adds	r3, #92	; 0x5c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	202c      	movs	r0, #44	; 0x2c
 8004d22:	fb00 f303 	mul.w	r3, r0, r3
 8004d26:	440b      	add	r3, r1
 8004d28:	335c      	adds	r3, #92	; 0x5c
 8004d2a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	212c      	movs	r1, #44	; 0x2c
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	335c      	adds	r3, #92	; 0x5c
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d920      	bls.n	8004d82 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	212c      	movs	r1, #44	; 0x2c
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	335c      	adds	r3, #92	; 0x5c
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3360      	adds	r3, #96	; 0x60
 8004d60:	2204      	movs	r2, #4
 8004d62:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	b2d9      	uxtb	r1, r3
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	202c      	movs	r0, #44	; 0x2c
 8004d6e:	fb00 f303 	mul.w	r3, r0, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	3360      	adds	r3, #96	; 0x60
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f005 fcf6 	bl	800a76c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d80:	e008      	b.n	8004d94 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	212c      	movs	r1, #44	; 0x2c
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3360      	adds	r3, #96	; 0x60
 8004d90:	2202      	movs	r2, #2
 8004d92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da0:	461a      	mov	r2, r3
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	6093      	str	r3, [r2, #8]
}
 8004da6:	e172      	b.n	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbe:	d11b      	bne.n	8004df8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	212c      	movs	r1, #44	; 0x2c
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	4413      	add	r3, r2
 8004dcc:	3361      	adds	r3, #97	; 0x61
 8004dce:	2208      	movs	r2, #8
 8004dd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f003 f812 	bl	8007e06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dee:	461a      	mov	r2, r3
 8004df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df4:	6093      	str	r3, [r2, #8]
}
 8004df6:	e14a      	b.n	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	f040 813f 	bne.w	800508e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	212c      	movs	r1, #44	; 0x2c
 8004e16:	fb01 f303 	mul.w	r3, r1, r3
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3361      	adds	r3, #97	; 0x61
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d17d      	bne.n	8004f20 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	212c      	movs	r1, #44	; 0x2c
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3360      	adds	r3, #96	; 0x60
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	212c      	movs	r1, #44	; 0x2c
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	333f      	adds	r3, #63	; 0x3f
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d00a      	beq.n	8004e60 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	212c      	movs	r1, #44	; 0x2c
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	333f      	adds	r3, #63	; 0x3f
 8004e58:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	f040 8100 	bne.w	8005060 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d113      	bne.n	8004e90 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	212c      	movs	r1, #44	; 0x2c
 8004e6e:	fb01 f303 	mul.w	r3, r1, r3
 8004e72:	4413      	add	r3, r2
 8004e74:	3355      	adds	r3, #85	; 0x55
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f083 0301 	eor.w	r3, r3, #1
 8004e7c:	b2d8      	uxtb	r0, r3
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	3355      	adds	r3, #85	; 0x55
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	f040 80e3 	bne.w	8005060 <HCD_HC_OUT_IRQHandler+0x69c>
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	212c      	movs	r1, #44	; 0x2c
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	334c      	adds	r3, #76	; 0x4c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80d8 	beq.w	8005060 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	212c      	movs	r1, #44	; 0x2c
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	4413      	add	r3, r2
 8004ebc:	334c      	adds	r3, #76	; 0x4c
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	202c      	movs	r0, #44	; 0x2c
 8004ec6:	fb00 f202 	mul.w	r2, r0, r2
 8004eca:	440a      	add	r2, r1
 8004ecc:	3240      	adds	r2, #64	; 0x40
 8004ece:	8812      	ldrh	r2, [r2, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	202c      	movs	r0, #44	; 0x2c
 8004eda:	fb00 f202 	mul.w	r2, r0, r2
 8004ede:	440a      	add	r2, r1
 8004ee0:	3240      	adds	r2, #64	; 0x40
 8004ee2:	8812      	ldrh	r2, [r2, #0]
 8004ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80b5 	beq.w	8005060 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	212c      	movs	r1, #44	; 0x2c
 8004efc:	fb01 f303 	mul.w	r3, r1, r3
 8004f00:	4413      	add	r3, r2
 8004f02:	3355      	adds	r3, #85	; 0x55
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	f083 0301 	eor.w	r3, r3, #1
 8004f0a:	b2d8      	uxtb	r0, r3
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	212c      	movs	r1, #44	; 0x2c
 8004f12:	fb01 f303 	mul.w	r3, r1, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	3355      	adds	r3, #85	; 0x55
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e09f      	b.n	8005060 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	212c      	movs	r1, #44	; 0x2c
 8004f26:	fb01 f303 	mul.w	r3, r1, r3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3361      	adds	r3, #97	; 0x61
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d109      	bne.n	8004f48 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	212c      	movs	r1, #44	; 0x2c
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	3360      	adds	r3, #96	; 0x60
 8004f42:	2202      	movs	r2, #2
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e08b      	b.n	8005060 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	212c      	movs	r1, #44	; 0x2c
 8004f4e:	fb01 f303 	mul.w	r3, r1, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	3361      	adds	r3, #97	; 0x61
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d109      	bne.n	8004f70 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	212c      	movs	r1, #44	; 0x2c
 8004f62:	fb01 f303 	mul.w	r3, r1, r3
 8004f66:	4413      	add	r3, r2
 8004f68:	3360      	adds	r3, #96	; 0x60
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e077      	b.n	8005060 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	212c      	movs	r1, #44	; 0x2c
 8004f76:	fb01 f303 	mul.w	r3, r1, r3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3361      	adds	r3, #97	; 0x61
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b05      	cmp	r3, #5
 8004f82:	d109      	bne.n	8004f98 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	212c      	movs	r1, #44	; 0x2c
 8004f8a:	fb01 f303 	mul.w	r3, r1, r3
 8004f8e:	4413      	add	r3, r2
 8004f90:	3360      	adds	r3, #96	; 0x60
 8004f92:	2205      	movs	r2, #5
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	e063      	b.n	8005060 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	212c      	movs	r1, #44	; 0x2c
 8004f9e:	fb01 f303 	mul.w	r3, r1, r3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	3361      	adds	r3, #97	; 0x61
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b06      	cmp	r3, #6
 8004faa:	d009      	beq.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	212c      	movs	r1, #44	; 0x2c
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3361      	adds	r3, #97	; 0x61
 8004fba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d14f      	bne.n	8005060 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	212c      	movs	r1, #44	; 0x2c
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	335c      	adds	r3, #92	; 0x5c
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	202c      	movs	r0, #44	; 0x2c
 8004fd8:	fb00 f303 	mul.w	r3, r0, r3
 8004fdc:	440b      	add	r3, r1
 8004fde:	335c      	adds	r3, #92	; 0x5c
 8004fe0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	212c      	movs	r1, #44	; 0x2c
 8004fe8:	fb01 f303 	mul.w	r3, r1, r3
 8004fec:	4413      	add	r3, r2
 8004fee:	335c      	adds	r3, #92	; 0x5c
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d912      	bls.n	800501c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	212c      	movs	r1, #44	; 0x2c
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	4413      	add	r3, r2
 8005002:	335c      	adds	r3, #92	; 0x5c
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	212c      	movs	r1, #44	; 0x2c
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	4413      	add	r3, r2
 8005014:	3360      	adds	r3, #96	; 0x60
 8005016:	2204      	movs	r2, #4
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e021      	b.n	8005060 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	212c      	movs	r1, #44	; 0x2c
 8005022:	fb01 f303 	mul.w	r3, r1, r3
 8005026:	4413      	add	r3, r2
 8005028:	3360      	adds	r3, #96	; 0x60
 800502a:	2202      	movs	r2, #2
 800502c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005044:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800504c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	4413      	add	r3, r2
 8005056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505a:	461a      	mov	r2, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	4413      	add	r3, r2
 8005068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506c:	461a      	mov	r2, r3
 800506e:	2302      	movs	r3, #2
 8005070:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	b2d9      	uxtb	r1, r3
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	202c      	movs	r0, #44	; 0x2c
 800507c:	fb00 f303 	mul.w	r3, r0, r3
 8005080:	4413      	add	r3, r2
 8005082:	3360      	adds	r3, #96	; 0x60
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f005 fb6f 	bl	800a76c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800508e:	bf00      	nop
 8005090:	3720      	adds	r7, #32
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b08a      	sub	sp, #40	; 0x28
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	0c5b      	lsrs	r3, r3, #17
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d004      	beq.n	80050dc <HCD_RXQLVL_IRQHandler+0x46>
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	f000 80a9 	beq.w	800522c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80050da:	e0aa      	b.n	8005232 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80a6 	beq.w	8005230 <HCD_RXQLVL_IRQHandler+0x19a>
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	212c      	movs	r1, #44	; 0x2c
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	4413      	add	r3, r2
 80050f0:	3344      	adds	r3, #68	; 0x44
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 809b 	beq.w	8005230 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	212c      	movs	r1, #44	; 0x2c
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	4413      	add	r3, r2
 8005106:	3350      	adds	r3, #80	; 0x50
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	441a      	add	r2, r3
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	202c      	movs	r0, #44	; 0x2c
 8005114:	fb00 f303 	mul.w	r3, r0, r3
 8005118:	440b      	add	r3, r1
 800511a:	334c      	adds	r3, #76	; 0x4c
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d87a      	bhi.n	8005218 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	212c      	movs	r1, #44	; 0x2c
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	4413      	add	r3, r2
 8005132:	3344      	adds	r3, #68	; 0x44
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	b292      	uxth	r2, r2
 800513a:	4619      	mov	r1, r3
 800513c:	f002 f9ba 	bl	80074b4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	212c      	movs	r1, #44	; 0x2c
 8005146:	fb01 f303 	mul.w	r3, r1, r3
 800514a:	4413      	add	r3, r2
 800514c:	3344      	adds	r3, #68	; 0x44
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	441a      	add	r2, r3
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	202c      	movs	r0, #44	; 0x2c
 800515a:	fb00 f303 	mul.w	r3, r0, r3
 800515e:	440b      	add	r3, r1
 8005160:	3344      	adds	r3, #68	; 0x44
 8005162:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	212c      	movs	r1, #44	; 0x2c
 800516a:	fb01 f303 	mul.w	r3, r1, r3
 800516e:	4413      	add	r3, r2
 8005170:	3350      	adds	r3, #80	; 0x50
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	441a      	add	r2, r3
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	202c      	movs	r0, #44	; 0x2c
 800517e:	fb00 f303 	mul.w	r3, r0, r3
 8005182:	440b      	add	r3, r1
 8005184:	3350      	adds	r3, #80	; 0x50
 8005186:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	0cdb      	lsrs	r3, r3, #19
 8005198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800519c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	212c      	movs	r1, #44	; 0x2c
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	4413      	add	r3, r2
 80051aa:	3340      	adds	r3, #64	; 0x40
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d13c      	bne.n	8005230 <HCD_RXQLVL_IRQHandler+0x19a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d039      	beq.n	8005230 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051da:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	461a      	mov	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	212c      	movs	r1, #44	; 0x2c
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	3354      	adds	r3, #84	; 0x54
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	f083 0301 	eor.w	r3, r3, #1
 8005202:	b2d8      	uxtb	r0, r3
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	212c      	movs	r1, #44	; 0x2c
 800520a:	fb01 f303 	mul.w	r3, r1, r3
 800520e:	4413      	add	r3, r2
 8005210:	3354      	adds	r3, #84	; 0x54
 8005212:	4602      	mov	r2, r0
 8005214:	701a      	strb	r2, [r3, #0]
      break;
 8005216:	e00b      	b.n	8005230 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	212c      	movs	r1, #44	; 0x2c
 800521e:	fb01 f303 	mul.w	r3, r1, r3
 8005222:	4413      	add	r3, r2
 8005224:	3360      	adds	r3, #96	; 0x60
 8005226:	2204      	movs	r2, #4
 8005228:	701a      	strb	r2, [r3, #0]
      break;
 800522a:	e001      	b.n	8005230 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005230:	bf00      	nop
  }
}
 8005232:	bf00      	nop
 8005234:	3728      	adds	r7, #40	; 0x28
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b086      	sub	sp, #24
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005266:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b02      	cmp	r3, #2
 8005270:	d10b      	bne.n	800528a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	d102      	bne.n	8005282 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f005 fa59 	bl	800a734 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f043 0302 	orr.w	r3, r3, #2
 8005288:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b08      	cmp	r3, #8
 8005292:	d132      	bne.n	80052fa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f043 0308 	orr.w	r3, r3, #8
 800529a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d126      	bne.n	80052f4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d113      	bne.n	80052d6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80052b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052b8:	d106      	bne.n	80052c8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2102      	movs	r1, #2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f002 fa65 	bl	8007790 <USB_InitFSLSPClkSel>
 80052c6:	e011      	b.n	80052ec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2101      	movs	r1, #1
 80052ce:	4618      	mov	r0, r3
 80052d0:	f002 fa5e 	bl	8007790 <USB_InitFSLSPClkSel>
 80052d4:	e00a      	b.n	80052ec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d106      	bne.n	80052ec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e4:	461a      	mov	r2, r3
 80052e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80052ea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f005 fa4b 	bl	800a788 <HAL_HCD_PortEnabled_Callback>
 80052f2:	e002      	b.n	80052fa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f005 fa55 	bl	800a7a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b20      	cmp	r3, #32
 8005302:	d103      	bne.n	800530c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f043 0320 	orr.w	r3, r3, #32
 800530a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005312:	461a      	mov	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6013      	str	r3, [r2, #0]
}
 8005318:	bf00      	nop
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e267      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d075      	beq.n	800542a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800533e:	4b88      	ldr	r3, [pc, #544]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b04      	cmp	r3, #4
 8005348:	d00c      	beq.n	8005364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800534a:	4b85      	ldr	r3, [pc, #532]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005352:	2b08      	cmp	r3, #8
 8005354:	d112      	bne.n	800537c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005356:	4b82      	ldr	r3, [pc, #520]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005362:	d10b      	bne.n	800537c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	4b7e      	ldr	r3, [pc, #504]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05b      	beq.n	8005428 <HAL_RCC_OscConfig+0x108>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d157      	bne.n	8005428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e242      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005384:	d106      	bne.n	8005394 <HAL_RCC_OscConfig+0x74>
 8005386:	4b76      	ldr	r3, [pc, #472]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a75      	ldr	r2, [pc, #468]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e01d      	b.n	80053d0 <HAL_RCC_OscConfig+0xb0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800539c:	d10c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x98>
 800539e:	4b70      	ldr	r3, [pc, #448]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6f      	ldr	r2, [pc, #444]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	4b6d      	ldr	r3, [pc, #436]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a6c      	ldr	r2, [pc, #432]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e00b      	b.n	80053d0 <HAL_RCC_OscConfig+0xb0>
 80053b8:	4b69      	ldr	r3, [pc, #420]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a68      	ldr	r2, [pc, #416]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4b66      	ldr	r3, [pc, #408]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a65      	ldr	r2, [pc, #404]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d013      	beq.n	8005400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d8:	f7fd ffa4 	bl	8003324 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e0:	f7fd ffa0 	bl	8003324 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e207      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f2:	4b5b      	ldr	r3, [pc, #364]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0xc0>
 80053fe:	e014      	b.n	800542a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005400:	f7fd ff90 	bl	8003324 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005408:	f7fd ff8c 	bl	8003324 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b64      	cmp	r3, #100	; 0x64
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e1f3      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541a:	4b51      	ldr	r3, [pc, #324]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0xe8>
 8005426:	e000      	b.n	800542a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d063      	beq.n	80054fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005436:	4b4a      	ldr	r3, [pc, #296]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005442:	4b47      	ldr	r3, [pc, #284]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800544a:	2b08      	cmp	r3, #8
 800544c:	d11c      	bne.n	8005488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544e:	4b44      	ldr	r3, [pc, #272]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d116      	bne.n	8005488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545a:	4b41      	ldr	r3, [pc, #260]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_RCC_OscConfig+0x152>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d001      	beq.n	8005472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e1c7      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005472:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4937      	ldr	r1, [pc, #220]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005486:	e03a      	b.n	80054fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005490:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_RCC_OscConfig+0x244>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fd ff45 	bl	8003324 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549e:	f7fd ff41 	bl	8003324 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e1a8      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b0:	4b2b      	ldr	r3, [pc, #172]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054bc:	4b28      	ldr	r3, [pc, #160]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	4925      	ldr	r1, [pc, #148]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]
 80054d0:	e015      	b.n	80054fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054d2:	4b24      	ldr	r3, [pc, #144]	; (8005564 <HAL_RCC_OscConfig+0x244>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fd ff24 	bl	8003324 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e0:	f7fd ff20 	bl	8003324 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e187      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f2:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d036      	beq.n	8005578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <HAL_RCC_OscConfig+0x248>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fd ff04 	bl	8003324 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005520:	f7fd ff00 	bl	8003324 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e167      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005532:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x200>
 800553e:	e01b      	b.n	8005578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <HAL_RCC_OscConfig+0x248>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005546:	f7fd feed 	bl	8003324 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554c:	e00e      	b.n	800556c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554e:	f7fd fee9 	bl	8003324 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d907      	bls.n	800556c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e150      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
 8005560:	40023800 	.word	0x40023800
 8005564:	42470000 	.word	0x42470000
 8005568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556c:	4b88      	ldr	r3, [pc, #544]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800556e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ea      	bne.n	800554e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8097 	beq.w	80056b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800558a:	4b81      	ldr	r3, [pc, #516]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	4b7d      	ldr	r3, [pc, #500]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4a7c      	ldr	r2, [pc, #496]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a4:	6413      	str	r3, [r2, #64]	; 0x40
 80055a6:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b6:	4b77      	ldr	r3, [pc, #476]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d118      	bne.n	80055f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055c2:	4b74      	ldr	r3, [pc, #464]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a73      	ldr	r2, [pc, #460]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ce:	f7fd fea9 	bl	8003324 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d6:	f7fd fea5 	bl	8003324 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e10c      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e8:	4b6a      	ldr	r3, [pc, #424]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d106      	bne.n	800560a <HAL_RCC_OscConfig+0x2ea>
 80055fc:	4b64      	ldr	r3, [pc, #400]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005600:	4a63      	ldr	r2, [pc, #396]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6713      	str	r3, [r2, #112]	; 0x70
 8005608:	e01c      	b.n	8005644 <HAL_RCC_OscConfig+0x324>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b05      	cmp	r3, #5
 8005610:	d10c      	bne.n	800562c <HAL_RCC_OscConfig+0x30c>
 8005612:	4b5f      	ldr	r3, [pc, #380]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	4a5e      	ldr	r2, [pc, #376]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005618:	f043 0304 	orr.w	r3, r3, #4
 800561c:	6713      	str	r3, [r2, #112]	; 0x70
 800561e:	4b5c      	ldr	r3, [pc, #368]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005622:	4a5b      	ldr	r2, [pc, #364]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	6713      	str	r3, [r2, #112]	; 0x70
 800562a:	e00b      	b.n	8005644 <HAL_RCC_OscConfig+0x324>
 800562c:	4b58      	ldr	r3, [pc, #352]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a57      	ldr	r2, [pc, #348]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	6713      	str	r3, [r2, #112]	; 0x70
 8005638:	4b55      	ldr	r3, [pc, #340]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800563a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563c:	4a54      	ldr	r2, [pc, #336]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800563e:	f023 0304 	bic.w	r3, r3, #4
 8005642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d015      	beq.n	8005678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fd fe6a 	bl	8003324 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005652:	e00a      	b.n	800566a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005654:	f7fd fe66 	bl	8003324 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e0cb      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	4b49      	ldr	r3, [pc, #292]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0ee      	beq.n	8005654 <HAL_RCC_OscConfig+0x334>
 8005676:	e014      	b.n	80056a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005678:	f7fd fe54 	bl	8003324 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567e:	e00a      	b.n	8005696 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005680:	f7fd fe50 	bl	8003324 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	; 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e0b5      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1ee      	bne.n	8005680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d105      	bne.n	80056b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a8:	4b39      	ldr	r3, [pc, #228]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	4a38      	ldr	r2, [pc, #224]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80a1 	beq.w	8005800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056be:	4b34      	ldr	r3, [pc, #208]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d05c      	beq.n	8005784 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d141      	bne.n	8005756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b31      	ldr	r3, [pc, #196]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fd fe24 	bl	8003324 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fd fe20 	bl	8003324 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e087      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	491b      	ldr	r1, [pc, #108]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005724:	4313      	orrs	r3, r2
 8005726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572e:	f7fd fdf9 	bl	8003324 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005736:	f7fd fdf5 	bl	8003324 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e05c      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x416>
 8005754:	e054      	b.n	8005800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fd fde2 	bl	8003324 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005764:	f7fd fdde 	bl	8003324 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e045      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0x444>
 8005782:	e03d      	b.n	8005800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d107      	bne.n	800579c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e038      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
 8005790:	40023800 	.word	0x40023800
 8005794:	40007000 	.word	0x40007000
 8005798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_RCC_OscConfig+0x4ec>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d028      	beq.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d121      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d11a      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057cc:	4013      	ands	r3, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d111      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	3b01      	subs	r3, #1
 80057e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40023800 	.word	0x40023800

08005810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0cc      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005824:	4b68      	ldr	r3, [pc, #416]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d90c      	bls.n	800584c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b65      	ldr	r3, [pc, #404]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	4b63      	ldr	r3, [pc, #396]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0b8      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d020      	beq.n	800589a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005864:	4b59      	ldr	r3, [pc, #356]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4a58      	ldr	r2, [pc, #352]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800586e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800587c:	4b53      	ldr	r3, [pc, #332]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a52      	ldr	r2, [pc, #328]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005888:	4b50      	ldr	r3, [pc, #320]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	494d      	ldr	r1, [pc, #308]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	4313      	orrs	r3, r2
 8005898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d044      	beq.n	8005930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d119      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e07f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d003      	beq.n	80058ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ce:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e06f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058de:	4b3b      	ldr	r3, [pc, #236]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e067      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ee:	4b37      	ldr	r3, [pc, #220]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f023 0203 	bic.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	4934      	ldr	r1, [pc, #208]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005900:	f7fd fd10 	bl	8003324 <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005906:	e00a      	b.n	800591e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005908:	f7fd fd0c 	bl	8003324 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	; 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e04f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	4b2b      	ldr	r3, [pc, #172]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 020c 	and.w	r2, r3, #12
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	429a      	cmp	r2, r3
 800592e:	d1eb      	bne.n	8005908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005930:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d20c      	bcs.n	8005958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e032      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005964:	4b19      	ldr	r3, [pc, #100]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4916      	ldr	r1, [pc, #88]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	490e      	ldr	r1, [pc, #56]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005996:	f000 f821 	bl	80059dc <HAL_RCC_GetSysClockFreq>
 800599a:	4602      	mov	r2, r0
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	490a      	ldr	r1, [pc, #40]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 80059a8:	5ccb      	ldrb	r3, [r1, r3]
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059b2:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <HAL_RCC_ClockConfig+0x1c8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fd fc70 	bl	800329c <HAL_InitTick>

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023c00 	.word	0x40023c00
 80059cc:	40023800 	.word	0x40023800
 80059d0:	0800e120 	.word	0x0800e120
 80059d4:	20000018 	.word	0x20000018
 80059d8:	2000001c 	.word	0x2000001c

080059dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e0:	b094      	sub	sp, #80	; 0x50
 80059e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	647b      	str	r3, [r7, #68]	; 0x44
 80059e8:	2300      	movs	r3, #0
 80059ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ec:	2300      	movs	r3, #0
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f4:	4b79      	ldr	r3, [pc, #484]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 030c 	and.w	r3, r3, #12
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d00d      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x40>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	f200 80e1 	bhi.w	8005bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x34>
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d003      	beq.n	8005a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a0e:	e0db      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a10:	4b73      	ldr	r3, [pc, #460]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a14:	e0db      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a16:	4b73      	ldr	r3, [pc, #460]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a1a:	e0d8      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a1c:	4b6f      	ldr	r3, [pc, #444]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a26:	4b6d      	ldr	r3, [pc, #436]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d063      	beq.n	8005afa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a32:	4b6a      	ldr	r3, [pc, #424]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	2200      	movs	r2, #0
 8005a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a44:	633b      	str	r3, [r7, #48]	; 0x30
 8005a46:	2300      	movs	r3, #0
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
 8005a4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a4e:	4622      	mov	r2, r4
 8005a50:	462b      	mov	r3, r5
 8005a52:	f04f 0000 	mov.w	r0, #0
 8005a56:	f04f 0100 	mov.w	r1, #0
 8005a5a:	0159      	lsls	r1, r3, #5
 8005a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a60:	0150      	lsls	r0, r2, #5
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4621      	mov	r1, r4
 8005a68:	1a51      	subs	r1, r2, r1
 8005a6a:	6139      	str	r1, [r7, #16]
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a80:	4659      	mov	r1, fp
 8005a82:	018b      	lsls	r3, r1, #6
 8005a84:	4651      	mov	r1, sl
 8005a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a8a:	4651      	mov	r1, sl
 8005a8c:	018a      	lsls	r2, r1, #6
 8005a8e:	4651      	mov	r1, sl
 8005a90:	ebb2 0801 	subs.w	r8, r2, r1
 8005a94:	4659      	mov	r1, fp
 8005a96:	eb63 0901 	sbc.w	r9, r3, r1
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aae:	4690      	mov	r8, r2
 8005ab0:	4699      	mov	r9, r3
 8005ab2:	4623      	mov	r3, r4
 8005ab4:	eb18 0303 	adds.w	r3, r8, r3
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	462b      	mov	r3, r5
 8005abc:	eb49 0303 	adc.w	r3, r9, r3
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ace:	4629      	mov	r1, r5
 8005ad0:	024b      	lsls	r3, r1, #9
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ad8:	4621      	mov	r1, r4
 8005ada:	024a      	lsls	r2, r1, #9
 8005adc:	4610      	mov	r0, r2
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ae8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aec:	f7fb f85c 	bl	8000ba8 <__aeabi_uldivmod>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4613      	mov	r3, r2
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af8:	e058      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afa:	4b38      	ldr	r3, [pc, #224]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	099b      	lsrs	r3, r3, #6
 8005b00:	2200      	movs	r2, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	4611      	mov	r1, r2
 8005b06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	f04f 0000 	mov.w	r0, #0
 8005b1c:	f04f 0100 	mov.w	r1, #0
 8005b20:	0159      	lsls	r1, r3, #5
 8005b22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b26:	0150      	lsls	r0, r2, #5
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4641      	mov	r1, r8
 8005b2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b32:	4649      	mov	r1, r9
 8005b34:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b4c:	ebb2 040a 	subs.w	r4, r2, sl
 8005b50:	eb63 050b 	sbc.w	r5, r3, fp
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	00eb      	lsls	r3, r5, #3
 8005b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b62:	00e2      	lsls	r2, r4, #3
 8005b64:	4614      	mov	r4, r2
 8005b66:	461d      	mov	r5, r3
 8005b68:	4643      	mov	r3, r8
 8005b6a:	18e3      	adds	r3, r4, r3
 8005b6c:	603b      	str	r3, [r7, #0]
 8005b6e:	464b      	mov	r3, r9
 8005b70:	eb45 0303 	adc.w	r3, r5, r3
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b82:	4629      	mov	r1, r5
 8005b84:	028b      	lsls	r3, r1, #10
 8005b86:	4621      	mov	r1, r4
 8005b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	028a      	lsls	r2, r1, #10
 8005b90:	4610      	mov	r0, r2
 8005b92:	4619      	mov	r1, r3
 8005b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b96:	2200      	movs	r2, #0
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	61fa      	str	r2, [r7, #28]
 8005b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba0:	f7fb f802 	bl	8000ba8 <__aeabi_uldivmod>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4613      	mov	r3, r2
 8005baa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bc6:	e002      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3750      	adds	r7, #80	; 0x50
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bda:	bf00      	nop
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	00f42400 	.word	0x00f42400
 8005be4:	007a1200 	.word	0x007a1200

08005be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bec:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8005bee:	681b      	ldr	r3, [r3, #0]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	20000018 	.word	0x20000018

08005c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c04:	f7ff fff0 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	0a9b      	lsrs	r3, r3, #10
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	4903      	ldr	r1, [pc, #12]	; (8005c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c16:	5ccb      	ldrb	r3, [r1, r3]
 8005c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40023800 	.word	0x40023800
 8005c24:	0800e130 	.word	0x0800e130

08005c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c2c:	f7ff ffdc 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c30:	4602      	mov	r2, r0
 8005c32:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	0b5b      	lsrs	r3, r3, #13
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	4903      	ldr	r1, [pc, #12]	; (8005c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c3e:	5ccb      	ldrb	r3, [r1, r3]
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	0800e130 	.word	0x0800e130

08005c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e07b      	b.n	8005d5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d108      	bne.n	8005c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c72:	d009      	beq.n	8005c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	61da      	str	r2, [r3, #28]
 8005c7a:	e005      	b.n	8005c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fd f89a 	bl	8002ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0c:	ea42 0103 	orr.w	r1, r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	f003 0104 	and.w	r1, r3, #4
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	f003 0210 	and.w	r2, r3, #16
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b088      	sub	sp, #32
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_SPI_Transmit+0x22>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e126      	b.n	8005fd2 <HAL_SPI_Transmit+0x270>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d8c:	f7fd faca 	bl	8003324 <HAL_GetTick>
 8005d90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d002      	beq.n	8005da8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
 8005da4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005da6:	e10b      	b.n	8005fc0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_SPI_Transmit+0x52>
 8005dae:	88fb      	ldrh	r3, [r7, #6]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005db8:	e102      	b.n	8005fc0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	88fa      	ldrh	r2, [r7, #6]
 8005dd2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e00:	d10f      	bne.n	8005e22 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d007      	beq.n	8005e40 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e48:	d14b      	bne.n	8005ee2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_SPI_Transmit+0xf6>
 8005e52:	8afb      	ldrh	r3, [r7, #22]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d13e      	bne.n	8005ed6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	881a      	ldrh	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	1c9a      	adds	r2, r3, #2
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e7c:	e02b      	b.n	8005ed6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d112      	bne.n	8005eb2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	881a      	ldrh	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	1c9a      	adds	r2, r3, #2
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	86da      	strh	r2, [r3, #54]	; 0x36
 8005eb0:	e011      	b.n	8005ed6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eb2:	f7fd fa37 	bl	8003324 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d803      	bhi.n	8005eca <HAL_SPI_Transmit+0x168>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d102      	bne.n	8005ed0 <HAL_SPI_Transmit+0x16e>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d102      	bne.n	8005ed6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ed4:	e074      	b.n	8005fc0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1ce      	bne.n	8005e7e <HAL_SPI_Transmit+0x11c>
 8005ee0:	e04c      	b.n	8005f7c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_SPI_Transmit+0x18e>
 8005eea:	8afb      	ldrh	r3, [r7, #22]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d140      	bne.n	8005f72 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	7812      	ldrb	r2, [r2, #0]
 8005efc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f16:	e02c      	b.n	8005f72 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d113      	bne.n	8005f4e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	7812      	ldrb	r2, [r2, #0]
 8005f32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f4c:	e011      	b.n	8005f72 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f4e:	f7fd f9e9 	bl	8003324 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d803      	bhi.n	8005f66 <HAL_SPI_Transmit+0x204>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d102      	bne.n	8005f6c <HAL_SPI_Transmit+0x20a>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f70:	e026      	b.n	8005fc0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1cd      	bne.n	8005f18 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 fa55 	bl	8006430 <SPI_EndRxTxTransaction>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e000      	b.n	8005fc0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005fbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b08c      	sub	sp, #48	; 0x30
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
 8005fe6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_SPI_TransmitReceive+0x26>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e18a      	b.n	8006316 <HAL_SPI_TransmitReceive+0x33c>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006008:	f7fd f98c 	bl	8003324 <HAL_GetTick>
 800600c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800601e:	887b      	ldrh	r3, [r7, #2]
 8006020:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006026:	2b01      	cmp	r3, #1
 8006028:	d00f      	beq.n	800604a <HAL_SPI_TransmitReceive+0x70>
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006030:	d107      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d103      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x68>
 800603a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800603e:	2b04      	cmp	r3, #4
 8006040:	d003      	beq.n	800604a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006042:	2302      	movs	r3, #2
 8006044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006048:	e15b      	b.n	8006302 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_SPI_TransmitReceive+0x82>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <HAL_SPI_TransmitReceive+0x82>
 8006056:	887b      	ldrh	r3, [r7, #2]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d103      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006062:	e14e      	b.n	8006302 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b04      	cmp	r3, #4
 800606e:	d003      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2205      	movs	r2, #5
 8006074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	887a      	ldrh	r2, [r7, #2]
 8006088:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	887a      	ldrh	r2, [r7, #2]
 800608e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	887a      	ldrh	r2, [r7, #2]
 800609a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	887a      	ldrh	r2, [r7, #2]
 80060a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d007      	beq.n	80060cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d4:	d178      	bne.n	80061c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <HAL_SPI_TransmitReceive+0x10a>
 80060de:	8b7b      	ldrh	r3, [r7, #26]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d166      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	881a      	ldrh	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006108:	e053      	b.n	80061b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b02      	cmp	r3, #2
 8006116:	d11b      	bne.n	8006150 <HAL_SPI_TransmitReceive+0x176>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d016      	beq.n	8006150 <HAL_SPI_TransmitReceive+0x176>
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d113      	bne.n	8006150 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	881a      	ldrh	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	1c9a      	adds	r2, r3, #2
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b01      	cmp	r3, #1
 800615c:	d119      	bne.n	8006192 <HAL_SPI_TransmitReceive+0x1b8>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d014      	beq.n	8006192 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	b292      	uxth	r2, r2
 8006174:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	1c9a      	adds	r2, r3, #2
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800618e:	2301      	movs	r3, #1
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006192:	f7fd f8c7 	bl	8003324 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619e:	429a      	cmp	r2, r3
 80061a0:	d807      	bhi.n	80061b2 <HAL_SPI_TransmitReceive+0x1d8>
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d003      	beq.n	80061b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80061b0:	e0a7      	b.n	8006302 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1a6      	bne.n	800610a <HAL_SPI_TransmitReceive+0x130>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1a1      	bne.n	800610a <HAL_SPI_TransmitReceive+0x130>
 80061c6:	e07c      	b.n	80062c2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <HAL_SPI_TransmitReceive+0x1fc>
 80061d0:	8b7b      	ldrh	r3, [r7, #26]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d16b      	bne.n	80062ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	330c      	adds	r3, #12
 80061e0:	7812      	ldrb	r2, [r2, #0]
 80061e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061fc:	e057      	b.n	80062ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b02      	cmp	r3, #2
 800620a:	d11c      	bne.n	8006246 <HAL_SPI_TransmitReceive+0x26c>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d017      	beq.n	8006246 <HAL_SPI_TransmitReceive+0x26c>
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d114      	bne.n	8006246 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	7812      	ldrb	r2, [r2, #0]
 8006228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b01      	cmp	r3, #1
 8006252:	d119      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x2ae>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d014      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006284:	2301      	movs	r3, #1
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006288:	f7fd f84c 	bl	8003324 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006294:	429a      	cmp	r2, r3
 8006296:	d803      	bhi.n	80062a0 <HAL_SPI_TransmitReceive+0x2c6>
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d102      	bne.n	80062a6 <HAL_SPI_TransmitReceive+0x2cc>
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d103      	bne.n	80062ae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062ac:	e029      	b.n	8006302 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1a2      	bne.n	80061fe <HAL_SPI_TransmitReceive+0x224>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d19d      	bne.n	80061fe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f8b2 	bl	8006430 <SPI_EndRxTxTransaction>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d006      	beq.n	80062e0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80062de:	e010      	b.n	8006302 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10b      	bne.n	8006300 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	e000      	b.n	8006302 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006300:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006316:	4618      	mov	r0, r3
 8006318:	3730      	adds	r7, #48	; 0x30
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006330:	f7fc fff8 	bl	8003324 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	4413      	add	r3, r2
 800633e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006340:	f7fc fff0 	bl	8003324 <HAL_GetTick>
 8006344:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006346:	4b39      	ldr	r3, [pc, #228]	; (800642c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	015b      	lsls	r3, r3, #5
 800634c:	0d1b      	lsrs	r3, r3, #20
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	fb02 f303 	mul.w	r3, r2, r3
 8006354:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006356:	e054      	b.n	8006402 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d050      	beq.n	8006402 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006360:	f7fc ffe0 	bl	8003324 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	429a      	cmp	r2, r3
 800636e:	d902      	bls.n	8006376 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d13d      	bne.n	80063f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800638e:	d111      	bne.n	80063b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006398:	d004      	beq.n	80063a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a2:	d107      	bne.n	80063b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063bc:	d10f      	bne.n	80063de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e017      	b.n	8006422 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	3b01      	subs	r3, #1
 8006400:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4013      	ands	r3, r2
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	429a      	cmp	r2, r3
 8006410:	bf0c      	ite	eq
 8006412:	2301      	moveq	r3, #1
 8006414:	2300      	movne	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	429a      	cmp	r2, r3
 800641e:	d19b      	bne.n	8006358 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3720      	adds	r7, #32
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000018 	.word	0x20000018

08006430 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af02      	add	r7, sp, #8
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800643c:	4b1b      	ldr	r3, [pc, #108]	; (80064ac <SPI_EndRxTxTransaction+0x7c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <SPI_EndRxTxTransaction+0x80>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	0d5b      	lsrs	r3, r3, #21
 8006448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800644c:	fb02 f303 	mul.w	r3, r2, r3
 8006450:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800645a:	d112      	bne.n	8006482 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	2180      	movs	r1, #128	; 0x80
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff ff5a 	bl	8006320 <SPI_WaitFlagStateUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e00f      	b.n	80064a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	3b01      	subs	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006498:	2b80      	cmp	r3, #128	; 0x80
 800649a:	d0f2      	beq.n	8006482 <SPI_EndRxTxTransaction+0x52>
 800649c:	e000      	b.n	80064a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800649e:	bf00      	nop
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000018 	.word	0x20000018
 80064b0:	165e9f81 	.word	0x165e9f81

080064b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e041      	b.n	800654a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fc fd1c 	bl	8002f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f000 f8f4 	bl	80066e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_TIM_ConfigClockSource+0x1c>
 800656a:	2302      	movs	r3, #2
 800656c:	e0b4      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x186>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800658c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006594:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a6:	d03e      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0xd4>
 80065a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ac:	f200 8087 	bhi.w	80066be <HAL_TIM_ConfigClockSource+0x16c>
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b4:	f000 8086 	beq.w	80066c4 <HAL_TIM_ConfigClockSource+0x172>
 80065b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065bc:	d87f      	bhi.n	80066be <HAL_TIM_ConfigClockSource+0x16c>
 80065be:	2b70      	cmp	r3, #112	; 0x70
 80065c0:	d01a      	beq.n	80065f8 <HAL_TIM_ConfigClockSource+0xa6>
 80065c2:	2b70      	cmp	r3, #112	; 0x70
 80065c4:	d87b      	bhi.n	80066be <HAL_TIM_ConfigClockSource+0x16c>
 80065c6:	2b60      	cmp	r3, #96	; 0x60
 80065c8:	d050      	beq.n	800666c <HAL_TIM_ConfigClockSource+0x11a>
 80065ca:	2b60      	cmp	r3, #96	; 0x60
 80065cc:	d877      	bhi.n	80066be <HAL_TIM_ConfigClockSource+0x16c>
 80065ce:	2b50      	cmp	r3, #80	; 0x50
 80065d0:	d03c      	beq.n	800664c <HAL_TIM_ConfigClockSource+0xfa>
 80065d2:	2b50      	cmp	r3, #80	; 0x50
 80065d4:	d873      	bhi.n	80066be <HAL_TIM_ConfigClockSource+0x16c>
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d058      	beq.n	800668c <HAL_TIM_ConfigClockSource+0x13a>
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d86f      	bhi.n	80066be <HAL_TIM_ConfigClockSource+0x16c>
 80065de:	2b30      	cmp	r3, #48	; 0x30
 80065e0:	d064      	beq.n	80066ac <HAL_TIM_ConfigClockSource+0x15a>
 80065e2:	2b30      	cmp	r3, #48	; 0x30
 80065e4:	d86b      	bhi.n	80066be <HAL_TIM_ConfigClockSource+0x16c>
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d060      	beq.n	80066ac <HAL_TIM_ConfigClockSource+0x15a>
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d867      	bhi.n	80066be <HAL_TIM_ConfigClockSource+0x16c>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d05c      	beq.n	80066ac <HAL_TIM_ConfigClockSource+0x15a>
 80065f2:	2b10      	cmp	r3, #16
 80065f4:	d05a      	beq.n	80066ac <HAL_TIM_ConfigClockSource+0x15a>
 80065f6:	e062      	b.n	80066be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	6899      	ldr	r1, [r3, #8]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f000 f984 	bl	8006914 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800661a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	609a      	str	r2, [r3, #8]
      break;
 8006624:	e04f      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	6899      	ldr	r1, [r3, #8]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f000 f96d 	bl	8006914 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006648:	609a      	str	r2, [r3, #8]
      break;
 800664a:	e03c      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	6859      	ldr	r1, [r3, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	461a      	mov	r2, r3
 800665a:	f000 f8e1 	bl	8006820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2150      	movs	r1, #80	; 0x50
 8006664:	4618      	mov	r0, r3
 8006666:	f000 f93a 	bl	80068de <TIM_ITRx_SetConfig>
      break;
 800666a:	e02c      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	6859      	ldr	r1, [r3, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	461a      	mov	r2, r3
 800667a:	f000 f900 	bl	800687e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2160      	movs	r1, #96	; 0x60
 8006684:	4618      	mov	r0, r3
 8006686:	f000 f92a 	bl	80068de <TIM_ITRx_SetConfig>
      break;
 800668a:	e01c      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	461a      	mov	r2, r3
 800669a:	f000 f8c1 	bl	8006820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2140      	movs	r1, #64	; 0x40
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 f91a 	bl	80068de <TIM_ITRx_SetConfig>
      break;
 80066aa:	e00c      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f000 f911 	bl	80068de <TIM_ITRx_SetConfig>
      break;
 80066bc:	e003      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	73fb      	strb	r3, [r7, #15]
      break;
 80066c2:	e000      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a40      	ldr	r2, [pc, #256]	; (80067f4 <TIM_Base_SetConfig+0x114>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d013      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fe:	d00f      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a3d      	ldr	r2, [pc, #244]	; (80067f8 <TIM_Base_SetConfig+0x118>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00b      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a3c      	ldr	r2, [pc, #240]	; (80067fc <TIM_Base_SetConfig+0x11c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d007      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a3b      	ldr	r2, [pc, #236]	; (8006800 <TIM_Base_SetConfig+0x120>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a3a      	ldr	r2, [pc, #232]	; (8006804 <TIM_Base_SetConfig+0x124>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d108      	bne.n	8006732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2f      	ldr	r2, [pc, #188]	; (80067f4 <TIM_Base_SetConfig+0x114>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d02b      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006740:	d027      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2c      	ldr	r2, [pc, #176]	; (80067f8 <TIM_Base_SetConfig+0x118>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d023      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2b      	ldr	r2, [pc, #172]	; (80067fc <TIM_Base_SetConfig+0x11c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01f      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <TIM_Base_SetConfig+0x120>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01b      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a29      	ldr	r2, [pc, #164]	; (8006804 <TIM_Base_SetConfig+0x124>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d017      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a28      	ldr	r2, [pc, #160]	; (8006808 <TIM_Base_SetConfig+0x128>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a27      	ldr	r2, [pc, #156]	; (800680c <TIM_Base_SetConfig+0x12c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00f      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a26      	ldr	r2, [pc, #152]	; (8006810 <TIM_Base_SetConfig+0x130>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a25      	ldr	r2, [pc, #148]	; (8006814 <TIM_Base_SetConfig+0x134>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a24      	ldr	r2, [pc, #144]	; (8006818 <TIM_Base_SetConfig+0x138>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a23      	ldr	r2, [pc, #140]	; (800681c <TIM_Base_SetConfig+0x13c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d108      	bne.n	80067a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a0a      	ldr	r2, [pc, #40]	; (80067f4 <TIM_Base_SetConfig+0x114>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_Base_SetConfig+0xf8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a0c      	ldr	r2, [pc, #48]	; (8006804 <TIM_Base_SetConfig+0x124>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d103      	bne.n	80067e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	615a      	str	r2, [r3, #20]
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40000400 	.word	0x40000400
 80067fc:	40000800 	.word	0x40000800
 8006800:	40000c00 	.word	0x40000c00
 8006804:	40010400 	.word	0x40010400
 8006808:	40014000 	.word	0x40014000
 800680c:	40014400 	.word	0x40014400
 8006810:	40014800 	.word	0x40014800
 8006814:	40001800 	.word	0x40001800
 8006818:	40001c00 	.word	0x40001c00
 800681c:	40002000 	.word	0x40002000

08006820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f023 0201 	bic.w	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800684a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f023 030a 	bic.w	r3, r3, #10
 800685c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800687e:	b480      	push	{r7}
 8006880:	b087      	sub	sp, #28
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f023 0210 	bic.w	r2, r3, #16
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	031b      	lsls	r3, r3, #12
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f043 0307 	orr.w	r3, r3, #7
 8006900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	609a      	str	r2, [r3, #8]
}
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800692e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	021a      	lsls	r2, r3, #8
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	431a      	orrs	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4313      	orrs	r3, r2
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	609a      	str	r2, [r3, #8]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006968:	2302      	movs	r3, #2
 800696a:	e05a      	b.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a21      	ldr	r2, [pc, #132]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d022      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b8:	d01d      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1d      	ldr	r2, [pc, #116]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d018      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1a      	ldr	r2, [pc, #104]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00e      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a18      	ldr	r2, [pc, #96]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d009      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a17      	ldr	r2, [pc, #92]	; (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d10c      	bne.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40000400 	.word	0x40000400
 8006a38:	40000800 	.word	0x40000800
 8006a3c:	40000c00 	.word	0x40000c00
 8006a40:	40010400 	.word	0x40010400
 8006a44:	40014000 	.word	0x40014000
 8006a48:	40001800 	.word	0x40001800

08006a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e03f      	b.n	8006ade <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fc fa72 	bl	8002f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2224      	movs	r2, #36	; 0x24
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f929 	bl	8006ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695a      	ldr	r2, [r3, #20]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b08a      	sub	sp, #40	; 0x28
 8006aea:	af02      	add	r7, sp, #8
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	603b      	str	r3, [r7, #0]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d17c      	bne.n	8006c00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <HAL_UART_Transmit+0x2c>
 8006b0c:	88fb      	ldrh	r3, [r7, #6]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e075      	b.n	8006c02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_UART_Transmit+0x3e>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e06e      	b.n	8006c02 <HAL_UART_Transmit+0x11c>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2221      	movs	r2, #33	; 0x21
 8006b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b3a:	f7fc fbf3 	bl	8003324 <HAL_GetTick>
 8006b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	88fa      	ldrh	r2, [r7, #6]
 8006b44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b54:	d108      	bne.n	8006b68 <HAL_UART_Transmit+0x82>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	e003      	b.n	8006b70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b78:	e02a      	b.n	8006bd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2200      	movs	r2, #0
 8006b82:	2180      	movs	r1, #128	; 0x80
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f840 	bl	8006c0a <UART_WaitOnFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e036      	b.n	8006c02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	3302      	adds	r3, #2
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	e007      	b.n	8006bc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	781a      	ldrb	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1cf      	bne.n	8006b7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2200      	movs	r2, #0
 8006be2:	2140      	movs	r1, #64	; 0x40
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f810 	bl	8006c0a <UART_WaitOnFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e006      	b.n	8006c02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	e000      	b.n	8006c02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c00:	2302      	movs	r3, #2
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b090      	sub	sp, #64	; 0x40
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	603b      	str	r3, [r7, #0]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1a:	e050      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d04c      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <UART_WaitOnFlagUntilTimeout+0x30>
 8006c2a:	f7fc fb7b 	bl	8003324 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d241      	bcs.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	330c      	adds	r3, #12
 8006c40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c5a:	637a      	str	r2, [r7, #52]	; 0x34
 8006c5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e5      	bne.n	8006c3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3314      	adds	r3, #20
 8006c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3314      	adds	r3, #20
 8006c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c8e:	623a      	str	r2, [r7, #32]
 8006c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	69f9      	ldr	r1, [r7, #28]
 8006c94:	6a3a      	ldr	r2, [r7, #32]
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e5      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e00f      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	bf0c      	ite	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	2300      	movne	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d09f      	beq.n	8006c1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3740      	adds	r7, #64	; 0x40
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cec:	b0c0      	sub	sp, #256	; 0x100
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d04:	68d9      	ldr	r1, [r3, #12]
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	ea40 0301 	orr.w	r3, r0, r1
 8006d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d40:	f021 010c 	bic.w	r1, r1, #12
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d62:	6999      	ldr	r1, [r3, #24]
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	ea40 0301 	orr.w	r3, r0, r1
 8006d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b8f      	ldr	r3, [pc, #572]	; (8006fb4 <UART_SetConfig+0x2cc>)
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d005      	beq.n	8006d88 <UART_SetConfig+0xa0>
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b8d      	ldr	r3, [pc, #564]	; (8006fb8 <UART_SetConfig+0x2d0>)
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d104      	bne.n	8006d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d88:	f7fe ff4e 	bl	8005c28 <HAL_RCC_GetPCLK2Freq>
 8006d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d90:	e003      	b.n	8006d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d92:	f7fe ff35 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8006d96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da4:	f040 810c 	bne.w	8006fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006db2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006dba:	4622      	mov	r2, r4
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	1891      	adds	r1, r2, r2
 8006dc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006dc2:	415b      	adcs	r3, r3
 8006dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006dca:	4621      	mov	r1, r4
 8006dcc:	eb12 0801 	adds.w	r8, r2, r1
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	eb43 0901 	adc.w	r9, r3, r1
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dea:	4690      	mov	r8, r2
 8006dec:	4699      	mov	r9, r3
 8006dee:	4623      	mov	r3, r4
 8006df0:	eb18 0303 	adds.w	r3, r8, r3
 8006df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006df8:	462b      	mov	r3, r5
 8006dfa:	eb49 0303 	adc.w	r3, r9, r3
 8006dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e16:	460b      	mov	r3, r1
 8006e18:	18db      	adds	r3, r3, r3
 8006e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	eb42 0303 	adc.w	r3, r2, r3
 8006e22:	657b      	str	r3, [r7, #84]	; 0x54
 8006e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e2c:	f7f9 febc 	bl	8000ba8 <__aeabi_uldivmod>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4b61      	ldr	r3, [pc, #388]	; (8006fbc <UART_SetConfig+0x2d4>)
 8006e36:	fba3 2302 	umull	r2, r3, r3, r2
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	011c      	lsls	r4, r3, #4
 8006e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	1891      	adds	r1, r2, r2
 8006e56:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e58:	415b      	adcs	r3, r3
 8006e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e60:	4641      	mov	r1, r8
 8006e62:	eb12 0a01 	adds.w	sl, r2, r1
 8006e66:	4649      	mov	r1, r9
 8006e68:	eb43 0b01 	adc.w	fp, r3, r1
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e80:	4692      	mov	sl, r2
 8006e82:	469b      	mov	fp, r3
 8006e84:	4643      	mov	r3, r8
 8006e86:	eb1a 0303 	adds.w	r3, sl, r3
 8006e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e8e:	464b      	mov	r3, r9
 8006e90:	eb4b 0303 	adc.w	r3, fp, r3
 8006e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006eac:	460b      	mov	r3, r1
 8006eae:	18db      	adds	r3, r3, r3
 8006eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	eb42 0303 	adc.w	r3, r2, r3
 8006eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ec2:	f7f9 fe71 	bl	8000ba8 <__aeabi_uldivmod>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4b3b      	ldr	r3, [pc, #236]	; (8006fbc <UART_SetConfig+0x2d4>)
 8006ece:	fba3 2301 	umull	r2, r3, r3, r1
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	2264      	movs	r2, #100	; 0x64
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	1acb      	subs	r3, r1, r3
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ee2:	4b36      	ldr	r3, [pc, #216]	; (8006fbc <UART_SetConfig+0x2d4>)
 8006ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ef0:	441c      	add	r4, r3
 8006ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006efc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f04:	4642      	mov	r2, r8
 8006f06:	464b      	mov	r3, r9
 8006f08:	1891      	adds	r1, r2, r2
 8006f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f0c:	415b      	adcs	r3, r3
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f14:	4641      	mov	r1, r8
 8006f16:	1851      	adds	r1, r2, r1
 8006f18:	6339      	str	r1, [r7, #48]	; 0x30
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	414b      	adcs	r3, r1
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f2c:	4659      	mov	r1, fp
 8006f2e:	00cb      	lsls	r3, r1, #3
 8006f30:	4651      	mov	r1, sl
 8006f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f36:	4651      	mov	r1, sl
 8006f38:	00ca      	lsls	r2, r1, #3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4642      	mov	r2, r8
 8006f42:	189b      	adds	r3, r3, r2
 8006f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f48:	464b      	mov	r3, r9
 8006f4a:	460a      	mov	r2, r1
 8006f4c:	eb42 0303 	adc.w	r3, r2, r3
 8006f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f68:	460b      	mov	r3, r1
 8006f6a:	18db      	adds	r3, r3, r3
 8006f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f6e:	4613      	mov	r3, r2
 8006f70:	eb42 0303 	adc.w	r3, r2, r3
 8006f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f7e:	f7f9 fe13 	bl	8000ba8 <__aeabi_uldivmod>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <UART_SetConfig+0x2d4>)
 8006f88:	fba3 1302 	umull	r1, r3, r3, r2
 8006f8c:	095b      	lsrs	r3, r3, #5
 8006f8e:	2164      	movs	r1, #100	; 0x64
 8006f90:	fb01 f303 	mul.w	r3, r1, r3
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	3332      	adds	r3, #50	; 0x32
 8006f9a:	4a08      	ldr	r2, [pc, #32]	; (8006fbc <UART_SetConfig+0x2d4>)
 8006f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	f003 0207 	and.w	r2, r3, #7
 8006fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4422      	add	r2, r4
 8006fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fb0:	e105      	b.n	80071be <UART_SetConfig+0x4d6>
 8006fb2:	bf00      	nop
 8006fb4:	40011000 	.word	0x40011000
 8006fb8:	40011400 	.word	0x40011400
 8006fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	464b      	mov	r3, r9
 8006fd6:	1891      	adds	r1, r2, r2
 8006fd8:	6239      	str	r1, [r7, #32]
 8006fda:	415b      	adcs	r3, r3
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	1854      	adds	r4, r2, r1
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	eb43 0501 	adc.w	r5, r3, r1
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	00eb      	lsls	r3, r5, #3
 8006ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ffa:	00e2      	lsls	r2, r4, #3
 8006ffc:	4614      	mov	r4, r2
 8006ffe:	461d      	mov	r5, r3
 8007000:	4643      	mov	r3, r8
 8007002:	18e3      	adds	r3, r4, r3
 8007004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007008:	464b      	mov	r3, r9
 800700a:	eb45 0303 	adc.w	r3, r5, r3
 800700e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800701e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800702e:	4629      	mov	r1, r5
 8007030:	008b      	lsls	r3, r1, #2
 8007032:	4621      	mov	r1, r4
 8007034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007038:	4621      	mov	r1, r4
 800703a:	008a      	lsls	r2, r1, #2
 800703c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007040:	f7f9 fdb2 	bl	8000ba8 <__aeabi_uldivmod>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4b60      	ldr	r3, [pc, #384]	; (80071cc <UART_SetConfig+0x4e4>)
 800704a:	fba3 2302 	umull	r2, r3, r3, r2
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	011c      	lsls	r4, r3, #4
 8007052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007056:	2200      	movs	r2, #0
 8007058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800705c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007064:	4642      	mov	r2, r8
 8007066:	464b      	mov	r3, r9
 8007068:	1891      	adds	r1, r2, r2
 800706a:	61b9      	str	r1, [r7, #24]
 800706c:	415b      	adcs	r3, r3
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007074:	4641      	mov	r1, r8
 8007076:	1851      	adds	r1, r2, r1
 8007078:	6139      	str	r1, [r7, #16]
 800707a:	4649      	mov	r1, r9
 800707c:	414b      	adcs	r3, r1
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800708c:	4659      	mov	r1, fp
 800708e:	00cb      	lsls	r3, r1, #3
 8007090:	4651      	mov	r1, sl
 8007092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007096:	4651      	mov	r1, sl
 8007098:	00ca      	lsls	r2, r1, #3
 800709a:	4610      	mov	r0, r2
 800709c:	4619      	mov	r1, r3
 800709e:	4603      	mov	r3, r0
 80070a0:	4642      	mov	r2, r8
 80070a2:	189b      	adds	r3, r3, r2
 80070a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070a8:	464b      	mov	r3, r9
 80070aa:	460a      	mov	r2, r1
 80070ac:	eb42 0303 	adc.w	r3, r2, r3
 80070b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80070be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80070cc:	4649      	mov	r1, r9
 80070ce:	008b      	lsls	r3, r1, #2
 80070d0:	4641      	mov	r1, r8
 80070d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d6:	4641      	mov	r1, r8
 80070d8:	008a      	lsls	r2, r1, #2
 80070da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80070de:	f7f9 fd63 	bl	8000ba8 <__aeabi_uldivmod>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4b39      	ldr	r3, [pc, #228]	; (80071cc <UART_SetConfig+0x4e4>)
 80070e8:	fba3 1302 	umull	r1, r3, r3, r2
 80070ec:	095b      	lsrs	r3, r3, #5
 80070ee:	2164      	movs	r1, #100	; 0x64
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	3332      	adds	r3, #50	; 0x32
 80070fa:	4a34      	ldr	r2, [pc, #208]	; (80071cc <UART_SetConfig+0x4e4>)
 80070fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007106:	441c      	add	r4, r3
 8007108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800710c:	2200      	movs	r2, #0
 800710e:	673b      	str	r3, [r7, #112]	; 0x70
 8007110:	677a      	str	r2, [r7, #116]	; 0x74
 8007112:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007116:	4642      	mov	r2, r8
 8007118:	464b      	mov	r3, r9
 800711a:	1891      	adds	r1, r2, r2
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	415b      	adcs	r3, r3
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007126:	4641      	mov	r1, r8
 8007128:	1851      	adds	r1, r2, r1
 800712a:	6039      	str	r1, [r7, #0]
 800712c:	4649      	mov	r1, r9
 800712e:	414b      	adcs	r3, r1
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	f04f 0200 	mov.w	r2, #0
 8007136:	f04f 0300 	mov.w	r3, #0
 800713a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800713e:	4659      	mov	r1, fp
 8007140:	00cb      	lsls	r3, r1, #3
 8007142:	4651      	mov	r1, sl
 8007144:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007148:	4651      	mov	r1, sl
 800714a:	00ca      	lsls	r2, r1, #3
 800714c:	4610      	mov	r0, r2
 800714e:	4619      	mov	r1, r3
 8007150:	4603      	mov	r3, r0
 8007152:	4642      	mov	r2, r8
 8007154:	189b      	adds	r3, r3, r2
 8007156:	66bb      	str	r3, [r7, #104]	; 0x68
 8007158:	464b      	mov	r3, r9
 800715a:	460a      	mov	r2, r1
 800715c:	eb42 0303 	adc.w	r3, r2, r3
 8007160:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	663b      	str	r3, [r7, #96]	; 0x60
 800716c:	667a      	str	r2, [r7, #100]	; 0x64
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800717a:	4649      	mov	r1, r9
 800717c:	008b      	lsls	r3, r1, #2
 800717e:	4641      	mov	r1, r8
 8007180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007184:	4641      	mov	r1, r8
 8007186:	008a      	lsls	r2, r1, #2
 8007188:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800718c:	f7f9 fd0c 	bl	8000ba8 <__aeabi_uldivmod>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4b0d      	ldr	r3, [pc, #52]	; (80071cc <UART_SetConfig+0x4e4>)
 8007196:	fba3 1302 	umull	r1, r3, r3, r2
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	2164      	movs	r1, #100	; 0x64
 800719e:	fb01 f303 	mul.w	r3, r1, r3
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	3332      	adds	r3, #50	; 0x32
 80071a8:	4a08      	ldr	r2, [pc, #32]	; (80071cc <UART_SetConfig+0x4e4>)
 80071aa:	fba2 2303 	umull	r2, r3, r2, r3
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	f003 020f 	and.w	r2, r3, #15
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4422      	add	r2, r4
 80071bc:	609a      	str	r2, [r3, #8]
}
 80071be:	bf00      	nop
 80071c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80071c4:	46bd      	mov	sp, r7
 80071c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ca:	bf00      	nop
 80071cc:	51eb851f 	.word	0x51eb851f

080071d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071d0:	b084      	sub	sp, #16
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	f107 001c 	add.w	r0, r7, #28
 80071de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d122      	bne.n	800722e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80071fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007212:	2b01      	cmp	r3, #1
 8007214:	d105      	bne.n	8007222 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f9c0 	bl	80075a8 <USB_CoreReset>
 8007228:	4603      	mov	r3, r0
 800722a:	73fb      	strb	r3, [r7, #15]
 800722c:	e01a      	b.n	8007264 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f9b4 	bl	80075a8 <USB_CoreReset>
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	d106      	bne.n	8007258 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	639a      	str	r2, [r3, #56]	; 0x38
 8007256:	e005      	b.n	8007264 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	2b01      	cmp	r3, #1
 8007268:	d10b      	bne.n	8007282 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f043 0206 	orr.w	r2, r3, #6
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f043 0220 	orr.w	r2, r3, #32
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800728e:	b004      	add	sp, #16
 8007290:	4770      	bx	lr

08007292 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f043 0201 	orr.w	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f023 0201 	bic.w	r2, r3, #1
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072f2:	78fb      	ldrb	r3, [r7, #3]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d115      	bne.n	8007324 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007304:	2001      	movs	r0, #1
 8007306:	f7fc f819 	bl	800333c <HAL_Delay>
      ms++;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3301      	adds	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f93a 	bl	800758a <USB_GetMode>
 8007316:	4603      	mov	r3, r0
 8007318:	2b01      	cmp	r3, #1
 800731a:	d01e      	beq.n	800735a <USB_SetCurrentMode+0x84>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b31      	cmp	r3, #49	; 0x31
 8007320:	d9f0      	bls.n	8007304 <USB_SetCurrentMode+0x2e>
 8007322:	e01a      	b.n	800735a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d115      	bne.n	8007356 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007336:	2001      	movs	r0, #1
 8007338:	f7fc f800 	bl	800333c <HAL_Delay>
      ms++;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3301      	adds	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f921 	bl	800758a <USB_GetMode>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <USB_SetCurrentMode+0x84>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b31      	cmp	r3, #49	; 0x31
 8007352:	d9f0      	bls.n	8007336 <USB_SetCurrentMode+0x60>
 8007354:	e001      	b.n	800735a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e005      	b.n	8007366 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b32      	cmp	r3, #50	; 0x32
 800735e:	d101      	bne.n	8007364 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4a13      	ldr	r2, [pc, #76]	; (80073d4 <USB_FlushTxFifo+0x64>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d901      	bls.n	8007390 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e01b      	b.n	80073c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	daf2      	bge.n	800737e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	019b      	lsls	r3, r3, #6
 80073a0:	f043 0220 	orr.w	r2, r3, #32
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <USB_FlushTxFifo+0x64>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d901      	bls.n	80073ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e006      	b.n	80073c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d0f0      	beq.n	80073a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	00030d40 	.word	0x00030d40

080073d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3301      	adds	r3, #1
 80073e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4a11      	ldr	r2, [pc, #68]	; (8007434 <USB_FlushRxFifo+0x5c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d901      	bls.n	80073f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e018      	b.n	8007428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	daf2      	bge.n	80073e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2210      	movs	r2, #16
 8007406:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3301      	adds	r3, #1
 800740c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4a08      	ldr	r2, [pc, #32]	; (8007434 <USB_FlushRxFifo+0x5c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e006      	b.n	8007428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f003 0310 	and.w	r3, r3, #16
 8007422:	2b10      	cmp	r3, #16
 8007424:	d0f0      	beq.n	8007408 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	00030d40 	.word	0x00030d40

08007438 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007438:	b480      	push	{r7}
 800743a:	b089      	sub	sp, #36	; 0x24
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4611      	mov	r1, r2
 8007444:	461a      	mov	r2, r3
 8007446:	460b      	mov	r3, r1
 8007448:	71fb      	strb	r3, [r7, #7]
 800744a:	4613      	mov	r3, r2
 800744c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007456:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d123      	bne.n	80074a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800745e:	88bb      	ldrh	r3, [r7, #4]
 8007460:	3303      	adds	r3, #3
 8007462:	089b      	lsrs	r3, r3, #2
 8007464:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007466:	2300      	movs	r3, #0
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	e018      	b.n	800749e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	031a      	lsls	r2, r3, #12
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	4413      	add	r3, r2
 8007474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007478:	461a      	mov	r2, r3
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	3301      	adds	r3, #1
 8007484:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	3301      	adds	r3, #1
 800748a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	3301      	adds	r3, #1
 8007490:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	3301      	adds	r3, #1
 8007496:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	3301      	adds	r3, #1
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d3e2      	bcc.n	800746c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3724      	adds	r7, #36	; 0x24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b08b      	sub	sp, #44	; 0x2c
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	089b      	lsrs	r3, r3, #2
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074da:	2300      	movs	r3, #0
 80074dc:	623b      	str	r3, [r7, #32]
 80074de:	e014      	b.n	800750a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	3301      	adds	r3, #1
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	3301      	adds	r3, #1
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	3301      	adds	r3, #1
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	3301      	adds	r3, #1
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	3301      	adds	r3, #1
 8007508:	623b      	str	r3, [r7, #32]
 800750a:	6a3a      	ldr	r2, [r7, #32]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	429a      	cmp	r2, r3
 8007510:	d3e6      	bcc.n	80074e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007512:	8bfb      	ldrh	r3, [r7, #30]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01e      	beq.n	8007556 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007522:	461a      	mov	r2, r3
 8007524:	f107 0310 	add.w	r3, r7, #16
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	fa22 f303 	lsr.w	r3, r2, r3
 8007538:	b2da      	uxtb	r2, r3
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	701a      	strb	r2, [r3, #0]
      i++;
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	3301      	adds	r3, #1
 8007542:	623b      	str	r3, [r7, #32]
      pDest++;
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	3301      	adds	r3, #1
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800754a:	8bfb      	ldrh	r3, [r7, #30]
 800754c:	3b01      	subs	r3, #1
 800754e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007550:	8bfb      	ldrh	r3, [r7, #30]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1ea      	bne.n	800752c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007558:	4618      	mov	r0, r3
 800755a:	372c      	adds	r7, #44	; 0x2c
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4013      	ands	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800757c:	68fb      	ldr	r3, [r7, #12]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	f003 0301 	and.w	r3, r3, #1
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4a13      	ldr	r2, [pc, #76]	; (800760c <USB_CoreReset+0x64>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d901      	bls.n	80075c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e01b      	b.n	80075fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	daf2      	bge.n	80075b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f043 0201 	orr.w	r2, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3301      	adds	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4a09      	ldr	r2, [pc, #36]	; (800760c <USB_CoreReset+0x64>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d901      	bls.n	80075f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e006      	b.n	80075fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d0f0      	beq.n	80075de <USB_CoreReset+0x36>

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	00030d40 	.word	0x00030d40

08007610 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007610:	b084      	sub	sp, #16
 8007612:	b580      	push	{r7, lr}
 8007614:	b086      	sub	sp, #24
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800761e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007630:	461a      	mov	r2, r3
 8007632:	2300      	movs	r3, #0
 8007634:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007662:	2b00      	cmp	r3, #0
 8007664:	d018      	beq.n	8007698 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	2b01      	cmp	r3, #1
 800766a:	d10a      	bne.n	8007682 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800767a:	f043 0304 	orr.w	r3, r3, #4
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	e014      	b.n	80076ac <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007690:	f023 0304 	bic.w	r3, r3, #4
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	e009      	b.n	80076ac <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076a6:	f023 0304 	bic.w	r3, r3, #4
 80076aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076ac:	2110      	movs	r1, #16
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff fe5e 	bl	8007370 <USB_FlushTxFifo>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fe8a 	bl	80073d8 <USB_FlushRxFifo>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80076ce:	2300      	movs	r3, #0
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	e015      	b.n	8007700 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e0:	461a      	mov	r2, r3
 80076e2:	f04f 33ff 	mov.w	r3, #4294967295
 80076e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f4:	461a      	mov	r2, r3
 80076f6:	2300      	movs	r3, #0
 80076f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	3301      	adds	r3, #1
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	429a      	cmp	r2, r3
 8007706:	d3e5      	bcc.n	80076d4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f04f 32ff 	mov.w	r2, #4294967295
 8007714:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007728:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a13      	ldr	r2, [pc, #76]	; (800777c <USB_HostInit+0x16c>)
 800772e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a13      	ldr	r2, [pc, #76]	; (8007780 <USB_HostInit+0x170>)
 8007734:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007738:	e009      	b.n	800774e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2280      	movs	r2, #128	; 0x80
 800773e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a10      	ldr	r2, [pc, #64]	; (8007784 <USB_HostInit+0x174>)
 8007744:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a0f      	ldr	r2, [pc, #60]	; (8007788 <USB_HostInit+0x178>)
 800774a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	2b00      	cmp	r3, #0
 8007752:	d105      	bne.n	8007760 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	f043 0210 	orr.w	r2, r3, #16
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699a      	ldr	r2, [r3, #24]
 8007764:	4b09      	ldr	r3, [pc, #36]	; (800778c <USB_HostInit+0x17c>)
 8007766:	4313      	orrs	r3, r2
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007778:	b004      	add	sp, #16
 800777a:	4770      	bx	lr
 800777c:	01000200 	.word	0x01000200
 8007780:	00e00300 	.word	0x00e00300
 8007784:	00600080 	.word	0x00600080
 8007788:	004000e0 	.word	0x004000e0
 800778c:	a3200008 	.word	0xa3200008

08007790 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077ae:	f023 0303 	bic.w	r3, r3, #3
 80077b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80077c8:	4313      	orrs	r3, r2
 80077ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d107      	bne.n	80077e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077d8:	461a      	mov	r2, r3
 80077da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80077de:	6053      	str	r3, [r2, #4]
 80077e0:	e009      	b.n	80077f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80077e2:	78fb      	ldrb	r3, [r7, #3]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d106      	bne.n	80077f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ee:	461a      	mov	r2, r3
 80077f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80077f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007824:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800782e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007832:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007834:	2064      	movs	r0, #100	; 0x64
 8007836:	f7fb fd81 	bl	800333c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007846:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007848:	200a      	movs	r0, #10
 800784a:	f7fb fd77 	bl	800333c <HAL_Delay>

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800787c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <USB_DriveVbus+0x44>
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d106      	bne.n	800789c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007896:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800789a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a6:	d109      	bne.n	80078bc <USB_DriveVbus+0x64>
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d106      	bne.n	80078bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b085      	sub	sp, #20
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	0c5b      	lsrs	r3, r3, #17
 80078e8:	f003 0303 	and.w	r3, r3, #3
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	b29b      	uxth	r3, r3
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	4608      	mov	r0, r1
 8007926:	4611      	mov	r1, r2
 8007928:	461a      	mov	r2, r3
 800792a:	4603      	mov	r3, r0
 800792c:	70fb      	strb	r3, [r7, #3]
 800792e:	460b      	mov	r3, r1
 8007930:	70bb      	strb	r3, [r7, #2]
 8007932:	4613      	mov	r3, r2
 8007934:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794a:	461a      	mov	r2, r3
 800794c:	f04f 33ff 	mov.w	r3, #4294967295
 8007950:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007952:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007956:	2b03      	cmp	r3, #3
 8007958:	d87e      	bhi.n	8007a58 <USB_HC_Init+0x13c>
 800795a:	a201      	add	r2, pc, #4	; (adr r2, 8007960 <USB_HC_Init+0x44>)
 800795c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007960:	08007971 	.word	0x08007971
 8007964:	08007a1b 	.word	0x08007a1b
 8007968:	08007971 	.word	0x08007971
 800796c:	080079dd 	.word	0x080079dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	4413      	add	r3, r2
 8007978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797c:	461a      	mov	r2, r3
 800797e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007982:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007984:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007988:	2b00      	cmp	r3, #0
 800798a:	da10      	bge.n	80079ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	4413      	add	r3, r2
 8007994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	78fa      	ldrb	r2, [r7, #3]
 800799c:	0151      	lsls	r1, r2, #5
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	440a      	add	r2, r1
 80079a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079aa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80079ac:	e057      	b.n	8007a5e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d051      	beq.n	8007a5e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	0151      	lsls	r1, r2, #5
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	440a      	add	r2, r1
 80079d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80079d8:	60d3      	str	r3, [r2, #12]
      break;
 80079da:	e040      	b.n	8007a5e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e8:	461a      	mov	r2, r3
 80079ea:	f240 639d 	movw	r3, #1693	; 0x69d
 80079ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80079f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da34      	bge.n	8007a62 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	78fa      	ldrb	r2, [r7, #3]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a16:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007a18:	e023      	b.n	8007a62 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a26:	461a      	mov	r2, r3
 8007a28:	f240 2325 	movw	r3, #549	; 0x225
 8007a2c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	da17      	bge.n	8007a66 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	78fa      	ldrb	r2, [r7, #3]
 8007a46:	0151      	lsls	r1, r2, #5
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	440a      	add	r2, r1
 8007a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a50:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007a54:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a56:	e006      	b.n	8007a66 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	77fb      	strb	r3, [r7, #31]
      break;
 8007a5c:	e004      	b.n	8007a68 <USB_HC_Init+0x14c>
      break;
 8007a5e:	bf00      	nop
 8007a60:	e002      	b.n	8007a68 <USB_HC_Init+0x14c>
      break;
 8007a62:	bf00      	nop
 8007a64:	e000      	b.n	8007a68 <USB_HC_Init+0x14c>
      break;
 8007a66:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	0151      	lsls	r1, r2, #5
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	440a      	add	r2, r1
 8007a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a82:	f043 0302 	orr.w	r3, r3, #2
 8007a86:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a8e:	699a      	ldr	r2, [r3, #24]
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	2101      	movs	r1, #1
 8007a98:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9c:	6939      	ldr	r1, [r7, #16]
 8007a9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007ab2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	da03      	bge.n	8007ac2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007abe:	61bb      	str	r3, [r7, #24]
 8007ac0:	e001      	b.n	8007ac6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff feff 	bl	80078ca <USB_GetHostSpeed>
 8007acc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d106      	bne.n	8007ae4 <USB_HC_Init+0x1c8>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d003      	beq.n	8007ae4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	e001      	b.n	8007ae8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ae8:	787b      	ldrb	r3, [r7, #1]
 8007aea:	059b      	lsls	r3, r3, #22
 8007aec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007af0:	78bb      	ldrb	r3, [r7, #2]
 8007af2:	02db      	lsls	r3, r3, #11
 8007af4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007af8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007afa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007afe:	049b      	lsls	r3, r3, #18
 8007b00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b04:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	0159      	lsls	r1, r3, #5
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	440b      	add	r3, r1
 8007b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b1e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b24:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007b26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d003      	beq.n	8007b36 <USB_HC_Init+0x21a>
 8007b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d10f      	bne.n	8007b56 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007b36:	78fb      	ldrb	r3, [r7, #3]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b54:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007b56:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3720      	adds	r7, #32
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08c      	sub	sp, #48	; 0x30
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b7c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d02d      	beq.n	8007be6 <USB_HC_StartXfer+0x86>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	791b      	ldrb	r3, [r3, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d129      	bne.n	8007be6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d117      	bne.n	8007bc8 <USB_HC_StartXfer+0x68>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	79db      	ldrb	r3, [r3, #7]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <USB_HC_StartXfer+0x48>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	79db      	ldrb	r3, [r3, #7]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d10f      	bne.n	8007bc8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	0151      	lsls	r1, r2, #5
 8007bba:	6a3a      	ldr	r2, [r7, #32]
 8007bbc:	440a      	add	r2, r1
 8007bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10b      	bne.n	8007be6 <USB_HC_StartXfer+0x86>
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	795b      	ldrb	r3, [r3, #5]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d107      	bne.n	8007be6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 fa0f 	bl	8008000 <USB_DoPing>
      return HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e0f8      	b.n	8007dd8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d018      	beq.n	8007c20 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	8912      	ldrh	r2, [r2, #8]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	8912      	ldrh	r2, [r2, #8]
 8007bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c02:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007c04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c06:	8b7b      	ldrh	r3, [r7, #26]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d90b      	bls.n	8007c24 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007c0c:	8b7b      	ldrh	r3, [r7, #26]
 8007c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	8912      	ldrh	r2, [r2, #8]
 8007c16:	fb03 f202 	mul.w	r2, r3, r2
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	611a      	str	r2, [r3, #16]
 8007c1e:	e001      	b.n	8007c24 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007c20:	2301      	movs	r3, #1
 8007c22:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	78db      	ldrb	r3, [r3, #3]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	8912      	ldrh	r2, [r2, #8]
 8007c32:	fb03 f202 	mul.w	r2, r3, r2
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	611a      	str	r2, [r3, #16]
 8007c3a:	e003      	b.n	8007c44 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	695a      	ldr	r2, [r3, #20]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c4e:	04d9      	lsls	r1, r3, #19
 8007c50:	4b63      	ldr	r3, [pc, #396]	; (8007de0 <USB_HC_StartXfer+0x280>)
 8007c52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	7a9b      	ldrb	r3, [r3, #10]
 8007c5a:	075b      	lsls	r3, r3, #29
 8007c5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c60:	69f9      	ldr	r1, [r7, #28]
 8007c62:	0148      	lsls	r0, r1, #5
 8007c64:	6a39      	ldr	r1, [r7, #32]
 8007c66:	4401      	add	r1, r0
 8007c68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d009      	beq.n	8007c8a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	68d9      	ldr	r1, [r3, #12]
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c86:	460a      	mov	r2, r1
 8007c88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bf0c      	ite	eq
 8007c9a:	2301      	moveq	r3, #1
 8007c9c:	2300      	movne	r3, #0
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	0151      	lsls	r1, r2, #5
 8007cb4:	6a3a      	ldr	r2, [r7, #32]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007cc0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	7e7b      	ldrb	r3, [r7, #25]
 8007cd2:	075b      	lsls	r3, r3, #29
 8007cd4:	69f9      	ldr	r1, [r7, #28]
 8007cd6:	0148      	lsls	r0, r1, #5
 8007cd8:	6a39      	ldr	r1, [r7, #32]
 8007cda:	4401      	add	r1, r0
 8007cdc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cfa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	78db      	ldrb	r3, [r3, #3]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	e003      	b.n	8007d16 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d14:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d1c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e04e      	b.n	8007dd8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	78db      	ldrb	r3, [r3, #3]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d149      	bne.n	8007dd6 <USB_HC_StartXfer+0x276>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d045      	beq.n	8007dd6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	79db      	ldrb	r3, [r3, #7]
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d830      	bhi.n	8007db4 <USB_HC_StartXfer+0x254>
 8007d52:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <USB_HC_StartXfer+0x1f8>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d69 	.word	0x08007d69
 8007d5c:	08007d8d 	.word	0x08007d8d
 8007d60:	08007d69 	.word	0x08007d69
 8007d64:	08007d8d 	.word	0x08007d8d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	3303      	adds	r3, #3
 8007d6e:	089b      	lsrs	r3, r3, #2
 8007d70:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007d72:	8afa      	ldrh	r2, [r7, #22]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d91c      	bls.n	8007db8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	f043 0220 	orr.w	r2, r3, #32
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d8a:	e015      	b.n	8007db8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	3303      	adds	r3, #3
 8007d92:	089b      	lsrs	r3, r3, #2
 8007d94:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d96:	8afa      	ldrh	r2, [r7, #22]
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d90a      	bls.n	8007dbc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007db2:	e003      	b.n	8007dbc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007db4:	bf00      	nop
 8007db6:	e002      	b.n	8007dbe <USB_HC_StartXfer+0x25e>
        break;
 8007db8:	bf00      	nop
 8007dba:	e000      	b.n	8007dbe <USB_HC_StartXfer+0x25e>
        break;
 8007dbc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	68d9      	ldr	r1, [r3, #12]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	785a      	ldrb	r2, [r3, #1]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2000      	movs	r0, #0
 8007dce:	9000      	str	r0, [sp, #0]
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff fb31 	bl	8007438 <USB_WritePacket>
  }

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3728      	adds	r7, #40	; 0x28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	1ff80000 	.word	0x1ff80000

08007de4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	b29b      	uxth	r3, r3
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b089      	sub	sp, #36	; 0x24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	0c9b      	lsrs	r3, r3, #18
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	0fdb      	lsrs	r3, r3, #31
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 0320 	and.w	r3, r3, #32
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d104      	bne.n	8007e60 <USB_HC_Halt+0x5a>
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e0c8      	b.n	8007ff2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <USB_HC_Halt+0x66>
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d163      	bne.n	8007f34 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	0151      	lsls	r1, r2, #5
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	440a      	add	r2, r1
 8007e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e8a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f003 0320 	and.w	r3, r3, #32
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f040 80ab 	bne.w	8007ff0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d133      	bne.n	8007f0e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	0151      	lsls	r1, r2, #5
 8007eb8:	69fa      	ldr	r2, [r7, #28]
 8007eba:	440a      	add	r2, r1
 8007ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ec4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	0151      	lsls	r1, r2, #5
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	440a      	add	r2, r1
 8007edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ee4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ef2:	d81d      	bhi.n	8007f30 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f0a:	d0ec      	beq.n	8007ee6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f0c:	e070      	b.n	8007ff0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	0151      	lsls	r1, r2, #5
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	440a      	add	r2, r1
 8007f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f2e:	e05f      	b.n	8007ff0 <USB_HC_Halt+0x1ea>
            break;
 8007f30:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f32:	e05d      	b.n	8007ff0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f52:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d133      	bne.n	8007fcc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	0151      	lsls	r1, r2, #5
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	440a      	add	r2, r1
 8007f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fa2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fb0:	d81d      	bhi.n	8007fee <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fc8:	d0ec      	beq.n	8007fa4 <USB_HC_Halt+0x19e>
 8007fca:	e011      	b.n	8007ff0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	0151      	lsls	r1, r2, #5
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	440a      	add	r2, r1
 8007fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	e000      	b.n	8007ff0 <USB_HC_Halt+0x1ea>
          break;
 8007fee:	bf00      	nop
    }
  }

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3724      	adds	r7, #36	; 0x24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
	...

08008000 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008014:	2301      	movs	r3, #1
 8008016:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	04da      	lsls	r2, r3, #19
 800801c:	4b15      	ldr	r3, [pc, #84]	; (8008074 <USB_DoPing+0x74>)
 800801e:	4013      	ands	r3, r2
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	440a      	add	r2, r1
 8008028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800802c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008030:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	4413      	add	r3, r2
 800803a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008048:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008050:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	4413      	add	r3, r2
 800805a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800805e:	461a      	mov	r2, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	1ff80000 	.word	0x1ff80000

08008078 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b088      	sub	sp, #32
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff f911 	bl	80072b4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008092:	2110      	movs	r1, #16
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff f96b 	bl	8007370 <USB_FlushTxFifo>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff f997 	bl	80073d8 <USB_FlushRxFifo>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80080b4:	2300      	movs	r3, #0
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	e01f      	b.n	80080fa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ee:	461a      	mov	r2, r3
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	3301      	adds	r3, #1
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	2b0f      	cmp	r3, #15
 80080fe:	d9dc      	bls.n	80080ba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008100:	2300      	movs	r3, #0
 8008102:	61bb      	str	r3, [r7, #24]
 8008104:	e034      	b.n	8008170 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	4413      	add	r3, r2
 800810e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800811c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008124:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800812c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800813a:	461a      	mov	r2, r3
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800814c:	d80c      	bhi.n	8008168 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	4413      	add	r3, r2
 8008156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008164:	d0ec      	beq.n	8008140 <USB_StopHost+0xc8>
 8008166:	e000      	b.n	800816a <USB_StopHost+0xf2>
        break;
 8008168:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	3301      	adds	r3, #1
 800816e:	61bb      	str	r3, [r7, #24]
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	2b0f      	cmp	r3, #15
 8008174:	d9c7      	bls.n	8008106 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800817c:	461a      	mov	r2, r3
 800817e:	f04f 33ff 	mov.w	r3, #4294967295
 8008182:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f04f 32ff 	mov.w	r2, #4294967295
 800818a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff f880 	bl	8007292 <USB_EnableGlobalInt>

  return ret;
 8008192:	7ffb      	ldrb	r3, [r7, #31]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3720      	adds	r7, #32
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800819c:	b590      	push	{r4, r7, lr}
 800819e:	b089      	sub	sp, #36	; 0x24
 80081a0:	af04      	add	r7, sp, #16
 80081a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80081a4:	2301      	movs	r3, #1
 80081a6:	2202      	movs	r2, #2
 80081a8:	2102      	movs	r1, #2
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fd16 	bl	8008bdc <USBH_FindInterface>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	2bff      	cmp	r3, #255	; 0xff
 80081b8:	d002      	beq.n	80081c0 <USBH_CDC_InterfaceInit+0x24>
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d90f      	bls.n	80081e0 <USBH_CDC_InterfaceInit+0x44>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
 80081c0:	487e      	ldr	r0, [pc, #504]	; (80083bc <USBH_CDC_InterfaceInit+0x220>)
 80081c2:	f003 fa7d 	bl	800b6c0 <iprintf>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4619      	mov	r1, r3
 80081d0:	487b      	ldr	r0, [pc, #492]	; (80083c0 <USBH_CDC_InterfaceInit+0x224>)
 80081d2:	f003 fa75 	bl	800b6c0 <iprintf>
 80081d6:	200a      	movs	r0, #10
 80081d8:	f003 fa8a 	bl	800b6f0 <putchar>
    return USBH_FAIL;
 80081dc:	2302      	movs	r3, #2
 80081de:	e15c      	b.n	800849a <USBH_CDC_InterfaceInit+0x2fe>
  }

  status = USBH_SelectInterface(phost, interface);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fc91 	bl	8008b0c <USBH_SelectInterface>
 80081ea:	4603      	mov	r3, r0
 80081ec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <USBH_CDC_InterfaceInit+0x5c>
  {
    return USBH_FAIL;
 80081f4:	2302      	movs	r3, #2
 80081f6:	e150      	b.n	800849a <USBH_CDC_InterfaceInit+0x2fe>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80081fe:	2050      	movs	r0, #80	; 0x50
 8008200:	f002 fcfc 	bl	800abfc <malloc>
 8008204:	4603      	mov	r3, r0
 8008206:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <USBH_CDC_InterfaceInit+0x92>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
 8008218:	4868      	ldr	r0, [pc, #416]	; (80083bc <USBH_CDC_InterfaceInit+0x220>)
 800821a:	f003 fa51 	bl	800b6c0 <iprintf>
 800821e:	4869      	ldr	r0, [pc, #420]	; (80083c4 <USBH_CDC_InterfaceInit+0x228>)
 8008220:	f003 fa4e 	bl	800b6c0 <iprintf>
 8008224:	200a      	movs	r0, #10
 8008226:	f003 fa63 	bl	800b6f0 <putchar>
    return USBH_FAIL;
 800822a:	2302      	movs	r3, #2
 800822c:	e135      	b.n	800849a <USBH_CDC_InterfaceInit+0x2fe>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800822e:	2250      	movs	r2, #80	; 0x50
 8008230:	2100      	movs	r1, #0
 8008232:	68b8      	ldr	r0, [r7, #8]
 8008234:	f002 fcf2 	bl	800ac1c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	211a      	movs	r1, #26
 800823e:	fb01 f303 	mul.w	r3, r1, r3
 8008242:	4413      	add	r3, r2
 8008244:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	b25b      	sxtb	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	da15      	bge.n	800827c <USBH_CDC_InterfaceInit+0xe0>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	211a      	movs	r1, #26
 8008256:	fb01 f303 	mul.w	r3, r1, r3
 800825a:	4413      	add	r3, r2
 800825c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008260:	781a      	ldrb	r2, [r3, #0]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	211a      	movs	r1, #26
 800826c:	fb01 f303 	mul.w	r3, r1, r3
 8008270:	4413      	add	r3, r2
 8008272:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008276:	881a      	ldrh	r2, [r3, #0]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f002 f925 	bl	800a4d2 <USBH_AllocPipe>
 8008288:	4603      	mov	r3, r0
 800828a:	461a      	mov	r2, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	7819      	ldrb	r1, [r3, #0]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	7858      	ldrb	r0, [r3, #1]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	8952      	ldrh	r2, [r2, #10]
 80082a8:	9202      	str	r2, [sp, #8]
 80082aa:	2203      	movs	r2, #3
 80082ac:	9201      	str	r2, [sp, #4]
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	4623      	mov	r3, r4
 80082b2:	4602      	mov	r2, r0
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f002 f8dd 	bl	800a474 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2200      	movs	r2, #0
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f002 fbec 	bl	800aaa0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80082c8:	2300      	movs	r3, #0
 80082ca:	2200      	movs	r2, #0
 80082cc:	210a      	movs	r1, #10
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fc84 	bl	8008bdc <USBH_FindInterface>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	2bff      	cmp	r3, #255	; 0xff
 80082dc:	d002      	beq.n	80082e4 <USBH_CDC_InterfaceInit+0x148>
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d90f      	bls.n	8008304 <USBH_CDC_InterfaceInit+0x168>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
 80082e4:	4835      	ldr	r0, [pc, #212]	; (80083bc <USBH_CDC_InterfaceInit+0x220>)
 80082e6:	f003 f9eb 	bl	800b6c0 <iprintf>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4619      	mov	r1, r3
 80082f4:	4834      	ldr	r0, [pc, #208]	; (80083c8 <USBH_CDC_InterfaceInit+0x22c>)
 80082f6:	f003 f9e3 	bl	800b6c0 <iprintf>
 80082fa:	200a      	movs	r0, #10
 80082fc:	f003 f9f8 	bl	800b6f0 <putchar>
    return USBH_FAIL;
 8008300:	2302      	movs	r3, #2
 8008302:	e0ca      	b.n	800849a <USBH_CDC_InterfaceInit+0x2fe>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	211a      	movs	r1, #26
 800830a:	fb01 f303 	mul.w	r3, r1, r3
 800830e:	4413      	add	r3, r2
 8008310:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	b25b      	sxtb	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	da16      	bge.n	800834a <USBH_CDC_InterfaceInit+0x1ae>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	211a      	movs	r1, #26
 8008322:	fb01 f303 	mul.w	r3, r1, r3
 8008326:	4413      	add	r3, r2
 8008328:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800832c:	781a      	ldrb	r2, [r3, #0]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	211a      	movs	r1, #26
 8008338:	fb01 f303 	mul.w	r3, r1, r3
 800833c:	4413      	add	r3, r2
 800833e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008342:	881a      	ldrh	r2, [r3, #0]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	835a      	strh	r2, [r3, #26]
 8008348:	e015      	b.n	8008376 <USBH_CDC_InterfaceInit+0x1da>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	211a      	movs	r1, #26
 8008350:	fb01 f303 	mul.w	r3, r1, r3
 8008354:	4413      	add	r3, r2
 8008356:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800835a:	781a      	ldrb	r2, [r3, #0]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	211a      	movs	r1, #26
 8008366:	fb01 f303 	mul.w	r3, r1, r3
 800836a:	4413      	add	r3, r2
 800836c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008370:	881a      	ldrh	r2, [r3, #0]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	211a      	movs	r1, #26
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	4413      	add	r3, r2
 8008382:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	b25b      	sxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	da1e      	bge.n	80083cc <USBH_CDC_InterfaceInit+0x230>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	211a      	movs	r1, #26
 8008394:	fb01 f303 	mul.w	r3, r1, r3
 8008398:	4413      	add	r3, r2
 800839a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800839e:	781a      	ldrb	r2, [r3, #0]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	211a      	movs	r1, #26
 80083aa:	fb01 f303 	mul.w	r3, r1, r3
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80083b4:	881a      	ldrh	r2, [r3, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	835a      	strh	r2, [r3, #26]
 80083ba:	e01d      	b.n	80083f8 <USBH_CDC_InterfaceInit+0x25c>
 80083bc:	0800d9a0 	.word	0x0800d9a0
 80083c0:	0800d9ac 	.word	0x0800d9ac
 80083c4:	0800d9ec 	.word	0x0800d9ec
 80083c8:	0800da14 	.word	0x0800da14
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	211a      	movs	r1, #26
 80083d2:	fb01 f303 	mul.w	r3, r1, r3
 80083d6:	4413      	add	r3, r2
 80083d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80083dc:	781a      	ldrb	r2, [r3, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	211a      	movs	r1, #26
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80083f2:	881a      	ldrh	r2, [r3, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	7b9b      	ldrb	r3, [r3, #14]
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f002 f867 	bl	800a4d2 <USBH_AllocPipe>
 8008404:	4603      	mov	r3, r0
 8008406:	461a      	mov	r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	7bdb      	ldrb	r3, [r3, #15]
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f002 f85d 	bl	800a4d2 <USBH_AllocPipe>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	7b59      	ldrb	r1, [r3, #13]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	7b98      	ldrb	r0, [r3, #14]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	8b12      	ldrh	r2, [r2, #24]
 8008438:	9202      	str	r2, [sp, #8]
 800843a:	2202      	movs	r2, #2
 800843c:	9201      	str	r2, [sp, #4]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	4623      	mov	r3, r4
 8008442:	4602      	mov	r2, r0
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f002 f815 	bl	800a474 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	7b19      	ldrb	r1, [r3, #12]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	7bd8      	ldrb	r0, [r3, #15]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	8b52      	ldrh	r2, [r2, #26]
 8008462:	9202      	str	r2, [sp, #8]
 8008464:	2202      	movs	r2, #2
 8008466:	9201      	str	r2, [sp, #4]
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4623      	mov	r3, r4
 800846c:	4602      	mov	r2, r0
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f002 f800 	bl	800a474 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	7b5b      	ldrb	r3, [r3, #13]
 8008480:	2200      	movs	r2, #0
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f002 fb0b 	bl	800aaa0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	7b1b      	ldrb	r3, [r3, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f002 fb04 	bl	800aaa0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd90      	pop	{r4, r7, pc}
 80084a2:	bf00      	nop

080084a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00e      	beq.n	80084dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 fff4 	bl	800a4b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f002 f81f 	bl	800a514 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	7b1b      	ldrb	r3, [r3, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00e      	beq.n	8008502 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	7b1b      	ldrb	r3, [r3, #12]
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 ffe1 	bl	800a4b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	7b1b      	ldrb	r3, [r3, #12]
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f002 f80c 	bl	800a514 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	7b5b      	ldrb	r3, [r3, #13]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00e      	beq.n	8008528 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	7b5b      	ldrb	r3, [r3, #13]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 ffce 	bl	800a4b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	7b5b      	ldrb	r3, [r3, #13]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 fff9 	bl	800a514 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	4618      	mov	r0, r3
 800853e:	f002 fb65 	bl	800ac0c <free>
    phost->pActiveClass->pData = 0U;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008548:	2200      	movs	r2, #0
 800854a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3340      	adds	r3, #64	; 0x40
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f8c2 	bl	80086fa <GetLineCoding>
 8008576:	4603      	mov	r3, r0
 8008578:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800857a:	7afb      	ldrb	r3, [r7, #11]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <USBH_CDC_ClassRequest+0x36>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008586:	2102      	movs	r1, #2
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	4798      	blx	r3
 800858c:	e00b      	b.n	80085a6 <USBH_CDC_ClassRequest+0x4e>
  }
  else if (status == USBH_NOT_SUPPORTED)
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d108      	bne.n	80085a6 <USBH_CDC_ClassRequest+0x4e>
  {
    USBH_ErrLog("Control error: CDC: Device Get Line Coding configuration failed");
 8008594:	4806      	ldr	r0, [pc, #24]	; (80085b0 <USBH_CDC_ClassRequest+0x58>)
 8008596:	f003 f893 	bl	800b6c0 <iprintf>
 800859a:	4806      	ldr	r0, [pc, #24]	; (80085b4 <USBH_CDC_ClassRequest+0x5c>)
 800859c:	f003 f890 	bl	800b6c0 <iprintf>
 80085a0:	200a      	movs	r0, #10
 80085a2:	f003 f8a5 	bl	800b6f0 <putchar>
  else
  {
    /* .. */
  }

  return status;
 80085a6:	7afb      	ldrb	r3, [r7, #11]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	0800da48 	.word	0x0800da48
 80085b4:	0800da50 	.word	0x0800da50

080085b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80085c0:	2301      	movs	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80085d8:	2b04      	cmp	r3, #4
 80085da:	d877      	bhi.n	80086cc <USBH_CDC_Process+0x114>
 80085dc:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <USBH_CDC_Process+0x2c>)
 80085de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e2:	bf00      	nop
 80085e4:	080085f9 	.word	0x080085f9
 80085e8:	080085ff 	.word	0x080085ff
 80085ec:	0800862f 	.word	0x0800862f
 80085f0:	080086a3 	.word	0x080086a3
 80085f4:	080086b1 	.word	0x080086b1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
      break;
 80085fc:	e06d      	b.n	80086da <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f897 	bl	8008738 <SetLineCoding>
 800860a:	4603      	mov	r3, r0
 800860c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800861c:	e058      	b.n	80086d0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d055      	beq.n	80086d0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2204      	movs	r2, #4
 8008628:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800862c:	e050      	b.n	80086d0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	3340      	adds	r3, #64	; 0x40
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f860 	bl	80086fa <GetLineCoding>
 800863a:	4603      	mov	r3, r0
 800863c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d126      	bne.n	8008692 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008656:	791b      	ldrb	r3, [r3, #4]
 8008658:	429a      	cmp	r2, r3
 800865a:	d13b      	bne.n	80086d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008666:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008668:	429a      	cmp	r2, r3
 800866a:	d133      	bne.n	80086d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008676:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008678:	429a      	cmp	r2, r3
 800867a:	d12b      	bne.n	80086d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008684:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008686:	429a      	cmp	r2, r3
 8008688:	d124      	bne.n	80086d4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f958 	bl	8008940 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008690:	e020      	b.n	80086d4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d01d      	beq.n	80086d4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2204      	movs	r2, #4
 800869c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80086a0:	e018      	b.n	80086d4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f867 	bl	8008776 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f8da 	bl	8008862 <CDC_ProcessReception>
      break;
 80086ae:	e014      	b.n	80086da <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80086b0:	2100      	movs	r1, #0
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 f9b1 	bl	8009a1a <USBH_ClrFeature>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10a      	bne.n	80086d8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80086ca:	e005      	b.n	80086d8 <USBH_CDC_Process+0x120>

    default:
      break;
 80086cc:	bf00      	nop
 80086ce:	e004      	b.n	80086da <USBH_CDC_Process+0x122>
      break;
 80086d0:	bf00      	nop
 80086d2:	e002      	b.n	80086da <USBH_CDC_Process+0x122>
      break;
 80086d4:	bf00      	nop
 80086d6:	e000      	b.n	80086da <USBH_CDC_Process+0x122>
      break;
 80086d8:	bf00      	nop

  }

  return status;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	22a1      	movs	r2, #161	; 0xa1
 8008708:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2221      	movs	r2, #33	; 0x21
 800870e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2207      	movs	r2, #7
 8008720:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2207      	movs	r2, #7
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 fc43 	bl	8009fb4 <USBH_CtlReq>
 800872e:	4603      	mov	r3, r0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2221      	movs	r2, #33	; 0x21
 8008746:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2220      	movs	r2, #32
 800874c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2207      	movs	r2, #7
 800875e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2207      	movs	r2, #7
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fc24 	bl	8009fb4 <USBH_CtlReq>
 800876c:	4603      	mov	r3, r0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b086      	sub	sp, #24
 800877a:	af02      	add	r7, sp, #8
 800877c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008788:	2300      	movs	r3, #0
 800878a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008792:	2b01      	cmp	r3, #1
 8008794:	d002      	beq.n	800879c <CDC_ProcessTransmission+0x26>
 8008796:	2b02      	cmp	r3, #2
 8008798:	d023      	beq.n	80087e2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800879a:	e05e      	b.n	800885a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	8b12      	ldrh	r2, [r2, #24]
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d90b      	bls.n	80087c0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	69d9      	ldr	r1, [r3, #28]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8b1a      	ldrh	r2, [r3, #24]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	7b5b      	ldrb	r3, [r3, #13]
 80087b4:	2001      	movs	r0, #1
 80087b6:	9000      	str	r0, [sp, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 fe18 	bl	800a3ee <USBH_BulkSendData>
 80087be:	e00b      	b.n	80087d8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	7b5b      	ldrb	r3, [r3, #13]
 80087ce:	2001      	movs	r0, #1
 80087d0:	9000      	str	r0, [sp, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 fe0b 	bl	800a3ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80087e0:	e03b      	b.n	800885a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	7b5b      	ldrb	r3, [r3, #13]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f002 f92f 	bl	800aa4c <USBH_LL_GetURBState>
 80087ee:	4603      	mov	r3, r0
 80087f0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80087f2:	7afb      	ldrb	r3, [r7, #11]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d128      	bne.n	800884a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	8b12      	ldrh	r2, [r2, #24]
 8008800:	4293      	cmp	r3, r2
 8008802:	d90e      	bls.n	8008822 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	8b12      	ldrh	r2, [r2, #24]
 800880c:	1a9a      	subs	r2, r3, r2
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	8b12      	ldrh	r2, [r2, #24]
 800881a:	441a      	add	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	61da      	str	r2, [r3, #28]
 8008820:	e002      	b.n	8008828 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008838:	e00e      	b.n	8008858 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f868 	bl	8008918 <USBH_CDC_TransmitCallback>
      break;
 8008848:	e006      	b.n	8008858 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800884a:	7afb      	ldrb	r3, [r7, #11]
 800884c:	2b02      	cmp	r3, #2
 800884e:	d103      	bne.n	8008858 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008858:	bf00      	nop
  }
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b086      	sub	sp, #24
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008874:	2300      	movs	r3, #0
 8008876:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800887e:	2b03      	cmp	r3, #3
 8008880:	d002      	beq.n	8008888 <CDC_ProcessReception+0x26>
 8008882:	2b04      	cmp	r3, #4
 8008884:	d00e      	beq.n	80088a4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008886:	e043      	b.n	8008910 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	6a19      	ldr	r1, [r3, #32]
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	8b5a      	ldrh	r2, [r3, #26]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	7b1b      	ldrb	r3, [r3, #12]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 fdcf 	bl	800a438 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2204      	movs	r2, #4
 800889e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80088a2:	e035      	b.n	8008910 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	7b1b      	ldrb	r3, [r3, #12]
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f002 f8ce 	bl	800aa4c <USBH_LL_GetURBState>
 80088b0:	4603      	mov	r3, r0
 80088b2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80088b4:	7cfb      	ldrb	r3, [r7, #19]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d129      	bne.n	800890e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	7b1b      	ldrb	r3, [r3, #12]
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f002 f831 	bl	800a928 <USBH_LL_GetLastXferSize>
 80088c6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d016      	beq.n	8008900 <CDC_ProcessReception+0x9e>
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	8b5b      	ldrh	r3, [r3, #26]
 80088d6:	461a      	mov	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4293      	cmp	r3, r2
 80088dc:	d910      	bls.n	8008900 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	1ad2      	subs	r2, r2, r3
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	6a1a      	ldr	r2, [r3, #32]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	441a      	add	r2, r3
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2203      	movs	r2, #3
 80088fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80088fe:	e006      	b.n	800890e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f80f 	bl	800892c <USBH_CDC_ReceiveCallback>
      break;
 800890e:	bf00      	nop
  }
}
 8008910:	bf00      	nop
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4613      	mov	r3, r2
 8008960:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10a      	bne.n	800897e <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8008968:	481c      	ldr	r0, [pc, #112]	; (80089dc <USBH_Init+0x88>)
 800896a:	f002 fea9 	bl	800b6c0 <iprintf>
 800896e:	481c      	ldr	r0, [pc, #112]	; (80089e0 <USBH_Init+0x8c>)
 8008970:	f002 fea6 	bl	800b6c0 <iprintf>
 8008974:	200a      	movs	r0, #10
 8008976:	f002 febb 	bl	800b6f0 <putchar>
    return USBH_FAIL;
 800897a:	2302      	movs	r3, #2
 800897c:	e029      	b.n	80089d2 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	79fa      	ldrb	r2, [r7, #7]
 8008982:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f824 	bl	80089e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f001 fef8 	bl	800a7c0 <USBH_LL_Init>

  return USBH_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	0800da90 	.word	0x0800da90
 80089e0:	0800da98 	.word	0x0800da98

080089e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089f0:	2300      	movs	r3, #0
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	e009      	b.n	8008a0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	33e0      	adds	r3, #224	; 0xe0
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	2200      	movs	r2, #0
 8008a02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3301      	adds	r3, #1
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b0f      	cmp	r3, #15
 8008a0e:	d9f2      	bls.n	80089f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a10:	2300      	movs	r3, #0
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	e009      	b.n	8008a2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a20:	2200      	movs	r2, #0
 8008a22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a30:	d3f1      	bcc.n	8008a16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2240      	movs	r2, #64	; 0x40
 8008a56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d01f      	beq.n	8008ae0 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10e      	bne.n	8008ac8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ab0:	1c59      	adds	r1, r3, #1
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	33de      	adds	r3, #222	; 0xde
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]
 8008ac6:	e016      	b.n	8008af6 <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8008ac8:	480d      	ldr	r0, [pc, #52]	; (8008b00 <USBH_RegisterClass+0x74>)
 8008aca:	f002 fdf9 	bl	800b6c0 <iprintf>
 8008ace:	480d      	ldr	r0, [pc, #52]	; (8008b04 <USBH_RegisterClass+0x78>)
 8008ad0:	f002 fdf6 	bl	800b6c0 <iprintf>
 8008ad4:	200a      	movs	r0, #10
 8008ad6:	f002 fe0b 	bl	800b6f0 <putchar>
      status = USBH_FAIL;
 8008ada:	2302      	movs	r3, #2
 8008adc:	73fb      	strb	r3, [r7, #15]
 8008ade:	e00a      	b.n	8008af6 <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8008ae0:	4807      	ldr	r0, [pc, #28]	; (8008b00 <USBH_RegisterClass+0x74>)
 8008ae2:	f002 fded 	bl	800b6c0 <iprintf>
 8008ae6:	4808      	ldr	r0, [pc, #32]	; (8008b08 <USBH_RegisterClass+0x7c>)
 8008ae8:	f002 fdea 	bl	800b6c0 <iprintf>
 8008aec:	200a      	movs	r0, #10
 8008aee:	f002 fdff 	bl	800b6f0 <putchar>
    status = USBH_FAIL;
 8008af2:	2302      	movs	r3, #2
 8008af4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	0800da90 	.word	0x0800da90
 8008b04:	0800daac 	.word	0x0800daac
 8008b08:	0800dac8 	.word	0x0800dac8

08008b0c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008b22:	78fa      	ldrb	r2, [r7, #3]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d23c      	bcs.n	8008ba2 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	4619      	mov	r1, r3
 8008b34:	4823      	ldr	r0, [pc, #140]	; (8008bc4 <USBH_SelectInterface+0xb8>)
 8008b36:	f002 fdc3 	bl	800b6c0 <iprintf>
 8008b3a:	200a      	movs	r0, #10
 8008b3c:	f002 fdd8 	bl	800b6f0 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 8008b40:	78fb      	ldrb	r3, [r7, #3]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	211a      	movs	r1, #26
 8008b46:	fb01 f303 	mul.w	r3, r1, r3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f203 3347 	addw	r3, r3, #839	; 0x347
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	4619      	mov	r1, r3
 8008b54:	481c      	ldr	r0, [pc, #112]	; (8008bc8 <USBH_SelectInterface+0xbc>)
 8008b56:	f002 fdb3 	bl	800b6c0 <iprintf>
 8008b5a:	200a      	movs	r0, #10
 8008b5c:	f002 fdc8 	bl	800b6f0 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	211a      	movs	r1, #26
 8008b66:	fb01 f303 	mul.w	r3, r1, r3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	4619      	mov	r1, r3
 8008b74:	4815      	ldr	r0, [pc, #84]	; (8008bcc <USBH_SelectInterface+0xc0>)
 8008b76:	f002 fda3 	bl	800b6c0 <iprintf>
 8008b7a:	200a      	movs	r0, #10
 8008b7c:	f002 fdb8 	bl	800b6f0 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	211a      	movs	r1, #26
 8008b86:	fb01 f303 	mul.w	r3, r1, r3
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f203 3349 	addw	r3, r3, #841	; 0x349
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	4619      	mov	r1, r3
 8008b94:	480e      	ldr	r0, [pc, #56]	; (8008bd0 <USBH_SelectInterface+0xc4>)
 8008b96:	f002 fd93 	bl	800b6c0 <iprintf>
 8008b9a:	200a      	movs	r0, #10
 8008b9c:	f002 fda8 	bl	800b6f0 <putchar>
 8008ba0:	e00a      	b.n	8008bb8 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8008ba2:	480c      	ldr	r0, [pc, #48]	; (8008bd4 <USBH_SelectInterface+0xc8>)
 8008ba4:	f002 fd8c 	bl	800b6c0 <iprintf>
 8008ba8:	480b      	ldr	r0, [pc, #44]	; (8008bd8 <USBH_SelectInterface+0xcc>)
 8008baa:	f002 fd89 	bl	800b6c0 <iprintf>
 8008bae:	200a      	movs	r0, #10
 8008bb0:	f002 fd9e 	bl	800b6f0 <putchar>
    status = USBH_FAIL;
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	0800dae0 	.word	0x0800dae0
 8008bc8:	0800db00 	.word	0x0800db00
 8008bcc:	0800db10 	.word	0x0800db10
 8008bd0:	0800db20 	.word	0x0800db20
 8008bd4:	0800da90 	.word	0x0800da90
 8008bd8:	0800db30 	.word	0x0800db30

08008bdc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	4608      	mov	r0, r1
 8008be6:	4611      	mov	r1, r2
 8008be8:	461a      	mov	r2, r3
 8008bea:	4603      	mov	r3, r0
 8008bec:	70fb      	strb	r3, [r7, #3]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	70bb      	strb	r3, [r7, #2]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008c04:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c06:	e025      	b.n	8008c54 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	221a      	movs	r2, #26
 8008c0c:	fb02 f303 	mul.w	r3, r2, r3
 8008c10:	3308      	adds	r3, #8
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	4413      	add	r3, r2
 8008c16:	3302      	adds	r3, #2
 8008c18:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	795b      	ldrb	r3, [r3, #5]
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d002      	beq.n	8008c2a <USBH_FindInterface+0x4e>
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	2bff      	cmp	r3, #255	; 0xff
 8008c28:	d111      	bne.n	8008c4e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c2e:	78ba      	ldrb	r2, [r7, #2]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d002      	beq.n	8008c3a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c34:	78bb      	ldrb	r3, [r7, #2]
 8008c36:	2bff      	cmp	r3, #255	; 0xff
 8008c38:	d109      	bne.n	8008c4e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c3e:	787a      	ldrb	r2, [r7, #1]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d002      	beq.n	8008c4a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c44:	787b      	ldrb	r3, [r7, #1]
 8008c46:	2bff      	cmp	r3, #255	; 0xff
 8008c48:	d101      	bne.n	8008c4e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	e006      	b.n	8008c5c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	3301      	adds	r3, #1
 8008c52:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d9d6      	bls.n	8008c08 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c5a:	23ff      	movs	r3, #255	; 0xff
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	371c      	adds	r7, #28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 fde1 	bl	800a838 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008c76:	2101      	movs	r1, #1
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 fefa 	bl	800aa72 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af04      	add	r7, sp, #16
 8008c8e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008c90:	2302      	movs	r3, #2
 8008c92:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d102      	bne.n	8008caa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b0b      	cmp	r3, #11
 8008cb2:	f200 823b 	bhi.w	800912c <USBH_Process+0x4a4>
 8008cb6:	a201      	add	r2, pc, #4	; (adr r2, 8008cbc <USBH_Process+0x34>)
 8008cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbc:	08008ced 	.word	0x08008ced
 8008cc0:	08008d2b 	.word	0x08008d2b
 8008cc4:	08008dab 	.word	0x08008dab
 8008cc8:	080090bb 	.word	0x080090bb
 8008ccc:	0800912d 	.word	0x0800912d
 8008cd0:	08008e4f 	.word	0x08008e4f
 8008cd4:	0800903d 	.word	0x0800903d
 8008cd8:	08008e9d 	.word	0x08008e9d
 8008cdc:	08008ebd 	.word	0x08008ebd
 8008ce0:	08008ee9 	.word	0x08008ee9
 8008ce4:	08008f45 	.word	0x08008f45
 8008ce8:	080090a3 	.word	0x080090a3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 821b 	beq.w	8009130 <USBH_Process+0x4a8>
      {
        USBH_UsrLog("USB Device Connected");
 8008cfa:	48a6      	ldr	r0, [pc, #664]	; (8008f94 <USBH_Process+0x30c>)
 8008cfc:	f002 fce0 	bl	800b6c0 <iprintf>
 8008d00:	200a      	movs	r0, #10
 8008d02:	f002 fcf5 	bl	800b6f0 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008d0c:	20c8      	movs	r0, #200	; 0xc8
 8008d0e:	f001 fef7 	bl	800ab00 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 fded 	bl	800a8f2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d28:	e202      	b.n	8009130 <USBH_Process+0x4a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d10d      	bne.n	8008d50 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8008d34:	4898      	ldr	r0, [pc, #608]	; (8008f98 <USBH_Process+0x310>)
 8008d36:	f002 fcc3 	bl	800b6c0 <iprintf>
 8008d3a:	200a      	movs	r0, #10
 8008d3c:	f002 fcd8 	bl	800b6f0 <putchar>
        phost->device.RstCnt = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d4e:	e1fc      	b.n	800914a <USBH_Process+0x4c2>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d5a:	d91a      	bls.n	8008d92 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008d62:	3301      	adds	r3, #1
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d909      	bls.n	8008d8a <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 8008d76:	4889      	ldr	r0, [pc, #548]	; (8008f9c <USBH_Process+0x314>)
 8008d78:	f002 fca2 	bl	800b6c0 <iprintf>
 8008d7c:	200a      	movs	r0, #10
 8008d7e:	f002 fcb7 	bl	800b6f0 <putchar>
            phost->gState = HOST_ABORT_STATE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	220d      	movs	r2, #13
 8008d86:	701a      	strb	r2, [r3, #0]
      break;
 8008d88:	e1df      	b.n	800914a <USBH_Process+0x4c2>
            phost->gState = HOST_IDLE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	701a      	strb	r2, [r3, #0]
      break;
 8008d90:	e1db      	b.n	800914a <USBH_Process+0x4c2>
          phost->Timeout += 10U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d98:	f103 020a 	add.w	r2, r3, #10
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008da2:	200a      	movs	r0, #10
 8008da4:	f001 feac 	bl	800ab00 <USBH_Delay>
      break;
 8008da8:	e1cf      	b.n	800914a <USBH_Process+0x4c2>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008dba:	2104      	movs	r1, #4
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008dc0:	2064      	movs	r0, #100	; 0x64
 8008dc2:	f001 fe9d 	bl	800ab00 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fd6c 	bl	800a8a4 <USBH_LL_GetSpeed>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2205      	movs	r2, #5
 8008dda:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008ddc:	2100      	movs	r1, #0
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f001 fb77 	bl	800a4d2 <USBH_AllocPipe>
 8008de4:	4603      	mov	r3, r0
 8008de6:	461a      	mov	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008dec:	2180      	movs	r1, #128	; 0x80
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f001 fb6f 	bl	800a4d2 <USBH_AllocPipe>
 8008df4:	4603      	mov	r3, r0
 8008df6:	461a      	mov	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	7919      	ldrb	r1, [r3, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008e10:	b292      	uxth	r2, r2
 8008e12:	9202      	str	r2, [sp, #8]
 8008e14:	2200      	movs	r2, #0
 8008e16:	9201      	str	r2, [sp, #4]
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2280      	movs	r2, #128	; 0x80
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 fb28 	bl	800a474 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7959      	ldrb	r1, [r3, #5]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e38:	b292      	uxth	r2, r2
 8008e3a:	9202      	str	r2, [sp, #8]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	9201      	str	r2, [sp, #4]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	4603      	mov	r3, r0
 8008e44:	2200      	movs	r2, #0
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 fb14 	bl	800a474 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e4c:	e17d      	b.n	800914a <USBH_Process+0x4c2>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f98e 	bl	8009170 <USBH_HandleEnum>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f040 8169 	bne.w	8009134 <USBH_Process+0x4ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 8008e62:	484f      	ldr	r0, [pc, #316]	; (8008fa0 <USBH_Process+0x318>)
 8008e64:	f002 fc2c 	bl	800b6c0 <iprintf>
 8008e68:	200a      	movs	r0, #10
 8008e6a:	f002 fc41 	bl	800b6f0 <putchar>

        phost->device.current_interface = 0U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d109      	bne.n	8008e94 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 8008e80:	4848      	ldr	r0, [pc, #288]	; (8008fa4 <USBH_Process+0x31c>)
 8008e82:	f002 fc1d 	bl	800b6c0 <iprintf>
 8008e86:	200a      	movs	r0, #10
 8008e88:	f002 fc32 	bl	800b6f0 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2208      	movs	r2, #8
 8008e90:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e92:	e14f      	b.n	8009134 <USBH_Process+0x4ac>
          phost->gState = HOST_INPUT;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2207      	movs	r2, #7
 8008e98:	701a      	strb	r2, [r3, #0]
      break;
 8008e9a:	e14b      	b.n	8009134 <USBH_Process+0x4ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8148 	beq.w	8009138 <USBH_Process+0x4b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008eae:	2101      	movs	r1, #1
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2208      	movs	r2, #8
 8008eb8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008eba:	e13d      	b.n	8009138 <USBH_Process+0x4b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fd60 	bl	800998c <USBH_SetCfg>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f040 8134 	bne.w	800913c <USBH_Process+0x4b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2209      	movs	r2, #9
 8008ed8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8008eda:	4833      	ldr	r0, [pc, #204]	; (8008fa8 <USBH_Process+0x320>)
 8008edc:	f002 fbf0 	bl	800b6c0 <iprintf>
 8008ee0:	200a      	movs	r0, #10
 8008ee2:	f002 fc05 	bl	800b6f0 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ee6:	e129      	b.n	800913c <USBH_Process+0x4b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d022      	beq.n	8008f3c <USBH_Process+0x2b4>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fd6a 	bl	80099d2 <USBH_SetFeature>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d109      	bne.n	8008f1e <USBH_Process+0x296>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 8008f0a:	4828      	ldr	r0, [pc, #160]	; (8008fac <USBH_Process+0x324>)
 8008f0c:	f002 fbd8 	bl	800b6c0 <iprintf>
 8008f10:	200a      	movs	r0, #10
 8008f12:	f002 fbed 	bl	800b6f0 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	220a      	movs	r2, #10
 8008f1a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f1c:	e110      	b.n	8009140 <USBH_Process+0x4b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008f1e:	7bbb      	ldrb	r3, [r7, #14]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	f040 810c 	bne.w	8009140 <USBH_Process+0x4b8>
          USBH_UsrLog("Remote wakeup not supported by the device");
 8008f28:	4821      	ldr	r0, [pc, #132]	; (8008fb0 <USBH_Process+0x328>)
 8008f2a:	f002 fbc9 	bl	800b6c0 <iprintf>
 8008f2e:	200a      	movs	r0, #10
 8008f30:	f002 fbde 	bl	800b6f0 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	220a      	movs	r2, #10
 8008f38:	701a      	strb	r2, [r3, #0]
      break;
 8008f3a:	e101      	b.n	8009140 <USBH_Process+0x4b8>
        phost->gState = HOST_CHECK_CLASS;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	220a      	movs	r2, #10
 8008f40:	701a      	strb	r2, [r3, #0]
      break;
 8008f42:	e0fd      	b.n	8009140 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d106      	bne.n	8008f5c <USBH_Process+0x2d4>
      {
        USBH_UsrLog("No Class has been registered.");
 8008f4e:	4819      	ldr	r0, [pc, #100]	; (8008fb4 <USBH_Process+0x32c>)
 8008f50:	f002 fbb6 	bl	800b6c0 <iprintf>
 8008f54:	200a      	movs	r0, #10
 8008f56:	f002 fbcb 	bl	800b6f0 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f5a:	e0f6      	b.n	800914a <USBH_Process+0x4c2>
        phost->pActiveClass = NULL;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
 8008f68:	e029      	b.n	8008fbe <USBH_Process+0x336>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008f6a:	7bfa      	ldrb	r2, [r7, #15]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	32de      	adds	r2, #222	; 0xde
 8008f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f74:	791a      	ldrb	r2, [r3, #4]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d11b      	bne.n	8008fb8 <USBH_Process+0x330>
            phost->pActiveClass = phost->pClass[idx];
 8008f80:	7bfa      	ldrb	r2, [r7, #15]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	32de      	adds	r2, #222	; 0xde
 8008f86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008f90:	e018      	b.n	8008fc4 <USBH_Process+0x33c>
 8008f92:	bf00      	nop
 8008f94:	0800db50 	.word	0x0800db50
 8008f98:	0800db68 	.word	0x0800db68
 8008f9c:	0800db84 	.word	0x0800db84
 8008fa0:	0800dbb0 	.word	0x0800dbb0
 8008fa4:	0800dbc4 	.word	0x0800dbc4
 8008fa8:	0800dbec 	.word	0x0800dbec
 8008fac:	0800dc08 	.word	0x0800dc08
 8008fb0:	0800dc28 	.word	0x0800dc28
 8008fb4:	0800dc54 	.word	0x0800dc54
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	73fb      	strb	r3, [r7, #15]
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0d2      	beq.n	8008f6a <USBH_Process+0x2e2>
        if (phost->pActiveClass != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d02c      	beq.n	8009028 <USBH_Process+0x3a0>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d114      	bne.n	800900a <USBH_Process+0x382>
            phost->gState = HOST_CLASS_REQUEST;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2206      	movs	r2, #6
 8008fe4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	4858      	ldr	r0, [pc, #352]	; (8009154 <USBH_Process+0x4cc>)
 8008ff2:	f002 fb65 	bl	800b6c0 <iprintf>
 8008ff6:	200a      	movs	r0, #10
 8008ff8:	f002 fb7a 	bl	800b6f0 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009002:	2103      	movs	r1, #3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
      break;
 8009008:	e09f      	b.n	800914a <USBH_Process+0x4c2>
            phost->gState = HOST_ABORT_STATE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	220d      	movs	r2, #13
 800900e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4619      	mov	r1, r3
 800901a:	484f      	ldr	r0, [pc, #316]	; (8009158 <USBH_Process+0x4d0>)
 800901c:	f002 fb50 	bl	800b6c0 <iprintf>
 8009020:	200a      	movs	r0, #10
 8009022:	f002 fb65 	bl	800b6f0 <putchar>
      break;
 8009026:	e090      	b.n	800914a <USBH_Process+0x4c2>
          phost->gState = HOST_ABORT_STATE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	220d      	movs	r2, #13
 800902c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800902e:	484b      	ldr	r0, [pc, #300]	; (800915c <USBH_Process+0x4d4>)
 8009030:	f002 fb46 	bl	800b6c0 <iprintf>
 8009034:	200a      	movs	r0, #10
 8009036:	f002 fb5b 	bl	800b6f0 <putchar>
      break;
 800903a:	e086      	b.n	800914a <USBH_Process+0x4c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009042:	2b00      	cmp	r3, #0
 8009044:	d020      	beq.n	8009088 <USBH_Process+0x400>
      {
        status = phost->pActiveClass->Requests(phost);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	4798      	blx	r3
 8009052:	4603      	mov	r3, r0
 8009054:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d103      	bne.n	8009066 <USBH_Process+0x3de>
        {
          phost->gState = HOST_CLASS;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	220b      	movs	r2, #11
 8009062:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009064:	e06e      	b.n	8009144 <USBH_Process+0x4bc>
        else if (status == USBH_FAIL)
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d16a      	bne.n	8009144 <USBH_Process+0x4bc>
          phost->gState = HOST_ABORT_STATE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	220d      	movs	r2, #13
 8009072:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8009074:	483a      	ldr	r0, [pc, #232]	; (8009160 <USBH_Process+0x4d8>)
 8009076:	f002 fb23 	bl	800b6c0 <iprintf>
 800907a:	483a      	ldr	r0, [pc, #232]	; (8009164 <USBH_Process+0x4dc>)
 800907c:	f002 fb20 	bl	800b6c0 <iprintf>
 8009080:	200a      	movs	r0, #10
 8009082:	f002 fb35 	bl	800b6f0 <putchar>
      break;
 8009086:	e05d      	b.n	8009144 <USBH_Process+0x4bc>
        phost->gState = HOST_ABORT_STATE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	220d      	movs	r2, #13
 800908c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800908e:	4834      	ldr	r0, [pc, #208]	; (8009160 <USBH_Process+0x4d8>)
 8009090:	f002 fb16 	bl	800b6c0 <iprintf>
 8009094:	4834      	ldr	r0, [pc, #208]	; (8009168 <USBH_Process+0x4e0>)
 8009096:	f002 fb13 	bl	800b6c0 <iprintf>
 800909a:	200a      	movs	r0, #10
 800909c:	f002 fb28 	bl	800b6f0 <putchar>
      break;
 80090a0:	e050      	b.n	8009144 <USBH_Process+0x4bc>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d04d      	beq.n	8009148 <USBH_Process+0x4c0>
      {
        phost->pActiveClass->BgndProcess(phost);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4798      	blx	r3
      }
      break;
 80090b8:	e046      	b.n	8009148 <USBH_Process+0x4c0>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff fc8e 	bl	80089e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <USBH_Process+0x45e>
      {
        phost->pActiveClass->DeInit(phost);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d005      	beq.n	80090fc <USBH_Process+0x474>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090f6:	2105      	movs	r1, #5
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 80090fc:	481b      	ldr	r0, [pc, #108]	; (800916c <USBH_Process+0x4e4>)
 80090fe:	f002 fadf 	bl	800b6c0 <iprintf>
 8009102:	200a      	movs	r0, #10
 8009104:	f002 faf4 	bl	800b6f0 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b01      	cmp	r3, #1
 8009112:	d107      	bne.n	8009124 <USBH_Process+0x49c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff fda3 	bl	8008c68 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009122:	e012      	b.n	800914a <USBH_Process+0x4c2>
        (void)USBH_LL_Start(phost);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 fb87 	bl	800a838 <USBH_LL_Start>
      break;
 800912a:	e00e      	b.n	800914a <USBH_Process+0x4c2>

    case HOST_ABORT_STATE:
    default :
      break;
 800912c:	bf00      	nop
 800912e:	e00c      	b.n	800914a <USBH_Process+0x4c2>
      break;
 8009130:	bf00      	nop
 8009132:	e00a      	b.n	800914a <USBH_Process+0x4c2>
      break;
 8009134:	bf00      	nop
 8009136:	e008      	b.n	800914a <USBH_Process+0x4c2>
    break;
 8009138:	bf00      	nop
 800913a:	e006      	b.n	800914a <USBH_Process+0x4c2>
      break;
 800913c:	bf00      	nop
 800913e:	e004      	b.n	800914a <USBH_Process+0x4c2>
      break;
 8009140:	bf00      	nop
 8009142:	e002      	b.n	800914a <USBH_Process+0x4c2>
      break;
 8009144:	bf00      	nop
 8009146:	e000      	b.n	800914a <USBH_Process+0x4c2>
      break;
 8009148:	bf00      	nop
  }
  return USBH_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	0800dc74 	.word	0x0800dc74
 8009158:	0800dc88 	.word	0x0800dc88
 800915c:	0800dca8 	.word	0x0800dca8
 8009160:	0800da90 	.word	0x0800da90
 8009164:	0800dcd0 	.word	0x0800dcd0
 8009168:	0800dcf8 	.word	0x0800dcf8
 800916c:	0800dd10 	.word	0x0800dd10

08009170 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af04      	add	r7, sp, #16
 8009176:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009178:	2301      	movs	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800917c:	2301      	movs	r3, #1
 800917e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	785b      	ldrb	r3, [r3, #1]
 8009184:	2b07      	cmp	r3, #7
 8009186:	f200 827f 	bhi.w	8009688 <USBH_HandleEnum+0x518>
 800918a:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <USBH_HandleEnum+0x20>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	080091b1 	.word	0x080091b1
 8009194:	0800928d 	.word	0x0800928d
 8009198:	0800933d 	.word	0x0800933d
 800919c:	080093fd 	.word	0x080093fd
 80091a0:	08009485 	.word	0x08009485
 80091a4:	08009537 	.word	0x08009537
 80091a8:	080095ab 	.word	0x080095ab
 80091ac:	0800961d 	.word	0x0800961d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80091b0:	2108      	movs	r1, #8
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fb1a 	bl	80097ec <USBH_Get_DevDesc>
 80091b8:	4603      	mov	r3, r0
 80091ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d130      	bne.n	8009224 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	7919      	ldrb	r1, [r3, #4]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80091e6:	b292      	uxth	r2, r2
 80091e8:	9202      	str	r2, [sp, #8]
 80091ea:	2200      	movs	r2, #0
 80091ec:	9201      	str	r2, [sp, #4]
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	4603      	mov	r3, r0
 80091f2:	2280      	movs	r2, #128	; 0x80
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 f93d 	bl	800a474 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	7959      	ldrb	r1, [r3, #5]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800920e:	b292      	uxth	r2, r2
 8009210:	9202      	str	r2, [sp, #8]
 8009212:	2200      	movs	r2, #0
 8009214:	9201      	str	r2, [sp, #4]
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	4603      	mov	r3, r0
 800921a:	2200      	movs	r2, #0
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f001 f929 	bl	800a474 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009222:	e233      	b.n	800968c <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	2b03      	cmp	r3, #3
 8009228:	f040 8230 	bne.w	800968c <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800922c:	48af      	ldr	r0, [pc, #700]	; (80094ec <USBH_HandleEnum+0x37c>)
 800922e:	f002 fa47 	bl	800b6c0 <iprintf>
 8009232:	48af      	ldr	r0, [pc, #700]	; (80094f0 <USBH_HandleEnum+0x380>)
 8009234:	f002 fa44 	bl	800b6c0 <iprintf>
 8009238:	200a      	movs	r0, #10
 800923a:	f002 fa59 	bl	800b6f0 <putchar>
        phost->device.EnumCnt++;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009244:	3301      	adds	r3, #1
 8009246:	b2da      	uxtb	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009254:	2b03      	cmp	r3, #3
 8009256:	d909      	bls.n	800926c <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009258:	48a6      	ldr	r0, [pc, #664]	; (80094f4 <USBH_HandleEnum+0x384>)
 800925a:	f002 fa31 	bl	800b6c0 <iprintf>
 800925e:	200a      	movs	r0, #10
 8009260:	f002 fa46 	bl	800b6f0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	220d      	movs	r2, #13
 8009268:	701a      	strb	r2, [r3, #0]
      break;
 800926a:	e20f      	b.n	800968c <USBH_HandleEnum+0x51c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	795b      	ldrb	r3, [r3, #5]
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 f94e 	bl	800a514 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	791b      	ldrb	r3, [r3, #4]
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 f948 	bl	800a514 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	701a      	strb	r2, [r3, #0]
      break;
 800928a:	e1ff      	b.n	800968c <USBH_HandleEnum+0x51c>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800928c:	2112      	movs	r1, #18
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 faac 	bl	80097ec <USBH_Get_DevDesc>
 8009294:	4603      	mov	r3, r0
 8009296:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d117      	bne.n	80092ce <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 80092a4:	4619      	mov	r1, r3
 80092a6:	4894      	ldr	r0, [pc, #592]	; (80094f8 <USBH_HandleEnum+0x388>)
 80092a8:	f002 fa0a 	bl	800b6c0 <iprintf>
 80092ac:	200a      	movs	r0, #10
 80092ae:	f002 fa1f 	bl	800b6f0 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 80092b8:	4619      	mov	r1, r3
 80092ba:	4890      	ldr	r0, [pc, #576]	; (80094fc <USBH_HandleEnum+0x38c>)
 80092bc:	f002 fa00 	bl	800b6c0 <iprintf>
 80092c0:	200a      	movs	r0, #10
 80092c2:	f002 fa15 	bl	800b6f0 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2202      	movs	r2, #2
 80092ca:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092cc:	e1e0      	b.n	8009690 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	f040 81dd 	bne.w	8009690 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 80092d6:	4885      	ldr	r0, [pc, #532]	; (80094ec <USBH_HandleEnum+0x37c>)
 80092d8:	f002 f9f2 	bl	800b6c0 <iprintf>
 80092dc:	4888      	ldr	r0, [pc, #544]	; (8009500 <USBH_HandleEnum+0x390>)
 80092de:	f002 f9ef 	bl	800b6c0 <iprintf>
 80092e2:	200a      	movs	r0, #10
 80092e4:	f002 fa04 	bl	800b6f0 <putchar>
        phost->device.EnumCnt++;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092ee:	3301      	adds	r3, #1
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d909      	bls.n	8009316 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009302:	487c      	ldr	r0, [pc, #496]	; (80094f4 <USBH_HandleEnum+0x384>)
 8009304:	f002 f9dc 	bl	800b6c0 <iprintf>
 8009308:	200a      	movs	r0, #10
 800930a:	f002 f9f1 	bl	800b6f0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	220d      	movs	r2, #13
 8009312:	701a      	strb	r2, [r3, #0]
      break;
 8009314:	e1bc      	b.n	8009690 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	795b      	ldrb	r3, [r3, #5]
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 f8f9 	bl	800a514 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	791b      	ldrb	r3, [r3, #4]
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 f8f3 	bl	800a514 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	701a      	strb	r2, [r3, #0]
      break;
 800933a:	e1a9      	b.n	8009690 <USBH_HandleEnum+0x520>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800933c:	2101      	movs	r1, #1
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fb00 	bl	8009944 <USBH_SetAddress>
 8009344:	4603      	mov	r3, r0
 8009346:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d13c      	bne.n	80093c8 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 800934e:	2002      	movs	r0, #2
 8009350:	f001 fbd6 	bl	800ab00 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 8009362:	4619      	mov	r1, r3
 8009364:	4867      	ldr	r0, [pc, #412]	; (8009504 <USBH_HandleEnum+0x394>)
 8009366:	f002 f9ab 	bl	800b6c0 <iprintf>
 800936a:	200a      	movs	r0, #10
 800936c:	f002 f9c0 	bl	800b6f0 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2203      	movs	r2, #3
 8009374:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	7919      	ldrb	r1, [r3, #4]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800938a:	b292      	uxth	r2, r2
 800938c:	9202      	str	r2, [sp, #8]
 800938e:	2200      	movs	r2, #0
 8009390:	9201      	str	r2, [sp, #4]
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	4603      	mov	r3, r0
 8009396:	2280      	movs	r2, #128	; 0x80
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 f86b 	bl	800a474 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	7959      	ldrb	r1, [r3, #5]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093b2:	b292      	uxth	r2, r2
 80093b4:	9202      	str	r2, [sp, #8]
 80093b6:	2200      	movs	r2, #0
 80093b8:	9201      	str	r2, [sp, #4]
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	4603      	mov	r3, r0
 80093be:	2200      	movs	r2, #0
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f857 	bl	800a474 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80093c6:	e165      	b.n	8009694 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	f040 8162 	bne.w	8009694 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Device Set Address request failed");
 80093d0:	4846      	ldr	r0, [pc, #280]	; (80094ec <USBH_HandleEnum+0x37c>)
 80093d2:	f002 f975 	bl	800b6c0 <iprintf>
 80093d6:	484c      	ldr	r0, [pc, #304]	; (8009508 <USBH_HandleEnum+0x398>)
 80093d8:	f002 f972 	bl	800b6c0 <iprintf>
 80093dc:	200a      	movs	r0, #10
 80093de:	f002 f987 	bl	800b6f0 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80093e2:	4844      	ldr	r0, [pc, #272]	; (80094f4 <USBH_HandleEnum+0x384>)
 80093e4:	f002 f96c 	bl	800b6c0 <iprintf>
 80093e8:	200a      	movs	r0, #10
 80093ea:	f002 f981 	bl	800b6f0 <putchar>
        phost->gState = HOST_ABORT_STATE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	220d      	movs	r2, #13
 80093f2:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	705a      	strb	r2, [r3, #1]
      break;
 80093fa:	e14b      	b.n	8009694 <USBH_HandleEnum+0x524>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80093fc:	2109      	movs	r1, #9
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fa1c 	bl	800983c <USBH_Get_CfgDesc>
 8009404:	4603      	mov	r3, r0
 8009406:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d103      	bne.n	8009416 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2204      	movs	r2, #4
 8009412:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009414:	e140      	b.n	8009698 <USBH_HandleEnum+0x528>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	2b03      	cmp	r3, #3
 800941a:	f040 813d 	bne.w	8009698 <USBH_HandleEnum+0x528>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800941e:	4833      	ldr	r0, [pc, #204]	; (80094ec <USBH_HandleEnum+0x37c>)
 8009420:	f002 f94e 	bl	800b6c0 <iprintf>
 8009424:	4839      	ldr	r0, [pc, #228]	; (800950c <USBH_HandleEnum+0x39c>)
 8009426:	f002 f94b 	bl	800b6c0 <iprintf>
 800942a:	200a      	movs	r0, #10
 800942c:	f002 f960 	bl	800b6f0 <putchar>
        phost->device.EnumCnt++;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009436:	3301      	adds	r3, #1
 8009438:	b2da      	uxtb	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009446:	2b03      	cmp	r3, #3
 8009448:	d909      	bls.n	800945e <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800944a:	482a      	ldr	r0, [pc, #168]	; (80094f4 <USBH_HandleEnum+0x384>)
 800944c:	f002 f938 	bl	800b6c0 <iprintf>
 8009450:	200a      	movs	r0, #10
 8009452:	f002 f94d 	bl	800b6f0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	220d      	movs	r2, #13
 800945a:	701a      	strb	r2, [r3, #0]
      break;
 800945c:	e11c      	b.n	8009698 <USBH_HandleEnum+0x528>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	795b      	ldrb	r3, [r3, #5]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 f855 	bl	800a514 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	791b      	ldrb	r3, [r3, #4]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 f84f 	bl	800a514 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	701a      	strb	r2, [r3, #0]
      break;
 8009482:	e109      	b.n	8009698 <USBH_HandleEnum+0x528>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f9d5 	bl	800983c <USBH_Get_CfgDesc>
 8009492:	4603      	mov	r3, r0
 8009494:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d103      	bne.n	80094a4 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2205      	movs	r2, #5
 80094a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80094a2:	e0fb      	b.n	800969c <USBH_HandleEnum+0x52c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	f040 80f8 	bne.w	800969c <USBH_HandleEnum+0x52c>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 80094ac:	480f      	ldr	r0, [pc, #60]	; (80094ec <USBH_HandleEnum+0x37c>)
 80094ae:	f002 f907 	bl	800b6c0 <iprintf>
 80094b2:	4816      	ldr	r0, [pc, #88]	; (800950c <USBH_HandleEnum+0x39c>)
 80094b4:	f002 f904 	bl	800b6c0 <iprintf>
 80094b8:	200a      	movs	r0, #10
 80094ba:	f002 f919 	bl	800b6f0 <putchar>
        phost->device.EnumCnt++;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094c4:	3301      	adds	r3, #1
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d91b      	bls.n	8009510 <USBH_HandleEnum+0x3a0>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80094d8:	4806      	ldr	r0, [pc, #24]	; (80094f4 <USBH_HandleEnum+0x384>)
 80094da:	f002 f8f1 	bl	800b6c0 <iprintf>
 80094de:	200a      	movs	r0, #10
 80094e0:	f002 f906 	bl	800b6f0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	220d      	movs	r2, #13
 80094e8:	701a      	strb	r2, [r3, #0]
      break;
 80094ea:	e0d7      	b.n	800969c <USBH_HandleEnum+0x52c>
 80094ec:	0800da90 	.word	0x0800da90
 80094f0:	0800dd28 	.word	0x0800dd28
 80094f4:	0800dd5c 	.word	0x0800dd5c
 80094f8:	0800dd9c 	.word	0x0800dd9c
 80094fc:	0800dda8 	.word	0x0800dda8
 8009500:	0800ddb4 	.word	0x0800ddb4
 8009504:	0800ddf0 	.word	0x0800ddf0
 8009508:	0800de08 	.word	0x0800de08
 800950c:	0800de3c 	.word	0x0800de3c
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	795b      	ldrb	r3, [r3, #5]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fffc 	bl	800a514 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	791b      	ldrb	r3, [r3, #4]
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fff6 	bl	800a514 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	701a      	strb	r2, [r3, #0]
      break;
 8009534:	e0b2      	b.n	800969c <USBH_HandleEnum+0x52c>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800953c:	2b00      	cmp	r3, #0
 800953e:	d02a      	beq.n	8009596 <USBH_HandleEnum+0x426>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800954c:	23ff      	movs	r3, #255	; 0xff
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f998 	bl	8009884 <USBH_Get_StringDesc>
 8009554:	4603      	mov	r3, r0
 8009556:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009558:	7bbb      	ldrb	r3, [r7, #14]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10d      	bne.n	800957a <USBH_HandleEnum+0x40a>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009564:	4619      	mov	r1, r3
 8009566:	4853      	ldr	r0, [pc, #332]	; (80096b4 <USBH_HandleEnum+0x544>)
 8009568:	f002 f8aa 	bl	800b6c0 <iprintf>
 800956c:	200a      	movs	r0, #10
 800956e:	f002 f8bf 	bl	800b6f0 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2206      	movs	r2, #6
 8009576:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009578:	e092      	b.n	80096a0 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b03      	cmp	r3, #3
 800957e:	f040 808f 	bne.w	80096a0 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Manufacturer : N/A");
 8009582:	484d      	ldr	r0, [pc, #308]	; (80096b8 <USBH_HandleEnum+0x548>)
 8009584:	f002 f89c 	bl	800b6c0 <iprintf>
 8009588:	200a      	movs	r0, #10
 800958a:	f002 f8b1 	bl	800b6f0 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2206      	movs	r2, #6
 8009592:	705a      	strb	r2, [r3, #1]
      break;
 8009594:	e084      	b.n	80096a0 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Manufacturer : N/A");
 8009596:	4848      	ldr	r0, [pc, #288]	; (80096b8 <USBH_HandleEnum+0x548>)
 8009598:	f002 f892 	bl	800b6c0 <iprintf>
 800959c:	200a      	movs	r0, #10
 800959e:	f002 f8a7 	bl	800b6f0 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2206      	movs	r2, #6
 80095a6:	705a      	strb	r2, [r3, #1]
      break;
 80095a8:	e07a      	b.n	80096a0 <USBH_HandleEnum+0x530>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d029      	beq.n	8009608 <USBH_HandleEnum+0x498>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095c0:	23ff      	movs	r3, #255	; 0xff
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f95e 	bl	8009884 <USBH_Get_StringDesc>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10d      	bne.n	80095ee <USBH_HandleEnum+0x47e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80095d8:	4619      	mov	r1, r3
 80095da:	4838      	ldr	r0, [pc, #224]	; (80096bc <USBH_HandleEnum+0x54c>)
 80095dc:	f002 f870 	bl	800b6c0 <iprintf>
 80095e0:	200a      	movs	r0, #10
 80095e2:	f002 f885 	bl	800b6f0 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2207      	movs	r2, #7
 80095ea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80095ec:	e05a      	b.n	80096a4 <USBH_HandleEnum+0x534>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d157      	bne.n	80096a4 <USBH_HandleEnum+0x534>
          USBH_UsrLog("Product : N/A");
 80095f4:	4832      	ldr	r0, [pc, #200]	; (80096c0 <USBH_HandleEnum+0x550>)
 80095f6:	f002 f863 	bl	800b6c0 <iprintf>
 80095fa:	200a      	movs	r0, #10
 80095fc:	f002 f878 	bl	800b6f0 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2207      	movs	r2, #7
 8009604:	705a      	strb	r2, [r3, #1]
      break;
 8009606:	e04d      	b.n	80096a4 <USBH_HandleEnum+0x534>
        USBH_UsrLog("Product : N/A");
 8009608:	482d      	ldr	r0, [pc, #180]	; (80096c0 <USBH_HandleEnum+0x550>)
 800960a:	f002 f859 	bl	800b6c0 <iprintf>
 800960e:	200a      	movs	r0, #10
 8009610:	f002 f86e 	bl	800b6f0 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2207      	movs	r2, #7
 8009618:	705a      	strb	r2, [r3, #1]
      break;
 800961a:	e043      	b.n	80096a4 <USBH_HandleEnum+0x534>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009622:	2b00      	cmp	r3, #0
 8009624:	d027      	beq.n	8009676 <USBH_HandleEnum+0x506>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009632:	23ff      	movs	r3, #255	; 0xff
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f925 	bl	8009884 <USBH_Get_StringDesc>
 800963a:	4603      	mov	r3, r0
 800963c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10c      	bne.n	800965e <USBH_HandleEnum+0x4ee>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800964a:	4619      	mov	r1, r3
 800964c:	481d      	ldr	r0, [pc, #116]	; (80096c4 <USBH_HandleEnum+0x554>)
 800964e:	f002 f837 	bl	800b6c0 <iprintf>
 8009652:	200a      	movs	r0, #10
 8009654:	f002 f84c 	bl	800b6f0 <putchar>
          Status = USBH_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800965c:	e024      	b.n	80096a8 <USBH_HandleEnum+0x538>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	2b03      	cmp	r3, #3
 8009662:	d121      	bne.n	80096a8 <USBH_HandleEnum+0x538>
          USBH_UsrLog("Serial Number : N/A");
 8009664:	4818      	ldr	r0, [pc, #96]	; (80096c8 <USBH_HandleEnum+0x558>)
 8009666:	f002 f82b 	bl	800b6c0 <iprintf>
 800966a:	200a      	movs	r0, #10
 800966c:	f002 f840 	bl	800b6f0 <putchar>
          Status = USBH_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
      break;
 8009674:	e018      	b.n	80096a8 <USBH_HandleEnum+0x538>
        USBH_UsrLog("Serial Number : N/A");
 8009676:	4814      	ldr	r0, [pc, #80]	; (80096c8 <USBH_HandleEnum+0x558>)
 8009678:	f002 f822 	bl	800b6c0 <iprintf>
 800967c:	200a      	movs	r0, #10
 800967e:	f002 f837 	bl	800b6f0 <putchar>
        Status = USBH_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]
      break;
 8009686:	e00f      	b.n	80096a8 <USBH_HandleEnum+0x538>

    default:
      break;
 8009688:	bf00      	nop
 800968a:	e00e      	b.n	80096aa <USBH_HandleEnum+0x53a>
      break;
 800968c:	bf00      	nop
 800968e:	e00c      	b.n	80096aa <USBH_HandleEnum+0x53a>
      break;
 8009690:	bf00      	nop
 8009692:	e00a      	b.n	80096aa <USBH_HandleEnum+0x53a>
      break;
 8009694:	bf00      	nop
 8009696:	e008      	b.n	80096aa <USBH_HandleEnum+0x53a>
      break;
 8009698:	bf00      	nop
 800969a:	e006      	b.n	80096aa <USBH_HandleEnum+0x53a>
      break;
 800969c:	bf00      	nop
 800969e:	e004      	b.n	80096aa <USBH_HandleEnum+0x53a>
      break;
 80096a0:	bf00      	nop
 80096a2:	e002      	b.n	80096aa <USBH_HandleEnum+0x53a>
      break;
 80096a4:	bf00      	nop
 80096a6:	e000      	b.n	80096aa <USBH_HandleEnum+0x53a>
      break;
 80096a8:	bf00      	nop
  }
  return Status;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	0800de80 	.word	0x0800de80
 80096b8:	0800de94 	.word	0x0800de94
 80096bc:	0800dea8 	.word	0x0800dea8
 80096c0:	0800deb8 	.word	0x0800deb8
 80096c4:	0800dec8 	.word	0x0800dec8
 80096c8:	0800dedc 	.word	0x0800dedc

080096cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80096de:	bf00      	nop
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096f8:	1c5a      	adds	r2, r3, #1
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f804 	bl	800970e <USBH_HandleSof>
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b0b      	cmp	r3, #11
 800971e:	d10a      	bne.n	8009736 <USBH_HandleSof+0x28>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009726:	2b00      	cmp	r3, #0
 8009728:	d005      	beq.n	8009736 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3
  }
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800974e:	bf00      	nop
}
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800976a:	bf00      	nop
}
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009776:	b480      	push	{r7}
 8009778:	b083      	sub	sp, #12
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 f852 	bl	800a86e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	791b      	ldrb	r3, [r3, #4]
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fe9f 	bl	800a514 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	795b      	ldrb	r3, [r3, #5]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fe99 	bl	800a514 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af02      	add	r7, sp, #8
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80097fe:	78fb      	ldrb	r3, [r7, #3]
 8009800:	b29b      	uxth	r3, r3
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	4613      	mov	r3, r2
 8009806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800980a:	2100      	movs	r1, #0
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f864 	bl	80098da <USBH_GetDescriptor>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009828:	78fa      	ldrb	r2, [r7, #3]
 800982a:	b292      	uxth	r2, r2
 800982c:	4619      	mov	r1, r3
 800982e:	f000 f918 	bl	8009a62 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009832:	7bfb      	ldrb	r3, [r7, #15]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af02      	add	r7, sp, #8
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	331c      	adds	r3, #28
 800984c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800984e:	887b      	ldrh	r3, [r7, #2]
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009858:	2100      	movs	r1, #0
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f83d 	bl	80098da <USBH_GetDescriptor>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d107      	bne.n	800987a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800986a:	887b      	ldrh	r3, [r7, #2]
 800986c:	461a      	mov	r2, r3
 800986e:	68b9      	ldr	r1, [r7, #8]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f987 	bl	8009b84 <USBH_ParseCfgDesc>
 8009876:	4603      	mov	r3, r0
 8009878:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800987a:	7bfb      	ldrb	r3, [r7, #15]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b088      	sub	sp, #32
 8009888:	af02      	add	r7, sp, #8
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	461a      	mov	r2, r3
 8009890:	460b      	mov	r3, r1
 8009892:	72fb      	strb	r3, [r7, #11]
 8009894:	4613      	mov	r3, r2
 8009896:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009898:	7afb      	ldrb	r3, [r7, #11]
 800989a:	b29b      	uxth	r3, r3
 800989c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80098a0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80098a8:	893b      	ldrh	r3, [r7, #8]
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	460b      	mov	r3, r1
 80098ae:	2100      	movs	r1, #0
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 f812 	bl	80098da <USBH_GetDescriptor>
 80098b6:	4603      	mov	r3, r0
 80098b8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d107      	bne.n	80098d0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80098c6:	893a      	ldrh	r2, [r7, #8]
 80098c8:	6879      	ldr	r1, [r7, #4]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fb24 	bl	8009f18 <USBH_ParseStringDesc>
  }

  return status;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	607b      	str	r3, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	72fb      	strb	r3, [r7, #11]
 80098e8:	4613      	mov	r3, r2
 80098ea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	789b      	ldrb	r3, [r3, #2]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d11c      	bne.n	800992e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2206      	movs	r2, #6
 8009904:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	893a      	ldrh	r2, [r7, #8]
 800990a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800990c:	893b      	ldrh	r3, [r7, #8]
 800990e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009916:	d104      	bne.n	8009922 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f240 4209 	movw	r2, #1033	; 0x409
 800991e:	829a      	strh	r2, [r3, #20]
 8009920:	e002      	b.n	8009928 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8b3a      	ldrh	r2, [r7, #24]
 800992c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800992e:	8b3b      	ldrh	r3, [r7, #24]
 8009930:	461a      	mov	r2, r3
 8009932:	6879      	ldr	r1, [r7, #4]
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fb3d 	bl	8009fb4 <USBH_CtlReq>
 800993a:	4603      	mov	r3, r0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	789b      	ldrb	r3, [r3, #2]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d10f      	bne.n	8009978 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2205      	movs	r2, #5
 8009962:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	b29a      	uxth	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009978:	2200      	movs	r2, #0
 800997a:	2100      	movs	r1, #0
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fb19 	bl	8009fb4 <USBH_CtlReq>
 8009982:	4603      	mov	r3, r0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	789b      	ldrb	r3, [r3, #2]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d10e      	bne.n	80099be <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2209      	movs	r2, #9
 80099aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	887a      	ldrh	r2, [r7, #2]
 80099b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099be:	2200      	movs	r2, #0
 80099c0:	2100      	movs	r1, #0
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 faf6 	bl	8009fb4 <USBH_CtlReq>
 80099c8:	4603      	mov	r3, r0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	789b      	ldrb	r3, [r3, #2]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d10f      	bne.n	8009a06 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2203      	movs	r2, #3
 80099f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80099f2:	78fb      	ldrb	r3, [r7, #3]
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a06:	2200      	movs	r2, #0
 8009a08:	2100      	movs	r1, #0
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fad2 	bl	8009fb4 <USBH_CtlReq>
 8009a10:	4603      	mov	r3, r0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	460b      	mov	r3, r1
 8009a24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	789b      	ldrb	r3, [r3, #2]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d10f      	bne.n	8009a4e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2202      	movs	r2, #2
 8009a32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2100      	movs	r1, #0
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 faae 	bl	8009fb4 <USBH_CtlReq>
 8009a58:	4603      	mov	r3, r0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b085      	sub	sp, #20
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	60f8      	str	r0, [r7, #12]
 8009a6a:	60b9      	str	r1, [r7, #8]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	781a      	ldrb	r2, [r3, #0]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	785a      	ldrb	r2, [r3, #1]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	3302      	adds	r3, #2
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	3303      	adds	r3, #3
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	021b      	lsls	r3, r3, #8
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	4313      	orrs	r3, r2
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	791a      	ldrb	r2, [r3, #4]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	795a      	ldrb	r2, [r3, #5]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	799a      	ldrb	r2, [r3, #6]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	79da      	ldrb	r2, [r3, #7]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	79db      	ldrb	r3, [r3, #7]
 8009ac0:	2b20      	cmp	r3, #32
 8009ac2:	dc11      	bgt.n	8009ae8 <USBH_ParseDevDesc+0x86>
 8009ac4:	2b08      	cmp	r3, #8
 8009ac6:	db16      	blt.n	8009af6 <USBH_ParseDevDesc+0x94>
 8009ac8:	3b08      	subs	r3, #8
 8009aca:	2201      	movs	r2, #1
 8009acc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	bf14      	ite	ne
 8009adc:	2301      	movne	r3, #1
 8009ade:	2300      	moveq	r3, #0
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <USBH_ParseDevDesc+0x8a>
 8009ae6:	e006      	b.n	8009af6 <USBH_ParseDevDesc+0x94>
 8009ae8:	2b40      	cmp	r3, #64	; 0x40
 8009aea:	d104      	bne.n	8009af6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	79da      	ldrb	r2, [r3, #7]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	71da      	strb	r2, [r3, #7]
      break;
 8009af4:	e003      	b.n	8009afe <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2240      	movs	r2, #64	; 0x40
 8009afa:	71da      	strb	r2, [r3, #7]
      break;
 8009afc:	bf00      	nop
  }

  if (length > 8U)
 8009afe:	88fb      	ldrh	r3, [r7, #6]
 8009b00:	2b08      	cmp	r3, #8
 8009b02:	d939      	bls.n	8009b78 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	3308      	adds	r3, #8
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	3309      	adds	r3, #9
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	330a      	adds	r3, #10
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	330b      	adds	r3, #11
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	021b      	lsls	r3, r3, #8
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	4313      	orrs	r3, r2
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	330c      	adds	r3, #12
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	330d      	adds	r3, #13
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4313      	orrs	r3, r2
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	7b9a      	ldrb	r2, [r3, #14]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	7bda      	ldrb	r2, [r3, #15]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	7c1a      	ldrb	r2, [r3, #16]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	7c5a      	ldrb	r2, [r3, #17]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	745a      	strb	r2, [r3, #17]
  }
}
 8009b78:	bf00      	nop
 8009b7a:	3714      	adds	r7, #20
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08c      	sub	sp, #48	; 0x30
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009b98:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	781a      	ldrb	r2, [r3, #0]
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	785a      	ldrb	r2, [r3, #1]
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3302      	adds	r3, #2
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	3303      	adds	r3, #3
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	021b      	lsls	r3, r3, #8
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009be0:	bf28      	it	cs
 8009be2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	791a      	ldrb	r2, [r3, #4]
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	795a      	ldrb	r2, [r3, #5]
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	799a      	ldrb	r2, [r3, #6]
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	79da      	ldrb	r2, [r3, #7]
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	7a1a      	ldrb	r2, [r3, #8]
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	2b09      	cmp	r3, #9
 8009c1a:	d002      	beq.n	8009c22 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	2209      	movs	r2, #9
 8009c20:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009c22:	88fb      	ldrh	r3, [r7, #6]
 8009c24:	2b09      	cmp	r3, #9
 8009c26:	f240 809d 	bls.w	8009d64 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009c2a:	2309      	movs	r3, #9
 8009c2c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009c32:	e081      	b.n	8009d38 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c34:	f107 0316 	add.w	r3, r7, #22
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c3c:	f000 f99f 	bl	8009f7e <USBH_GetNextDesc>
 8009c40:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	785b      	ldrb	r3, [r3, #1]
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d176      	bne.n	8009d38 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	2b09      	cmp	r3, #9
 8009c50:	d002      	beq.n	8009c58 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	2209      	movs	r2, #9
 8009c56:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c5c:	221a      	movs	r2, #26
 8009c5e:	fb02 f303 	mul.w	r3, r2, r3
 8009c62:	3308      	adds	r3, #8
 8009c64:	6a3a      	ldr	r2, [r7, #32]
 8009c66:	4413      	add	r3, r2
 8009c68:	3302      	adds	r3, #2
 8009c6a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c6e:	69f8      	ldr	r0, [r7, #28]
 8009c70:	f000 f87e 	bl	8009d70 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c7e:	e043      	b.n	8009d08 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c80:	f107 0316 	add.w	r3, r7, #22
 8009c84:	4619      	mov	r1, r3
 8009c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c88:	f000 f979 	bl	8009f7e <USBH_GetNextDesc>
 8009c8c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	785b      	ldrb	r3, [r3, #1]
 8009c92:	2b05      	cmp	r3, #5
 8009c94:	d138      	bne.n	8009d08 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	795b      	ldrb	r3, [r3, #5]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d10f      	bne.n	8009cbe <USBH_ParseCfgDesc+0x13a>
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	799b      	ldrb	r3, [r3, #6]
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d10b      	bne.n	8009cbe <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	79db      	ldrb	r3, [r3, #7]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10f      	bne.n	8009cce <USBH_ParseCfgDesc+0x14a>
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	2b09      	cmp	r3, #9
 8009cb4:	d00b      	beq.n	8009cce <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb8:	2209      	movs	r2, #9
 8009cba:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009cbc:	e007      	b.n	8009cce <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b07      	cmp	r3, #7
 8009cc4:	d004      	beq.n	8009cd0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	2207      	movs	r2, #7
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	e000      	b.n	8009cd0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009cce:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cd4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009cd8:	3201      	adds	r2, #1
 8009cda:	00d2      	lsls	r2, r2, #3
 8009cdc:	211a      	movs	r1, #26
 8009cde:	fb01 f303 	mul.w	r3, r1, r3
 8009ce2:	4413      	add	r3, r2
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	6a3a      	ldr	r2, [r7, #32]
 8009ce8:	4413      	add	r3, r2
 8009cea:	3304      	adds	r3, #4
 8009cec:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cf0:	69b9      	ldr	r1, [r7, #24]
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 f86b 	bl	8009dce <USBH_ParseEPDesc>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009cfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d02:	3301      	adds	r3, #1
 8009d04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	791b      	ldrb	r3, [r3, #4]
 8009d0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d204      	bcs.n	8009d1e <USBH_ParseCfgDesc+0x19a>
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	885a      	ldrh	r2, [r3, #2]
 8009d18:	8afb      	ldrh	r3, [r7, #22]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d8b0      	bhi.n	8009c80 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	791b      	ldrb	r3, [r3, #4]
 8009d22:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d201      	bcs.n	8009d2e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e01c      	b.n	8009d68 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d32:	3301      	adds	r3, #1
 8009d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d805      	bhi.n	8009d4c <USBH_ParseCfgDesc+0x1c8>
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	885a      	ldrh	r2, [r3, #2]
 8009d44:	8afb      	ldrh	r3, [r7, #22]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	f63f af74 	bhi.w	8009c34 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	791b      	ldrb	r3, [r3, #4]
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	bf28      	it	cs
 8009d54:	2302      	movcs	r3, #2
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d201      	bcs.n	8009d64 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e001      	b.n	8009d68 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009d64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3730      	adds	r7, #48	; 0x30
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781a      	ldrb	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	785a      	ldrb	r2, [r3, #1]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	789a      	ldrb	r2, [r3, #2]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	78da      	ldrb	r2, [r3, #3]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	791a      	ldrb	r2, [r3, #4]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	795a      	ldrb	r2, [r3, #5]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	799a      	ldrb	r2, [r3, #6]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	79da      	ldrb	r2, [r3, #7]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	7a1a      	ldrb	r2, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	721a      	strb	r2, [r3, #8]
}
 8009dc2:	bf00      	nop
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b087      	sub	sp, #28
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	60f8      	str	r0, [r7, #12]
 8009dd6:	60b9      	str	r1, [r7, #8]
 8009dd8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	781a      	ldrb	r2, [r3, #0]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	785a      	ldrb	r2, [r3, #1]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	789a      	ldrb	r2, [r3, #2]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	78da      	ldrb	r2, [r3, #3]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3304      	adds	r3, #4
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	3305      	adds	r3, #5
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	021b      	lsls	r3, r3, #8
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	4313      	orrs	r3, r2
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	799a      	ldrb	r2, [r3, #6]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	889b      	ldrh	r3, [r3, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d102      	bne.n	8009e30 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	75fb      	strb	r3, [r7, #23]
 8009e2e:	e033      	b.n	8009e98 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	889b      	ldrh	r3, [r3, #4]
 8009e34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e38:	f023 0307 	bic.w	r3, r3, #7
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	889b      	ldrh	r3, [r3, #4]
 8009e46:	b21a      	sxth	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	b299      	uxth	r1, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3305      	adds	r3, #5
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	021b      	lsls	r3, r3, #8
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d110      	bne.n	8009e8a <USBH_ParseEPDesc+0xbc>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	b299      	uxth	r1, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3305      	adds	r3, #5
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	021b      	lsls	r3, r3, #8
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	b21b      	sxth	r3, r3
 8009e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e86:	b21b      	sxth	r3, r3
 8009e88:	e001      	b.n	8009e8e <USBH_ParseEPDesc+0xc0>
 8009e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	b21b      	sxth	r3, r3
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d116      	bne.n	8009ed0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	78db      	ldrb	r3, [r3, #3]
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d005      	beq.n	8009eba <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	78db      	ldrb	r3, [r3, #3]
 8009eb2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d127      	bne.n	8009f0a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	799b      	ldrb	r3, [r3, #6]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <USBH_ParseEPDesc+0xfc>
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	799b      	ldrb	r3, [r3, #6]
 8009ec6:	2b10      	cmp	r3, #16
 8009ec8:	d91f      	bls.n	8009f0a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	75fb      	strb	r3, [r7, #23]
 8009ece:	e01c      	b.n	8009f0a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	78db      	ldrb	r3, [r3, #3]
 8009ed4:	f003 0303 	and.w	r3, r3, #3
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d10a      	bne.n	8009ef2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	799b      	ldrb	r3, [r3, #6]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <USBH_ParseEPDesc+0x11e>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	799b      	ldrb	r3, [r3, #6]
 8009ee8:	2b10      	cmp	r3, #16
 8009eea:	d90e      	bls.n	8009f0a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009eec:	2303      	movs	r3, #3
 8009eee:	75fb      	strb	r3, [r7, #23]
 8009ef0:	e00b      	b.n	8009f0a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	78db      	ldrb	r3, [r3, #3]
 8009ef6:	f003 0303 	and.w	r3, r3, #3
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d105      	bne.n	8009f0a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	799b      	ldrb	r3, [r3, #6]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009f06:	2303      	movs	r3, #3
 8009f08:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	4613      	mov	r3, r2
 8009f24:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d120      	bne.n	8009f72 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	1e9a      	subs	r2, r3, #2
 8009f36:	88fb      	ldrh	r3, [r7, #6]
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	bf28      	it	cs
 8009f3c:	4613      	movcs	r3, r2
 8009f3e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3302      	adds	r3, #2
 8009f44:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009f46:	2300      	movs	r3, #0
 8009f48:	82fb      	strh	r3, [r7, #22]
 8009f4a:	e00b      	b.n	8009f64 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009f4c:	8afb      	ldrh	r3, [r7, #22]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	4413      	add	r3, r2
 8009f52:	781a      	ldrb	r2, [r3, #0]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009f5e:	8afb      	ldrh	r3, [r7, #22]
 8009f60:	3302      	adds	r3, #2
 8009f62:	82fb      	strh	r3, [r7, #22]
 8009f64:	8afa      	ldrh	r2, [r7, #22]
 8009f66:	8abb      	ldrh	r3, [r7, #20]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d3ef      	bcc.n	8009f4c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	701a      	strb	r2, [r3, #0]
  }
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b085      	sub	sp, #20
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	881a      	ldrh	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	4413      	add	r3, r2
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	789b      	ldrb	r3, [r3, #2]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d002      	beq.n	8009fd4 <USBH_CtlReq+0x20>
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d00f      	beq.n	8009ff2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009fd2:	e027      	b.n	800a024 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	88fa      	ldrh	r2, [r7, #6]
 8009fde:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009fec:	2301      	movs	r3, #1
 8009fee:	75fb      	strb	r3, [r7, #23]
      break;
 8009ff0:	e018      	b.n	800a024 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 f81c 	bl	800a030 <USBH_HandleControl>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <USBH_CtlReq+0x54>
 800a002:	7dfb      	ldrb	r3, [r7, #23]
 800a004:	2b03      	cmp	r3, #3
 800a006:	d106      	bne.n	800a016 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2201      	movs	r2, #1
 800a00c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	761a      	strb	r2, [r3, #24]
      break;
 800a014:	e005      	b.n	800a022 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d102      	bne.n	800a022 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2201      	movs	r2, #1
 800a020:	709a      	strb	r2, [r3, #2]
      break;
 800a022:	bf00      	nop
  }
  return status;
 800a024:	7dfb      	ldrb	r3, [r7, #23]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af02      	add	r7, sp, #8
 800a036:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a038:	2301      	movs	r3, #1
 800a03a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a03c:	2300      	movs	r3, #0
 800a03e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	7e1b      	ldrb	r3, [r3, #24]
 800a044:	3b01      	subs	r3, #1
 800a046:	2b0a      	cmp	r3, #10
 800a048:	f200 815f 	bhi.w	800a30a <USBH_HandleControl+0x2da>
 800a04c:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <USBH_HandleControl+0x24>)
 800a04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a052:	bf00      	nop
 800a054:	0800a081 	.word	0x0800a081
 800a058:	0800a09b 	.word	0x0800a09b
 800a05c:	0800a105 	.word	0x0800a105
 800a060:	0800a12b 	.word	0x0800a12b
 800a064:	0800a163 	.word	0x0800a163
 800a068:	0800a18d 	.word	0x0800a18d
 800a06c:	0800a1df 	.word	0x0800a1df
 800a070:	0800a201 	.word	0x0800a201
 800a074:	0800a23d 	.word	0x0800a23d
 800a078:	0800a263 	.word	0x0800a263
 800a07c:	0800a2a1 	.word	0x0800a2a1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f103 0110 	add.w	r1, r3, #16
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	795b      	ldrb	r3, [r3, #5]
 800a08a:	461a      	mov	r2, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f951 	bl	800a334 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2202      	movs	r2, #2
 800a096:	761a      	strb	r2, [r3, #24]
      break;
 800a098:	e142      	b.n	800a320 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	795b      	ldrb	r3, [r3, #5]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fcd3 	bl	800aa4c <USBH_LL_GetURBState>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a0aa:	7bbb      	ldrb	r3, [r7, #14]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d11e      	bne.n	800a0ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7c1b      	ldrb	r3, [r3, #16]
 800a0b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	8adb      	ldrh	r3, [r3, #22]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00a      	beq.n	800a0d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a0c2:	7b7b      	ldrb	r3, [r7, #13]
 800a0c4:	2b80      	cmp	r3, #128	; 0x80
 800a0c6:	d103      	bne.n	800a0d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2203      	movs	r2, #3
 800a0cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0ce:	e11e      	b.n	800a30e <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	761a      	strb	r2, [r3, #24]
      break;
 800a0d6:	e11a      	b.n	800a30e <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800a0d8:	7b7b      	ldrb	r3, [r7, #13]
 800a0da:	2b80      	cmp	r3, #128	; 0x80
 800a0dc:	d103      	bne.n	800a0e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2209      	movs	r2, #9
 800a0e2:	761a      	strb	r2, [r3, #24]
      break;
 800a0e4:	e113      	b.n	800a30e <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2207      	movs	r2, #7
 800a0ea:	761a      	strb	r2, [r3, #24]
      break;
 800a0ec:	e10f      	b.n	800a30e <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	d003      	beq.n	800a0fc <USBH_HandleControl+0xcc>
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	f040 8109 	bne.w	800a30e <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	220b      	movs	r2, #11
 800a100:	761a      	strb	r2, [r3, #24]
      break;
 800a102:	e104      	b.n	800a30e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6899      	ldr	r1, [r3, #8]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	899a      	ldrh	r2, [r3, #12]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	791b      	ldrb	r3, [r3, #4]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f948 	bl	800a3b2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2204      	movs	r2, #4
 800a126:	761a      	strb	r2, [r3, #24]
      break;
 800a128:	e0fa      	b.n	800a320 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	791b      	ldrb	r3, [r3, #4]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fc8b 	bl	800aa4c <USBH_LL_GetURBState>
 800a136:	4603      	mov	r3, r0
 800a138:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d102      	bne.n	800a146 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2209      	movs	r2, #9
 800a144:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a146:	7bbb      	ldrb	r3, [r7, #14]
 800a148:	2b05      	cmp	r3, #5
 800a14a:	d102      	bne.n	800a152 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a14c:	2303      	movs	r3, #3
 800a14e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a150:	e0df      	b.n	800a312 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	2b04      	cmp	r3, #4
 800a156:	f040 80dc 	bne.w	800a312 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	220b      	movs	r2, #11
 800a15e:	761a      	strb	r2, [r3, #24]
      break;
 800a160:	e0d7      	b.n	800a312 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6899      	ldr	r1, [r3, #8]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	899a      	ldrh	r2, [r3, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	795b      	ldrb	r3, [r3, #5]
 800a16e:	2001      	movs	r0, #1
 800a170:	9000      	str	r0, [sp, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f8f8 	bl	800a368 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a17e:	b29a      	uxth	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2206      	movs	r2, #6
 800a188:	761a      	strb	r2, [r3, #24]
      break;
 800a18a:	e0c9      	b.n	800a320 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	795b      	ldrb	r3, [r3, #5]
 800a190:	4619      	mov	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fc5a 	bl	800aa4c <USBH_LL_GetURBState>
 800a198:	4603      	mov	r3, r0
 800a19a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a19c:	7bbb      	ldrb	r3, [r7, #14]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d103      	bne.n	800a1aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2207      	movs	r2, #7
 800a1a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1a8:	e0b5      	b.n	800a316 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
 800a1ac:	2b05      	cmp	r3, #5
 800a1ae:	d105      	bne.n	800a1bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	220c      	movs	r2, #12
 800a1b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ba:	e0ac      	b.n	800a316 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a1bc:	7bbb      	ldrb	r3, [r7, #14]
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d103      	bne.n	800a1ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2205      	movs	r2, #5
 800a1c6:	761a      	strb	r2, [r3, #24]
      break;
 800a1c8:	e0a5      	b.n	800a316 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	2b04      	cmp	r3, #4
 800a1ce:	f040 80a2 	bne.w	800a316 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	220b      	movs	r2, #11
 800a1d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a1d8:	2302      	movs	r3, #2
 800a1da:	73fb      	strb	r3, [r7, #15]
      break;
 800a1dc:	e09b      	b.n	800a316 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	791b      	ldrb	r3, [r3, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f8e3 	bl	800a3b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	761a      	strb	r2, [r3, #24]

      break;
 800a1fe:	e08f      	b.n	800a320 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	791b      	ldrb	r3, [r3, #4]
 800a204:	4619      	mov	r1, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fc20 	bl	800aa4c <USBH_LL_GetURBState>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d105      	bne.n	800a222 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	220d      	movs	r2, #13
 800a21a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a220:	e07b      	b.n	800a31a <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800a222:	7bbb      	ldrb	r3, [r7, #14]
 800a224:	2b04      	cmp	r3, #4
 800a226:	d103      	bne.n	800a230 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	220b      	movs	r2, #11
 800a22c:	761a      	strb	r2, [r3, #24]
      break;
 800a22e:	e074      	b.n	800a31a <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800a230:	7bbb      	ldrb	r3, [r7, #14]
 800a232:	2b05      	cmp	r3, #5
 800a234:	d171      	bne.n	800a31a <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800a236:	2303      	movs	r3, #3
 800a238:	73fb      	strb	r3, [r7, #15]
      break;
 800a23a:	e06e      	b.n	800a31a <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	795b      	ldrb	r3, [r3, #5]
 800a240:	2201      	movs	r2, #1
 800a242:	9200      	str	r2, [sp, #0]
 800a244:	2200      	movs	r2, #0
 800a246:	2100      	movs	r1, #0
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f88d 	bl	800a368 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a254:	b29a      	uxth	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	220a      	movs	r2, #10
 800a25e:	761a      	strb	r2, [r3, #24]
      break;
 800a260:	e05e      	b.n	800a320 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	795b      	ldrb	r3, [r3, #5]
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fbef 	bl	800aa4c <USBH_LL_GetURBState>
 800a26e:	4603      	mov	r3, r0
 800a270:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a272:	7bbb      	ldrb	r3, [r7, #14]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d105      	bne.n	800a284 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	220d      	movs	r2, #13
 800a280:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a282:	e04c      	b.n	800a31e <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	2b02      	cmp	r3, #2
 800a288:	d103      	bne.n	800a292 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2209      	movs	r2, #9
 800a28e:	761a      	strb	r2, [r3, #24]
      break;
 800a290:	e045      	b.n	800a31e <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800a292:	7bbb      	ldrb	r3, [r7, #14]
 800a294:	2b04      	cmp	r3, #4
 800a296:	d142      	bne.n	800a31e <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	220b      	movs	r2, #11
 800a29c:	761a      	strb	r2, [r3, #24]
      break;
 800a29e:	e03e      	b.n	800a31e <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	7e5b      	ldrb	r3, [r3, #25]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	765a      	strb	r2, [r3, #25]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	7e5b      	ldrb	r3, [r3, #25]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d806      	bhi.n	800a2c2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a2c0:	e02e      	b.n	800a320 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2c8:	2106      	movs	r1, #6
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800a2d4:	4815      	ldr	r0, [pc, #84]	; (800a32c <USBH_HandleControl+0x2fc>)
 800a2d6:	f001 f9f3 	bl	800b6c0 <iprintf>
 800a2da:	4815      	ldr	r0, [pc, #84]	; (800a330 <USBH_HandleControl+0x300>)
 800a2dc:	f001 f9f0 	bl	800b6c0 <iprintf>
 800a2e0:	200a      	movs	r0, #10
 800a2e2:	f001 fa05 	bl	800b6f0 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	795b      	ldrb	r3, [r3, #5]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f911 	bl	800a514 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	791b      	ldrb	r3, [r3, #4]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f90b 	bl	800a514 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a304:	2302      	movs	r3, #2
 800a306:	73fb      	strb	r3, [r7, #15]
      break;
 800a308:	e00a      	b.n	800a320 <USBH_HandleControl+0x2f0>

    default:
      break;
 800a30a:	bf00      	nop
 800a30c:	e008      	b.n	800a320 <USBH_HandleControl+0x2f0>
      break;
 800a30e:	bf00      	nop
 800a310:	e006      	b.n	800a320 <USBH_HandleControl+0x2f0>
      break;
 800a312:	bf00      	nop
 800a314:	e004      	b.n	800a320 <USBH_HandleControl+0x2f0>
      break;
 800a316:	bf00      	nop
 800a318:	e002      	b.n	800a320 <USBH_HandleControl+0x2f0>
      break;
 800a31a:	bf00      	nop
 800a31c:	e000      	b.n	800a320 <USBH_HandleControl+0x2f0>
      break;
 800a31e:	bf00      	nop
  }

  return status;
 800a320:	7bfb      	ldrb	r3, [r7, #15]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	0800def0 	.word	0x0800def0
 800a330:	0800def8 	.word	0x0800def8

0800a334 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af04      	add	r7, sp, #16
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	4613      	mov	r3, r2
 800a340:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a342:	79f9      	ldrb	r1, [r7, #7]
 800a344:	2300      	movs	r3, #0
 800a346:	9303      	str	r3, [sp, #12]
 800a348:	2308      	movs	r3, #8
 800a34a:	9302      	str	r3, [sp, #8]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	2300      	movs	r3, #0
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	2300      	movs	r3, #0
 800a356:	2200      	movs	r2, #0
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 fb46 	bl	800a9ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af04      	add	r7, sp, #16
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	4611      	mov	r1, r2
 800a374:	461a      	mov	r2, r3
 800a376:	460b      	mov	r3, r1
 800a378:	80fb      	strh	r3, [r7, #6]
 800a37a:	4613      	mov	r3, r2
 800a37c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a388:	2300      	movs	r3, #0
 800a38a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a38c:	7979      	ldrb	r1, [r7, #5]
 800a38e:	7e3b      	ldrb	r3, [r7, #24]
 800a390:	9303      	str	r3, [sp, #12]
 800a392:	88fb      	ldrh	r3, [r7, #6]
 800a394:	9302      	str	r3, [sp, #8]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	2301      	movs	r3, #1
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 fb21 	bl	800a9ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b088      	sub	sp, #32
 800a3b6:	af04      	add	r7, sp, #16
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	4611      	mov	r1, r2
 800a3be:	461a      	mov	r2, r3
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	80fb      	strh	r3, [r7, #6]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a3c8:	7979      	ldrb	r1, [r7, #5]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9303      	str	r3, [sp, #12]
 800a3ce:	88fb      	ldrh	r3, [r7, #6]
 800a3d0:	9302      	str	r3, [sp, #8]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	9301      	str	r3, [sp, #4]
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	2300      	movs	r3, #0
 800a3dc:	2201      	movs	r2, #1
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f000 fb03 	bl	800a9ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a3e4:	2300      	movs	r3, #0

}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b088      	sub	sp, #32
 800a3f2:	af04      	add	r7, sp, #16
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	80fb      	strh	r3, [r7, #6]
 800a400:	4613      	mov	r3, r2
 800a402:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a412:	7979      	ldrb	r1, [r7, #5]
 800a414:	7e3b      	ldrb	r3, [r7, #24]
 800a416:	9303      	str	r3, [sp, #12]
 800a418:	88fb      	ldrh	r3, [r7, #6]
 800a41a:	9302      	str	r3, [sp, #8]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	2301      	movs	r3, #1
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	2302      	movs	r3, #2
 800a426:	2200      	movs	r2, #0
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 fade 	bl	800a9ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af04      	add	r7, sp, #16
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	4611      	mov	r1, r2
 800a444:	461a      	mov	r2, r3
 800a446:	460b      	mov	r3, r1
 800a448:	80fb      	strh	r3, [r7, #6]
 800a44a:	4613      	mov	r3, r2
 800a44c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a44e:	7979      	ldrb	r1, [r7, #5]
 800a450:	2300      	movs	r3, #0
 800a452:	9303      	str	r3, [sp, #12]
 800a454:	88fb      	ldrh	r3, [r7, #6]
 800a456:	9302      	str	r3, [sp, #8]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	9301      	str	r3, [sp, #4]
 800a45c:	2301      	movs	r3, #1
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	2302      	movs	r3, #2
 800a462:	2201      	movs	r2, #1
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 fac0 	bl	800a9ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af04      	add	r7, sp, #16
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	4608      	mov	r0, r1
 800a47e:	4611      	mov	r1, r2
 800a480:	461a      	mov	r2, r3
 800a482:	4603      	mov	r3, r0
 800a484:	70fb      	strb	r3, [r7, #3]
 800a486:	460b      	mov	r3, r1
 800a488:	70bb      	strb	r3, [r7, #2]
 800a48a:	4613      	mov	r3, r2
 800a48c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a48e:	7878      	ldrb	r0, [r7, #1]
 800a490:	78ba      	ldrb	r2, [r7, #2]
 800a492:	78f9      	ldrb	r1, [r7, #3]
 800a494:	8b3b      	ldrh	r3, [r7, #24]
 800a496:	9302      	str	r3, [sp, #8]
 800a498:	7d3b      	ldrb	r3, [r7, #20]
 800a49a:	9301      	str	r3, [sp, #4]
 800a49c:	7c3b      	ldrb	r3, [r7, #16]
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fa53 	bl	800a94e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a4be:	78fb      	ldrb	r3, [r7, #3]
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa72 	bl	800a9ac <USBH_LL_ClosePipe>

  return USBH_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f836 	bl	800a550 <USBH_GetFreePipe>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a4e8:	89fb      	ldrh	r3, [r7, #14]
 800a4ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d00a      	beq.n	800a508 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a4f2:	78fa      	ldrb	r2, [r7, #3]
 800a4f4:	89fb      	ldrh	r3, [r7, #14]
 800a4f6:	f003 030f 	and.w	r3, r3, #15
 800a4fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	33e0      	adds	r3, #224	; 0xe0
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	440b      	add	r3, r1
 800a506:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a508:	89fb      	ldrh	r3, [r7, #14]
 800a50a:	b2db      	uxtb	r3, r3
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a520:	78fb      	ldrb	r3, [r7, #3]
 800a522:	2b0f      	cmp	r3, #15
 800a524:	d80d      	bhi.n	800a542 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	33e0      	adds	r3, #224	; 0xe0
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	78fb      	ldrb	r3, [r7, #3]
 800a534:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	33e0      	adds	r3, #224	; 0xe0
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	440b      	add	r3, r1
 800a540:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a558:	2300      	movs	r3, #0
 800a55a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a55c:	2300      	movs	r3, #0
 800a55e:	73fb      	strb	r3, [r7, #15]
 800a560:	e00f      	b.n	800a582 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	33e0      	adds	r3, #224	; 0xe0
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d102      	bne.n	800a57c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	e007      	b.n	800a58c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
 800a57e:	3301      	adds	r3, #1
 800a580:	73fb      	strb	r3, [r7, #15]
 800a582:	7bfb      	ldrb	r3, [r7, #15]
 800a584:	2b0f      	cmp	r3, #15
 800a586:	d9ec      	bls.n	800a562 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a588:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a59c:	2201      	movs	r2, #1
 800a59e:	490e      	ldr	r1, [pc, #56]	; (800a5d8 <MX_USB_HOST_Init+0x40>)
 800a5a0:	480e      	ldr	r0, [pc, #56]	; (800a5dc <MX_USB_HOST_Init+0x44>)
 800a5a2:	f7fe f9d7 	bl	8008954 <USBH_Init>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a5ac:	f7f8 fba1 	bl	8002cf2 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a5b0:	490b      	ldr	r1, [pc, #44]	; (800a5e0 <MX_USB_HOST_Init+0x48>)
 800a5b2:	480a      	ldr	r0, [pc, #40]	; (800a5dc <MX_USB_HOST_Init+0x44>)
 800a5b4:	f7fe fa6a 	bl	8008a8c <USBH_RegisterClass>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a5be:	f7f8 fb98 	bl	8002cf2 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a5c2:	4806      	ldr	r0, [pc, #24]	; (800a5dc <MX_USB_HOST_Init+0x44>)
 800a5c4:	f7fe fb50 	bl	8008c68 <USBH_Start>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a5ce:	f7f8 fb90 	bl	8002cf2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a5d2:	bf00      	nop
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	0800a5f9 	.word	0x0800a5f9
 800a5dc:	200004d4 	.word	0x200004d4
 800a5e0:	20000024 	.word	0x20000024

0800a5e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a5e8:	4802      	ldr	r0, [pc, #8]	; (800a5f4 <MX_USB_HOST_Process+0x10>)
 800a5ea:	f7fe fb4d 	bl	8008c88 <USBH_Process>
}
 800a5ee:	bf00      	nop
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	200004d4 	.word	0x200004d4

0800a5f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	3b01      	subs	r3, #1
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d819      	bhi.n	800a640 <USBH_UserProcess+0x48>
 800a60c:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <USBH_UserProcess+0x1c>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a641 	.word	0x0800a641
 800a618:	0800a631 	.word	0x0800a631
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a639 	.word	0x0800a639
 800a624:	0800a629 	.word	0x0800a629
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a628:	4b09      	ldr	r3, [pc, #36]	; (800a650 <USBH_UserProcess+0x58>)
 800a62a:	2203      	movs	r2, #3
 800a62c:	701a      	strb	r2, [r3, #0]
  break;
 800a62e:	e008      	b.n	800a642 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a630:	4b07      	ldr	r3, [pc, #28]	; (800a650 <USBH_UserProcess+0x58>)
 800a632:	2202      	movs	r2, #2
 800a634:	701a      	strb	r2, [r3, #0]
  break;
 800a636:	e004      	b.n	800a642 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a638:	4b05      	ldr	r3, [pc, #20]	; (800a650 <USBH_UserProcess+0x58>)
 800a63a:	2201      	movs	r2, #1
 800a63c:	701a      	strb	r2, [r3, #0]
  break;
 800a63e:	e000      	b.n	800a642 <USBH_UserProcess+0x4a>

  default:
  break;
 800a640:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a642:	bf00      	nop
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	200008ac 	.word	0x200008ac

0800a654 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08a      	sub	sp, #40	; 0x28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a65c:	f107 0314 	add.w	r3, r7, #20
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	605a      	str	r2, [r3, #4]
 800a666:	609a      	str	r2, [r3, #8]
 800a668:	60da      	str	r2, [r3, #12]
 800a66a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a674:	d147      	bne.n	800a706 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a676:	2300      	movs	r3, #0
 800a678:	613b      	str	r3, [r7, #16]
 800a67a:	4b25      	ldr	r3, [pc, #148]	; (800a710 <HAL_HCD_MspInit+0xbc>)
 800a67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67e:	4a24      	ldr	r2, [pc, #144]	; (800a710 <HAL_HCD_MspInit+0xbc>)
 800a680:	f043 0301 	orr.w	r3, r3, #1
 800a684:	6313      	str	r3, [r2, #48]	; 0x30
 800a686:	4b22      	ldr	r3, [pc, #136]	; (800a710 <HAL_HCD_MspInit+0xbc>)
 800a688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	613b      	str	r3, [r7, #16]
 800a690:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a692:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a698:	2300      	movs	r3, #0
 800a69a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a69c:	2300      	movs	r3, #0
 800a69e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a6a0:	f107 0314 	add.w	r3, r7, #20
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	481b      	ldr	r0, [pc, #108]	; (800a714 <HAL_HCD_MspInit+0xc0>)
 800a6a8:	f7f9 f87a 	bl	80037a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a6ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a6b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a6be:	230a      	movs	r3, #10
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6c2:	f107 0314 	add.w	r3, r7, #20
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4812      	ldr	r0, [pc, #72]	; (800a714 <HAL_HCD_MspInit+0xc0>)
 800a6ca:	f7f9 f869 	bl	80037a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a6ce:	4b10      	ldr	r3, [pc, #64]	; (800a710 <HAL_HCD_MspInit+0xbc>)
 800a6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d2:	4a0f      	ldr	r2, [pc, #60]	; (800a710 <HAL_HCD_MspInit+0xbc>)
 800a6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d8:	6353      	str	r3, [r2, #52]	; 0x34
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60fb      	str	r3, [r7, #12]
 800a6de:	4b0c      	ldr	r3, [pc, #48]	; (800a710 <HAL_HCD_MspInit+0xbc>)
 800a6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6e2:	4a0b      	ldr	r2, [pc, #44]	; (800a710 <HAL_HCD_MspInit+0xbc>)
 800a6e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6e8:	6453      	str	r3, [r2, #68]	; 0x44
 800a6ea:	4b09      	ldr	r3, [pc, #36]	; (800a710 <HAL_HCD_MspInit+0xbc>)
 800a6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	2043      	movs	r0, #67	; 0x43
 800a6fc:	f7f9 f819 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a700:	2043      	movs	r0, #67	; 0x43
 800a702:	f7f9 f832 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a706:	bf00      	nop
 800a708:	3728      	adds	r7, #40	; 0x28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	40023800 	.word	0x40023800
 800a714:	40020000 	.word	0x40020000

0800a718 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe ffdf 	bl	80096ea <USBH_LL_IncTimer>
}
 800a72c:	bf00      	nop
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a742:	4618      	mov	r0, r3
 800a744:	f7ff f817 	bl	8009776 <USBH_LL_Connect>
}
 800a748:	bf00      	nop
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff f820 	bl	80097a4 <USBH_LL_Disconnect>
}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
 800a778:	4613      	mov	r3, r2
 800a77a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe ffd1 	bl	800973e <USBH_LL_PortEnabled>
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe ffd1 	bl	800975a <USBH_LL_PortDisabled>
}
 800a7b8:	bf00      	nop
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d12a      	bne.n	800a828 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a7d2:	4a18      	ldr	r2, [pc, #96]	; (800a834 <USBH_LL_Init+0x74>)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a15      	ldr	r2, [pc, #84]	; (800a834 <USBH_LL_Init+0x74>)
 800a7de:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a7e2:	4b14      	ldr	r3, [pc, #80]	; (800a834 <USBH_LL_Init+0x74>)
 800a7e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a7e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a7ea:	4b12      	ldr	r3, [pc, #72]	; (800a834 <USBH_LL_Init+0x74>)
 800a7ec:	2208      	movs	r2, #8
 800a7ee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a7f0:	4b10      	ldr	r3, [pc, #64]	; (800a834 <USBH_LL_Init+0x74>)
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <USBH_LL_Init+0x74>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <USBH_LL_Init+0x74>)
 800a7fe:	2202      	movs	r2, #2
 800a800:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a802:	4b0c      	ldr	r3, [pc, #48]	; (800a834 <USBH_LL_Init+0x74>)
 800a804:	2200      	movs	r2, #0
 800a806:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a808:	480a      	ldr	r0, [pc, #40]	; (800a834 <USBH_LL_Init+0x74>)
 800a80a:	f7f9 f97e 	bl	8003b0a <HAL_HCD_Init>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a814:	f7f8 fa6d 	bl	8002cf2 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a818:	4806      	ldr	r0, [pc, #24]	; (800a834 <USBH_LL_Init+0x74>)
 800a81a:	f7f9 fd62 	bl	80042e2 <HAL_HCD_GetCurrentFrame>
 800a81e:	4603      	mov	r3, r0
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7fe ff52 	bl	80096cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	200008b0 	.word	0x200008b0

0800a838 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a84e:	4618      	mov	r0, r3
 800a850:	f7f9 fcd1 	bl	80041f6 <HAL_HCD_Start>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 f95c 	bl	800ab18 <USBH_Get_USB_Status>
 800a860:	4603      	mov	r3, r0
 800a862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a864:	7bbb      	ldrb	r3, [r7, #14]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b084      	sub	sp, #16
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a884:	4618      	mov	r0, r3
 800a886:	f7f9 fcd9 	bl	800423c <HAL_HCD_Stop>
 800a88a:	4603      	mov	r3, r0
 800a88c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	4618      	mov	r0, r3
 800a892:	f000 f941 	bl	800ab18 <USBH_Get_USB_Status>
 800a896:	4603      	mov	r3, r0
 800a898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a89a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7f9 fd21 	bl	80042fe <HAL_HCD_GetCurrentSpeed>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d00c      	beq.n	800a8dc <USBH_LL_GetSpeed+0x38>
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d80d      	bhi.n	800a8e2 <USBH_LL_GetSpeed+0x3e>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d002      	beq.n	800a8d0 <USBH_LL_GetSpeed+0x2c>
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d003      	beq.n	800a8d6 <USBH_LL_GetSpeed+0x32>
 800a8ce:	e008      	b.n	800a8e2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d4:	e008      	b.n	800a8e8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a8da:	e005      	b.n	800a8e8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a8dc:	2302      	movs	r3, #2
 800a8de:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e0:	e002      	b.n	800a8e8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e6:	bf00      	nop
  }
  return  speed;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b084      	sub	sp, #16
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a908:	4618      	mov	r0, r3
 800a90a:	f7f9 fcb4 	bl	8004276 <HAL_HCD_ResetPort>
 800a90e:	4603      	mov	r3, r0
 800a910:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a912:	7bfb      	ldrb	r3, [r7, #15]
 800a914:	4618      	mov	r0, r3
 800a916:	f000 f8ff 	bl	800ab18 <USBH_Get_USB_Status>
 800a91a:	4603      	mov	r3, r0
 800a91c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a91e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	4611      	mov	r1, r2
 800a93e:	4618      	mov	r0, r3
 800a940:	f7f9 fcbb 	bl	80042ba <HAL_HCD_HC_GetXferCount>
 800a944:	4603      	mov	r3, r0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a94e:	b590      	push	{r4, r7, lr}
 800a950:	b089      	sub	sp, #36	; 0x24
 800a952:	af04      	add	r7, sp, #16
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	4608      	mov	r0, r1
 800a958:	4611      	mov	r1, r2
 800a95a:	461a      	mov	r2, r3
 800a95c:	4603      	mov	r3, r0
 800a95e:	70fb      	strb	r3, [r7, #3]
 800a960:	460b      	mov	r3, r1
 800a962:	70bb      	strb	r3, [r7, #2]
 800a964:	4613      	mov	r3, r2
 800a966:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a976:	787c      	ldrb	r4, [r7, #1]
 800a978:	78ba      	ldrb	r2, [r7, #2]
 800a97a:	78f9      	ldrb	r1, [r7, #3]
 800a97c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a97e:	9302      	str	r3, [sp, #8]
 800a980:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a984:	9301      	str	r3, [sp, #4]
 800a986:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	4623      	mov	r3, r4
 800a98e:	f7f9 f91e 	bl	8003bce <HAL_HCD_HC_Init>
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 f8bd 	bl	800ab18 <USBH_Get_USB_Status>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd90      	pop	{r4, r7, pc}

0800a9ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9c6:	78fa      	ldrb	r2, [r7, #3]
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7f9 f98e 	bl	8003cec <HAL_HCD_HC_Halt>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9d4:	7bfb      	ldrb	r3, [r7, #15]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 f89e 	bl	800ab18 <USBH_Get_USB_Status>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a9ea:	b590      	push	{r4, r7, lr}
 800a9ec:	b089      	sub	sp, #36	; 0x24
 800a9ee:	af04      	add	r7, sp, #16
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	4608      	mov	r0, r1
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	70fb      	strb	r3, [r7, #3]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	70bb      	strb	r3, [r7, #2]
 800aa00:	4613      	mov	r3, r2
 800aa02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa12:	787c      	ldrb	r4, [r7, #1]
 800aa14:	78ba      	ldrb	r2, [r7, #2]
 800aa16:	78f9      	ldrb	r1, [r7, #3]
 800aa18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa1c:	9303      	str	r3, [sp, #12]
 800aa1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa20:	9302      	str	r3, [sp, #8]
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	4623      	mov	r3, r4
 800aa2e:	f7f9 f981 	bl	8003d34 <HAL_HCD_HC_SubmitRequest>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 f86d 	bl	800ab18 <USBH_Get_USB_Status>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd90      	pop	{r4, r7, pc}

0800aa4c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa5e:	78fa      	ldrb	r2, [r7, #3]
 800aa60:	4611      	mov	r1, r2
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7f9 fc15 	bl	8004292 <HAL_HCD_HC_GetURBState>
 800aa68:	4603      	mov	r3, r0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b082      	sub	sp, #8
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d103      	bne.n	800aa90 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 f870 	bl	800ab70 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aa90:	20c8      	movs	r0, #200	; 0xc8
 800aa92:	f7f8 fc53 	bl	800333c <HAL_Delay>
  return USBH_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	70fb      	strb	r3, [r7, #3]
 800aaac:	4613      	mov	r3, r2
 800aaae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aab6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aab8:	78fb      	ldrb	r3, [r7, #3]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	212c      	movs	r1, #44	; 0x2c
 800aabe:	fb01 f303 	mul.w	r3, r1, r3
 800aac2:	4413      	add	r3, r2
 800aac4:	333b      	adds	r3, #59	; 0x3b
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d009      	beq.n	800aae0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aacc:	78fb      	ldrb	r3, [r7, #3]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	212c      	movs	r1, #44	; 0x2c
 800aad2:	fb01 f303 	mul.w	r3, r1, r3
 800aad6:	4413      	add	r3, r2
 800aad8:	3354      	adds	r3, #84	; 0x54
 800aada:	78ba      	ldrb	r2, [r7, #2]
 800aadc:	701a      	strb	r2, [r3, #0]
 800aade:	e008      	b.n	800aaf2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	212c      	movs	r1, #44	; 0x2c
 800aae6:	fb01 f303 	mul.w	r3, r1, r3
 800aaea:	4413      	add	r3, r2
 800aaec:	3355      	adds	r3, #85	; 0x55
 800aaee:	78ba      	ldrb	r2, [r7, #2]
 800aaf0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7f8 fc17 	bl	800333c <HAL_Delay>
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
	...

0800ab18 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab26:	79fb      	ldrb	r3, [r7, #7]
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d817      	bhi.n	800ab5c <USBH_Get_USB_Status+0x44>
 800ab2c:	a201      	add	r2, pc, #4	; (adr r2, 800ab34 <USBH_Get_USB_Status+0x1c>)
 800ab2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab32:	bf00      	nop
 800ab34:	0800ab45 	.word	0x0800ab45
 800ab38:	0800ab4b 	.word	0x0800ab4b
 800ab3c:	0800ab51 	.word	0x0800ab51
 800ab40:	0800ab57 	.word	0x0800ab57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73fb      	strb	r3, [r7, #15]
    break;
 800ab48:	e00b      	b.n	800ab62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab4e:	e008      	b.n	800ab62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ab50:	2301      	movs	r3, #1
 800ab52:	73fb      	strb	r3, [r7, #15]
    break;
 800ab54:	e005      	b.n	800ab62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ab56:	2302      	movs	r3, #2
 800ab58:	73fb      	strb	r3, [r7, #15]
    break;
 800ab5a:	e002      	b.n	800ab62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab60:	bf00      	nop
  }
  return usb_status;
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ab7a:	79fb      	ldrb	r3, [r7, #7]
 800ab7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ab7e:	79fb      	ldrb	r3, [r7, #7]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d102      	bne.n	800ab8a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73fb      	strb	r3, [r7, #15]
 800ab88:	e001      	b.n	800ab8e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
 800ab90:	461a      	mov	r2, r3
 800ab92:	2101      	movs	r1, #1
 800ab94:	4803      	ldr	r0, [pc, #12]	; (800aba4 <MX_DriverVbusFS+0x34>)
 800ab96:	f7f8 ff9f 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 800ab9a:	bf00      	nop
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	40020800 	.word	0x40020800

0800aba8 <__errno>:
 800aba8:	4b01      	ldr	r3, [pc, #4]	; (800abb0 <__errno+0x8>)
 800abaa:	6818      	ldr	r0, [r3, #0]
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	20000044 	.word	0x20000044

0800abb4 <__libc_init_array>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	4d0d      	ldr	r5, [pc, #52]	; (800abec <__libc_init_array+0x38>)
 800abb8:	4c0d      	ldr	r4, [pc, #52]	; (800abf0 <__libc_init_array+0x3c>)
 800abba:	1b64      	subs	r4, r4, r5
 800abbc:	10a4      	asrs	r4, r4, #2
 800abbe:	2600      	movs	r6, #0
 800abc0:	42a6      	cmp	r6, r4
 800abc2:	d109      	bne.n	800abd8 <__libc_init_array+0x24>
 800abc4:	4d0b      	ldr	r5, [pc, #44]	; (800abf4 <__libc_init_array+0x40>)
 800abc6:	4c0c      	ldr	r4, [pc, #48]	; (800abf8 <__libc_init_array+0x44>)
 800abc8:	f002 fe28 	bl	800d81c <_init>
 800abcc:	1b64      	subs	r4, r4, r5
 800abce:	10a4      	asrs	r4, r4, #2
 800abd0:	2600      	movs	r6, #0
 800abd2:	42a6      	cmp	r6, r4
 800abd4:	d105      	bne.n	800abe2 <__libc_init_array+0x2e>
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
 800abd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abdc:	4798      	blx	r3
 800abde:	3601      	adds	r6, #1
 800abe0:	e7ee      	b.n	800abc0 <__libc_init_array+0xc>
 800abe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe6:	4798      	blx	r3
 800abe8:	3601      	adds	r6, #1
 800abea:	e7f2      	b.n	800abd2 <__libc_init_array+0x1e>
 800abec:	0800e51c 	.word	0x0800e51c
 800abf0:	0800e51c 	.word	0x0800e51c
 800abf4:	0800e51c 	.word	0x0800e51c
 800abf8:	0800e520 	.word	0x0800e520

0800abfc <malloc>:
 800abfc:	4b02      	ldr	r3, [pc, #8]	; (800ac08 <malloc+0xc>)
 800abfe:	4601      	mov	r1, r0
 800ac00:	6818      	ldr	r0, [r3, #0]
 800ac02:	f000 b87f 	b.w	800ad04 <_malloc_r>
 800ac06:	bf00      	nop
 800ac08:	20000044 	.word	0x20000044

0800ac0c <free>:
 800ac0c:	4b02      	ldr	r3, [pc, #8]	; (800ac18 <free+0xc>)
 800ac0e:	4601      	mov	r1, r0
 800ac10:	6818      	ldr	r0, [r3, #0]
 800ac12:	f000 b80b 	b.w	800ac2c <_free_r>
 800ac16:	bf00      	nop
 800ac18:	20000044 	.word	0x20000044

0800ac1c <memset>:
 800ac1c:	4402      	add	r2, r0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d100      	bne.n	800ac26 <memset+0xa>
 800ac24:	4770      	bx	lr
 800ac26:	f803 1b01 	strb.w	r1, [r3], #1
 800ac2a:	e7f9      	b.n	800ac20 <memset+0x4>

0800ac2c <_free_r>:
 800ac2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac2e:	2900      	cmp	r1, #0
 800ac30:	d044      	beq.n	800acbc <_free_r+0x90>
 800ac32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac36:	9001      	str	r0, [sp, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac3e:	bfb8      	it	lt
 800ac40:	18e4      	addlt	r4, r4, r3
 800ac42:	f001 ff5d 	bl	800cb00 <__malloc_lock>
 800ac46:	4a1e      	ldr	r2, [pc, #120]	; (800acc0 <_free_r+0x94>)
 800ac48:	9801      	ldr	r0, [sp, #4]
 800ac4a:	6813      	ldr	r3, [r2, #0]
 800ac4c:	b933      	cbnz	r3, 800ac5c <_free_r+0x30>
 800ac4e:	6063      	str	r3, [r4, #4]
 800ac50:	6014      	str	r4, [r2, #0]
 800ac52:	b003      	add	sp, #12
 800ac54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac58:	f001 bf58 	b.w	800cb0c <__malloc_unlock>
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	d908      	bls.n	800ac72 <_free_r+0x46>
 800ac60:	6825      	ldr	r5, [r4, #0]
 800ac62:	1961      	adds	r1, r4, r5
 800ac64:	428b      	cmp	r3, r1
 800ac66:	bf01      	itttt	eq
 800ac68:	6819      	ldreq	r1, [r3, #0]
 800ac6a:	685b      	ldreq	r3, [r3, #4]
 800ac6c:	1949      	addeq	r1, r1, r5
 800ac6e:	6021      	streq	r1, [r4, #0]
 800ac70:	e7ed      	b.n	800ac4e <_free_r+0x22>
 800ac72:	461a      	mov	r2, r3
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	b10b      	cbz	r3, 800ac7c <_free_r+0x50>
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d9fa      	bls.n	800ac72 <_free_r+0x46>
 800ac7c:	6811      	ldr	r1, [r2, #0]
 800ac7e:	1855      	adds	r5, r2, r1
 800ac80:	42a5      	cmp	r5, r4
 800ac82:	d10b      	bne.n	800ac9c <_free_r+0x70>
 800ac84:	6824      	ldr	r4, [r4, #0]
 800ac86:	4421      	add	r1, r4
 800ac88:	1854      	adds	r4, r2, r1
 800ac8a:	42a3      	cmp	r3, r4
 800ac8c:	6011      	str	r1, [r2, #0]
 800ac8e:	d1e0      	bne.n	800ac52 <_free_r+0x26>
 800ac90:	681c      	ldr	r4, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	6053      	str	r3, [r2, #4]
 800ac96:	4421      	add	r1, r4
 800ac98:	6011      	str	r1, [r2, #0]
 800ac9a:	e7da      	b.n	800ac52 <_free_r+0x26>
 800ac9c:	d902      	bls.n	800aca4 <_free_r+0x78>
 800ac9e:	230c      	movs	r3, #12
 800aca0:	6003      	str	r3, [r0, #0]
 800aca2:	e7d6      	b.n	800ac52 <_free_r+0x26>
 800aca4:	6825      	ldr	r5, [r4, #0]
 800aca6:	1961      	adds	r1, r4, r5
 800aca8:	428b      	cmp	r3, r1
 800acaa:	bf04      	itt	eq
 800acac:	6819      	ldreq	r1, [r3, #0]
 800acae:	685b      	ldreq	r3, [r3, #4]
 800acb0:	6063      	str	r3, [r4, #4]
 800acb2:	bf04      	itt	eq
 800acb4:	1949      	addeq	r1, r1, r5
 800acb6:	6021      	streq	r1, [r4, #0]
 800acb8:	6054      	str	r4, [r2, #4]
 800acba:	e7ca      	b.n	800ac52 <_free_r+0x26>
 800acbc:	b003      	add	sp, #12
 800acbe:	bd30      	pop	{r4, r5, pc}
 800acc0:	20000bb4 	.word	0x20000bb4

0800acc4 <sbrk_aligned>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	4e0e      	ldr	r6, [pc, #56]	; (800ad00 <sbrk_aligned+0x3c>)
 800acc8:	460c      	mov	r4, r1
 800acca:	6831      	ldr	r1, [r6, #0]
 800accc:	4605      	mov	r5, r0
 800acce:	b911      	cbnz	r1, 800acd6 <sbrk_aligned+0x12>
 800acd0:	f000 fd9a 	bl	800b808 <_sbrk_r>
 800acd4:	6030      	str	r0, [r6, #0]
 800acd6:	4621      	mov	r1, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	f000 fd95 	bl	800b808 <_sbrk_r>
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	d00a      	beq.n	800acf8 <sbrk_aligned+0x34>
 800ace2:	1cc4      	adds	r4, r0, #3
 800ace4:	f024 0403 	bic.w	r4, r4, #3
 800ace8:	42a0      	cmp	r0, r4
 800acea:	d007      	beq.n	800acfc <sbrk_aligned+0x38>
 800acec:	1a21      	subs	r1, r4, r0
 800acee:	4628      	mov	r0, r5
 800acf0:	f000 fd8a 	bl	800b808 <_sbrk_r>
 800acf4:	3001      	adds	r0, #1
 800acf6:	d101      	bne.n	800acfc <sbrk_aligned+0x38>
 800acf8:	f04f 34ff 	mov.w	r4, #4294967295
 800acfc:	4620      	mov	r0, r4
 800acfe:	bd70      	pop	{r4, r5, r6, pc}
 800ad00:	20000bb8 	.word	0x20000bb8

0800ad04 <_malloc_r>:
 800ad04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad08:	1ccd      	adds	r5, r1, #3
 800ad0a:	f025 0503 	bic.w	r5, r5, #3
 800ad0e:	3508      	adds	r5, #8
 800ad10:	2d0c      	cmp	r5, #12
 800ad12:	bf38      	it	cc
 800ad14:	250c      	movcc	r5, #12
 800ad16:	2d00      	cmp	r5, #0
 800ad18:	4607      	mov	r7, r0
 800ad1a:	db01      	blt.n	800ad20 <_malloc_r+0x1c>
 800ad1c:	42a9      	cmp	r1, r5
 800ad1e:	d905      	bls.n	800ad2c <_malloc_r+0x28>
 800ad20:	230c      	movs	r3, #12
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	2600      	movs	r6, #0
 800ad26:	4630      	mov	r0, r6
 800ad28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad2c:	4e2e      	ldr	r6, [pc, #184]	; (800ade8 <_malloc_r+0xe4>)
 800ad2e:	f001 fee7 	bl	800cb00 <__malloc_lock>
 800ad32:	6833      	ldr	r3, [r6, #0]
 800ad34:	461c      	mov	r4, r3
 800ad36:	bb34      	cbnz	r4, 800ad86 <_malloc_r+0x82>
 800ad38:	4629      	mov	r1, r5
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	f7ff ffc2 	bl	800acc4 <sbrk_aligned>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	4604      	mov	r4, r0
 800ad44:	d14d      	bne.n	800ade2 <_malloc_r+0xde>
 800ad46:	6834      	ldr	r4, [r6, #0]
 800ad48:	4626      	mov	r6, r4
 800ad4a:	2e00      	cmp	r6, #0
 800ad4c:	d140      	bne.n	800add0 <_malloc_r+0xcc>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	4631      	mov	r1, r6
 800ad52:	4638      	mov	r0, r7
 800ad54:	eb04 0803 	add.w	r8, r4, r3
 800ad58:	f000 fd56 	bl	800b808 <_sbrk_r>
 800ad5c:	4580      	cmp	r8, r0
 800ad5e:	d13a      	bne.n	800add6 <_malloc_r+0xd2>
 800ad60:	6821      	ldr	r1, [r4, #0]
 800ad62:	3503      	adds	r5, #3
 800ad64:	1a6d      	subs	r5, r5, r1
 800ad66:	f025 0503 	bic.w	r5, r5, #3
 800ad6a:	3508      	adds	r5, #8
 800ad6c:	2d0c      	cmp	r5, #12
 800ad6e:	bf38      	it	cc
 800ad70:	250c      	movcc	r5, #12
 800ad72:	4629      	mov	r1, r5
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7ff ffa5 	bl	800acc4 <sbrk_aligned>
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	d02b      	beq.n	800add6 <_malloc_r+0xd2>
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	442b      	add	r3, r5
 800ad82:	6023      	str	r3, [r4, #0]
 800ad84:	e00e      	b.n	800ada4 <_malloc_r+0xa0>
 800ad86:	6822      	ldr	r2, [r4, #0]
 800ad88:	1b52      	subs	r2, r2, r5
 800ad8a:	d41e      	bmi.n	800adca <_malloc_r+0xc6>
 800ad8c:	2a0b      	cmp	r2, #11
 800ad8e:	d916      	bls.n	800adbe <_malloc_r+0xba>
 800ad90:	1961      	adds	r1, r4, r5
 800ad92:	42a3      	cmp	r3, r4
 800ad94:	6025      	str	r5, [r4, #0]
 800ad96:	bf18      	it	ne
 800ad98:	6059      	strne	r1, [r3, #4]
 800ad9a:	6863      	ldr	r3, [r4, #4]
 800ad9c:	bf08      	it	eq
 800ad9e:	6031      	streq	r1, [r6, #0]
 800ada0:	5162      	str	r2, [r4, r5]
 800ada2:	604b      	str	r3, [r1, #4]
 800ada4:	4638      	mov	r0, r7
 800ada6:	f104 060b 	add.w	r6, r4, #11
 800adaa:	f001 feaf 	bl	800cb0c <__malloc_unlock>
 800adae:	f026 0607 	bic.w	r6, r6, #7
 800adb2:	1d23      	adds	r3, r4, #4
 800adb4:	1af2      	subs	r2, r6, r3
 800adb6:	d0b6      	beq.n	800ad26 <_malloc_r+0x22>
 800adb8:	1b9b      	subs	r3, r3, r6
 800adba:	50a3      	str	r3, [r4, r2]
 800adbc:	e7b3      	b.n	800ad26 <_malloc_r+0x22>
 800adbe:	6862      	ldr	r2, [r4, #4]
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	bf0c      	ite	eq
 800adc4:	6032      	streq	r2, [r6, #0]
 800adc6:	605a      	strne	r2, [r3, #4]
 800adc8:	e7ec      	b.n	800ada4 <_malloc_r+0xa0>
 800adca:	4623      	mov	r3, r4
 800adcc:	6864      	ldr	r4, [r4, #4]
 800adce:	e7b2      	b.n	800ad36 <_malloc_r+0x32>
 800add0:	4634      	mov	r4, r6
 800add2:	6876      	ldr	r6, [r6, #4]
 800add4:	e7b9      	b.n	800ad4a <_malloc_r+0x46>
 800add6:	230c      	movs	r3, #12
 800add8:	603b      	str	r3, [r7, #0]
 800adda:	4638      	mov	r0, r7
 800addc:	f001 fe96 	bl	800cb0c <__malloc_unlock>
 800ade0:	e7a1      	b.n	800ad26 <_malloc_r+0x22>
 800ade2:	6025      	str	r5, [r4, #0]
 800ade4:	e7de      	b.n	800ada4 <_malloc_r+0xa0>
 800ade6:	bf00      	nop
 800ade8:	20000bb4 	.word	0x20000bb4

0800adec <__cvt>:
 800adec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adf0:	ec55 4b10 	vmov	r4, r5, d0
 800adf4:	2d00      	cmp	r5, #0
 800adf6:	460e      	mov	r6, r1
 800adf8:	4619      	mov	r1, r3
 800adfa:	462b      	mov	r3, r5
 800adfc:	bfbb      	ittet	lt
 800adfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae02:	461d      	movlt	r5, r3
 800ae04:	2300      	movge	r3, #0
 800ae06:	232d      	movlt	r3, #45	; 0x2d
 800ae08:	700b      	strb	r3, [r1, #0]
 800ae0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae10:	4691      	mov	r9, r2
 800ae12:	f023 0820 	bic.w	r8, r3, #32
 800ae16:	bfbc      	itt	lt
 800ae18:	4622      	movlt	r2, r4
 800ae1a:	4614      	movlt	r4, r2
 800ae1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae20:	d005      	beq.n	800ae2e <__cvt+0x42>
 800ae22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae26:	d100      	bne.n	800ae2a <__cvt+0x3e>
 800ae28:	3601      	adds	r6, #1
 800ae2a:	2102      	movs	r1, #2
 800ae2c:	e000      	b.n	800ae30 <__cvt+0x44>
 800ae2e:	2103      	movs	r1, #3
 800ae30:	ab03      	add	r3, sp, #12
 800ae32:	9301      	str	r3, [sp, #4]
 800ae34:	ab02      	add	r3, sp, #8
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	ec45 4b10 	vmov	d0, r4, r5
 800ae3c:	4653      	mov	r3, sl
 800ae3e:	4632      	mov	r2, r6
 800ae40:	f000 fe3e 	bl	800bac0 <_dtoa_r>
 800ae44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae48:	4607      	mov	r7, r0
 800ae4a:	d102      	bne.n	800ae52 <__cvt+0x66>
 800ae4c:	f019 0f01 	tst.w	r9, #1
 800ae50:	d022      	beq.n	800ae98 <__cvt+0xac>
 800ae52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae56:	eb07 0906 	add.w	r9, r7, r6
 800ae5a:	d110      	bne.n	800ae7e <__cvt+0x92>
 800ae5c:	783b      	ldrb	r3, [r7, #0]
 800ae5e:	2b30      	cmp	r3, #48	; 0x30
 800ae60:	d10a      	bne.n	800ae78 <__cvt+0x8c>
 800ae62:	2200      	movs	r2, #0
 800ae64:	2300      	movs	r3, #0
 800ae66:	4620      	mov	r0, r4
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f7f5 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae6e:	b918      	cbnz	r0, 800ae78 <__cvt+0x8c>
 800ae70:	f1c6 0601 	rsb	r6, r6, #1
 800ae74:	f8ca 6000 	str.w	r6, [sl]
 800ae78:	f8da 3000 	ldr.w	r3, [sl]
 800ae7c:	4499      	add	r9, r3
 800ae7e:	2200      	movs	r2, #0
 800ae80:	2300      	movs	r3, #0
 800ae82:	4620      	mov	r0, r4
 800ae84:	4629      	mov	r1, r5
 800ae86:	f7f5 fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae8a:	b108      	cbz	r0, 800ae90 <__cvt+0xa4>
 800ae8c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae90:	2230      	movs	r2, #48	; 0x30
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	454b      	cmp	r3, r9
 800ae96:	d307      	bcc.n	800aea8 <__cvt+0xbc>
 800ae98:	9b03      	ldr	r3, [sp, #12]
 800ae9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae9c:	1bdb      	subs	r3, r3, r7
 800ae9e:	4638      	mov	r0, r7
 800aea0:	6013      	str	r3, [r2, #0]
 800aea2:	b004      	add	sp, #16
 800aea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea8:	1c59      	adds	r1, r3, #1
 800aeaa:	9103      	str	r1, [sp, #12]
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	e7f0      	b.n	800ae92 <__cvt+0xa6>

0800aeb0 <__exponent>:
 800aeb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2900      	cmp	r1, #0
 800aeb6:	bfb8      	it	lt
 800aeb8:	4249      	neglt	r1, r1
 800aeba:	f803 2b02 	strb.w	r2, [r3], #2
 800aebe:	bfb4      	ite	lt
 800aec0:	222d      	movlt	r2, #45	; 0x2d
 800aec2:	222b      	movge	r2, #43	; 0x2b
 800aec4:	2909      	cmp	r1, #9
 800aec6:	7042      	strb	r2, [r0, #1]
 800aec8:	dd2a      	ble.n	800af20 <__exponent+0x70>
 800aeca:	f10d 0407 	add.w	r4, sp, #7
 800aece:	46a4      	mov	ip, r4
 800aed0:	270a      	movs	r7, #10
 800aed2:	46a6      	mov	lr, r4
 800aed4:	460a      	mov	r2, r1
 800aed6:	fb91 f6f7 	sdiv	r6, r1, r7
 800aeda:	fb07 1516 	mls	r5, r7, r6, r1
 800aede:	3530      	adds	r5, #48	; 0x30
 800aee0:	2a63      	cmp	r2, #99	; 0x63
 800aee2:	f104 34ff 	add.w	r4, r4, #4294967295
 800aee6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aeea:	4631      	mov	r1, r6
 800aeec:	dcf1      	bgt.n	800aed2 <__exponent+0x22>
 800aeee:	3130      	adds	r1, #48	; 0x30
 800aef0:	f1ae 0502 	sub.w	r5, lr, #2
 800aef4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aef8:	1c44      	adds	r4, r0, #1
 800aefa:	4629      	mov	r1, r5
 800aefc:	4561      	cmp	r1, ip
 800aefe:	d30a      	bcc.n	800af16 <__exponent+0x66>
 800af00:	f10d 0209 	add.w	r2, sp, #9
 800af04:	eba2 020e 	sub.w	r2, r2, lr
 800af08:	4565      	cmp	r5, ip
 800af0a:	bf88      	it	hi
 800af0c:	2200      	movhi	r2, #0
 800af0e:	4413      	add	r3, r2
 800af10:	1a18      	subs	r0, r3, r0
 800af12:	b003      	add	sp, #12
 800af14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af1e:	e7ed      	b.n	800aefc <__exponent+0x4c>
 800af20:	2330      	movs	r3, #48	; 0x30
 800af22:	3130      	adds	r1, #48	; 0x30
 800af24:	7083      	strb	r3, [r0, #2]
 800af26:	70c1      	strb	r1, [r0, #3]
 800af28:	1d03      	adds	r3, r0, #4
 800af2a:	e7f1      	b.n	800af10 <__exponent+0x60>

0800af2c <_printf_float>:
 800af2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af30:	ed2d 8b02 	vpush	{d8}
 800af34:	b08d      	sub	sp, #52	; 0x34
 800af36:	460c      	mov	r4, r1
 800af38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af3c:	4616      	mov	r6, r2
 800af3e:	461f      	mov	r7, r3
 800af40:	4605      	mov	r5, r0
 800af42:	f001 fd63 	bl	800ca0c <_localeconv_r>
 800af46:	f8d0 a000 	ldr.w	sl, [r0]
 800af4a:	4650      	mov	r0, sl
 800af4c:	f7f5 f940 	bl	80001d0 <strlen>
 800af50:	2300      	movs	r3, #0
 800af52:	930a      	str	r3, [sp, #40]	; 0x28
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	9305      	str	r3, [sp, #20]
 800af58:	f8d8 3000 	ldr.w	r3, [r8]
 800af5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af60:	3307      	adds	r3, #7
 800af62:	f023 0307 	bic.w	r3, r3, #7
 800af66:	f103 0208 	add.w	r2, r3, #8
 800af6a:	f8c8 2000 	str.w	r2, [r8]
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af7e:	9307      	str	r3, [sp, #28]
 800af80:	f8cd 8018 	str.w	r8, [sp, #24]
 800af84:	ee08 0a10 	vmov	s16, r0
 800af88:	4b9f      	ldr	r3, [pc, #636]	; (800b208 <_printf_float+0x2dc>)
 800af8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af8e:	f04f 32ff 	mov.w	r2, #4294967295
 800af92:	f7f5 fdcb 	bl	8000b2c <__aeabi_dcmpun>
 800af96:	bb88      	cbnz	r0, 800affc <_printf_float+0xd0>
 800af98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af9c:	4b9a      	ldr	r3, [pc, #616]	; (800b208 <_printf_float+0x2dc>)
 800af9e:	f04f 32ff 	mov.w	r2, #4294967295
 800afa2:	f7f5 fda5 	bl	8000af0 <__aeabi_dcmple>
 800afa6:	bb48      	cbnz	r0, 800affc <_printf_float+0xd0>
 800afa8:	2200      	movs	r2, #0
 800afaa:	2300      	movs	r3, #0
 800afac:	4640      	mov	r0, r8
 800afae:	4649      	mov	r1, r9
 800afb0:	f7f5 fd94 	bl	8000adc <__aeabi_dcmplt>
 800afb4:	b110      	cbz	r0, 800afbc <_printf_float+0x90>
 800afb6:	232d      	movs	r3, #45	; 0x2d
 800afb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afbc:	4b93      	ldr	r3, [pc, #588]	; (800b20c <_printf_float+0x2e0>)
 800afbe:	4894      	ldr	r0, [pc, #592]	; (800b210 <_printf_float+0x2e4>)
 800afc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800afc4:	bf94      	ite	ls
 800afc6:	4698      	movls	r8, r3
 800afc8:	4680      	movhi	r8, r0
 800afca:	2303      	movs	r3, #3
 800afcc:	6123      	str	r3, [r4, #16]
 800afce:	9b05      	ldr	r3, [sp, #20]
 800afd0:	f023 0204 	bic.w	r2, r3, #4
 800afd4:	6022      	str	r2, [r4, #0]
 800afd6:	f04f 0900 	mov.w	r9, #0
 800afda:	9700      	str	r7, [sp, #0]
 800afdc:	4633      	mov	r3, r6
 800afde:	aa0b      	add	r2, sp, #44	; 0x2c
 800afe0:	4621      	mov	r1, r4
 800afe2:	4628      	mov	r0, r5
 800afe4:	f000 f9d8 	bl	800b398 <_printf_common>
 800afe8:	3001      	adds	r0, #1
 800afea:	f040 8090 	bne.w	800b10e <_printf_float+0x1e2>
 800afee:	f04f 30ff 	mov.w	r0, #4294967295
 800aff2:	b00d      	add	sp, #52	; 0x34
 800aff4:	ecbd 8b02 	vpop	{d8}
 800aff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800affc:	4642      	mov	r2, r8
 800affe:	464b      	mov	r3, r9
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	f7f5 fd92 	bl	8000b2c <__aeabi_dcmpun>
 800b008:	b140      	cbz	r0, 800b01c <_printf_float+0xf0>
 800b00a:	464b      	mov	r3, r9
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	bfbc      	itt	lt
 800b010:	232d      	movlt	r3, #45	; 0x2d
 800b012:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b016:	487f      	ldr	r0, [pc, #508]	; (800b214 <_printf_float+0x2e8>)
 800b018:	4b7f      	ldr	r3, [pc, #508]	; (800b218 <_printf_float+0x2ec>)
 800b01a:	e7d1      	b.n	800afc0 <_printf_float+0x94>
 800b01c:	6863      	ldr	r3, [r4, #4]
 800b01e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b022:	9206      	str	r2, [sp, #24]
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	d13f      	bne.n	800b0a8 <_printf_float+0x17c>
 800b028:	2306      	movs	r3, #6
 800b02a:	6063      	str	r3, [r4, #4]
 800b02c:	9b05      	ldr	r3, [sp, #20]
 800b02e:	6861      	ldr	r1, [r4, #4]
 800b030:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b034:	2300      	movs	r3, #0
 800b036:	9303      	str	r3, [sp, #12]
 800b038:	ab0a      	add	r3, sp, #40	; 0x28
 800b03a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b03e:	ab09      	add	r3, sp, #36	; 0x24
 800b040:	ec49 8b10 	vmov	d0, r8, r9
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	6022      	str	r2, [r4, #0]
 800b048:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b04c:	4628      	mov	r0, r5
 800b04e:	f7ff fecd 	bl	800adec <__cvt>
 800b052:	9b06      	ldr	r3, [sp, #24]
 800b054:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b056:	2b47      	cmp	r3, #71	; 0x47
 800b058:	4680      	mov	r8, r0
 800b05a:	d108      	bne.n	800b06e <_printf_float+0x142>
 800b05c:	1cc8      	adds	r0, r1, #3
 800b05e:	db02      	blt.n	800b066 <_printf_float+0x13a>
 800b060:	6863      	ldr	r3, [r4, #4]
 800b062:	4299      	cmp	r1, r3
 800b064:	dd41      	ble.n	800b0ea <_printf_float+0x1be>
 800b066:	f1ab 0b02 	sub.w	fp, fp, #2
 800b06a:	fa5f fb8b 	uxtb.w	fp, fp
 800b06e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b072:	d820      	bhi.n	800b0b6 <_printf_float+0x18a>
 800b074:	3901      	subs	r1, #1
 800b076:	465a      	mov	r2, fp
 800b078:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b07c:	9109      	str	r1, [sp, #36]	; 0x24
 800b07e:	f7ff ff17 	bl	800aeb0 <__exponent>
 800b082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b084:	1813      	adds	r3, r2, r0
 800b086:	2a01      	cmp	r2, #1
 800b088:	4681      	mov	r9, r0
 800b08a:	6123      	str	r3, [r4, #16]
 800b08c:	dc02      	bgt.n	800b094 <_printf_float+0x168>
 800b08e:	6822      	ldr	r2, [r4, #0]
 800b090:	07d2      	lsls	r2, r2, #31
 800b092:	d501      	bpl.n	800b098 <_printf_float+0x16c>
 800b094:	3301      	adds	r3, #1
 800b096:	6123      	str	r3, [r4, #16]
 800b098:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d09c      	beq.n	800afda <_printf_float+0xae>
 800b0a0:	232d      	movs	r3, #45	; 0x2d
 800b0a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0a6:	e798      	b.n	800afda <_printf_float+0xae>
 800b0a8:	9a06      	ldr	r2, [sp, #24]
 800b0aa:	2a47      	cmp	r2, #71	; 0x47
 800b0ac:	d1be      	bne.n	800b02c <_printf_float+0x100>
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1bc      	bne.n	800b02c <_printf_float+0x100>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e7b9      	b.n	800b02a <_printf_float+0xfe>
 800b0b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b0ba:	d118      	bne.n	800b0ee <_printf_float+0x1c2>
 800b0bc:	2900      	cmp	r1, #0
 800b0be:	6863      	ldr	r3, [r4, #4]
 800b0c0:	dd0b      	ble.n	800b0da <_printf_float+0x1ae>
 800b0c2:	6121      	str	r1, [r4, #16]
 800b0c4:	b913      	cbnz	r3, 800b0cc <_printf_float+0x1a0>
 800b0c6:	6822      	ldr	r2, [r4, #0]
 800b0c8:	07d0      	lsls	r0, r2, #31
 800b0ca:	d502      	bpl.n	800b0d2 <_printf_float+0x1a6>
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	440b      	add	r3, r1
 800b0d0:	6123      	str	r3, [r4, #16]
 800b0d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b0d4:	f04f 0900 	mov.w	r9, #0
 800b0d8:	e7de      	b.n	800b098 <_printf_float+0x16c>
 800b0da:	b913      	cbnz	r3, 800b0e2 <_printf_float+0x1b6>
 800b0dc:	6822      	ldr	r2, [r4, #0]
 800b0de:	07d2      	lsls	r2, r2, #31
 800b0e0:	d501      	bpl.n	800b0e6 <_printf_float+0x1ba>
 800b0e2:	3302      	adds	r3, #2
 800b0e4:	e7f4      	b.n	800b0d0 <_printf_float+0x1a4>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e7f2      	b.n	800b0d0 <_printf_float+0x1a4>
 800b0ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f0:	4299      	cmp	r1, r3
 800b0f2:	db05      	blt.n	800b100 <_printf_float+0x1d4>
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	6121      	str	r1, [r4, #16]
 800b0f8:	07d8      	lsls	r0, r3, #31
 800b0fa:	d5ea      	bpl.n	800b0d2 <_printf_float+0x1a6>
 800b0fc:	1c4b      	adds	r3, r1, #1
 800b0fe:	e7e7      	b.n	800b0d0 <_printf_float+0x1a4>
 800b100:	2900      	cmp	r1, #0
 800b102:	bfd4      	ite	le
 800b104:	f1c1 0202 	rsble	r2, r1, #2
 800b108:	2201      	movgt	r2, #1
 800b10a:	4413      	add	r3, r2
 800b10c:	e7e0      	b.n	800b0d0 <_printf_float+0x1a4>
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	055a      	lsls	r2, r3, #21
 800b112:	d407      	bmi.n	800b124 <_printf_float+0x1f8>
 800b114:	6923      	ldr	r3, [r4, #16]
 800b116:	4642      	mov	r2, r8
 800b118:	4631      	mov	r1, r6
 800b11a:	4628      	mov	r0, r5
 800b11c:	47b8      	blx	r7
 800b11e:	3001      	adds	r0, #1
 800b120:	d12c      	bne.n	800b17c <_printf_float+0x250>
 800b122:	e764      	b.n	800afee <_printf_float+0xc2>
 800b124:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b128:	f240 80e0 	bls.w	800b2ec <_printf_float+0x3c0>
 800b12c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b130:	2200      	movs	r2, #0
 800b132:	2300      	movs	r3, #0
 800b134:	f7f5 fcc8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b138:	2800      	cmp	r0, #0
 800b13a:	d034      	beq.n	800b1a6 <_printf_float+0x27a>
 800b13c:	4a37      	ldr	r2, [pc, #220]	; (800b21c <_printf_float+0x2f0>)
 800b13e:	2301      	movs	r3, #1
 800b140:	4631      	mov	r1, r6
 800b142:	4628      	mov	r0, r5
 800b144:	47b8      	blx	r7
 800b146:	3001      	adds	r0, #1
 800b148:	f43f af51 	beq.w	800afee <_printf_float+0xc2>
 800b14c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b150:	429a      	cmp	r2, r3
 800b152:	db02      	blt.n	800b15a <_printf_float+0x22e>
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	07d8      	lsls	r0, r3, #31
 800b158:	d510      	bpl.n	800b17c <_printf_float+0x250>
 800b15a:	ee18 3a10 	vmov	r3, s16
 800b15e:	4652      	mov	r2, sl
 800b160:	4631      	mov	r1, r6
 800b162:	4628      	mov	r0, r5
 800b164:	47b8      	blx	r7
 800b166:	3001      	adds	r0, #1
 800b168:	f43f af41 	beq.w	800afee <_printf_float+0xc2>
 800b16c:	f04f 0800 	mov.w	r8, #0
 800b170:	f104 091a 	add.w	r9, r4, #26
 800b174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b176:	3b01      	subs	r3, #1
 800b178:	4543      	cmp	r3, r8
 800b17a:	dc09      	bgt.n	800b190 <_printf_float+0x264>
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	079b      	lsls	r3, r3, #30
 800b180:	f100 8105 	bmi.w	800b38e <_printf_float+0x462>
 800b184:	68e0      	ldr	r0, [r4, #12]
 800b186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b188:	4298      	cmp	r0, r3
 800b18a:	bfb8      	it	lt
 800b18c:	4618      	movlt	r0, r3
 800b18e:	e730      	b.n	800aff2 <_printf_float+0xc6>
 800b190:	2301      	movs	r3, #1
 800b192:	464a      	mov	r2, r9
 800b194:	4631      	mov	r1, r6
 800b196:	4628      	mov	r0, r5
 800b198:	47b8      	blx	r7
 800b19a:	3001      	adds	r0, #1
 800b19c:	f43f af27 	beq.w	800afee <_printf_float+0xc2>
 800b1a0:	f108 0801 	add.w	r8, r8, #1
 800b1a4:	e7e6      	b.n	800b174 <_printf_float+0x248>
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	dc39      	bgt.n	800b220 <_printf_float+0x2f4>
 800b1ac:	4a1b      	ldr	r2, [pc, #108]	; (800b21c <_printf_float+0x2f0>)
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	4631      	mov	r1, r6
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	47b8      	blx	r7
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	f43f af19 	beq.w	800afee <_printf_float+0xc2>
 800b1bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	d102      	bne.n	800b1ca <_printf_float+0x29e>
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	07d9      	lsls	r1, r3, #31
 800b1c8:	d5d8      	bpl.n	800b17c <_printf_float+0x250>
 800b1ca:	ee18 3a10 	vmov	r3, s16
 800b1ce:	4652      	mov	r2, sl
 800b1d0:	4631      	mov	r1, r6
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	47b8      	blx	r7
 800b1d6:	3001      	adds	r0, #1
 800b1d8:	f43f af09 	beq.w	800afee <_printf_float+0xc2>
 800b1dc:	f04f 0900 	mov.w	r9, #0
 800b1e0:	f104 0a1a 	add.w	sl, r4, #26
 800b1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e6:	425b      	negs	r3, r3
 800b1e8:	454b      	cmp	r3, r9
 800b1ea:	dc01      	bgt.n	800b1f0 <_printf_float+0x2c4>
 800b1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ee:	e792      	b.n	800b116 <_printf_float+0x1ea>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	4652      	mov	r2, sl
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	47b8      	blx	r7
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	f43f aef7 	beq.w	800afee <_printf_float+0xc2>
 800b200:	f109 0901 	add.w	r9, r9, #1
 800b204:	e7ee      	b.n	800b1e4 <_printf_float+0x2b8>
 800b206:	bf00      	nop
 800b208:	7fefffff 	.word	0x7fefffff
 800b20c:	0800e13c 	.word	0x0800e13c
 800b210:	0800e140 	.word	0x0800e140
 800b214:	0800e148 	.word	0x0800e148
 800b218:	0800e144 	.word	0x0800e144
 800b21c:	0800e14c 	.word	0x0800e14c
 800b220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b224:	429a      	cmp	r2, r3
 800b226:	bfa8      	it	ge
 800b228:	461a      	movge	r2, r3
 800b22a:	2a00      	cmp	r2, #0
 800b22c:	4691      	mov	r9, r2
 800b22e:	dc37      	bgt.n	800b2a0 <_printf_float+0x374>
 800b230:	f04f 0b00 	mov.w	fp, #0
 800b234:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b238:	f104 021a 	add.w	r2, r4, #26
 800b23c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b23e:	9305      	str	r3, [sp, #20]
 800b240:	eba3 0309 	sub.w	r3, r3, r9
 800b244:	455b      	cmp	r3, fp
 800b246:	dc33      	bgt.n	800b2b0 <_printf_float+0x384>
 800b248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b24c:	429a      	cmp	r2, r3
 800b24e:	db3b      	blt.n	800b2c8 <_printf_float+0x39c>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	07da      	lsls	r2, r3, #31
 800b254:	d438      	bmi.n	800b2c8 <_printf_float+0x39c>
 800b256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b258:	9a05      	ldr	r2, [sp, #20]
 800b25a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b25c:	1a9a      	subs	r2, r3, r2
 800b25e:	eba3 0901 	sub.w	r9, r3, r1
 800b262:	4591      	cmp	r9, r2
 800b264:	bfa8      	it	ge
 800b266:	4691      	movge	r9, r2
 800b268:	f1b9 0f00 	cmp.w	r9, #0
 800b26c:	dc35      	bgt.n	800b2da <_printf_float+0x3ae>
 800b26e:	f04f 0800 	mov.w	r8, #0
 800b272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b276:	f104 0a1a 	add.w	sl, r4, #26
 800b27a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b27e:	1a9b      	subs	r3, r3, r2
 800b280:	eba3 0309 	sub.w	r3, r3, r9
 800b284:	4543      	cmp	r3, r8
 800b286:	f77f af79 	ble.w	800b17c <_printf_float+0x250>
 800b28a:	2301      	movs	r3, #1
 800b28c:	4652      	mov	r2, sl
 800b28e:	4631      	mov	r1, r6
 800b290:	4628      	mov	r0, r5
 800b292:	47b8      	blx	r7
 800b294:	3001      	adds	r0, #1
 800b296:	f43f aeaa 	beq.w	800afee <_printf_float+0xc2>
 800b29a:	f108 0801 	add.w	r8, r8, #1
 800b29e:	e7ec      	b.n	800b27a <_printf_float+0x34e>
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4642      	mov	r2, r8
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	47b8      	blx	r7
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d1c0      	bne.n	800b230 <_printf_float+0x304>
 800b2ae:	e69e      	b.n	800afee <_printf_float+0xc2>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	9205      	str	r2, [sp, #20]
 800b2b8:	47b8      	blx	r7
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	f43f ae97 	beq.w	800afee <_printf_float+0xc2>
 800b2c0:	9a05      	ldr	r2, [sp, #20]
 800b2c2:	f10b 0b01 	add.w	fp, fp, #1
 800b2c6:	e7b9      	b.n	800b23c <_printf_float+0x310>
 800b2c8:	ee18 3a10 	vmov	r3, s16
 800b2cc:	4652      	mov	r2, sl
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	47b8      	blx	r7
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	d1be      	bne.n	800b256 <_printf_float+0x32a>
 800b2d8:	e689      	b.n	800afee <_printf_float+0xc2>
 800b2da:	9a05      	ldr	r2, [sp, #20]
 800b2dc:	464b      	mov	r3, r9
 800b2de:	4442      	add	r2, r8
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	d1c1      	bne.n	800b26e <_printf_float+0x342>
 800b2ea:	e680      	b.n	800afee <_printf_float+0xc2>
 800b2ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2ee:	2a01      	cmp	r2, #1
 800b2f0:	dc01      	bgt.n	800b2f6 <_printf_float+0x3ca>
 800b2f2:	07db      	lsls	r3, r3, #31
 800b2f4:	d538      	bpl.n	800b368 <_printf_float+0x43c>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	4642      	mov	r2, r8
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	47b8      	blx	r7
 800b300:	3001      	adds	r0, #1
 800b302:	f43f ae74 	beq.w	800afee <_printf_float+0xc2>
 800b306:	ee18 3a10 	vmov	r3, s16
 800b30a:	4652      	mov	r2, sl
 800b30c:	4631      	mov	r1, r6
 800b30e:	4628      	mov	r0, r5
 800b310:	47b8      	blx	r7
 800b312:	3001      	adds	r0, #1
 800b314:	f43f ae6b 	beq.w	800afee <_printf_float+0xc2>
 800b318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b31c:	2200      	movs	r2, #0
 800b31e:	2300      	movs	r3, #0
 800b320:	f7f5 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b324:	b9d8      	cbnz	r0, 800b35e <_printf_float+0x432>
 800b326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b328:	f108 0201 	add.w	r2, r8, #1
 800b32c:	3b01      	subs	r3, #1
 800b32e:	4631      	mov	r1, r6
 800b330:	4628      	mov	r0, r5
 800b332:	47b8      	blx	r7
 800b334:	3001      	adds	r0, #1
 800b336:	d10e      	bne.n	800b356 <_printf_float+0x42a>
 800b338:	e659      	b.n	800afee <_printf_float+0xc2>
 800b33a:	2301      	movs	r3, #1
 800b33c:	4652      	mov	r2, sl
 800b33e:	4631      	mov	r1, r6
 800b340:	4628      	mov	r0, r5
 800b342:	47b8      	blx	r7
 800b344:	3001      	adds	r0, #1
 800b346:	f43f ae52 	beq.w	800afee <_printf_float+0xc2>
 800b34a:	f108 0801 	add.w	r8, r8, #1
 800b34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b350:	3b01      	subs	r3, #1
 800b352:	4543      	cmp	r3, r8
 800b354:	dcf1      	bgt.n	800b33a <_printf_float+0x40e>
 800b356:	464b      	mov	r3, r9
 800b358:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b35c:	e6dc      	b.n	800b118 <_printf_float+0x1ec>
 800b35e:	f04f 0800 	mov.w	r8, #0
 800b362:	f104 0a1a 	add.w	sl, r4, #26
 800b366:	e7f2      	b.n	800b34e <_printf_float+0x422>
 800b368:	2301      	movs	r3, #1
 800b36a:	4642      	mov	r2, r8
 800b36c:	e7df      	b.n	800b32e <_printf_float+0x402>
 800b36e:	2301      	movs	r3, #1
 800b370:	464a      	mov	r2, r9
 800b372:	4631      	mov	r1, r6
 800b374:	4628      	mov	r0, r5
 800b376:	47b8      	blx	r7
 800b378:	3001      	adds	r0, #1
 800b37a:	f43f ae38 	beq.w	800afee <_printf_float+0xc2>
 800b37e:	f108 0801 	add.w	r8, r8, #1
 800b382:	68e3      	ldr	r3, [r4, #12]
 800b384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b386:	1a5b      	subs	r3, r3, r1
 800b388:	4543      	cmp	r3, r8
 800b38a:	dcf0      	bgt.n	800b36e <_printf_float+0x442>
 800b38c:	e6fa      	b.n	800b184 <_printf_float+0x258>
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	f104 0919 	add.w	r9, r4, #25
 800b396:	e7f4      	b.n	800b382 <_printf_float+0x456>

0800b398 <_printf_common>:
 800b398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39c:	4616      	mov	r6, r2
 800b39e:	4699      	mov	r9, r3
 800b3a0:	688a      	ldr	r2, [r1, #8]
 800b3a2:	690b      	ldr	r3, [r1, #16]
 800b3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	bfb8      	it	lt
 800b3ac:	4613      	movlt	r3, r2
 800b3ae:	6033      	str	r3, [r6, #0]
 800b3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	b10a      	cbz	r2, 800b3be <_printf_common+0x26>
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	6033      	str	r3, [r6, #0]
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	0699      	lsls	r1, r3, #26
 800b3c2:	bf42      	ittt	mi
 800b3c4:	6833      	ldrmi	r3, [r6, #0]
 800b3c6:	3302      	addmi	r3, #2
 800b3c8:	6033      	strmi	r3, [r6, #0]
 800b3ca:	6825      	ldr	r5, [r4, #0]
 800b3cc:	f015 0506 	ands.w	r5, r5, #6
 800b3d0:	d106      	bne.n	800b3e0 <_printf_common+0x48>
 800b3d2:	f104 0a19 	add.w	sl, r4, #25
 800b3d6:	68e3      	ldr	r3, [r4, #12]
 800b3d8:	6832      	ldr	r2, [r6, #0]
 800b3da:	1a9b      	subs	r3, r3, r2
 800b3dc:	42ab      	cmp	r3, r5
 800b3de:	dc26      	bgt.n	800b42e <_printf_common+0x96>
 800b3e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3e4:	1e13      	subs	r3, r2, #0
 800b3e6:	6822      	ldr	r2, [r4, #0]
 800b3e8:	bf18      	it	ne
 800b3ea:	2301      	movne	r3, #1
 800b3ec:	0692      	lsls	r2, r2, #26
 800b3ee:	d42b      	bmi.n	800b448 <_printf_common+0xb0>
 800b3f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	47c0      	blx	r8
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d01e      	beq.n	800b43c <_printf_common+0xa4>
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	68e5      	ldr	r5, [r4, #12]
 800b402:	6832      	ldr	r2, [r6, #0]
 800b404:	f003 0306 	and.w	r3, r3, #6
 800b408:	2b04      	cmp	r3, #4
 800b40a:	bf08      	it	eq
 800b40c:	1aad      	subeq	r5, r5, r2
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	6922      	ldr	r2, [r4, #16]
 800b412:	bf0c      	ite	eq
 800b414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b418:	2500      	movne	r5, #0
 800b41a:	4293      	cmp	r3, r2
 800b41c:	bfc4      	itt	gt
 800b41e:	1a9b      	subgt	r3, r3, r2
 800b420:	18ed      	addgt	r5, r5, r3
 800b422:	2600      	movs	r6, #0
 800b424:	341a      	adds	r4, #26
 800b426:	42b5      	cmp	r5, r6
 800b428:	d11a      	bne.n	800b460 <_printf_common+0xc8>
 800b42a:	2000      	movs	r0, #0
 800b42c:	e008      	b.n	800b440 <_printf_common+0xa8>
 800b42e:	2301      	movs	r3, #1
 800b430:	4652      	mov	r2, sl
 800b432:	4649      	mov	r1, r9
 800b434:	4638      	mov	r0, r7
 800b436:	47c0      	blx	r8
 800b438:	3001      	adds	r0, #1
 800b43a:	d103      	bne.n	800b444 <_printf_common+0xac>
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b444:	3501      	adds	r5, #1
 800b446:	e7c6      	b.n	800b3d6 <_printf_common+0x3e>
 800b448:	18e1      	adds	r1, r4, r3
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	2030      	movs	r0, #48	; 0x30
 800b44e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b452:	4422      	add	r2, r4
 800b454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b45c:	3302      	adds	r3, #2
 800b45e:	e7c7      	b.n	800b3f0 <_printf_common+0x58>
 800b460:	2301      	movs	r3, #1
 800b462:	4622      	mov	r2, r4
 800b464:	4649      	mov	r1, r9
 800b466:	4638      	mov	r0, r7
 800b468:	47c0      	blx	r8
 800b46a:	3001      	adds	r0, #1
 800b46c:	d0e6      	beq.n	800b43c <_printf_common+0xa4>
 800b46e:	3601      	adds	r6, #1
 800b470:	e7d9      	b.n	800b426 <_printf_common+0x8e>
	...

0800b474 <_printf_i>:
 800b474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	7e0f      	ldrb	r7, [r1, #24]
 800b47a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b47c:	2f78      	cmp	r7, #120	; 0x78
 800b47e:	4691      	mov	r9, r2
 800b480:	4680      	mov	r8, r0
 800b482:	460c      	mov	r4, r1
 800b484:	469a      	mov	sl, r3
 800b486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b48a:	d807      	bhi.n	800b49c <_printf_i+0x28>
 800b48c:	2f62      	cmp	r7, #98	; 0x62
 800b48e:	d80a      	bhi.n	800b4a6 <_printf_i+0x32>
 800b490:	2f00      	cmp	r7, #0
 800b492:	f000 80d8 	beq.w	800b646 <_printf_i+0x1d2>
 800b496:	2f58      	cmp	r7, #88	; 0x58
 800b498:	f000 80a3 	beq.w	800b5e2 <_printf_i+0x16e>
 800b49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4a4:	e03a      	b.n	800b51c <_printf_i+0xa8>
 800b4a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4aa:	2b15      	cmp	r3, #21
 800b4ac:	d8f6      	bhi.n	800b49c <_printf_i+0x28>
 800b4ae:	a101      	add	r1, pc, #4	; (adr r1, 800b4b4 <_printf_i+0x40>)
 800b4b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4b4:	0800b50d 	.word	0x0800b50d
 800b4b8:	0800b521 	.word	0x0800b521
 800b4bc:	0800b49d 	.word	0x0800b49d
 800b4c0:	0800b49d 	.word	0x0800b49d
 800b4c4:	0800b49d 	.word	0x0800b49d
 800b4c8:	0800b49d 	.word	0x0800b49d
 800b4cc:	0800b521 	.word	0x0800b521
 800b4d0:	0800b49d 	.word	0x0800b49d
 800b4d4:	0800b49d 	.word	0x0800b49d
 800b4d8:	0800b49d 	.word	0x0800b49d
 800b4dc:	0800b49d 	.word	0x0800b49d
 800b4e0:	0800b62d 	.word	0x0800b62d
 800b4e4:	0800b551 	.word	0x0800b551
 800b4e8:	0800b60f 	.word	0x0800b60f
 800b4ec:	0800b49d 	.word	0x0800b49d
 800b4f0:	0800b49d 	.word	0x0800b49d
 800b4f4:	0800b64f 	.word	0x0800b64f
 800b4f8:	0800b49d 	.word	0x0800b49d
 800b4fc:	0800b551 	.word	0x0800b551
 800b500:	0800b49d 	.word	0x0800b49d
 800b504:	0800b49d 	.word	0x0800b49d
 800b508:	0800b617 	.word	0x0800b617
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	1d1a      	adds	r2, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	602a      	str	r2, [r5, #0]
 800b514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b51c:	2301      	movs	r3, #1
 800b51e:	e0a3      	b.n	800b668 <_printf_i+0x1f4>
 800b520:	6820      	ldr	r0, [r4, #0]
 800b522:	6829      	ldr	r1, [r5, #0]
 800b524:	0606      	lsls	r6, r0, #24
 800b526:	f101 0304 	add.w	r3, r1, #4
 800b52a:	d50a      	bpl.n	800b542 <_printf_i+0xce>
 800b52c:	680e      	ldr	r6, [r1, #0]
 800b52e:	602b      	str	r3, [r5, #0]
 800b530:	2e00      	cmp	r6, #0
 800b532:	da03      	bge.n	800b53c <_printf_i+0xc8>
 800b534:	232d      	movs	r3, #45	; 0x2d
 800b536:	4276      	negs	r6, r6
 800b538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b53c:	485e      	ldr	r0, [pc, #376]	; (800b6b8 <_printf_i+0x244>)
 800b53e:	230a      	movs	r3, #10
 800b540:	e019      	b.n	800b576 <_printf_i+0x102>
 800b542:	680e      	ldr	r6, [r1, #0]
 800b544:	602b      	str	r3, [r5, #0]
 800b546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b54a:	bf18      	it	ne
 800b54c:	b236      	sxthne	r6, r6
 800b54e:	e7ef      	b.n	800b530 <_printf_i+0xbc>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	6820      	ldr	r0, [r4, #0]
 800b554:	1d19      	adds	r1, r3, #4
 800b556:	6029      	str	r1, [r5, #0]
 800b558:	0601      	lsls	r1, r0, #24
 800b55a:	d501      	bpl.n	800b560 <_printf_i+0xec>
 800b55c:	681e      	ldr	r6, [r3, #0]
 800b55e:	e002      	b.n	800b566 <_printf_i+0xf2>
 800b560:	0646      	lsls	r6, r0, #25
 800b562:	d5fb      	bpl.n	800b55c <_printf_i+0xe8>
 800b564:	881e      	ldrh	r6, [r3, #0]
 800b566:	4854      	ldr	r0, [pc, #336]	; (800b6b8 <_printf_i+0x244>)
 800b568:	2f6f      	cmp	r7, #111	; 0x6f
 800b56a:	bf0c      	ite	eq
 800b56c:	2308      	moveq	r3, #8
 800b56e:	230a      	movne	r3, #10
 800b570:	2100      	movs	r1, #0
 800b572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b576:	6865      	ldr	r5, [r4, #4]
 800b578:	60a5      	str	r5, [r4, #8]
 800b57a:	2d00      	cmp	r5, #0
 800b57c:	bfa2      	ittt	ge
 800b57e:	6821      	ldrge	r1, [r4, #0]
 800b580:	f021 0104 	bicge.w	r1, r1, #4
 800b584:	6021      	strge	r1, [r4, #0]
 800b586:	b90e      	cbnz	r6, 800b58c <_printf_i+0x118>
 800b588:	2d00      	cmp	r5, #0
 800b58a:	d04d      	beq.n	800b628 <_printf_i+0x1b4>
 800b58c:	4615      	mov	r5, r2
 800b58e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b592:	fb03 6711 	mls	r7, r3, r1, r6
 800b596:	5dc7      	ldrb	r7, [r0, r7]
 800b598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b59c:	4637      	mov	r7, r6
 800b59e:	42bb      	cmp	r3, r7
 800b5a0:	460e      	mov	r6, r1
 800b5a2:	d9f4      	bls.n	800b58e <_printf_i+0x11a>
 800b5a4:	2b08      	cmp	r3, #8
 800b5a6:	d10b      	bne.n	800b5c0 <_printf_i+0x14c>
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	07de      	lsls	r6, r3, #31
 800b5ac:	d508      	bpl.n	800b5c0 <_printf_i+0x14c>
 800b5ae:	6923      	ldr	r3, [r4, #16]
 800b5b0:	6861      	ldr	r1, [r4, #4]
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	bfde      	ittt	le
 800b5b6:	2330      	movle	r3, #48	; 0x30
 800b5b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5c0:	1b52      	subs	r2, r2, r5
 800b5c2:	6122      	str	r2, [r4, #16]
 800b5c4:	f8cd a000 	str.w	sl, [sp]
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	aa03      	add	r2, sp, #12
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	f7ff fee2 	bl	800b398 <_printf_common>
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d14c      	bne.n	800b672 <_printf_i+0x1fe>
 800b5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5dc:	b004      	add	sp, #16
 800b5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e2:	4835      	ldr	r0, [pc, #212]	; (800b6b8 <_printf_i+0x244>)
 800b5e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b5e8:	6829      	ldr	r1, [r5, #0]
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5f0:	6029      	str	r1, [r5, #0]
 800b5f2:	061d      	lsls	r5, r3, #24
 800b5f4:	d514      	bpl.n	800b620 <_printf_i+0x1ac>
 800b5f6:	07df      	lsls	r7, r3, #31
 800b5f8:	bf44      	itt	mi
 800b5fa:	f043 0320 	orrmi.w	r3, r3, #32
 800b5fe:	6023      	strmi	r3, [r4, #0]
 800b600:	b91e      	cbnz	r6, 800b60a <_printf_i+0x196>
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	f023 0320 	bic.w	r3, r3, #32
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	2310      	movs	r3, #16
 800b60c:	e7b0      	b.n	800b570 <_printf_i+0xfc>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	f043 0320 	orr.w	r3, r3, #32
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	2378      	movs	r3, #120	; 0x78
 800b618:	4828      	ldr	r0, [pc, #160]	; (800b6bc <_printf_i+0x248>)
 800b61a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b61e:	e7e3      	b.n	800b5e8 <_printf_i+0x174>
 800b620:	0659      	lsls	r1, r3, #25
 800b622:	bf48      	it	mi
 800b624:	b2b6      	uxthmi	r6, r6
 800b626:	e7e6      	b.n	800b5f6 <_printf_i+0x182>
 800b628:	4615      	mov	r5, r2
 800b62a:	e7bb      	b.n	800b5a4 <_printf_i+0x130>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	6826      	ldr	r6, [r4, #0]
 800b630:	6961      	ldr	r1, [r4, #20]
 800b632:	1d18      	adds	r0, r3, #4
 800b634:	6028      	str	r0, [r5, #0]
 800b636:	0635      	lsls	r5, r6, #24
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	d501      	bpl.n	800b640 <_printf_i+0x1cc>
 800b63c:	6019      	str	r1, [r3, #0]
 800b63e:	e002      	b.n	800b646 <_printf_i+0x1d2>
 800b640:	0670      	lsls	r0, r6, #25
 800b642:	d5fb      	bpl.n	800b63c <_printf_i+0x1c8>
 800b644:	8019      	strh	r1, [r3, #0]
 800b646:	2300      	movs	r3, #0
 800b648:	6123      	str	r3, [r4, #16]
 800b64a:	4615      	mov	r5, r2
 800b64c:	e7ba      	b.n	800b5c4 <_printf_i+0x150>
 800b64e:	682b      	ldr	r3, [r5, #0]
 800b650:	1d1a      	adds	r2, r3, #4
 800b652:	602a      	str	r2, [r5, #0]
 800b654:	681d      	ldr	r5, [r3, #0]
 800b656:	6862      	ldr	r2, [r4, #4]
 800b658:	2100      	movs	r1, #0
 800b65a:	4628      	mov	r0, r5
 800b65c:	f7f4 fdc0 	bl	80001e0 <memchr>
 800b660:	b108      	cbz	r0, 800b666 <_printf_i+0x1f2>
 800b662:	1b40      	subs	r0, r0, r5
 800b664:	6060      	str	r0, [r4, #4]
 800b666:	6863      	ldr	r3, [r4, #4]
 800b668:	6123      	str	r3, [r4, #16]
 800b66a:	2300      	movs	r3, #0
 800b66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b670:	e7a8      	b.n	800b5c4 <_printf_i+0x150>
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	462a      	mov	r2, r5
 800b676:	4649      	mov	r1, r9
 800b678:	4640      	mov	r0, r8
 800b67a:	47d0      	blx	sl
 800b67c:	3001      	adds	r0, #1
 800b67e:	d0ab      	beq.n	800b5d8 <_printf_i+0x164>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	079b      	lsls	r3, r3, #30
 800b684:	d413      	bmi.n	800b6ae <_printf_i+0x23a>
 800b686:	68e0      	ldr	r0, [r4, #12]
 800b688:	9b03      	ldr	r3, [sp, #12]
 800b68a:	4298      	cmp	r0, r3
 800b68c:	bfb8      	it	lt
 800b68e:	4618      	movlt	r0, r3
 800b690:	e7a4      	b.n	800b5dc <_printf_i+0x168>
 800b692:	2301      	movs	r3, #1
 800b694:	4632      	mov	r2, r6
 800b696:	4649      	mov	r1, r9
 800b698:	4640      	mov	r0, r8
 800b69a:	47d0      	blx	sl
 800b69c:	3001      	adds	r0, #1
 800b69e:	d09b      	beq.n	800b5d8 <_printf_i+0x164>
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	68e3      	ldr	r3, [r4, #12]
 800b6a4:	9903      	ldr	r1, [sp, #12]
 800b6a6:	1a5b      	subs	r3, r3, r1
 800b6a8:	42ab      	cmp	r3, r5
 800b6aa:	dcf2      	bgt.n	800b692 <_printf_i+0x21e>
 800b6ac:	e7eb      	b.n	800b686 <_printf_i+0x212>
 800b6ae:	2500      	movs	r5, #0
 800b6b0:	f104 0619 	add.w	r6, r4, #25
 800b6b4:	e7f5      	b.n	800b6a2 <_printf_i+0x22e>
 800b6b6:	bf00      	nop
 800b6b8:	0800e14e 	.word	0x0800e14e
 800b6bc:	0800e15f 	.word	0x0800e15f

0800b6c0 <iprintf>:
 800b6c0:	b40f      	push	{r0, r1, r2, r3}
 800b6c2:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <iprintf+0x2c>)
 800b6c4:	b513      	push	{r0, r1, r4, lr}
 800b6c6:	681c      	ldr	r4, [r3, #0]
 800b6c8:	b124      	cbz	r4, 800b6d4 <iprintf+0x14>
 800b6ca:	69a3      	ldr	r3, [r4, #24]
 800b6cc:	b913      	cbnz	r3, 800b6d4 <iprintf+0x14>
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f001 f8fe 	bl	800c8d0 <__sinit>
 800b6d4:	ab05      	add	r3, sp, #20
 800b6d6:	9a04      	ldr	r2, [sp, #16]
 800b6d8:	68a1      	ldr	r1, [r4, #8]
 800b6da:	9301      	str	r3, [sp, #4]
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f001 fddf 	bl	800d2a0 <_vfiprintf_r>
 800b6e2:	b002      	add	sp, #8
 800b6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6e8:	b004      	add	sp, #16
 800b6ea:	4770      	bx	lr
 800b6ec:	20000044 	.word	0x20000044

0800b6f0 <putchar>:
 800b6f0:	4b09      	ldr	r3, [pc, #36]	; (800b718 <putchar+0x28>)
 800b6f2:	b513      	push	{r0, r1, r4, lr}
 800b6f4:	681c      	ldr	r4, [r3, #0]
 800b6f6:	4601      	mov	r1, r0
 800b6f8:	b134      	cbz	r4, 800b708 <putchar+0x18>
 800b6fa:	69a3      	ldr	r3, [r4, #24]
 800b6fc:	b923      	cbnz	r3, 800b708 <putchar+0x18>
 800b6fe:	9001      	str	r0, [sp, #4]
 800b700:	4620      	mov	r0, r4
 800b702:	f001 f8e5 	bl	800c8d0 <__sinit>
 800b706:	9901      	ldr	r1, [sp, #4]
 800b708:	68a2      	ldr	r2, [r4, #8]
 800b70a:	4620      	mov	r0, r4
 800b70c:	b002      	add	sp, #8
 800b70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b712:	f001 bef5 	b.w	800d500 <_putc_r>
 800b716:	bf00      	nop
 800b718:	20000044 	.word	0x20000044

0800b71c <_puts_r>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	460e      	mov	r6, r1
 800b720:	4605      	mov	r5, r0
 800b722:	b118      	cbz	r0, 800b72c <_puts_r+0x10>
 800b724:	6983      	ldr	r3, [r0, #24]
 800b726:	b90b      	cbnz	r3, 800b72c <_puts_r+0x10>
 800b728:	f001 f8d2 	bl	800c8d0 <__sinit>
 800b72c:	69ab      	ldr	r3, [r5, #24]
 800b72e:	68ac      	ldr	r4, [r5, #8]
 800b730:	b913      	cbnz	r3, 800b738 <_puts_r+0x1c>
 800b732:	4628      	mov	r0, r5
 800b734:	f001 f8cc 	bl	800c8d0 <__sinit>
 800b738:	4b2c      	ldr	r3, [pc, #176]	; (800b7ec <_puts_r+0xd0>)
 800b73a:	429c      	cmp	r4, r3
 800b73c:	d120      	bne.n	800b780 <_puts_r+0x64>
 800b73e:	686c      	ldr	r4, [r5, #4]
 800b740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b742:	07db      	lsls	r3, r3, #31
 800b744:	d405      	bmi.n	800b752 <_puts_r+0x36>
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	0598      	lsls	r0, r3, #22
 800b74a:	d402      	bmi.n	800b752 <_puts_r+0x36>
 800b74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b74e:	f001 f962 	bl	800ca16 <__retarget_lock_acquire_recursive>
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	0719      	lsls	r1, r3, #28
 800b756:	d51d      	bpl.n	800b794 <_puts_r+0x78>
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	b1db      	cbz	r3, 800b794 <_puts_r+0x78>
 800b75c:	3e01      	subs	r6, #1
 800b75e:	68a3      	ldr	r3, [r4, #8]
 800b760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b764:	3b01      	subs	r3, #1
 800b766:	60a3      	str	r3, [r4, #8]
 800b768:	bb39      	cbnz	r1, 800b7ba <_puts_r+0x9e>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	da38      	bge.n	800b7e0 <_puts_r+0xc4>
 800b76e:	4622      	mov	r2, r4
 800b770:	210a      	movs	r1, #10
 800b772:	4628      	mov	r0, r5
 800b774:	f000 f858 	bl	800b828 <__swbuf_r>
 800b778:	3001      	adds	r0, #1
 800b77a:	d011      	beq.n	800b7a0 <_puts_r+0x84>
 800b77c:	250a      	movs	r5, #10
 800b77e:	e011      	b.n	800b7a4 <_puts_r+0x88>
 800b780:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <_puts_r+0xd4>)
 800b782:	429c      	cmp	r4, r3
 800b784:	d101      	bne.n	800b78a <_puts_r+0x6e>
 800b786:	68ac      	ldr	r4, [r5, #8]
 800b788:	e7da      	b.n	800b740 <_puts_r+0x24>
 800b78a:	4b1a      	ldr	r3, [pc, #104]	; (800b7f4 <_puts_r+0xd8>)
 800b78c:	429c      	cmp	r4, r3
 800b78e:	bf08      	it	eq
 800b790:	68ec      	ldreq	r4, [r5, #12]
 800b792:	e7d5      	b.n	800b740 <_puts_r+0x24>
 800b794:	4621      	mov	r1, r4
 800b796:	4628      	mov	r0, r5
 800b798:	f000 f898 	bl	800b8cc <__swsetup_r>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d0dd      	beq.n	800b75c <_puts_r+0x40>
 800b7a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b7a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7a6:	07da      	lsls	r2, r3, #31
 800b7a8:	d405      	bmi.n	800b7b6 <_puts_r+0x9a>
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	059b      	lsls	r3, r3, #22
 800b7ae:	d402      	bmi.n	800b7b6 <_puts_r+0x9a>
 800b7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7b2:	f001 f931 	bl	800ca18 <__retarget_lock_release_recursive>
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	da04      	bge.n	800b7c8 <_puts_r+0xac>
 800b7be:	69a2      	ldr	r2, [r4, #24]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	dc06      	bgt.n	800b7d2 <_puts_r+0xb6>
 800b7c4:	290a      	cmp	r1, #10
 800b7c6:	d004      	beq.n	800b7d2 <_puts_r+0xb6>
 800b7c8:	6823      	ldr	r3, [r4, #0]
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	6022      	str	r2, [r4, #0]
 800b7ce:	7019      	strb	r1, [r3, #0]
 800b7d0:	e7c5      	b.n	800b75e <_puts_r+0x42>
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	f000 f827 	bl	800b828 <__swbuf_r>
 800b7da:	3001      	adds	r0, #1
 800b7dc:	d1bf      	bne.n	800b75e <_puts_r+0x42>
 800b7de:	e7df      	b.n	800b7a0 <_puts_r+0x84>
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	250a      	movs	r5, #10
 800b7e4:	1c5a      	adds	r2, r3, #1
 800b7e6:	6022      	str	r2, [r4, #0]
 800b7e8:	701d      	strb	r5, [r3, #0]
 800b7ea:	e7db      	b.n	800b7a4 <_puts_r+0x88>
 800b7ec:	0800e220 	.word	0x0800e220
 800b7f0:	0800e240 	.word	0x0800e240
 800b7f4:	0800e200 	.word	0x0800e200

0800b7f8 <puts>:
 800b7f8:	4b02      	ldr	r3, [pc, #8]	; (800b804 <puts+0xc>)
 800b7fa:	4601      	mov	r1, r0
 800b7fc:	6818      	ldr	r0, [r3, #0]
 800b7fe:	f7ff bf8d 	b.w	800b71c <_puts_r>
 800b802:	bf00      	nop
 800b804:	20000044 	.word	0x20000044

0800b808 <_sbrk_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	4d06      	ldr	r5, [pc, #24]	; (800b824 <_sbrk_r+0x1c>)
 800b80c:	2300      	movs	r3, #0
 800b80e:	4604      	mov	r4, r0
 800b810:	4608      	mov	r0, r1
 800b812:	602b      	str	r3, [r5, #0]
 800b814:	f7f7 fcae 	bl	8003174 <_sbrk>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	d102      	bne.n	800b822 <_sbrk_r+0x1a>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	b103      	cbz	r3, 800b822 <_sbrk_r+0x1a>
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	bd38      	pop	{r3, r4, r5, pc}
 800b824:	20000bc0 	.word	0x20000bc0

0800b828 <__swbuf_r>:
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	460e      	mov	r6, r1
 800b82c:	4614      	mov	r4, r2
 800b82e:	4605      	mov	r5, r0
 800b830:	b118      	cbz	r0, 800b83a <__swbuf_r+0x12>
 800b832:	6983      	ldr	r3, [r0, #24]
 800b834:	b90b      	cbnz	r3, 800b83a <__swbuf_r+0x12>
 800b836:	f001 f84b 	bl	800c8d0 <__sinit>
 800b83a:	4b21      	ldr	r3, [pc, #132]	; (800b8c0 <__swbuf_r+0x98>)
 800b83c:	429c      	cmp	r4, r3
 800b83e:	d12b      	bne.n	800b898 <__swbuf_r+0x70>
 800b840:	686c      	ldr	r4, [r5, #4]
 800b842:	69a3      	ldr	r3, [r4, #24]
 800b844:	60a3      	str	r3, [r4, #8]
 800b846:	89a3      	ldrh	r3, [r4, #12]
 800b848:	071a      	lsls	r2, r3, #28
 800b84a:	d52f      	bpl.n	800b8ac <__swbuf_r+0x84>
 800b84c:	6923      	ldr	r3, [r4, #16]
 800b84e:	b36b      	cbz	r3, 800b8ac <__swbuf_r+0x84>
 800b850:	6923      	ldr	r3, [r4, #16]
 800b852:	6820      	ldr	r0, [r4, #0]
 800b854:	1ac0      	subs	r0, r0, r3
 800b856:	6963      	ldr	r3, [r4, #20]
 800b858:	b2f6      	uxtb	r6, r6
 800b85a:	4283      	cmp	r3, r0
 800b85c:	4637      	mov	r7, r6
 800b85e:	dc04      	bgt.n	800b86a <__swbuf_r+0x42>
 800b860:	4621      	mov	r1, r4
 800b862:	4628      	mov	r0, r5
 800b864:	f000 ffa0 	bl	800c7a8 <_fflush_r>
 800b868:	bb30      	cbnz	r0, 800b8b8 <__swbuf_r+0x90>
 800b86a:	68a3      	ldr	r3, [r4, #8]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	60a3      	str	r3, [r4, #8]
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	6022      	str	r2, [r4, #0]
 800b876:	701e      	strb	r6, [r3, #0]
 800b878:	6963      	ldr	r3, [r4, #20]
 800b87a:	3001      	adds	r0, #1
 800b87c:	4283      	cmp	r3, r0
 800b87e:	d004      	beq.n	800b88a <__swbuf_r+0x62>
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	07db      	lsls	r3, r3, #31
 800b884:	d506      	bpl.n	800b894 <__swbuf_r+0x6c>
 800b886:	2e0a      	cmp	r6, #10
 800b888:	d104      	bne.n	800b894 <__swbuf_r+0x6c>
 800b88a:	4621      	mov	r1, r4
 800b88c:	4628      	mov	r0, r5
 800b88e:	f000 ff8b 	bl	800c7a8 <_fflush_r>
 800b892:	b988      	cbnz	r0, 800b8b8 <__swbuf_r+0x90>
 800b894:	4638      	mov	r0, r7
 800b896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b898:	4b0a      	ldr	r3, [pc, #40]	; (800b8c4 <__swbuf_r+0x9c>)
 800b89a:	429c      	cmp	r4, r3
 800b89c:	d101      	bne.n	800b8a2 <__swbuf_r+0x7a>
 800b89e:	68ac      	ldr	r4, [r5, #8]
 800b8a0:	e7cf      	b.n	800b842 <__swbuf_r+0x1a>
 800b8a2:	4b09      	ldr	r3, [pc, #36]	; (800b8c8 <__swbuf_r+0xa0>)
 800b8a4:	429c      	cmp	r4, r3
 800b8a6:	bf08      	it	eq
 800b8a8:	68ec      	ldreq	r4, [r5, #12]
 800b8aa:	e7ca      	b.n	800b842 <__swbuf_r+0x1a>
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f000 f80c 	bl	800b8cc <__swsetup_r>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d0cb      	beq.n	800b850 <__swbuf_r+0x28>
 800b8b8:	f04f 37ff 	mov.w	r7, #4294967295
 800b8bc:	e7ea      	b.n	800b894 <__swbuf_r+0x6c>
 800b8be:	bf00      	nop
 800b8c0:	0800e220 	.word	0x0800e220
 800b8c4:	0800e240 	.word	0x0800e240
 800b8c8:	0800e200 	.word	0x0800e200

0800b8cc <__swsetup_r>:
 800b8cc:	4b32      	ldr	r3, [pc, #200]	; (800b998 <__swsetup_r+0xcc>)
 800b8ce:	b570      	push	{r4, r5, r6, lr}
 800b8d0:	681d      	ldr	r5, [r3, #0]
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	b125      	cbz	r5, 800b8e2 <__swsetup_r+0x16>
 800b8d8:	69ab      	ldr	r3, [r5, #24]
 800b8da:	b913      	cbnz	r3, 800b8e2 <__swsetup_r+0x16>
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f000 fff7 	bl	800c8d0 <__sinit>
 800b8e2:	4b2e      	ldr	r3, [pc, #184]	; (800b99c <__swsetup_r+0xd0>)
 800b8e4:	429c      	cmp	r4, r3
 800b8e6:	d10f      	bne.n	800b908 <__swsetup_r+0x3c>
 800b8e8:	686c      	ldr	r4, [r5, #4]
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8f0:	0719      	lsls	r1, r3, #28
 800b8f2:	d42c      	bmi.n	800b94e <__swsetup_r+0x82>
 800b8f4:	06dd      	lsls	r5, r3, #27
 800b8f6:	d411      	bmi.n	800b91c <__swsetup_r+0x50>
 800b8f8:	2309      	movs	r3, #9
 800b8fa:	6033      	str	r3, [r6, #0]
 800b8fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	f04f 30ff 	mov.w	r0, #4294967295
 800b906:	e03e      	b.n	800b986 <__swsetup_r+0xba>
 800b908:	4b25      	ldr	r3, [pc, #148]	; (800b9a0 <__swsetup_r+0xd4>)
 800b90a:	429c      	cmp	r4, r3
 800b90c:	d101      	bne.n	800b912 <__swsetup_r+0x46>
 800b90e:	68ac      	ldr	r4, [r5, #8]
 800b910:	e7eb      	b.n	800b8ea <__swsetup_r+0x1e>
 800b912:	4b24      	ldr	r3, [pc, #144]	; (800b9a4 <__swsetup_r+0xd8>)
 800b914:	429c      	cmp	r4, r3
 800b916:	bf08      	it	eq
 800b918:	68ec      	ldreq	r4, [r5, #12]
 800b91a:	e7e6      	b.n	800b8ea <__swsetup_r+0x1e>
 800b91c:	0758      	lsls	r0, r3, #29
 800b91e:	d512      	bpl.n	800b946 <__swsetup_r+0x7a>
 800b920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b922:	b141      	cbz	r1, 800b936 <__swsetup_r+0x6a>
 800b924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b928:	4299      	cmp	r1, r3
 800b92a:	d002      	beq.n	800b932 <__swsetup_r+0x66>
 800b92c:	4630      	mov	r0, r6
 800b92e:	f7ff f97d 	bl	800ac2c <_free_r>
 800b932:	2300      	movs	r3, #0
 800b934:	6363      	str	r3, [r4, #52]	; 0x34
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b93c:	81a3      	strh	r3, [r4, #12]
 800b93e:	2300      	movs	r3, #0
 800b940:	6063      	str	r3, [r4, #4]
 800b942:	6923      	ldr	r3, [r4, #16]
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	f043 0308 	orr.w	r3, r3, #8
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	6923      	ldr	r3, [r4, #16]
 800b950:	b94b      	cbnz	r3, 800b966 <__swsetup_r+0x9a>
 800b952:	89a3      	ldrh	r3, [r4, #12]
 800b954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b95c:	d003      	beq.n	800b966 <__swsetup_r+0x9a>
 800b95e:	4621      	mov	r1, r4
 800b960:	4630      	mov	r0, r6
 800b962:	f001 f87f 	bl	800ca64 <__smakebuf_r>
 800b966:	89a0      	ldrh	r0, [r4, #12]
 800b968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b96c:	f010 0301 	ands.w	r3, r0, #1
 800b970:	d00a      	beq.n	800b988 <__swsetup_r+0xbc>
 800b972:	2300      	movs	r3, #0
 800b974:	60a3      	str	r3, [r4, #8]
 800b976:	6963      	ldr	r3, [r4, #20]
 800b978:	425b      	negs	r3, r3
 800b97a:	61a3      	str	r3, [r4, #24]
 800b97c:	6923      	ldr	r3, [r4, #16]
 800b97e:	b943      	cbnz	r3, 800b992 <__swsetup_r+0xc6>
 800b980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b984:	d1ba      	bne.n	800b8fc <__swsetup_r+0x30>
 800b986:	bd70      	pop	{r4, r5, r6, pc}
 800b988:	0781      	lsls	r1, r0, #30
 800b98a:	bf58      	it	pl
 800b98c:	6963      	ldrpl	r3, [r4, #20]
 800b98e:	60a3      	str	r3, [r4, #8]
 800b990:	e7f4      	b.n	800b97c <__swsetup_r+0xb0>
 800b992:	2000      	movs	r0, #0
 800b994:	e7f7      	b.n	800b986 <__swsetup_r+0xba>
 800b996:	bf00      	nop
 800b998:	20000044 	.word	0x20000044
 800b99c:	0800e220 	.word	0x0800e220
 800b9a0:	0800e240 	.word	0x0800e240
 800b9a4:	0800e200 	.word	0x0800e200

0800b9a8 <quorem>:
 800b9a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	6903      	ldr	r3, [r0, #16]
 800b9ae:	690c      	ldr	r4, [r1, #16]
 800b9b0:	42a3      	cmp	r3, r4
 800b9b2:	4607      	mov	r7, r0
 800b9b4:	f2c0 8081 	blt.w	800baba <quorem+0x112>
 800b9b8:	3c01      	subs	r4, #1
 800b9ba:	f101 0814 	add.w	r8, r1, #20
 800b9be:	f100 0514 	add.w	r5, r0, #20
 800b9c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9c6:	9301      	str	r3, [sp, #4]
 800b9c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b9d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9e0:	d331      	bcc.n	800ba46 <quorem+0x9e>
 800b9e2:	f04f 0e00 	mov.w	lr, #0
 800b9e6:	4640      	mov	r0, r8
 800b9e8:	46ac      	mov	ip, r5
 800b9ea:	46f2      	mov	sl, lr
 800b9ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800b9f0:	b293      	uxth	r3, r2
 800b9f2:	fb06 e303 	mla	r3, r6, r3, lr
 800b9f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	ebaa 0303 	sub.w	r3, sl, r3
 800ba00:	f8dc a000 	ldr.w	sl, [ip]
 800ba04:	0c12      	lsrs	r2, r2, #16
 800ba06:	fa13 f38a 	uxtah	r3, r3, sl
 800ba0a:	fb06 e202 	mla	r2, r6, r2, lr
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	9b00      	ldr	r3, [sp, #0]
 800ba12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba16:	b292      	uxth	r2, r2
 800ba18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ba1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba20:	f8bd 3000 	ldrh.w	r3, [sp]
 800ba24:	4581      	cmp	r9, r0
 800ba26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba2a:	f84c 3b04 	str.w	r3, [ip], #4
 800ba2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba32:	d2db      	bcs.n	800b9ec <quorem+0x44>
 800ba34:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba38:	b92b      	cbnz	r3, 800ba46 <quorem+0x9e>
 800ba3a:	9b01      	ldr	r3, [sp, #4]
 800ba3c:	3b04      	subs	r3, #4
 800ba3e:	429d      	cmp	r5, r3
 800ba40:	461a      	mov	r2, r3
 800ba42:	d32e      	bcc.n	800baa2 <quorem+0xfa>
 800ba44:	613c      	str	r4, [r7, #16]
 800ba46:	4638      	mov	r0, r7
 800ba48:	f001 fae8 	bl	800d01c <__mcmp>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	db24      	blt.n	800ba9a <quorem+0xf2>
 800ba50:	3601      	adds	r6, #1
 800ba52:	4628      	mov	r0, r5
 800ba54:	f04f 0c00 	mov.w	ip, #0
 800ba58:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba5c:	f8d0 e000 	ldr.w	lr, [r0]
 800ba60:	b293      	uxth	r3, r2
 800ba62:	ebac 0303 	sub.w	r3, ip, r3
 800ba66:	0c12      	lsrs	r2, r2, #16
 800ba68:	fa13 f38e 	uxtah	r3, r3, lr
 800ba6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba7a:	45c1      	cmp	r9, r8
 800ba7c:	f840 3b04 	str.w	r3, [r0], #4
 800ba80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba84:	d2e8      	bcs.n	800ba58 <quorem+0xb0>
 800ba86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba8e:	b922      	cbnz	r2, 800ba9a <quorem+0xf2>
 800ba90:	3b04      	subs	r3, #4
 800ba92:	429d      	cmp	r5, r3
 800ba94:	461a      	mov	r2, r3
 800ba96:	d30a      	bcc.n	800baae <quorem+0x106>
 800ba98:	613c      	str	r4, [r7, #16]
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	b003      	add	sp, #12
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	6812      	ldr	r2, [r2, #0]
 800baa4:	3b04      	subs	r3, #4
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	d1cc      	bne.n	800ba44 <quorem+0x9c>
 800baaa:	3c01      	subs	r4, #1
 800baac:	e7c7      	b.n	800ba3e <quorem+0x96>
 800baae:	6812      	ldr	r2, [r2, #0]
 800bab0:	3b04      	subs	r3, #4
 800bab2:	2a00      	cmp	r2, #0
 800bab4:	d1f0      	bne.n	800ba98 <quorem+0xf0>
 800bab6:	3c01      	subs	r4, #1
 800bab8:	e7eb      	b.n	800ba92 <quorem+0xea>
 800baba:	2000      	movs	r0, #0
 800babc:	e7ee      	b.n	800ba9c <quorem+0xf4>
	...

0800bac0 <_dtoa_r>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	ed2d 8b04 	vpush	{d8-d9}
 800bac8:	ec57 6b10 	vmov	r6, r7, d0
 800bacc:	b093      	sub	sp, #76	; 0x4c
 800bace:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bad0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bad4:	9106      	str	r1, [sp, #24]
 800bad6:	ee10 aa10 	vmov	sl, s0
 800bada:	4604      	mov	r4, r0
 800badc:	9209      	str	r2, [sp, #36]	; 0x24
 800bade:	930c      	str	r3, [sp, #48]	; 0x30
 800bae0:	46bb      	mov	fp, r7
 800bae2:	b975      	cbnz	r5, 800bb02 <_dtoa_r+0x42>
 800bae4:	2010      	movs	r0, #16
 800bae6:	f7ff f889 	bl	800abfc <malloc>
 800baea:	4602      	mov	r2, r0
 800baec:	6260      	str	r0, [r4, #36]	; 0x24
 800baee:	b920      	cbnz	r0, 800bafa <_dtoa_r+0x3a>
 800baf0:	4ba7      	ldr	r3, [pc, #668]	; (800bd90 <_dtoa_r+0x2d0>)
 800baf2:	21ea      	movs	r1, #234	; 0xea
 800baf4:	48a7      	ldr	r0, [pc, #668]	; (800bd94 <_dtoa_r+0x2d4>)
 800baf6:	f001 fda1 	bl	800d63c <__assert_func>
 800bafa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bafe:	6005      	str	r5, [r0, #0]
 800bb00:	60c5      	str	r5, [r0, #12]
 800bb02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb04:	6819      	ldr	r1, [r3, #0]
 800bb06:	b151      	cbz	r1, 800bb1e <_dtoa_r+0x5e>
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	604a      	str	r2, [r1, #4]
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	4093      	lsls	r3, r2
 800bb10:	608b      	str	r3, [r1, #8]
 800bb12:	4620      	mov	r0, r4
 800bb14:	f001 f840 	bl	800cb98 <_Bfree>
 800bb18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	601a      	str	r2, [r3, #0]
 800bb1e:	1e3b      	subs	r3, r7, #0
 800bb20:	bfaa      	itet	ge
 800bb22:	2300      	movge	r3, #0
 800bb24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bb28:	f8c8 3000 	strge.w	r3, [r8]
 800bb2c:	4b9a      	ldr	r3, [pc, #616]	; (800bd98 <_dtoa_r+0x2d8>)
 800bb2e:	bfbc      	itt	lt
 800bb30:	2201      	movlt	r2, #1
 800bb32:	f8c8 2000 	strlt.w	r2, [r8]
 800bb36:	ea33 030b 	bics.w	r3, r3, fp
 800bb3a:	d11b      	bne.n	800bb74 <_dtoa_r+0xb4>
 800bb3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb3e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb48:	4333      	orrs	r3, r6
 800bb4a:	f000 8592 	beq.w	800c672 <_dtoa_r+0xbb2>
 800bb4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb50:	b963      	cbnz	r3, 800bb6c <_dtoa_r+0xac>
 800bb52:	4b92      	ldr	r3, [pc, #584]	; (800bd9c <_dtoa_r+0x2dc>)
 800bb54:	e022      	b.n	800bb9c <_dtoa_r+0xdc>
 800bb56:	4b92      	ldr	r3, [pc, #584]	; (800bda0 <_dtoa_r+0x2e0>)
 800bb58:	9301      	str	r3, [sp, #4]
 800bb5a:	3308      	adds	r3, #8
 800bb5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	9801      	ldr	r0, [sp, #4]
 800bb62:	b013      	add	sp, #76	; 0x4c
 800bb64:	ecbd 8b04 	vpop	{d8-d9}
 800bb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6c:	4b8b      	ldr	r3, [pc, #556]	; (800bd9c <_dtoa_r+0x2dc>)
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	3303      	adds	r3, #3
 800bb72:	e7f3      	b.n	800bb5c <_dtoa_r+0x9c>
 800bb74:	2200      	movs	r2, #0
 800bb76:	2300      	movs	r3, #0
 800bb78:	4650      	mov	r0, sl
 800bb7a:	4659      	mov	r1, fp
 800bb7c:	f7f4 ffa4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb80:	ec4b ab19 	vmov	d9, sl, fp
 800bb84:	4680      	mov	r8, r0
 800bb86:	b158      	cbz	r0, 800bba0 <_dtoa_r+0xe0>
 800bb88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	6013      	str	r3, [r2, #0]
 800bb8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 856b 	beq.w	800c66c <_dtoa_r+0xbac>
 800bb96:	4883      	ldr	r0, [pc, #524]	; (800bda4 <_dtoa_r+0x2e4>)
 800bb98:	6018      	str	r0, [r3, #0]
 800bb9a:	1e43      	subs	r3, r0, #1
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	e7df      	b.n	800bb60 <_dtoa_r+0xa0>
 800bba0:	ec4b ab10 	vmov	d0, sl, fp
 800bba4:	aa10      	add	r2, sp, #64	; 0x40
 800bba6:	a911      	add	r1, sp, #68	; 0x44
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f001 fadd 	bl	800d168 <__d2b>
 800bbae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bbb2:	ee08 0a10 	vmov	s16, r0
 800bbb6:	2d00      	cmp	r5, #0
 800bbb8:	f000 8084 	beq.w	800bcc4 <_dtoa_r+0x204>
 800bbbc:	ee19 3a90 	vmov	r3, s19
 800bbc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bbc8:	4656      	mov	r6, sl
 800bbca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bbce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bbd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bbd6:	4b74      	ldr	r3, [pc, #464]	; (800bda8 <_dtoa_r+0x2e8>)
 800bbd8:	2200      	movs	r2, #0
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fb53 	bl	8000288 <__aeabi_dsub>
 800bbe2:	a365      	add	r3, pc, #404	; (adr r3, 800bd78 <_dtoa_r+0x2b8>)
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	f7f4 fd06 	bl	80005f8 <__aeabi_dmul>
 800bbec:	a364      	add	r3, pc, #400	; (adr r3, 800bd80 <_dtoa_r+0x2c0>)
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	f7f4 fb4b 	bl	800028c <__adddf3>
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	460f      	mov	r7, r1
 800bbfc:	f7f4 fc92 	bl	8000524 <__aeabi_i2d>
 800bc00:	a361      	add	r3, pc, #388	; (adr r3, 800bd88 <_dtoa_r+0x2c8>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	f7f4 fcf7 	bl	80005f8 <__aeabi_dmul>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4630      	mov	r0, r6
 800bc10:	4639      	mov	r1, r7
 800bc12:	f7f4 fb3b 	bl	800028c <__adddf3>
 800bc16:	4606      	mov	r6, r0
 800bc18:	460f      	mov	r7, r1
 800bc1a:	f7f4 ff9d 	bl	8000b58 <__aeabi_d2iz>
 800bc1e:	2200      	movs	r2, #0
 800bc20:	9000      	str	r0, [sp, #0]
 800bc22:	2300      	movs	r3, #0
 800bc24:	4630      	mov	r0, r6
 800bc26:	4639      	mov	r1, r7
 800bc28:	f7f4 ff58 	bl	8000adc <__aeabi_dcmplt>
 800bc2c:	b150      	cbz	r0, 800bc44 <_dtoa_r+0x184>
 800bc2e:	9800      	ldr	r0, [sp, #0]
 800bc30:	f7f4 fc78 	bl	8000524 <__aeabi_i2d>
 800bc34:	4632      	mov	r2, r6
 800bc36:	463b      	mov	r3, r7
 800bc38:	f7f4 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc3c:	b910      	cbnz	r0, 800bc44 <_dtoa_r+0x184>
 800bc3e:	9b00      	ldr	r3, [sp, #0]
 800bc40:	3b01      	subs	r3, #1
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	9b00      	ldr	r3, [sp, #0]
 800bc46:	2b16      	cmp	r3, #22
 800bc48:	d85a      	bhi.n	800bd00 <_dtoa_r+0x240>
 800bc4a:	9a00      	ldr	r2, [sp, #0]
 800bc4c:	4b57      	ldr	r3, [pc, #348]	; (800bdac <_dtoa_r+0x2ec>)
 800bc4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	ec51 0b19 	vmov	r0, r1, d9
 800bc5a:	f7f4 ff3f 	bl	8000adc <__aeabi_dcmplt>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d050      	beq.n	800bd04 <_dtoa_r+0x244>
 800bc62:	9b00      	ldr	r3, [sp, #0]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	2300      	movs	r3, #0
 800bc6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc6e:	1b5d      	subs	r5, r3, r5
 800bc70:	1e6b      	subs	r3, r5, #1
 800bc72:	9305      	str	r3, [sp, #20]
 800bc74:	bf45      	ittet	mi
 800bc76:	f1c5 0301 	rsbmi	r3, r5, #1
 800bc7a:	9304      	strmi	r3, [sp, #16]
 800bc7c:	2300      	movpl	r3, #0
 800bc7e:	2300      	movmi	r3, #0
 800bc80:	bf4c      	ite	mi
 800bc82:	9305      	strmi	r3, [sp, #20]
 800bc84:	9304      	strpl	r3, [sp, #16]
 800bc86:	9b00      	ldr	r3, [sp, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	db3d      	blt.n	800bd08 <_dtoa_r+0x248>
 800bc8c:	9b05      	ldr	r3, [sp, #20]
 800bc8e:	9a00      	ldr	r2, [sp, #0]
 800bc90:	920a      	str	r2, [sp, #40]	; 0x28
 800bc92:	4413      	add	r3, r2
 800bc94:	9305      	str	r3, [sp, #20]
 800bc96:	2300      	movs	r3, #0
 800bc98:	9307      	str	r3, [sp, #28]
 800bc9a:	9b06      	ldr	r3, [sp, #24]
 800bc9c:	2b09      	cmp	r3, #9
 800bc9e:	f200 8089 	bhi.w	800bdb4 <_dtoa_r+0x2f4>
 800bca2:	2b05      	cmp	r3, #5
 800bca4:	bfc4      	itt	gt
 800bca6:	3b04      	subgt	r3, #4
 800bca8:	9306      	strgt	r3, [sp, #24]
 800bcaa:	9b06      	ldr	r3, [sp, #24]
 800bcac:	f1a3 0302 	sub.w	r3, r3, #2
 800bcb0:	bfcc      	ite	gt
 800bcb2:	2500      	movgt	r5, #0
 800bcb4:	2501      	movle	r5, #1
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	f200 8087 	bhi.w	800bdca <_dtoa_r+0x30a>
 800bcbc:	e8df f003 	tbb	[pc, r3]
 800bcc0:	59383a2d 	.word	0x59383a2d
 800bcc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bcc8:	441d      	add	r5, r3
 800bcca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	bfc1      	itttt	gt
 800bcd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bcd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bcda:	fa0b f303 	lslgt.w	r3, fp, r3
 800bcde:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bce2:	bfda      	itte	le
 800bce4:	f1c3 0320 	rsble	r3, r3, #32
 800bce8:	fa06 f003 	lslle.w	r0, r6, r3
 800bcec:	4318      	orrgt	r0, r3
 800bcee:	f7f4 fc09 	bl	8000504 <__aeabi_ui2d>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bcfa:	3d01      	subs	r5, #1
 800bcfc:	930e      	str	r3, [sp, #56]	; 0x38
 800bcfe:	e76a      	b.n	800bbd6 <_dtoa_r+0x116>
 800bd00:	2301      	movs	r3, #1
 800bd02:	e7b2      	b.n	800bc6a <_dtoa_r+0x1aa>
 800bd04:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd06:	e7b1      	b.n	800bc6c <_dtoa_r+0x1ac>
 800bd08:	9b04      	ldr	r3, [sp, #16]
 800bd0a:	9a00      	ldr	r2, [sp, #0]
 800bd0c:	1a9b      	subs	r3, r3, r2
 800bd0e:	9304      	str	r3, [sp, #16]
 800bd10:	4253      	negs	r3, r2
 800bd12:	9307      	str	r3, [sp, #28]
 800bd14:	2300      	movs	r3, #0
 800bd16:	930a      	str	r3, [sp, #40]	; 0x28
 800bd18:	e7bf      	b.n	800bc9a <_dtoa_r+0x1da>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	9308      	str	r3, [sp, #32]
 800bd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	dc55      	bgt.n	800bdd0 <_dtoa_r+0x310>
 800bd24:	2301      	movs	r3, #1
 800bd26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd2e:	e00c      	b.n	800bd4a <_dtoa_r+0x28a>
 800bd30:	2301      	movs	r3, #1
 800bd32:	e7f3      	b.n	800bd1c <_dtoa_r+0x25c>
 800bd34:	2300      	movs	r3, #0
 800bd36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd38:	9308      	str	r3, [sp, #32]
 800bd3a:	9b00      	ldr	r3, [sp, #0]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	9302      	str	r3, [sp, #8]
 800bd40:	3301      	adds	r3, #1
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	9303      	str	r3, [sp, #12]
 800bd46:	bfb8      	it	lt
 800bd48:	2301      	movlt	r3, #1
 800bd4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	6042      	str	r2, [r0, #4]
 800bd50:	2204      	movs	r2, #4
 800bd52:	f102 0614 	add.w	r6, r2, #20
 800bd56:	429e      	cmp	r6, r3
 800bd58:	6841      	ldr	r1, [r0, #4]
 800bd5a:	d93d      	bls.n	800bdd8 <_dtoa_r+0x318>
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 fedb 	bl	800cb18 <_Balloc>
 800bd62:	9001      	str	r0, [sp, #4]
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d13b      	bne.n	800bde0 <_dtoa_r+0x320>
 800bd68:	4b11      	ldr	r3, [pc, #68]	; (800bdb0 <_dtoa_r+0x2f0>)
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd70:	e6c0      	b.n	800baf4 <_dtoa_r+0x34>
 800bd72:	2301      	movs	r3, #1
 800bd74:	e7df      	b.n	800bd36 <_dtoa_r+0x276>
 800bd76:	bf00      	nop
 800bd78:	636f4361 	.word	0x636f4361
 800bd7c:	3fd287a7 	.word	0x3fd287a7
 800bd80:	8b60c8b3 	.word	0x8b60c8b3
 800bd84:	3fc68a28 	.word	0x3fc68a28
 800bd88:	509f79fb 	.word	0x509f79fb
 800bd8c:	3fd34413 	.word	0x3fd34413
 800bd90:	0800e17d 	.word	0x0800e17d
 800bd94:	0800e194 	.word	0x0800e194
 800bd98:	7ff00000 	.word	0x7ff00000
 800bd9c:	0800e179 	.word	0x0800e179
 800bda0:	0800e170 	.word	0x0800e170
 800bda4:	0800e14d 	.word	0x0800e14d
 800bda8:	3ff80000 	.word	0x3ff80000
 800bdac:	0800e2e8 	.word	0x0800e2e8
 800bdb0:	0800e1ef 	.word	0x0800e1ef
 800bdb4:	2501      	movs	r5, #1
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	9306      	str	r3, [sp, #24]
 800bdba:	9508      	str	r5, [sp, #32]
 800bdbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2312      	movs	r3, #18
 800bdc8:	e7b0      	b.n	800bd2c <_dtoa_r+0x26c>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	9308      	str	r3, [sp, #32]
 800bdce:	e7f5      	b.n	800bdbc <_dtoa_r+0x2fc>
 800bdd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bdd6:	e7b8      	b.n	800bd4a <_dtoa_r+0x28a>
 800bdd8:	3101      	adds	r1, #1
 800bdda:	6041      	str	r1, [r0, #4]
 800bddc:	0052      	lsls	r2, r2, #1
 800bdde:	e7b8      	b.n	800bd52 <_dtoa_r+0x292>
 800bde0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bde2:	9a01      	ldr	r2, [sp, #4]
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	9b03      	ldr	r3, [sp, #12]
 800bde8:	2b0e      	cmp	r3, #14
 800bdea:	f200 809d 	bhi.w	800bf28 <_dtoa_r+0x468>
 800bdee:	2d00      	cmp	r5, #0
 800bdf0:	f000 809a 	beq.w	800bf28 <_dtoa_r+0x468>
 800bdf4:	9b00      	ldr	r3, [sp, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dd32      	ble.n	800be60 <_dtoa_r+0x3a0>
 800bdfa:	4ab7      	ldr	r2, [pc, #732]	; (800c0d8 <_dtoa_r+0x618>)
 800bdfc:	f003 030f 	and.w	r3, r3, #15
 800be00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800be04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be08:	9b00      	ldr	r3, [sp, #0]
 800be0a:	05d8      	lsls	r0, r3, #23
 800be0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800be10:	d516      	bpl.n	800be40 <_dtoa_r+0x380>
 800be12:	4bb2      	ldr	r3, [pc, #712]	; (800c0dc <_dtoa_r+0x61c>)
 800be14:	ec51 0b19 	vmov	r0, r1, d9
 800be18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be1c:	f7f4 fd16 	bl	800084c <__aeabi_ddiv>
 800be20:	f007 070f 	and.w	r7, r7, #15
 800be24:	4682      	mov	sl, r0
 800be26:	468b      	mov	fp, r1
 800be28:	2503      	movs	r5, #3
 800be2a:	4eac      	ldr	r6, [pc, #688]	; (800c0dc <_dtoa_r+0x61c>)
 800be2c:	b957      	cbnz	r7, 800be44 <_dtoa_r+0x384>
 800be2e:	4642      	mov	r2, r8
 800be30:	464b      	mov	r3, r9
 800be32:	4650      	mov	r0, sl
 800be34:	4659      	mov	r1, fp
 800be36:	f7f4 fd09 	bl	800084c <__aeabi_ddiv>
 800be3a:	4682      	mov	sl, r0
 800be3c:	468b      	mov	fp, r1
 800be3e:	e028      	b.n	800be92 <_dtoa_r+0x3d2>
 800be40:	2502      	movs	r5, #2
 800be42:	e7f2      	b.n	800be2a <_dtoa_r+0x36a>
 800be44:	07f9      	lsls	r1, r7, #31
 800be46:	d508      	bpl.n	800be5a <_dtoa_r+0x39a>
 800be48:	4640      	mov	r0, r8
 800be4a:	4649      	mov	r1, r9
 800be4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be50:	f7f4 fbd2 	bl	80005f8 <__aeabi_dmul>
 800be54:	3501      	adds	r5, #1
 800be56:	4680      	mov	r8, r0
 800be58:	4689      	mov	r9, r1
 800be5a:	107f      	asrs	r7, r7, #1
 800be5c:	3608      	adds	r6, #8
 800be5e:	e7e5      	b.n	800be2c <_dtoa_r+0x36c>
 800be60:	f000 809b 	beq.w	800bf9a <_dtoa_r+0x4da>
 800be64:	9b00      	ldr	r3, [sp, #0]
 800be66:	4f9d      	ldr	r7, [pc, #628]	; (800c0dc <_dtoa_r+0x61c>)
 800be68:	425e      	negs	r6, r3
 800be6a:	4b9b      	ldr	r3, [pc, #620]	; (800c0d8 <_dtoa_r+0x618>)
 800be6c:	f006 020f 	and.w	r2, r6, #15
 800be70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	ec51 0b19 	vmov	r0, r1, d9
 800be7c:	f7f4 fbbc 	bl	80005f8 <__aeabi_dmul>
 800be80:	1136      	asrs	r6, r6, #4
 800be82:	4682      	mov	sl, r0
 800be84:	468b      	mov	fp, r1
 800be86:	2300      	movs	r3, #0
 800be88:	2502      	movs	r5, #2
 800be8a:	2e00      	cmp	r6, #0
 800be8c:	d17a      	bne.n	800bf84 <_dtoa_r+0x4c4>
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1d3      	bne.n	800be3a <_dtoa_r+0x37a>
 800be92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 8082 	beq.w	800bf9e <_dtoa_r+0x4de>
 800be9a:	4b91      	ldr	r3, [pc, #580]	; (800c0e0 <_dtoa_r+0x620>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	4650      	mov	r0, sl
 800bea0:	4659      	mov	r1, fp
 800bea2:	f7f4 fe1b 	bl	8000adc <__aeabi_dcmplt>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d079      	beq.n	800bf9e <_dtoa_r+0x4de>
 800beaa:	9b03      	ldr	r3, [sp, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d076      	beq.n	800bf9e <_dtoa_r+0x4de>
 800beb0:	9b02      	ldr	r3, [sp, #8]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	dd36      	ble.n	800bf24 <_dtoa_r+0x464>
 800beb6:	9b00      	ldr	r3, [sp, #0]
 800beb8:	4650      	mov	r0, sl
 800beba:	4659      	mov	r1, fp
 800bebc:	1e5f      	subs	r7, r3, #1
 800bebe:	2200      	movs	r2, #0
 800bec0:	4b88      	ldr	r3, [pc, #544]	; (800c0e4 <_dtoa_r+0x624>)
 800bec2:	f7f4 fb99 	bl	80005f8 <__aeabi_dmul>
 800bec6:	9e02      	ldr	r6, [sp, #8]
 800bec8:	4682      	mov	sl, r0
 800beca:	468b      	mov	fp, r1
 800becc:	3501      	adds	r5, #1
 800bece:	4628      	mov	r0, r5
 800bed0:	f7f4 fb28 	bl	8000524 <__aeabi_i2d>
 800bed4:	4652      	mov	r2, sl
 800bed6:	465b      	mov	r3, fp
 800bed8:	f7f4 fb8e 	bl	80005f8 <__aeabi_dmul>
 800bedc:	4b82      	ldr	r3, [pc, #520]	; (800c0e8 <_dtoa_r+0x628>)
 800bede:	2200      	movs	r2, #0
 800bee0:	f7f4 f9d4 	bl	800028c <__adddf3>
 800bee4:	46d0      	mov	r8, sl
 800bee6:	46d9      	mov	r9, fp
 800bee8:	4682      	mov	sl, r0
 800beea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800beee:	2e00      	cmp	r6, #0
 800bef0:	d158      	bne.n	800bfa4 <_dtoa_r+0x4e4>
 800bef2:	4b7e      	ldr	r3, [pc, #504]	; (800c0ec <_dtoa_r+0x62c>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	4640      	mov	r0, r8
 800bef8:	4649      	mov	r1, r9
 800befa:	f7f4 f9c5 	bl	8000288 <__aeabi_dsub>
 800befe:	4652      	mov	r2, sl
 800bf00:	465b      	mov	r3, fp
 800bf02:	4680      	mov	r8, r0
 800bf04:	4689      	mov	r9, r1
 800bf06:	f7f4 fe07 	bl	8000b18 <__aeabi_dcmpgt>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	f040 8295 	bne.w	800c43a <_dtoa_r+0x97a>
 800bf10:	4652      	mov	r2, sl
 800bf12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bf16:	4640      	mov	r0, r8
 800bf18:	4649      	mov	r1, r9
 800bf1a:	f7f4 fddf 	bl	8000adc <__aeabi_dcmplt>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	f040 8289 	bne.w	800c436 <_dtoa_r+0x976>
 800bf24:	ec5b ab19 	vmov	sl, fp, d9
 800bf28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f2c0 8148 	blt.w	800c1c0 <_dtoa_r+0x700>
 800bf30:	9a00      	ldr	r2, [sp, #0]
 800bf32:	2a0e      	cmp	r2, #14
 800bf34:	f300 8144 	bgt.w	800c1c0 <_dtoa_r+0x700>
 800bf38:	4b67      	ldr	r3, [pc, #412]	; (800c0d8 <_dtoa_r+0x618>)
 800bf3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f280 80d5 	bge.w	800c0f4 <_dtoa_r+0x634>
 800bf4a:	9b03      	ldr	r3, [sp, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f300 80d1 	bgt.w	800c0f4 <_dtoa_r+0x634>
 800bf52:	f040 826f 	bne.w	800c434 <_dtoa_r+0x974>
 800bf56:	4b65      	ldr	r3, [pc, #404]	; (800c0ec <_dtoa_r+0x62c>)
 800bf58:	2200      	movs	r2, #0
 800bf5a:	4640      	mov	r0, r8
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	f7f4 fb4b 	bl	80005f8 <__aeabi_dmul>
 800bf62:	4652      	mov	r2, sl
 800bf64:	465b      	mov	r3, fp
 800bf66:	f7f4 fdcd 	bl	8000b04 <__aeabi_dcmpge>
 800bf6a:	9e03      	ldr	r6, [sp, #12]
 800bf6c:	4637      	mov	r7, r6
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f040 8245 	bne.w	800c3fe <_dtoa_r+0x93e>
 800bf74:	9d01      	ldr	r5, [sp, #4]
 800bf76:	2331      	movs	r3, #49	; 0x31
 800bf78:	f805 3b01 	strb.w	r3, [r5], #1
 800bf7c:	9b00      	ldr	r3, [sp, #0]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	e240      	b.n	800c406 <_dtoa_r+0x946>
 800bf84:	07f2      	lsls	r2, r6, #31
 800bf86:	d505      	bpl.n	800bf94 <_dtoa_r+0x4d4>
 800bf88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf8c:	f7f4 fb34 	bl	80005f8 <__aeabi_dmul>
 800bf90:	3501      	adds	r5, #1
 800bf92:	2301      	movs	r3, #1
 800bf94:	1076      	asrs	r6, r6, #1
 800bf96:	3708      	adds	r7, #8
 800bf98:	e777      	b.n	800be8a <_dtoa_r+0x3ca>
 800bf9a:	2502      	movs	r5, #2
 800bf9c:	e779      	b.n	800be92 <_dtoa_r+0x3d2>
 800bf9e:	9f00      	ldr	r7, [sp, #0]
 800bfa0:	9e03      	ldr	r6, [sp, #12]
 800bfa2:	e794      	b.n	800bece <_dtoa_r+0x40e>
 800bfa4:	9901      	ldr	r1, [sp, #4]
 800bfa6:	4b4c      	ldr	r3, [pc, #304]	; (800c0d8 <_dtoa_r+0x618>)
 800bfa8:	4431      	add	r1, r6
 800bfaa:	910d      	str	r1, [sp, #52]	; 0x34
 800bfac:	9908      	ldr	r1, [sp, #32]
 800bfae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bfb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfb6:	2900      	cmp	r1, #0
 800bfb8:	d043      	beq.n	800c042 <_dtoa_r+0x582>
 800bfba:	494d      	ldr	r1, [pc, #308]	; (800c0f0 <_dtoa_r+0x630>)
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	f7f4 fc45 	bl	800084c <__aeabi_ddiv>
 800bfc2:	4652      	mov	r2, sl
 800bfc4:	465b      	mov	r3, fp
 800bfc6:	f7f4 f95f 	bl	8000288 <__aeabi_dsub>
 800bfca:	9d01      	ldr	r5, [sp, #4]
 800bfcc:	4682      	mov	sl, r0
 800bfce:	468b      	mov	fp, r1
 800bfd0:	4649      	mov	r1, r9
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	f7f4 fdc0 	bl	8000b58 <__aeabi_d2iz>
 800bfd8:	4606      	mov	r6, r0
 800bfda:	f7f4 faa3 	bl	8000524 <__aeabi_i2d>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	4640      	mov	r0, r8
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	f7f4 f94f 	bl	8000288 <__aeabi_dsub>
 800bfea:	3630      	adds	r6, #48	; 0x30
 800bfec:	f805 6b01 	strb.w	r6, [r5], #1
 800bff0:	4652      	mov	r2, sl
 800bff2:	465b      	mov	r3, fp
 800bff4:	4680      	mov	r8, r0
 800bff6:	4689      	mov	r9, r1
 800bff8:	f7f4 fd70 	bl	8000adc <__aeabi_dcmplt>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d163      	bne.n	800c0c8 <_dtoa_r+0x608>
 800c000:	4642      	mov	r2, r8
 800c002:	464b      	mov	r3, r9
 800c004:	4936      	ldr	r1, [pc, #216]	; (800c0e0 <_dtoa_r+0x620>)
 800c006:	2000      	movs	r0, #0
 800c008:	f7f4 f93e 	bl	8000288 <__aeabi_dsub>
 800c00c:	4652      	mov	r2, sl
 800c00e:	465b      	mov	r3, fp
 800c010:	f7f4 fd64 	bl	8000adc <__aeabi_dcmplt>
 800c014:	2800      	cmp	r0, #0
 800c016:	f040 80b5 	bne.w	800c184 <_dtoa_r+0x6c4>
 800c01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c01c:	429d      	cmp	r5, r3
 800c01e:	d081      	beq.n	800bf24 <_dtoa_r+0x464>
 800c020:	4b30      	ldr	r3, [pc, #192]	; (800c0e4 <_dtoa_r+0x624>)
 800c022:	2200      	movs	r2, #0
 800c024:	4650      	mov	r0, sl
 800c026:	4659      	mov	r1, fp
 800c028:	f7f4 fae6 	bl	80005f8 <__aeabi_dmul>
 800c02c:	4b2d      	ldr	r3, [pc, #180]	; (800c0e4 <_dtoa_r+0x624>)
 800c02e:	4682      	mov	sl, r0
 800c030:	468b      	mov	fp, r1
 800c032:	4640      	mov	r0, r8
 800c034:	4649      	mov	r1, r9
 800c036:	2200      	movs	r2, #0
 800c038:	f7f4 fade 	bl	80005f8 <__aeabi_dmul>
 800c03c:	4680      	mov	r8, r0
 800c03e:	4689      	mov	r9, r1
 800c040:	e7c6      	b.n	800bfd0 <_dtoa_r+0x510>
 800c042:	4650      	mov	r0, sl
 800c044:	4659      	mov	r1, fp
 800c046:	f7f4 fad7 	bl	80005f8 <__aeabi_dmul>
 800c04a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c04c:	9d01      	ldr	r5, [sp, #4]
 800c04e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c050:	4682      	mov	sl, r0
 800c052:	468b      	mov	fp, r1
 800c054:	4649      	mov	r1, r9
 800c056:	4640      	mov	r0, r8
 800c058:	f7f4 fd7e 	bl	8000b58 <__aeabi_d2iz>
 800c05c:	4606      	mov	r6, r0
 800c05e:	f7f4 fa61 	bl	8000524 <__aeabi_i2d>
 800c062:	3630      	adds	r6, #48	; 0x30
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	4640      	mov	r0, r8
 800c06a:	4649      	mov	r1, r9
 800c06c:	f7f4 f90c 	bl	8000288 <__aeabi_dsub>
 800c070:	f805 6b01 	strb.w	r6, [r5], #1
 800c074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c076:	429d      	cmp	r5, r3
 800c078:	4680      	mov	r8, r0
 800c07a:	4689      	mov	r9, r1
 800c07c:	f04f 0200 	mov.w	r2, #0
 800c080:	d124      	bne.n	800c0cc <_dtoa_r+0x60c>
 800c082:	4b1b      	ldr	r3, [pc, #108]	; (800c0f0 <_dtoa_r+0x630>)
 800c084:	4650      	mov	r0, sl
 800c086:	4659      	mov	r1, fp
 800c088:	f7f4 f900 	bl	800028c <__adddf3>
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	4640      	mov	r0, r8
 800c092:	4649      	mov	r1, r9
 800c094:	f7f4 fd40 	bl	8000b18 <__aeabi_dcmpgt>
 800c098:	2800      	cmp	r0, #0
 800c09a:	d173      	bne.n	800c184 <_dtoa_r+0x6c4>
 800c09c:	4652      	mov	r2, sl
 800c09e:	465b      	mov	r3, fp
 800c0a0:	4913      	ldr	r1, [pc, #76]	; (800c0f0 <_dtoa_r+0x630>)
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	f7f4 f8f0 	bl	8000288 <__aeabi_dsub>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4640      	mov	r0, r8
 800c0ae:	4649      	mov	r1, r9
 800c0b0:	f7f4 fd14 	bl	8000adc <__aeabi_dcmplt>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	f43f af35 	beq.w	800bf24 <_dtoa_r+0x464>
 800c0ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c0bc:	1e6b      	subs	r3, r5, #1
 800c0be:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c0c4:	2b30      	cmp	r3, #48	; 0x30
 800c0c6:	d0f8      	beq.n	800c0ba <_dtoa_r+0x5fa>
 800c0c8:	9700      	str	r7, [sp, #0]
 800c0ca:	e049      	b.n	800c160 <_dtoa_r+0x6a0>
 800c0cc:	4b05      	ldr	r3, [pc, #20]	; (800c0e4 <_dtoa_r+0x624>)
 800c0ce:	f7f4 fa93 	bl	80005f8 <__aeabi_dmul>
 800c0d2:	4680      	mov	r8, r0
 800c0d4:	4689      	mov	r9, r1
 800c0d6:	e7bd      	b.n	800c054 <_dtoa_r+0x594>
 800c0d8:	0800e2e8 	.word	0x0800e2e8
 800c0dc:	0800e2c0 	.word	0x0800e2c0
 800c0e0:	3ff00000 	.word	0x3ff00000
 800c0e4:	40240000 	.word	0x40240000
 800c0e8:	401c0000 	.word	0x401c0000
 800c0ec:	40140000 	.word	0x40140000
 800c0f0:	3fe00000 	.word	0x3fe00000
 800c0f4:	9d01      	ldr	r5, [sp, #4]
 800c0f6:	4656      	mov	r6, sl
 800c0f8:	465f      	mov	r7, fp
 800c0fa:	4642      	mov	r2, r8
 800c0fc:	464b      	mov	r3, r9
 800c0fe:	4630      	mov	r0, r6
 800c100:	4639      	mov	r1, r7
 800c102:	f7f4 fba3 	bl	800084c <__aeabi_ddiv>
 800c106:	f7f4 fd27 	bl	8000b58 <__aeabi_d2iz>
 800c10a:	4682      	mov	sl, r0
 800c10c:	f7f4 fa0a 	bl	8000524 <__aeabi_i2d>
 800c110:	4642      	mov	r2, r8
 800c112:	464b      	mov	r3, r9
 800c114:	f7f4 fa70 	bl	80005f8 <__aeabi_dmul>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4630      	mov	r0, r6
 800c11e:	4639      	mov	r1, r7
 800c120:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c124:	f7f4 f8b0 	bl	8000288 <__aeabi_dsub>
 800c128:	f805 6b01 	strb.w	r6, [r5], #1
 800c12c:	9e01      	ldr	r6, [sp, #4]
 800c12e:	9f03      	ldr	r7, [sp, #12]
 800c130:	1bae      	subs	r6, r5, r6
 800c132:	42b7      	cmp	r7, r6
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	d135      	bne.n	800c1a6 <_dtoa_r+0x6e6>
 800c13a:	f7f4 f8a7 	bl	800028c <__adddf3>
 800c13e:	4642      	mov	r2, r8
 800c140:	464b      	mov	r3, r9
 800c142:	4606      	mov	r6, r0
 800c144:	460f      	mov	r7, r1
 800c146:	f7f4 fce7 	bl	8000b18 <__aeabi_dcmpgt>
 800c14a:	b9d0      	cbnz	r0, 800c182 <_dtoa_r+0x6c2>
 800c14c:	4642      	mov	r2, r8
 800c14e:	464b      	mov	r3, r9
 800c150:	4630      	mov	r0, r6
 800c152:	4639      	mov	r1, r7
 800c154:	f7f4 fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c158:	b110      	cbz	r0, 800c160 <_dtoa_r+0x6a0>
 800c15a:	f01a 0f01 	tst.w	sl, #1
 800c15e:	d110      	bne.n	800c182 <_dtoa_r+0x6c2>
 800c160:	4620      	mov	r0, r4
 800c162:	ee18 1a10 	vmov	r1, s16
 800c166:	f000 fd17 	bl	800cb98 <_Bfree>
 800c16a:	2300      	movs	r3, #0
 800c16c:	9800      	ldr	r0, [sp, #0]
 800c16e:	702b      	strb	r3, [r5, #0]
 800c170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c172:	3001      	adds	r0, #1
 800c174:	6018      	str	r0, [r3, #0]
 800c176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f43f acf1 	beq.w	800bb60 <_dtoa_r+0xa0>
 800c17e:	601d      	str	r5, [r3, #0]
 800c180:	e4ee      	b.n	800bb60 <_dtoa_r+0xa0>
 800c182:	9f00      	ldr	r7, [sp, #0]
 800c184:	462b      	mov	r3, r5
 800c186:	461d      	mov	r5, r3
 800c188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c18c:	2a39      	cmp	r2, #57	; 0x39
 800c18e:	d106      	bne.n	800c19e <_dtoa_r+0x6de>
 800c190:	9a01      	ldr	r2, [sp, #4]
 800c192:	429a      	cmp	r2, r3
 800c194:	d1f7      	bne.n	800c186 <_dtoa_r+0x6c6>
 800c196:	9901      	ldr	r1, [sp, #4]
 800c198:	2230      	movs	r2, #48	; 0x30
 800c19a:	3701      	adds	r7, #1
 800c19c:	700a      	strb	r2, [r1, #0]
 800c19e:	781a      	ldrb	r2, [r3, #0]
 800c1a0:	3201      	adds	r2, #1
 800c1a2:	701a      	strb	r2, [r3, #0]
 800c1a4:	e790      	b.n	800c0c8 <_dtoa_r+0x608>
 800c1a6:	4ba6      	ldr	r3, [pc, #664]	; (800c440 <_dtoa_r+0x980>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f7f4 fa25 	bl	80005f8 <__aeabi_dmul>
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	460f      	mov	r7, r1
 800c1b6:	f7f4 fc87 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d09d      	beq.n	800c0fa <_dtoa_r+0x63a>
 800c1be:	e7cf      	b.n	800c160 <_dtoa_r+0x6a0>
 800c1c0:	9a08      	ldr	r2, [sp, #32]
 800c1c2:	2a00      	cmp	r2, #0
 800c1c4:	f000 80d7 	beq.w	800c376 <_dtoa_r+0x8b6>
 800c1c8:	9a06      	ldr	r2, [sp, #24]
 800c1ca:	2a01      	cmp	r2, #1
 800c1cc:	f300 80ba 	bgt.w	800c344 <_dtoa_r+0x884>
 800c1d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1d2:	2a00      	cmp	r2, #0
 800c1d4:	f000 80b2 	beq.w	800c33c <_dtoa_r+0x87c>
 800c1d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c1dc:	9e07      	ldr	r6, [sp, #28]
 800c1de:	9d04      	ldr	r5, [sp, #16]
 800c1e0:	9a04      	ldr	r2, [sp, #16]
 800c1e2:	441a      	add	r2, r3
 800c1e4:	9204      	str	r2, [sp, #16]
 800c1e6:	9a05      	ldr	r2, [sp, #20]
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	441a      	add	r2, r3
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	9205      	str	r2, [sp, #20]
 800c1f0:	f000 fd8a 	bl	800cd08 <__i2b>
 800c1f4:	4607      	mov	r7, r0
 800c1f6:	2d00      	cmp	r5, #0
 800c1f8:	dd0c      	ble.n	800c214 <_dtoa_r+0x754>
 800c1fa:	9b05      	ldr	r3, [sp, #20]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dd09      	ble.n	800c214 <_dtoa_r+0x754>
 800c200:	42ab      	cmp	r3, r5
 800c202:	9a04      	ldr	r2, [sp, #16]
 800c204:	bfa8      	it	ge
 800c206:	462b      	movge	r3, r5
 800c208:	1ad2      	subs	r2, r2, r3
 800c20a:	9204      	str	r2, [sp, #16]
 800c20c:	9a05      	ldr	r2, [sp, #20]
 800c20e:	1aed      	subs	r5, r5, r3
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	9305      	str	r3, [sp, #20]
 800c214:	9b07      	ldr	r3, [sp, #28]
 800c216:	b31b      	cbz	r3, 800c260 <_dtoa_r+0x7a0>
 800c218:	9b08      	ldr	r3, [sp, #32]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f000 80af 	beq.w	800c37e <_dtoa_r+0x8be>
 800c220:	2e00      	cmp	r6, #0
 800c222:	dd13      	ble.n	800c24c <_dtoa_r+0x78c>
 800c224:	4639      	mov	r1, r7
 800c226:	4632      	mov	r2, r6
 800c228:	4620      	mov	r0, r4
 800c22a:	f000 fe2d 	bl	800ce88 <__pow5mult>
 800c22e:	ee18 2a10 	vmov	r2, s16
 800c232:	4601      	mov	r1, r0
 800c234:	4607      	mov	r7, r0
 800c236:	4620      	mov	r0, r4
 800c238:	f000 fd7c 	bl	800cd34 <__multiply>
 800c23c:	ee18 1a10 	vmov	r1, s16
 800c240:	4680      	mov	r8, r0
 800c242:	4620      	mov	r0, r4
 800c244:	f000 fca8 	bl	800cb98 <_Bfree>
 800c248:	ee08 8a10 	vmov	s16, r8
 800c24c:	9b07      	ldr	r3, [sp, #28]
 800c24e:	1b9a      	subs	r2, r3, r6
 800c250:	d006      	beq.n	800c260 <_dtoa_r+0x7a0>
 800c252:	ee18 1a10 	vmov	r1, s16
 800c256:	4620      	mov	r0, r4
 800c258:	f000 fe16 	bl	800ce88 <__pow5mult>
 800c25c:	ee08 0a10 	vmov	s16, r0
 800c260:	2101      	movs	r1, #1
 800c262:	4620      	mov	r0, r4
 800c264:	f000 fd50 	bl	800cd08 <__i2b>
 800c268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	4606      	mov	r6, r0
 800c26e:	f340 8088 	ble.w	800c382 <_dtoa_r+0x8c2>
 800c272:	461a      	mov	r2, r3
 800c274:	4601      	mov	r1, r0
 800c276:	4620      	mov	r0, r4
 800c278:	f000 fe06 	bl	800ce88 <__pow5mult>
 800c27c:	9b06      	ldr	r3, [sp, #24]
 800c27e:	2b01      	cmp	r3, #1
 800c280:	4606      	mov	r6, r0
 800c282:	f340 8081 	ble.w	800c388 <_dtoa_r+0x8c8>
 800c286:	f04f 0800 	mov.w	r8, #0
 800c28a:	6933      	ldr	r3, [r6, #16]
 800c28c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c290:	6918      	ldr	r0, [r3, #16]
 800c292:	f000 fce9 	bl	800cc68 <__hi0bits>
 800c296:	f1c0 0020 	rsb	r0, r0, #32
 800c29a:	9b05      	ldr	r3, [sp, #20]
 800c29c:	4418      	add	r0, r3
 800c29e:	f010 001f 	ands.w	r0, r0, #31
 800c2a2:	f000 8092 	beq.w	800c3ca <_dtoa_r+0x90a>
 800c2a6:	f1c0 0320 	rsb	r3, r0, #32
 800c2aa:	2b04      	cmp	r3, #4
 800c2ac:	f340 808a 	ble.w	800c3c4 <_dtoa_r+0x904>
 800c2b0:	f1c0 001c 	rsb	r0, r0, #28
 800c2b4:	9b04      	ldr	r3, [sp, #16]
 800c2b6:	4403      	add	r3, r0
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	9b05      	ldr	r3, [sp, #20]
 800c2bc:	4403      	add	r3, r0
 800c2be:	4405      	add	r5, r0
 800c2c0:	9305      	str	r3, [sp, #20]
 800c2c2:	9b04      	ldr	r3, [sp, #16]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	dd07      	ble.n	800c2d8 <_dtoa_r+0x818>
 800c2c8:	ee18 1a10 	vmov	r1, s16
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f000 fe34 	bl	800cf3c <__lshift>
 800c2d4:	ee08 0a10 	vmov	s16, r0
 800c2d8:	9b05      	ldr	r3, [sp, #20]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	dd05      	ble.n	800c2ea <_dtoa_r+0x82a>
 800c2de:	4631      	mov	r1, r6
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f000 fe2a 	bl	800cf3c <__lshift>
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d06e      	beq.n	800c3ce <_dtoa_r+0x90e>
 800c2f0:	ee18 0a10 	vmov	r0, s16
 800c2f4:	4631      	mov	r1, r6
 800c2f6:	f000 fe91 	bl	800d01c <__mcmp>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	da67      	bge.n	800c3ce <_dtoa_r+0x90e>
 800c2fe:	9b00      	ldr	r3, [sp, #0]
 800c300:	3b01      	subs	r3, #1
 800c302:	ee18 1a10 	vmov	r1, s16
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	220a      	movs	r2, #10
 800c30a:	2300      	movs	r3, #0
 800c30c:	4620      	mov	r0, r4
 800c30e:	f000 fc65 	bl	800cbdc <__multadd>
 800c312:	9b08      	ldr	r3, [sp, #32]
 800c314:	ee08 0a10 	vmov	s16, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 81b1 	beq.w	800c680 <_dtoa_r+0xbc0>
 800c31e:	2300      	movs	r3, #0
 800c320:	4639      	mov	r1, r7
 800c322:	220a      	movs	r2, #10
 800c324:	4620      	mov	r0, r4
 800c326:	f000 fc59 	bl	800cbdc <__multadd>
 800c32a:	9b02      	ldr	r3, [sp, #8]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	4607      	mov	r7, r0
 800c330:	f300 808e 	bgt.w	800c450 <_dtoa_r+0x990>
 800c334:	9b06      	ldr	r3, [sp, #24]
 800c336:	2b02      	cmp	r3, #2
 800c338:	dc51      	bgt.n	800c3de <_dtoa_r+0x91e>
 800c33a:	e089      	b.n	800c450 <_dtoa_r+0x990>
 800c33c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c33e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c342:	e74b      	b.n	800c1dc <_dtoa_r+0x71c>
 800c344:	9b03      	ldr	r3, [sp, #12]
 800c346:	1e5e      	subs	r6, r3, #1
 800c348:	9b07      	ldr	r3, [sp, #28]
 800c34a:	42b3      	cmp	r3, r6
 800c34c:	bfbf      	itttt	lt
 800c34e:	9b07      	ldrlt	r3, [sp, #28]
 800c350:	9607      	strlt	r6, [sp, #28]
 800c352:	1af2      	sublt	r2, r6, r3
 800c354:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c356:	bfb6      	itet	lt
 800c358:	189b      	addlt	r3, r3, r2
 800c35a:	1b9e      	subge	r6, r3, r6
 800c35c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c35e:	9b03      	ldr	r3, [sp, #12]
 800c360:	bfb8      	it	lt
 800c362:	2600      	movlt	r6, #0
 800c364:	2b00      	cmp	r3, #0
 800c366:	bfb7      	itett	lt
 800c368:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c36c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c370:	1a9d      	sublt	r5, r3, r2
 800c372:	2300      	movlt	r3, #0
 800c374:	e734      	b.n	800c1e0 <_dtoa_r+0x720>
 800c376:	9e07      	ldr	r6, [sp, #28]
 800c378:	9d04      	ldr	r5, [sp, #16]
 800c37a:	9f08      	ldr	r7, [sp, #32]
 800c37c:	e73b      	b.n	800c1f6 <_dtoa_r+0x736>
 800c37e:	9a07      	ldr	r2, [sp, #28]
 800c380:	e767      	b.n	800c252 <_dtoa_r+0x792>
 800c382:	9b06      	ldr	r3, [sp, #24]
 800c384:	2b01      	cmp	r3, #1
 800c386:	dc18      	bgt.n	800c3ba <_dtoa_r+0x8fa>
 800c388:	f1ba 0f00 	cmp.w	sl, #0
 800c38c:	d115      	bne.n	800c3ba <_dtoa_r+0x8fa>
 800c38e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c392:	b993      	cbnz	r3, 800c3ba <_dtoa_r+0x8fa>
 800c394:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c398:	0d1b      	lsrs	r3, r3, #20
 800c39a:	051b      	lsls	r3, r3, #20
 800c39c:	b183      	cbz	r3, 800c3c0 <_dtoa_r+0x900>
 800c39e:	9b04      	ldr	r3, [sp, #16]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	9b05      	ldr	r3, [sp, #20]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	9305      	str	r3, [sp, #20]
 800c3aa:	f04f 0801 	mov.w	r8, #1
 800c3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f47f af6a 	bne.w	800c28a <_dtoa_r+0x7ca>
 800c3b6:	2001      	movs	r0, #1
 800c3b8:	e76f      	b.n	800c29a <_dtoa_r+0x7da>
 800c3ba:	f04f 0800 	mov.w	r8, #0
 800c3be:	e7f6      	b.n	800c3ae <_dtoa_r+0x8ee>
 800c3c0:	4698      	mov	r8, r3
 800c3c2:	e7f4      	b.n	800c3ae <_dtoa_r+0x8ee>
 800c3c4:	f43f af7d 	beq.w	800c2c2 <_dtoa_r+0x802>
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	301c      	adds	r0, #28
 800c3cc:	e772      	b.n	800c2b4 <_dtoa_r+0x7f4>
 800c3ce:	9b03      	ldr	r3, [sp, #12]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	dc37      	bgt.n	800c444 <_dtoa_r+0x984>
 800c3d4:	9b06      	ldr	r3, [sp, #24]
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	dd34      	ble.n	800c444 <_dtoa_r+0x984>
 800c3da:	9b03      	ldr	r3, [sp, #12]
 800c3dc:	9302      	str	r3, [sp, #8]
 800c3de:	9b02      	ldr	r3, [sp, #8]
 800c3e0:	b96b      	cbnz	r3, 800c3fe <_dtoa_r+0x93e>
 800c3e2:	4631      	mov	r1, r6
 800c3e4:	2205      	movs	r2, #5
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 fbf8 	bl	800cbdc <__multadd>
 800c3ec:	4601      	mov	r1, r0
 800c3ee:	4606      	mov	r6, r0
 800c3f0:	ee18 0a10 	vmov	r0, s16
 800c3f4:	f000 fe12 	bl	800d01c <__mcmp>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	f73f adbb 	bgt.w	800bf74 <_dtoa_r+0x4b4>
 800c3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c400:	9d01      	ldr	r5, [sp, #4]
 800c402:	43db      	mvns	r3, r3
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	f04f 0800 	mov.w	r8, #0
 800c40a:	4631      	mov	r1, r6
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 fbc3 	bl	800cb98 <_Bfree>
 800c412:	2f00      	cmp	r7, #0
 800c414:	f43f aea4 	beq.w	800c160 <_dtoa_r+0x6a0>
 800c418:	f1b8 0f00 	cmp.w	r8, #0
 800c41c:	d005      	beq.n	800c42a <_dtoa_r+0x96a>
 800c41e:	45b8      	cmp	r8, r7
 800c420:	d003      	beq.n	800c42a <_dtoa_r+0x96a>
 800c422:	4641      	mov	r1, r8
 800c424:	4620      	mov	r0, r4
 800c426:	f000 fbb7 	bl	800cb98 <_Bfree>
 800c42a:	4639      	mov	r1, r7
 800c42c:	4620      	mov	r0, r4
 800c42e:	f000 fbb3 	bl	800cb98 <_Bfree>
 800c432:	e695      	b.n	800c160 <_dtoa_r+0x6a0>
 800c434:	2600      	movs	r6, #0
 800c436:	4637      	mov	r7, r6
 800c438:	e7e1      	b.n	800c3fe <_dtoa_r+0x93e>
 800c43a:	9700      	str	r7, [sp, #0]
 800c43c:	4637      	mov	r7, r6
 800c43e:	e599      	b.n	800bf74 <_dtoa_r+0x4b4>
 800c440:	40240000 	.word	0x40240000
 800c444:	9b08      	ldr	r3, [sp, #32]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f000 80ca 	beq.w	800c5e0 <_dtoa_r+0xb20>
 800c44c:	9b03      	ldr	r3, [sp, #12]
 800c44e:	9302      	str	r3, [sp, #8]
 800c450:	2d00      	cmp	r5, #0
 800c452:	dd05      	ble.n	800c460 <_dtoa_r+0x9a0>
 800c454:	4639      	mov	r1, r7
 800c456:	462a      	mov	r2, r5
 800c458:	4620      	mov	r0, r4
 800c45a:	f000 fd6f 	bl	800cf3c <__lshift>
 800c45e:	4607      	mov	r7, r0
 800c460:	f1b8 0f00 	cmp.w	r8, #0
 800c464:	d05b      	beq.n	800c51e <_dtoa_r+0xa5e>
 800c466:	6879      	ldr	r1, [r7, #4]
 800c468:	4620      	mov	r0, r4
 800c46a:	f000 fb55 	bl	800cb18 <_Balloc>
 800c46e:	4605      	mov	r5, r0
 800c470:	b928      	cbnz	r0, 800c47e <_dtoa_r+0x9be>
 800c472:	4b87      	ldr	r3, [pc, #540]	; (800c690 <_dtoa_r+0xbd0>)
 800c474:	4602      	mov	r2, r0
 800c476:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c47a:	f7ff bb3b 	b.w	800baf4 <_dtoa_r+0x34>
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	3202      	adds	r2, #2
 800c482:	0092      	lsls	r2, r2, #2
 800c484:	f107 010c 	add.w	r1, r7, #12
 800c488:	300c      	adds	r0, #12
 800c48a:	f000 fb2b 	bl	800cae4 <memcpy>
 800c48e:	2201      	movs	r2, #1
 800c490:	4629      	mov	r1, r5
 800c492:	4620      	mov	r0, r4
 800c494:	f000 fd52 	bl	800cf3c <__lshift>
 800c498:	9b01      	ldr	r3, [sp, #4]
 800c49a:	f103 0901 	add.w	r9, r3, #1
 800c49e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	9305      	str	r3, [sp, #20]
 800c4a6:	f00a 0301 	and.w	r3, sl, #1
 800c4aa:	46b8      	mov	r8, r7
 800c4ac:	9304      	str	r3, [sp, #16]
 800c4ae:	4607      	mov	r7, r0
 800c4b0:	4631      	mov	r1, r6
 800c4b2:	ee18 0a10 	vmov	r0, s16
 800c4b6:	f7ff fa77 	bl	800b9a8 <quorem>
 800c4ba:	4641      	mov	r1, r8
 800c4bc:	9002      	str	r0, [sp, #8]
 800c4be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c4c2:	ee18 0a10 	vmov	r0, s16
 800c4c6:	f000 fda9 	bl	800d01c <__mcmp>
 800c4ca:	463a      	mov	r2, r7
 800c4cc:	9003      	str	r0, [sp, #12]
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f000 fdbf 	bl	800d054 <__mdiff>
 800c4d6:	68c2      	ldr	r2, [r0, #12]
 800c4d8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c4dc:	4605      	mov	r5, r0
 800c4de:	bb02      	cbnz	r2, 800c522 <_dtoa_r+0xa62>
 800c4e0:	4601      	mov	r1, r0
 800c4e2:	ee18 0a10 	vmov	r0, s16
 800c4e6:	f000 fd99 	bl	800d01c <__mcmp>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	9207      	str	r2, [sp, #28]
 800c4f2:	f000 fb51 	bl	800cb98 <_Bfree>
 800c4f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c4fa:	ea43 0102 	orr.w	r1, r3, r2
 800c4fe:	9b04      	ldr	r3, [sp, #16]
 800c500:	430b      	orrs	r3, r1
 800c502:	464d      	mov	r5, r9
 800c504:	d10f      	bne.n	800c526 <_dtoa_r+0xa66>
 800c506:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c50a:	d02a      	beq.n	800c562 <_dtoa_r+0xaa2>
 800c50c:	9b03      	ldr	r3, [sp, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	dd02      	ble.n	800c518 <_dtoa_r+0xa58>
 800c512:	9b02      	ldr	r3, [sp, #8]
 800c514:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c518:	f88b a000 	strb.w	sl, [fp]
 800c51c:	e775      	b.n	800c40a <_dtoa_r+0x94a>
 800c51e:	4638      	mov	r0, r7
 800c520:	e7ba      	b.n	800c498 <_dtoa_r+0x9d8>
 800c522:	2201      	movs	r2, #1
 800c524:	e7e2      	b.n	800c4ec <_dtoa_r+0xa2c>
 800c526:	9b03      	ldr	r3, [sp, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	db04      	blt.n	800c536 <_dtoa_r+0xa76>
 800c52c:	9906      	ldr	r1, [sp, #24]
 800c52e:	430b      	orrs	r3, r1
 800c530:	9904      	ldr	r1, [sp, #16]
 800c532:	430b      	orrs	r3, r1
 800c534:	d122      	bne.n	800c57c <_dtoa_r+0xabc>
 800c536:	2a00      	cmp	r2, #0
 800c538:	ddee      	ble.n	800c518 <_dtoa_r+0xa58>
 800c53a:	ee18 1a10 	vmov	r1, s16
 800c53e:	2201      	movs	r2, #1
 800c540:	4620      	mov	r0, r4
 800c542:	f000 fcfb 	bl	800cf3c <__lshift>
 800c546:	4631      	mov	r1, r6
 800c548:	ee08 0a10 	vmov	s16, r0
 800c54c:	f000 fd66 	bl	800d01c <__mcmp>
 800c550:	2800      	cmp	r0, #0
 800c552:	dc03      	bgt.n	800c55c <_dtoa_r+0xa9c>
 800c554:	d1e0      	bne.n	800c518 <_dtoa_r+0xa58>
 800c556:	f01a 0f01 	tst.w	sl, #1
 800c55a:	d0dd      	beq.n	800c518 <_dtoa_r+0xa58>
 800c55c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c560:	d1d7      	bne.n	800c512 <_dtoa_r+0xa52>
 800c562:	2339      	movs	r3, #57	; 0x39
 800c564:	f88b 3000 	strb.w	r3, [fp]
 800c568:	462b      	mov	r3, r5
 800c56a:	461d      	mov	r5, r3
 800c56c:	3b01      	subs	r3, #1
 800c56e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c572:	2a39      	cmp	r2, #57	; 0x39
 800c574:	d071      	beq.n	800c65a <_dtoa_r+0xb9a>
 800c576:	3201      	adds	r2, #1
 800c578:	701a      	strb	r2, [r3, #0]
 800c57a:	e746      	b.n	800c40a <_dtoa_r+0x94a>
 800c57c:	2a00      	cmp	r2, #0
 800c57e:	dd07      	ble.n	800c590 <_dtoa_r+0xad0>
 800c580:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c584:	d0ed      	beq.n	800c562 <_dtoa_r+0xaa2>
 800c586:	f10a 0301 	add.w	r3, sl, #1
 800c58a:	f88b 3000 	strb.w	r3, [fp]
 800c58e:	e73c      	b.n	800c40a <_dtoa_r+0x94a>
 800c590:	9b05      	ldr	r3, [sp, #20]
 800c592:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c596:	4599      	cmp	r9, r3
 800c598:	d047      	beq.n	800c62a <_dtoa_r+0xb6a>
 800c59a:	ee18 1a10 	vmov	r1, s16
 800c59e:	2300      	movs	r3, #0
 800c5a0:	220a      	movs	r2, #10
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 fb1a 	bl	800cbdc <__multadd>
 800c5a8:	45b8      	cmp	r8, r7
 800c5aa:	ee08 0a10 	vmov	s16, r0
 800c5ae:	f04f 0300 	mov.w	r3, #0
 800c5b2:	f04f 020a 	mov.w	r2, #10
 800c5b6:	4641      	mov	r1, r8
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	d106      	bne.n	800c5ca <_dtoa_r+0xb0a>
 800c5bc:	f000 fb0e 	bl	800cbdc <__multadd>
 800c5c0:	4680      	mov	r8, r0
 800c5c2:	4607      	mov	r7, r0
 800c5c4:	f109 0901 	add.w	r9, r9, #1
 800c5c8:	e772      	b.n	800c4b0 <_dtoa_r+0x9f0>
 800c5ca:	f000 fb07 	bl	800cbdc <__multadd>
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	4680      	mov	r8, r0
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	220a      	movs	r2, #10
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f000 fb00 	bl	800cbdc <__multadd>
 800c5dc:	4607      	mov	r7, r0
 800c5de:	e7f1      	b.n	800c5c4 <_dtoa_r+0xb04>
 800c5e0:	9b03      	ldr	r3, [sp, #12]
 800c5e2:	9302      	str	r3, [sp, #8]
 800c5e4:	9d01      	ldr	r5, [sp, #4]
 800c5e6:	ee18 0a10 	vmov	r0, s16
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	f7ff f9dc 	bl	800b9a8 <quorem>
 800c5f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c5f4:	9b01      	ldr	r3, [sp, #4]
 800c5f6:	f805 ab01 	strb.w	sl, [r5], #1
 800c5fa:	1aea      	subs	r2, r5, r3
 800c5fc:	9b02      	ldr	r3, [sp, #8]
 800c5fe:	4293      	cmp	r3, r2
 800c600:	dd09      	ble.n	800c616 <_dtoa_r+0xb56>
 800c602:	ee18 1a10 	vmov	r1, s16
 800c606:	2300      	movs	r3, #0
 800c608:	220a      	movs	r2, #10
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 fae6 	bl	800cbdc <__multadd>
 800c610:	ee08 0a10 	vmov	s16, r0
 800c614:	e7e7      	b.n	800c5e6 <_dtoa_r+0xb26>
 800c616:	9b02      	ldr	r3, [sp, #8]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	bfc8      	it	gt
 800c61c:	461d      	movgt	r5, r3
 800c61e:	9b01      	ldr	r3, [sp, #4]
 800c620:	bfd8      	it	le
 800c622:	2501      	movle	r5, #1
 800c624:	441d      	add	r5, r3
 800c626:	f04f 0800 	mov.w	r8, #0
 800c62a:	ee18 1a10 	vmov	r1, s16
 800c62e:	2201      	movs	r2, #1
 800c630:	4620      	mov	r0, r4
 800c632:	f000 fc83 	bl	800cf3c <__lshift>
 800c636:	4631      	mov	r1, r6
 800c638:	ee08 0a10 	vmov	s16, r0
 800c63c:	f000 fcee 	bl	800d01c <__mcmp>
 800c640:	2800      	cmp	r0, #0
 800c642:	dc91      	bgt.n	800c568 <_dtoa_r+0xaa8>
 800c644:	d102      	bne.n	800c64c <_dtoa_r+0xb8c>
 800c646:	f01a 0f01 	tst.w	sl, #1
 800c64a:	d18d      	bne.n	800c568 <_dtoa_r+0xaa8>
 800c64c:	462b      	mov	r3, r5
 800c64e:	461d      	mov	r5, r3
 800c650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c654:	2a30      	cmp	r2, #48	; 0x30
 800c656:	d0fa      	beq.n	800c64e <_dtoa_r+0xb8e>
 800c658:	e6d7      	b.n	800c40a <_dtoa_r+0x94a>
 800c65a:	9a01      	ldr	r2, [sp, #4]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d184      	bne.n	800c56a <_dtoa_r+0xaaa>
 800c660:	9b00      	ldr	r3, [sp, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	2331      	movs	r3, #49	; 0x31
 800c668:	7013      	strb	r3, [r2, #0]
 800c66a:	e6ce      	b.n	800c40a <_dtoa_r+0x94a>
 800c66c:	4b09      	ldr	r3, [pc, #36]	; (800c694 <_dtoa_r+0xbd4>)
 800c66e:	f7ff ba95 	b.w	800bb9c <_dtoa_r+0xdc>
 800c672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c674:	2b00      	cmp	r3, #0
 800c676:	f47f aa6e 	bne.w	800bb56 <_dtoa_r+0x96>
 800c67a:	4b07      	ldr	r3, [pc, #28]	; (800c698 <_dtoa_r+0xbd8>)
 800c67c:	f7ff ba8e 	b.w	800bb9c <_dtoa_r+0xdc>
 800c680:	9b02      	ldr	r3, [sp, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	dcae      	bgt.n	800c5e4 <_dtoa_r+0xb24>
 800c686:	9b06      	ldr	r3, [sp, #24]
 800c688:	2b02      	cmp	r3, #2
 800c68a:	f73f aea8 	bgt.w	800c3de <_dtoa_r+0x91e>
 800c68e:	e7a9      	b.n	800c5e4 <_dtoa_r+0xb24>
 800c690:	0800e1ef 	.word	0x0800e1ef
 800c694:	0800e14c 	.word	0x0800e14c
 800c698:	0800e170 	.word	0x0800e170

0800c69c <__sflush_r>:
 800c69c:	898a      	ldrh	r2, [r1, #12]
 800c69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	0710      	lsls	r0, r2, #28
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	d458      	bmi.n	800c75c <__sflush_r+0xc0>
 800c6aa:	684b      	ldr	r3, [r1, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	dc05      	bgt.n	800c6bc <__sflush_r+0x20>
 800c6b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	dc02      	bgt.n	800c6bc <__sflush_r+0x20>
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6be:	2e00      	cmp	r6, #0
 800c6c0:	d0f9      	beq.n	800c6b6 <__sflush_r+0x1a>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6c8:	682f      	ldr	r7, [r5, #0]
 800c6ca:	602b      	str	r3, [r5, #0]
 800c6cc:	d032      	beq.n	800c734 <__sflush_r+0x98>
 800c6ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6d0:	89a3      	ldrh	r3, [r4, #12]
 800c6d2:	075a      	lsls	r2, r3, #29
 800c6d4:	d505      	bpl.n	800c6e2 <__sflush_r+0x46>
 800c6d6:	6863      	ldr	r3, [r4, #4]
 800c6d8:	1ac0      	subs	r0, r0, r3
 800c6da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6dc:	b10b      	cbz	r3, 800c6e2 <__sflush_r+0x46>
 800c6de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6e0:	1ac0      	subs	r0, r0, r3
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6e8:	6a21      	ldr	r1, [r4, #32]
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	47b0      	blx	r6
 800c6ee:	1c43      	adds	r3, r0, #1
 800c6f0:	89a3      	ldrh	r3, [r4, #12]
 800c6f2:	d106      	bne.n	800c702 <__sflush_r+0x66>
 800c6f4:	6829      	ldr	r1, [r5, #0]
 800c6f6:	291d      	cmp	r1, #29
 800c6f8:	d82c      	bhi.n	800c754 <__sflush_r+0xb8>
 800c6fa:	4a2a      	ldr	r2, [pc, #168]	; (800c7a4 <__sflush_r+0x108>)
 800c6fc:	40ca      	lsrs	r2, r1
 800c6fe:	07d6      	lsls	r6, r2, #31
 800c700:	d528      	bpl.n	800c754 <__sflush_r+0xb8>
 800c702:	2200      	movs	r2, #0
 800c704:	6062      	str	r2, [r4, #4]
 800c706:	04d9      	lsls	r1, r3, #19
 800c708:	6922      	ldr	r2, [r4, #16]
 800c70a:	6022      	str	r2, [r4, #0]
 800c70c:	d504      	bpl.n	800c718 <__sflush_r+0x7c>
 800c70e:	1c42      	adds	r2, r0, #1
 800c710:	d101      	bne.n	800c716 <__sflush_r+0x7a>
 800c712:	682b      	ldr	r3, [r5, #0]
 800c714:	b903      	cbnz	r3, 800c718 <__sflush_r+0x7c>
 800c716:	6560      	str	r0, [r4, #84]	; 0x54
 800c718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c71a:	602f      	str	r7, [r5, #0]
 800c71c:	2900      	cmp	r1, #0
 800c71e:	d0ca      	beq.n	800c6b6 <__sflush_r+0x1a>
 800c720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c724:	4299      	cmp	r1, r3
 800c726:	d002      	beq.n	800c72e <__sflush_r+0x92>
 800c728:	4628      	mov	r0, r5
 800c72a:	f7fe fa7f 	bl	800ac2c <_free_r>
 800c72e:	2000      	movs	r0, #0
 800c730:	6360      	str	r0, [r4, #52]	; 0x34
 800c732:	e7c1      	b.n	800c6b8 <__sflush_r+0x1c>
 800c734:	6a21      	ldr	r1, [r4, #32]
 800c736:	2301      	movs	r3, #1
 800c738:	4628      	mov	r0, r5
 800c73a:	47b0      	blx	r6
 800c73c:	1c41      	adds	r1, r0, #1
 800c73e:	d1c7      	bne.n	800c6d0 <__sflush_r+0x34>
 800c740:	682b      	ldr	r3, [r5, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d0c4      	beq.n	800c6d0 <__sflush_r+0x34>
 800c746:	2b1d      	cmp	r3, #29
 800c748:	d001      	beq.n	800c74e <__sflush_r+0xb2>
 800c74a:	2b16      	cmp	r3, #22
 800c74c:	d101      	bne.n	800c752 <__sflush_r+0xb6>
 800c74e:	602f      	str	r7, [r5, #0]
 800c750:	e7b1      	b.n	800c6b6 <__sflush_r+0x1a>
 800c752:	89a3      	ldrh	r3, [r4, #12]
 800c754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c758:	81a3      	strh	r3, [r4, #12]
 800c75a:	e7ad      	b.n	800c6b8 <__sflush_r+0x1c>
 800c75c:	690f      	ldr	r7, [r1, #16]
 800c75e:	2f00      	cmp	r7, #0
 800c760:	d0a9      	beq.n	800c6b6 <__sflush_r+0x1a>
 800c762:	0793      	lsls	r3, r2, #30
 800c764:	680e      	ldr	r6, [r1, #0]
 800c766:	bf08      	it	eq
 800c768:	694b      	ldreq	r3, [r1, #20]
 800c76a:	600f      	str	r7, [r1, #0]
 800c76c:	bf18      	it	ne
 800c76e:	2300      	movne	r3, #0
 800c770:	eba6 0807 	sub.w	r8, r6, r7
 800c774:	608b      	str	r3, [r1, #8]
 800c776:	f1b8 0f00 	cmp.w	r8, #0
 800c77a:	dd9c      	ble.n	800c6b6 <__sflush_r+0x1a>
 800c77c:	6a21      	ldr	r1, [r4, #32]
 800c77e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c780:	4643      	mov	r3, r8
 800c782:	463a      	mov	r2, r7
 800c784:	4628      	mov	r0, r5
 800c786:	47b0      	blx	r6
 800c788:	2800      	cmp	r0, #0
 800c78a:	dc06      	bgt.n	800c79a <__sflush_r+0xfe>
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c792:	81a3      	strh	r3, [r4, #12]
 800c794:	f04f 30ff 	mov.w	r0, #4294967295
 800c798:	e78e      	b.n	800c6b8 <__sflush_r+0x1c>
 800c79a:	4407      	add	r7, r0
 800c79c:	eba8 0800 	sub.w	r8, r8, r0
 800c7a0:	e7e9      	b.n	800c776 <__sflush_r+0xda>
 800c7a2:	bf00      	nop
 800c7a4:	20400001 	.word	0x20400001

0800c7a8 <_fflush_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	690b      	ldr	r3, [r1, #16]
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	b913      	cbnz	r3, 800c7b8 <_fflush_r+0x10>
 800c7b2:	2500      	movs	r5, #0
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}
 800c7b8:	b118      	cbz	r0, 800c7c2 <_fflush_r+0x1a>
 800c7ba:	6983      	ldr	r3, [r0, #24]
 800c7bc:	b90b      	cbnz	r3, 800c7c2 <_fflush_r+0x1a>
 800c7be:	f000 f887 	bl	800c8d0 <__sinit>
 800c7c2:	4b14      	ldr	r3, [pc, #80]	; (800c814 <_fflush_r+0x6c>)
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	d11b      	bne.n	800c800 <_fflush_r+0x58>
 800c7c8:	686c      	ldr	r4, [r5, #4]
 800c7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d0ef      	beq.n	800c7b2 <_fflush_r+0xa>
 800c7d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7d4:	07d0      	lsls	r0, r2, #31
 800c7d6:	d404      	bmi.n	800c7e2 <_fflush_r+0x3a>
 800c7d8:	0599      	lsls	r1, r3, #22
 800c7da:	d402      	bmi.n	800c7e2 <_fflush_r+0x3a>
 800c7dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7de:	f000 f91a 	bl	800ca16 <__retarget_lock_acquire_recursive>
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	f7ff ff59 	bl	800c69c <__sflush_r>
 800c7ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7ec:	07da      	lsls	r2, r3, #31
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	d4e0      	bmi.n	800c7b4 <_fflush_r+0xc>
 800c7f2:	89a3      	ldrh	r3, [r4, #12]
 800c7f4:	059b      	lsls	r3, r3, #22
 800c7f6:	d4dd      	bmi.n	800c7b4 <_fflush_r+0xc>
 800c7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7fa:	f000 f90d 	bl	800ca18 <__retarget_lock_release_recursive>
 800c7fe:	e7d9      	b.n	800c7b4 <_fflush_r+0xc>
 800c800:	4b05      	ldr	r3, [pc, #20]	; (800c818 <_fflush_r+0x70>)
 800c802:	429c      	cmp	r4, r3
 800c804:	d101      	bne.n	800c80a <_fflush_r+0x62>
 800c806:	68ac      	ldr	r4, [r5, #8]
 800c808:	e7df      	b.n	800c7ca <_fflush_r+0x22>
 800c80a:	4b04      	ldr	r3, [pc, #16]	; (800c81c <_fflush_r+0x74>)
 800c80c:	429c      	cmp	r4, r3
 800c80e:	bf08      	it	eq
 800c810:	68ec      	ldreq	r4, [r5, #12]
 800c812:	e7da      	b.n	800c7ca <_fflush_r+0x22>
 800c814:	0800e220 	.word	0x0800e220
 800c818:	0800e240 	.word	0x0800e240
 800c81c:	0800e200 	.word	0x0800e200

0800c820 <std>:
 800c820:	2300      	movs	r3, #0
 800c822:	b510      	push	{r4, lr}
 800c824:	4604      	mov	r4, r0
 800c826:	e9c0 3300 	strd	r3, r3, [r0]
 800c82a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c82e:	6083      	str	r3, [r0, #8]
 800c830:	8181      	strh	r1, [r0, #12]
 800c832:	6643      	str	r3, [r0, #100]	; 0x64
 800c834:	81c2      	strh	r2, [r0, #14]
 800c836:	6183      	str	r3, [r0, #24]
 800c838:	4619      	mov	r1, r3
 800c83a:	2208      	movs	r2, #8
 800c83c:	305c      	adds	r0, #92	; 0x5c
 800c83e:	f7fe f9ed 	bl	800ac1c <memset>
 800c842:	4b05      	ldr	r3, [pc, #20]	; (800c858 <std+0x38>)
 800c844:	6263      	str	r3, [r4, #36]	; 0x24
 800c846:	4b05      	ldr	r3, [pc, #20]	; (800c85c <std+0x3c>)
 800c848:	62a3      	str	r3, [r4, #40]	; 0x28
 800c84a:	4b05      	ldr	r3, [pc, #20]	; (800c860 <std+0x40>)
 800c84c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c84e:	4b05      	ldr	r3, [pc, #20]	; (800c864 <std+0x44>)
 800c850:	6224      	str	r4, [r4, #32]
 800c852:	6323      	str	r3, [r4, #48]	; 0x30
 800c854:	bd10      	pop	{r4, pc}
 800c856:	bf00      	nop
 800c858:	0800d591 	.word	0x0800d591
 800c85c:	0800d5b3 	.word	0x0800d5b3
 800c860:	0800d5eb 	.word	0x0800d5eb
 800c864:	0800d60f 	.word	0x0800d60f

0800c868 <_cleanup_r>:
 800c868:	4901      	ldr	r1, [pc, #4]	; (800c870 <_cleanup_r+0x8>)
 800c86a:	f000 b8af 	b.w	800c9cc <_fwalk_reent>
 800c86e:	bf00      	nop
 800c870:	0800c7a9 	.word	0x0800c7a9

0800c874 <__sfmoreglue>:
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	2268      	movs	r2, #104	; 0x68
 800c878:	1e4d      	subs	r5, r1, #1
 800c87a:	4355      	muls	r5, r2
 800c87c:	460e      	mov	r6, r1
 800c87e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c882:	f7fe fa3f 	bl	800ad04 <_malloc_r>
 800c886:	4604      	mov	r4, r0
 800c888:	b140      	cbz	r0, 800c89c <__sfmoreglue+0x28>
 800c88a:	2100      	movs	r1, #0
 800c88c:	e9c0 1600 	strd	r1, r6, [r0]
 800c890:	300c      	adds	r0, #12
 800c892:	60a0      	str	r0, [r4, #8]
 800c894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c898:	f7fe f9c0 	bl	800ac1c <memset>
 800c89c:	4620      	mov	r0, r4
 800c89e:	bd70      	pop	{r4, r5, r6, pc}

0800c8a0 <__sfp_lock_acquire>:
 800c8a0:	4801      	ldr	r0, [pc, #4]	; (800c8a8 <__sfp_lock_acquire+0x8>)
 800c8a2:	f000 b8b8 	b.w	800ca16 <__retarget_lock_acquire_recursive>
 800c8a6:	bf00      	nop
 800c8a8:	20000bbd 	.word	0x20000bbd

0800c8ac <__sfp_lock_release>:
 800c8ac:	4801      	ldr	r0, [pc, #4]	; (800c8b4 <__sfp_lock_release+0x8>)
 800c8ae:	f000 b8b3 	b.w	800ca18 <__retarget_lock_release_recursive>
 800c8b2:	bf00      	nop
 800c8b4:	20000bbd 	.word	0x20000bbd

0800c8b8 <__sinit_lock_acquire>:
 800c8b8:	4801      	ldr	r0, [pc, #4]	; (800c8c0 <__sinit_lock_acquire+0x8>)
 800c8ba:	f000 b8ac 	b.w	800ca16 <__retarget_lock_acquire_recursive>
 800c8be:	bf00      	nop
 800c8c0:	20000bbe 	.word	0x20000bbe

0800c8c4 <__sinit_lock_release>:
 800c8c4:	4801      	ldr	r0, [pc, #4]	; (800c8cc <__sinit_lock_release+0x8>)
 800c8c6:	f000 b8a7 	b.w	800ca18 <__retarget_lock_release_recursive>
 800c8ca:	bf00      	nop
 800c8cc:	20000bbe 	.word	0x20000bbe

0800c8d0 <__sinit>:
 800c8d0:	b510      	push	{r4, lr}
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	f7ff fff0 	bl	800c8b8 <__sinit_lock_acquire>
 800c8d8:	69a3      	ldr	r3, [r4, #24]
 800c8da:	b11b      	cbz	r3, 800c8e4 <__sinit+0x14>
 800c8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8e0:	f7ff bff0 	b.w	800c8c4 <__sinit_lock_release>
 800c8e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c8e8:	6523      	str	r3, [r4, #80]	; 0x50
 800c8ea:	4b13      	ldr	r3, [pc, #76]	; (800c938 <__sinit+0x68>)
 800c8ec:	4a13      	ldr	r2, [pc, #76]	; (800c93c <__sinit+0x6c>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8f2:	42a3      	cmp	r3, r4
 800c8f4:	bf04      	itt	eq
 800c8f6:	2301      	moveq	r3, #1
 800c8f8:	61a3      	streq	r3, [r4, #24]
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f000 f820 	bl	800c940 <__sfp>
 800c900:	6060      	str	r0, [r4, #4]
 800c902:	4620      	mov	r0, r4
 800c904:	f000 f81c 	bl	800c940 <__sfp>
 800c908:	60a0      	str	r0, [r4, #8]
 800c90a:	4620      	mov	r0, r4
 800c90c:	f000 f818 	bl	800c940 <__sfp>
 800c910:	2200      	movs	r2, #0
 800c912:	60e0      	str	r0, [r4, #12]
 800c914:	2104      	movs	r1, #4
 800c916:	6860      	ldr	r0, [r4, #4]
 800c918:	f7ff ff82 	bl	800c820 <std>
 800c91c:	68a0      	ldr	r0, [r4, #8]
 800c91e:	2201      	movs	r2, #1
 800c920:	2109      	movs	r1, #9
 800c922:	f7ff ff7d 	bl	800c820 <std>
 800c926:	68e0      	ldr	r0, [r4, #12]
 800c928:	2202      	movs	r2, #2
 800c92a:	2112      	movs	r1, #18
 800c92c:	f7ff ff78 	bl	800c820 <std>
 800c930:	2301      	movs	r3, #1
 800c932:	61a3      	str	r3, [r4, #24]
 800c934:	e7d2      	b.n	800c8dc <__sinit+0xc>
 800c936:	bf00      	nop
 800c938:	0800e138 	.word	0x0800e138
 800c93c:	0800c869 	.word	0x0800c869

0800c940 <__sfp>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	4607      	mov	r7, r0
 800c944:	f7ff ffac 	bl	800c8a0 <__sfp_lock_acquire>
 800c948:	4b1e      	ldr	r3, [pc, #120]	; (800c9c4 <__sfp+0x84>)
 800c94a:	681e      	ldr	r6, [r3, #0]
 800c94c:	69b3      	ldr	r3, [r6, #24]
 800c94e:	b913      	cbnz	r3, 800c956 <__sfp+0x16>
 800c950:	4630      	mov	r0, r6
 800c952:	f7ff ffbd 	bl	800c8d0 <__sinit>
 800c956:	3648      	adds	r6, #72	; 0x48
 800c958:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	d503      	bpl.n	800c968 <__sfp+0x28>
 800c960:	6833      	ldr	r3, [r6, #0]
 800c962:	b30b      	cbz	r3, 800c9a8 <__sfp+0x68>
 800c964:	6836      	ldr	r6, [r6, #0]
 800c966:	e7f7      	b.n	800c958 <__sfp+0x18>
 800c968:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c96c:	b9d5      	cbnz	r5, 800c9a4 <__sfp+0x64>
 800c96e:	4b16      	ldr	r3, [pc, #88]	; (800c9c8 <__sfp+0x88>)
 800c970:	60e3      	str	r3, [r4, #12]
 800c972:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c976:	6665      	str	r5, [r4, #100]	; 0x64
 800c978:	f000 f84c 	bl	800ca14 <__retarget_lock_init_recursive>
 800c97c:	f7ff ff96 	bl	800c8ac <__sfp_lock_release>
 800c980:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c984:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c988:	6025      	str	r5, [r4, #0]
 800c98a:	61a5      	str	r5, [r4, #24]
 800c98c:	2208      	movs	r2, #8
 800c98e:	4629      	mov	r1, r5
 800c990:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c994:	f7fe f942 	bl	800ac1c <memset>
 800c998:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c99c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a4:	3468      	adds	r4, #104	; 0x68
 800c9a6:	e7d9      	b.n	800c95c <__sfp+0x1c>
 800c9a8:	2104      	movs	r1, #4
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	f7ff ff62 	bl	800c874 <__sfmoreglue>
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	6030      	str	r0, [r6, #0]
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d1d5      	bne.n	800c964 <__sfp+0x24>
 800c9b8:	f7ff ff78 	bl	800c8ac <__sfp_lock_release>
 800c9bc:	230c      	movs	r3, #12
 800c9be:	603b      	str	r3, [r7, #0]
 800c9c0:	e7ee      	b.n	800c9a0 <__sfp+0x60>
 800c9c2:	bf00      	nop
 800c9c4:	0800e138 	.word	0x0800e138
 800c9c8:	ffff0001 	.word	0xffff0001

0800c9cc <_fwalk_reent>:
 800c9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9d0:	4606      	mov	r6, r0
 800c9d2:	4688      	mov	r8, r1
 800c9d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c9d8:	2700      	movs	r7, #0
 800c9da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9de:	f1b9 0901 	subs.w	r9, r9, #1
 800c9e2:	d505      	bpl.n	800c9f0 <_fwalk_reent+0x24>
 800c9e4:	6824      	ldr	r4, [r4, #0]
 800c9e6:	2c00      	cmp	r4, #0
 800c9e8:	d1f7      	bne.n	800c9da <_fwalk_reent+0xe>
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9f0:	89ab      	ldrh	r3, [r5, #12]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d907      	bls.n	800ca06 <_fwalk_reent+0x3a>
 800c9f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	d003      	beq.n	800ca06 <_fwalk_reent+0x3a>
 800c9fe:	4629      	mov	r1, r5
 800ca00:	4630      	mov	r0, r6
 800ca02:	47c0      	blx	r8
 800ca04:	4307      	orrs	r7, r0
 800ca06:	3568      	adds	r5, #104	; 0x68
 800ca08:	e7e9      	b.n	800c9de <_fwalk_reent+0x12>
	...

0800ca0c <_localeconv_r>:
 800ca0c:	4800      	ldr	r0, [pc, #0]	; (800ca10 <_localeconv_r+0x4>)
 800ca0e:	4770      	bx	lr
 800ca10:	20000198 	.word	0x20000198

0800ca14 <__retarget_lock_init_recursive>:
 800ca14:	4770      	bx	lr

0800ca16 <__retarget_lock_acquire_recursive>:
 800ca16:	4770      	bx	lr

0800ca18 <__retarget_lock_release_recursive>:
 800ca18:	4770      	bx	lr

0800ca1a <__swhatbuf_r>:
 800ca1a:	b570      	push	{r4, r5, r6, lr}
 800ca1c:	460e      	mov	r6, r1
 800ca1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca22:	2900      	cmp	r1, #0
 800ca24:	b096      	sub	sp, #88	; 0x58
 800ca26:	4614      	mov	r4, r2
 800ca28:	461d      	mov	r5, r3
 800ca2a:	da08      	bge.n	800ca3e <__swhatbuf_r+0x24>
 800ca2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca30:	2200      	movs	r2, #0
 800ca32:	602a      	str	r2, [r5, #0]
 800ca34:	061a      	lsls	r2, r3, #24
 800ca36:	d410      	bmi.n	800ca5a <__swhatbuf_r+0x40>
 800ca38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca3c:	e00e      	b.n	800ca5c <__swhatbuf_r+0x42>
 800ca3e:	466a      	mov	r2, sp
 800ca40:	f000 fe3c 	bl	800d6bc <_fstat_r>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	dbf1      	blt.n	800ca2c <__swhatbuf_r+0x12>
 800ca48:	9a01      	ldr	r2, [sp, #4]
 800ca4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca52:	425a      	negs	r2, r3
 800ca54:	415a      	adcs	r2, r3
 800ca56:	602a      	str	r2, [r5, #0]
 800ca58:	e7ee      	b.n	800ca38 <__swhatbuf_r+0x1e>
 800ca5a:	2340      	movs	r3, #64	; 0x40
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	6023      	str	r3, [r4, #0]
 800ca60:	b016      	add	sp, #88	; 0x58
 800ca62:	bd70      	pop	{r4, r5, r6, pc}

0800ca64 <__smakebuf_r>:
 800ca64:	898b      	ldrh	r3, [r1, #12]
 800ca66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca68:	079d      	lsls	r5, r3, #30
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	d507      	bpl.n	800ca80 <__smakebuf_r+0x1c>
 800ca70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	6123      	str	r3, [r4, #16]
 800ca78:	2301      	movs	r3, #1
 800ca7a:	6163      	str	r3, [r4, #20]
 800ca7c:	b002      	add	sp, #8
 800ca7e:	bd70      	pop	{r4, r5, r6, pc}
 800ca80:	ab01      	add	r3, sp, #4
 800ca82:	466a      	mov	r2, sp
 800ca84:	f7ff ffc9 	bl	800ca1a <__swhatbuf_r>
 800ca88:	9900      	ldr	r1, [sp, #0]
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7fe f939 	bl	800ad04 <_malloc_r>
 800ca92:	b948      	cbnz	r0, 800caa8 <__smakebuf_r+0x44>
 800ca94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca98:	059a      	lsls	r2, r3, #22
 800ca9a:	d4ef      	bmi.n	800ca7c <__smakebuf_r+0x18>
 800ca9c:	f023 0303 	bic.w	r3, r3, #3
 800caa0:	f043 0302 	orr.w	r3, r3, #2
 800caa4:	81a3      	strh	r3, [r4, #12]
 800caa6:	e7e3      	b.n	800ca70 <__smakebuf_r+0xc>
 800caa8:	4b0d      	ldr	r3, [pc, #52]	; (800cae0 <__smakebuf_r+0x7c>)
 800caaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	6020      	str	r0, [r4, #0]
 800cab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cab4:	81a3      	strh	r3, [r4, #12]
 800cab6:	9b00      	ldr	r3, [sp, #0]
 800cab8:	6163      	str	r3, [r4, #20]
 800caba:	9b01      	ldr	r3, [sp, #4]
 800cabc:	6120      	str	r0, [r4, #16]
 800cabe:	b15b      	cbz	r3, 800cad8 <__smakebuf_r+0x74>
 800cac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cac4:	4630      	mov	r0, r6
 800cac6:	f000 fe0b 	bl	800d6e0 <_isatty_r>
 800caca:	b128      	cbz	r0, 800cad8 <__smakebuf_r+0x74>
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	f023 0303 	bic.w	r3, r3, #3
 800cad2:	f043 0301 	orr.w	r3, r3, #1
 800cad6:	81a3      	strh	r3, [r4, #12]
 800cad8:	89a0      	ldrh	r0, [r4, #12]
 800cada:	4305      	orrs	r5, r0
 800cadc:	81a5      	strh	r5, [r4, #12]
 800cade:	e7cd      	b.n	800ca7c <__smakebuf_r+0x18>
 800cae0:	0800c869 	.word	0x0800c869

0800cae4 <memcpy>:
 800cae4:	440a      	add	r2, r1
 800cae6:	4291      	cmp	r1, r2
 800cae8:	f100 33ff 	add.w	r3, r0, #4294967295
 800caec:	d100      	bne.n	800caf0 <memcpy+0xc>
 800caee:	4770      	bx	lr
 800caf0:	b510      	push	{r4, lr}
 800caf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cafa:	4291      	cmp	r1, r2
 800cafc:	d1f9      	bne.n	800caf2 <memcpy+0xe>
 800cafe:	bd10      	pop	{r4, pc}

0800cb00 <__malloc_lock>:
 800cb00:	4801      	ldr	r0, [pc, #4]	; (800cb08 <__malloc_lock+0x8>)
 800cb02:	f7ff bf88 	b.w	800ca16 <__retarget_lock_acquire_recursive>
 800cb06:	bf00      	nop
 800cb08:	20000bbc 	.word	0x20000bbc

0800cb0c <__malloc_unlock>:
 800cb0c:	4801      	ldr	r0, [pc, #4]	; (800cb14 <__malloc_unlock+0x8>)
 800cb0e:	f7ff bf83 	b.w	800ca18 <__retarget_lock_release_recursive>
 800cb12:	bf00      	nop
 800cb14:	20000bbc 	.word	0x20000bbc

0800cb18 <_Balloc>:
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	460d      	mov	r5, r1
 800cb20:	b976      	cbnz	r6, 800cb40 <_Balloc+0x28>
 800cb22:	2010      	movs	r0, #16
 800cb24:	f7fe f86a 	bl	800abfc <malloc>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	6260      	str	r0, [r4, #36]	; 0x24
 800cb2c:	b920      	cbnz	r0, 800cb38 <_Balloc+0x20>
 800cb2e:	4b18      	ldr	r3, [pc, #96]	; (800cb90 <_Balloc+0x78>)
 800cb30:	4818      	ldr	r0, [pc, #96]	; (800cb94 <_Balloc+0x7c>)
 800cb32:	2166      	movs	r1, #102	; 0x66
 800cb34:	f000 fd82 	bl	800d63c <__assert_func>
 800cb38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb3c:	6006      	str	r6, [r0, #0]
 800cb3e:	60c6      	str	r6, [r0, #12]
 800cb40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb42:	68f3      	ldr	r3, [r6, #12]
 800cb44:	b183      	cbz	r3, 800cb68 <_Balloc+0x50>
 800cb46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb4e:	b9b8      	cbnz	r0, 800cb80 <_Balloc+0x68>
 800cb50:	2101      	movs	r1, #1
 800cb52:	fa01 f605 	lsl.w	r6, r1, r5
 800cb56:	1d72      	adds	r2, r6, #5
 800cb58:	0092      	lsls	r2, r2, #2
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f000 fb60 	bl	800d220 <_calloc_r>
 800cb60:	b160      	cbz	r0, 800cb7c <_Balloc+0x64>
 800cb62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb66:	e00e      	b.n	800cb86 <_Balloc+0x6e>
 800cb68:	2221      	movs	r2, #33	; 0x21
 800cb6a:	2104      	movs	r1, #4
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f000 fb57 	bl	800d220 <_calloc_r>
 800cb72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb74:	60f0      	str	r0, [r6, #12]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1e4      	bne.n	800cb46 <_Balloc+0x2e>
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
 800cb80:	6802      	ldr	r2, [r0, #0]
 800cb82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb86:	2300      	movs	r3, #0
 800cb88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb8c:	e7f7      	b.n	800cb7e <_Balloc+0x66>
 800cb8e:	bf00      	nop
 800cb90:	0800e17d 	.word	0x0800e17d
 800cb94:	0800e260 	.word	0x0800e260

0800cb98 <_Bfree>:
 800cb98:	b570      	push	{r4, r5, r6, lr}
 800cb9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb9c:	4605      	mov	r5, r0
 800cb9e:	460c      	mov	r4, r1
 800cba0:	b976      	cbnz	r6, 800cbc0 <_Bfree+0x28>
 800cba2:	2010      	movs	r0, #16
 800cba4:	f7fe f82a 	bl	800abfc <malloc>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	6268      	str	r0, [r5, #36]	; 0x24
 800cbac:	b920      	cbnz	r0, 800cbb8 <_Bfree+0x20>
 800cbae:	4b09      	ldr	r3, [pc, #36]	; (800cbd4 <_Bfree+0x3c>)
 800cbb0:	4809      	ldr	r0, [pc, #36]	; (800cbd8 <_Bfree+0x40>)
 800cbb2:	218a      	movs	r1, #138	; 0x8a
 800cbb4:	f000 fd42 	bl	800d63c <__assert_func>
 800cbb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbbc:	6006      	str	r6, [r0, #0]
 800cbbe:	60c6      	str	r6, [r0, #12]
 800cbc0:	b13c      	cbz	r4, 800cbd2 <_Bfree+0x3a>
 800cbc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cbc4:	6862      	ldr	r2, [r4, #4]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbcc:	6021      	str	r1, [r4, #0]
 800cbce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbd2:	bd70      	pop	{r4, r5, r6, pc}
 800cbd4:	0800e17d 	.word	0x0800e17d
 800cbd8:	0800e260 	.word	0x0800e260

0800cbdc <__multadd>:
 800cbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe0:	690d      	ldr	r5, [r1, #16]
 800cbe2:	4607      	mov	r7, r0
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	461e      	mov	r6, r3
 800cbe8:	f101 0c14 	add.w	ip, r1, #20
 800cbec:	2000      	movs	r0, #0
 800cbee:	f8dc 3000 	ldr.w	r3, [ip]
 800cbf2:	b299      	uxth	r1, r3
 800cbf4:	fb02 6101 	mla	r1, r2, r1, r6
 800cbf8:	0c1e      	lsrs	r6, r3, #16
 800cbfa:	0c0b      	lsrs	r3, r1, #16
 800cbfc:	fb02 3306 	mla	r3, r2, r6, r3
 800cc00:	b289      	uxth	r1, r1
 800cc02:	3001      	adds	r0, #1
 800cc04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc08:	4285      	cmp	r5, r0
 800cc0a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc12:	dcec      	bgt.n	800cbee <__multadd+0x12>
 800cc14:	b30e      	cbz	r6, 800cc5a <__multadd+0x7e>
 800cc16:	68a3      	ldr	r3, [r4, #8]
 800cc18:	42ab      	cmp	r3, r5
 800cc1a:	dc19      	bgt.n	800cc50 <__multadd+0x74>
 800cc1c:	6861      	ldr	r1, [r4, #4]
 800cc1e:	4638      	mov	r0, r7
 800cc20:	3101      	adds	r1, #1
 800cc22:	f7ff ff79 	bl	800cb18 <_Balloc>
 800cc26:	4680      	mov	r8, r0
 800cc28:	b928      	cbnz	r0, 800cc36 <__multadd+0x5a>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	4b0c      	ldr	r3, [pc, #48]	; (800cc60 <__multadd+0x84>)
 800cc2e:	480d      	ldr	r0, [pc, #52]	; (800cc64 <__multadd+0x88>)
 800cc30:	21b5      	movs	r1, #181	; 0xb5
 800cc32:	f000 fd03 	bl	800d63c <__assert_func>
 800cc36:	6922      	ldr	r2, [r4, #16]
 800cc38:	3202      	adds	r2, #2
 800cc3a:	f104 010c 	add.w	r1, r4, #12
 800cc3e:	0092      	lsls	r2, r2, #2
 800cc40:	300c      	adds	r0, #12
 800cc42:	f7ff ff4f 	bl	800cae4 <memcpy>
 800cc46:	4621      	mov	r1, r4
 800cc48:	4638      	mov	r0, r7
 800cc4a:	f7ff ffa5 	bl	800cb98 <_Bfree>
 800cc4e:	4644      	mov	r4, r8
 800cc50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc54:	3501      	adds	r5, #1
 800cc56:	615e      	str	r6, [r3, #20]
 800cc58:	6125      	str	r5, [r4, #16]
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc60:	0800e1ef 	.word	0x0800e1ef
 800cc64:	0800e260 	.word	0x0800e260

0800cc68 <__hi0bits>:
 800cc68:	0c03      	lsrs	r3, r0, #16
 800cc6a:	041b      	lsls	r3, r3, #16
 800cc6c:	b9d3      	cbnz	r3, 800cca4 <__hi0bits+0x3c>
 800cc6e:	0400      	lsls	r0, r0, #16
 800cc70:	2310      	movs	r3, #16
 800cc72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc76:	bf04      	itt	eq
 800cc78:	0200      	lsleq	r0, r0, #8
 800cc7a:	3308      	addeq	r3, #8
 800cc7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc80:	bf04      	itt	eq
 800cc82:	0100      	lsleq	r0, r0, #4
 800cc84:	3304      	addeq	r3, #4
 800cc86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc8a:	bf04      	itt	eq
 800cc8c:	0080      	lsleq	r0, r0, #2
 800cc8e:	3302      	addeq	r3, #2
 800cc90:	2800      	cmp	r0, #0
 800cc92:	db05      	blt.n	800cca0 <__hi0bits+0x38>
 800cc94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc98:	f103 0301 	add.w	r3, r3, #1
 800cc9c:	bf08      	it	eq
 800cc9e:	2320      	moveq	r3, #32
 800cca0:	4618      	mov	r0, r3
 800cca2:	4770      	bx	lr
 800cca4:	2300      	movs	r3, #0
 800cca6:	e7e4      	b.n	800cc72 <__hi0bits+0xa>

0800cca8 <__lo0bits>:
 800cca8:	6803      	ldr	r3, [r0, #0]
 800ccaa:	f013 0207 	ands.w	r2, r3, #7
 800ccae:	4601      	mov	r1, r0
 800ccb0:	d00b      	beq.n	800ccca <__lo0bits+0x22>
 800ccb2:	07da      	lsls	r2, r3, #31
 800ccb4:	d423      	bmi.n	800ccfe <__lo0bits+0x56>
 800ccb6:	0798      	lsls	r0, r3, #30
 800ccb8:	bf49      	itett	mi
 800ccba:	085b      	lsrmi	r3, r3, #1
 800ccbc:	089b      	lsrpl	r3, r3, #2
 800ccbe:	2001      	movmi	r0, #1
 800ccc0:	600b      	strmi	r3, [r1, #0]
 800ccc2:	bf5c      	itt	pl
 800ccc4:	600b      	strpl	r3, [r1, #0]
 800ccc6:	2002      	movpl	r0, #2
 800ccc8:	4770      	bx	lr
 800ccca:	b298      	uxth	r0, r3
 800cccc:	b9a8      	cbnz	r0, 800ccfa <__lo0bits+0x52>
 800ccce:	0c1b      	lsrs	r3, r3, #16
 800ccd0:	2010      	movs	r0, #16
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	b90a      	cbnz	r2, 800ccda <__lo0bits+0x32>
 800ccd6:	3008      	adds	r0, #8
 800ccd8:	0a1b      	lsrs	r3, r3, #8
 800ccda:	071a      	lsls	r2, r3, #28
 800ccdc:	bf04      	itt	eq
 800ccde:	091b      	lsreq	r3, r3, #4
 800cce0:	3004      	addeq	r0, #4
 800cce2:	079a      	lsls	r2, r3, #30
 800cce4:	bf04      	itt	eq
 800cce6:	089b      	lsreq	r3, r3, #2
 800cce8:	3002      	addeq	r0, #2
 800ccea:	07da      	lsls	r2, r3, #31
 800ccec:	d403      	bmi.n	800ccf6 <__lo0bits+0x4e>
 800ccee:	085b      	lsrs	r3, r3, #1
 800ccf0:	f100 0001 	add.w	r0, r0, #1
 800ccf4:	d005      	beq.n	800cd02 <__lo0bits+0x5a>
 800ccf6:	600b      	str	r3, [r1, #0]
 800ccf8:	4770      	bx	lr
 800ccfa:	4610      	mov	r0, r2
 800ccfc:	e7e9      	b.n	800ccd2 <__lo0bits+0x2a>
 800ccfe:	2000      	movs	r0, #0
 800cd00:	4770      	bx	lr
 800cd02:	2020      	movs	r0, #32
 800cd04:	4770      	bx	lr
	...

0800cd08 <__i2b>:
 800cd08:	b510      	push	{r4, lr}
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	2101      	movs	r1, #1
 800cd0e:	f7ff ff03 	bl	800cb18 <_Balloc>
 800cd12:	4602      	mov	r2, r0
 800cd14:	b928      	cbnz	r0, 800cd22 <__i2b+0x1a>
 800cd16:	4b05      	ldr	r3, [pc, #20]	; (800cd2c <__i2b+0x24>)
 800cd18:	4805      	ldr	r0, [pc, #20]	; (800cd30 <__i2b+0x28>)
 800cd1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd1e:	f000 fc8d 	bl	800d63c <__assert_func>
 800cd22:	2301      	movs	r3, #1
 800cd24:	6144      	str	r4, [r0, #20]
 800cd26:	6103      	str	r3, [r0, #16]
 800cd28:	bd10      	pop	{r4, pc}
 800cd2a:	bf00      	nop
 800cd2c:	0800e1ef 	.word	0x0800e1ef
 800cd30:	0800e260 	.word	0x0800e260

0800cd34 <__multiply>:
 800cd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd38:	4691      	mov	r9, r2
 800cd3a:	690a      	ldr	r2, [r1, #16]
 800cd3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	bfb8      	it	lt
 800cd44:	460b      	movlt	r3, r1
 800cd46:	460c      	mov	r4, r1
 800cd48:	bfbc      	itt	lt
 800cd4a:	464c      	movlt	r4, r9
 800cd4c:	4699      	movlt	r9, r3
 800cd4e:	6927      	ldr	r7, [r4, #16]
 800cd50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd54:	68a3      	ldr	r3, [r4, #8]
 800cd56:	6861      	ldr	r1, [r4, #4]
 800cd58:	eb07 060a 	add.w	r6, r7, sl
 800cd5c:	42b3      	cmp	r3, r6
 800cd5e:	b085      	sub	sp, #20
 800cd60:	bfb8      	it	lt
 800cd62:	3101      	addlt	r1, #1
 800cd64:	f7ff fed8 	bl	800cb18 <_Balloc>
 800cd68:	b930      	cbnz	r0, 800cd78 <__multiply+0x44>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	4b44      	ldr	r3, [pc, #272]	; (800ce80 <__multiply+0x14c>)
 800cd6e:	4845      	ldr	r0, [pc, #276]	; (800ce84 <__multiply+0x150>)
 800cd70:	f240 115d 	movw	r1, #349	; 0x15d
 800cd74:	f000 fc62 	bl	800d63c <__assert_func>
 800cd78:	f100 0514 	add.w	r5, r0, #20
 800cd7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd80:	462b      	mov	r3, r5
 800cd82:	2200      	movs	r2, #0
 800cd84:	4543      	cmp	r3, r8
 800cd86:	d321      	bcc.n	800cdcc <__multiply+0x98>
 800cd88:	f104 0314 	add.w	r3, r4, #20
 800cd8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd90:	f109 0314 	add.w	r3, r9, #20
 800cd94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd98:	9202      	str	r2, [sp, #8]
 800cd9a:	1b3a      	subs	r2, r7, r4
 800cd9c:	3a15      	subs	r2, #21
 800cd9e:	f022 0203 	bic.w	r2, r2, #3
 800cda2:	3204      	adds	r2, #4
 800cda4:	f104 0115 	add.w	r1, r4, #21
 800cda8:	428f      	cmp	r7, r1
 800cdaa:	bf38      	it	cc
 800cdac:	2204      	movcc	r2, #4
 800cdae:	9201      	str	r2, [sp, #4]
 800cdb0:	9a02      	ldr	r2, [sp, #8]
 800cdb2:	9303      	str	r3, [sp, #12]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d80c      	bhi.n	800cdd2 <__multiply+0x9e>
 800cdb8:	2e00      	cmp	r6, #0
 800cdba:	dd03      	ble.n	800cdc4 <__multiply+0x90>
 800cdbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d05a      	beq.n	800ce7a <__multiply+0x146>
 800cdc4:	6106      	str	r6, [r0, #16]
 800cdc6:	b005      	add	sp, #20
 800cdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdcc:	f843 2b04 	str.w	r2, [r3], #4
 800cdd0:	e7d8      	b.n	800cd84 <__multiply+0x50>
 800cdd2:	f8b3 a000 	ldrh.w	sl, [r3]
 800cdd6:	f1ba 0f00 	cmp.w	sl, #0
 800cdda:	d024      	beq.n	800ce26 <__multiply+0xf2>
 800cddc:	f104 0e14 	add.w	lr, r4, #20
 800cde0:	46a9      	mov	r9, r5
 800cde2:	f04f 0c00 	mov.w	ip, #0
 800cde6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cdea:	f8d9 1000 	ldr.w	r1, [r9]
 800cdee:	fa1f fb82 	uxth.w	fp, r2
 800cdf2:	b289      	uxth	r1, r1
 800cdf4:	fb0a 110b 	mla	r1, sl, fp, r1
 800cdf8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cdfc:	f8d9 2000 	ldr.w	r2, [r9]
 800ce00:	4461      	add	r1, ip
 800ce02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce06:	fb0a c20b 	mla	r2, sl, fp, ip
 800ce0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce0e:	b289      	uxth	r1, r1
 800ce10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce14:	4577      	cmp	r7, lr
 800ce16:	f849 1b04 	str.w	r1, [r9], #4
 800ce1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce1e:	d8e2      	bhi.n	800cde6 <__multiply+0xb2>
 800ce20:	9a01      	ldr	r2, [sp, #4]
 800ce22:	f845 c002 	str.w	ip, [r5, r2]
 800ce26:	9a03      	ldr	r2, [sp, #12]
 800ce28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	f1b9 0f00 	cmp.w	r9, #0
 800ce32:	d020      	beq.n	800ce76 <__multiply+0x142>
 800ce34:	6829      	ldr	r1, [r5, #0]
 800ce36:	f104 0c14 	add.w	ip, r4, #20
 800ce3a:	46ae      	mov	lr, r5
 800ce3c:	f04f 0a00 	mov.w	sl, #0
 800ce40:	f8bc b000 	ldrh.w	fp, [ip]
 800ce44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce48:	fb09 220b 	mla	r2, r9, fp, r2
 800ce4c:	4492      	add	sl, r2
 800ce4e:	b289      	uxth	r1, r1
 800ce50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ce54:	f84e 1b04 	str.w	r1, [lr], #4
 800ce58:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce5c:	f8be 1000 	ldrh.w	r1, [lr]
 800ce60:	0c12      	lsrs	r2, r2, #16
 800ce62:	fb09 1102 	mla	r1, r9, r2, r1
 800ce66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ce6a:	4567      	cmp	r7, ip
 800ce6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce70:	d8e6      	bhi.n	800ce40 <__multiply+0x10c>
 800ce72:	9a01      	ldr	r2, [sp, #4]
 800ce74:	50a9      	str	r1, [r5, r2]
 800ce76:	3504      	adds	r5, #4
 800ce78:	e79a      	b.n	800cdb0 <__multiply+0x7c>
 800ce7a:	3e01      	subs	r6, #1
 800ce7c:	e79c      	b.n	800cdb8 <__multiply+0x84>
 800ce7e:	bf00      	nop
 800ce80:	0800e1ef 	.word	0x0800e1ef
 800ce84:	0800e260 	.word	0x0800e260

0800ce88 <__pow5mult>:
 800ce88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce8c:	4615      	mov	r5, r2
 800ce8e:	f012 0203 	ands.w	r2, r2, #3
 800ce92:	4606      	mov	r6, r0
 800ce94:	460f      	mov	r7, r1
 800ce96:	d007      	beq.n	800cea8 <__pow5mult+0x20>
 800ce98:	4c25      	ldr	r4, [pc, #148]	; (800cf30 <__pow5mult+0xa8>)
 800ce9a:	3a01      	subs	r2, #1
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cea2:	f7ff fe9b 	bl	800cbdc <__multadd>
 800cea6:	4607      	mov	r7, r0
 800cea8:	10ad      	asrs	r5, r5, #2
 800ceaa:	d03d      	beq.n	800cf28 <__pow5mult+0xa0>
 800ceac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ceae:	b97c      	cbnz	r4, 800ced0 <__pow5mult+0x48>
 800ceb0:	2010      	movs	r0, #16
 800ceb2:	f7fd fea3 	bl	800abfc <malloc>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	6270      	str	r0, [r6, #36]	; 0x24
 800ceba:	b928      	cbnz	r0, 800cec8 <__pow5mult+0x40>
 800cebc:	4b1d      	ldr	r3, [pc, #116]	; (800cf34 <__pow5mult+0xac>)
 800cebe:	481e      	ldr	r0, [pc, #120]	; (800cf38 <__pow5mult+0xb0>)
 800cec0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cec4:	f000 fbba 	bl	800d63c <__assert_func>
 800cec8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cecc:	6004      	str	r4, [r0, #0]
 800cece:	60c4      	str	r4, [r0, #12]
 800ced0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ced4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ced8:	b94c      	cbnz	r4, 800ceee <__pow5mult+0x66>
 800ceda:	f240 2171 	movw	r1, #625	; 0x271
 800cede:	4630      	mov	r0, r6
 800cee0:	f7ff ff12 	bl	800cd08 <__i2b>
 800cee4:	2300      	movs	r3, #0
 800cee6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ceea:	4604      	mov	r4, r0
 800ceec:	6003      	str	r3, [r0, #0]
 800ceee:	f04f 0900 	mov.w	r9, #0
 800cef2:	07eb      	lsls	r3, r5, #31
 800cef4:	d50a      	bpl.n	800cf0c <__pow5mult+0x84>
 800cef6:	4639      	mov	r1, r7
 800cef8:	4622      	mov	r2, r4
 800cefa:	4630      	mov	r0, r6
 800cefc:	f7ff ff1a 	bl	800cd34 <__multiply>
 800cf00:	4639      	mov	r1, r7
 800cf02:	4680      	mov	r8, r0
 800cf04:	4630      	mov	r0, r6
 800cf06:	f7ff fe47 	bl	800cb98 <_Bfree>
 800cf0a:	4647      	mov	r7, r8
 800cf0c:	106d      	asrs	r5, r5, #1
 800cf0e:	d00b      	beq.n	800cf28 <__pow5mult+0xa0>
 800cf10:	6820      	ldr	r0, [r4, #0]
 800cf12:	b938      	cbnz	r0, 800cf24 <__pow5mult+0x9c>
 800cf14:	4622      	mov	r2, r4
 800cf16:	4621      	mov	r1, r4
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f7ff ff0b 	bl	800cd34 <__multiply>
 800cf1e:	6020      	str	r0, [r4, #0]
 800cf20:	f8c0 9000 	str.w	r9, [r0]
 800cf24:	4604      	mov	r4, r0
 800cf26:	e7e4      	b.n	800cef2 <__pow5mult+0x6a>
 800cf28:	4638      	mov	r0, r7
 800cf2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf2e:	bf00      	nop
 800cf30:	0800e3b0 	.word	0x0800e3b0
 800cf34:	0800e17d 	.word	0x0800e17d
 800cf38:	0800e260 	.word	0x0800e260

0800cf3c <__lshift>:
 800cf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf40:	460c      	mov	r4, r1
 800cf42:	6849      	ldr	r1, [r1, #4]
 800cf44:	6923      	ldr	r3, [r4, #16]
 800cf46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf4a:	68a3      	ldr	r3, [r4, #8]
 800cf4c:	4607      	mov	r7, r0
 800cf4e:	4691      	mov	r9, r2
 800cf50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf54:	f108 0601 	add.w	r6, r8, #1
 800cf58:	42b3      	cmp	r3, r6
 800cf5a:	db0b      	blt.n	800cf74 <__lshift+0x38>
 800cf5c:	4638      	mov	r0, r7
 800cf5e:	f7ff fddb 	bl	800cb18 <_Balloc>
 800cf62:	4605      	mov	r5, r0
 800cf64:	b948      	cbnz	r0, 800cf7a <__lshift+0x3e>
 800cf66:	4602      	mov	r2, r0
 800cf68:	4b2a      	ldr	r3, [pc, #168]	; (800d014 <__lshift+0xd8>)
 800cf6a:	482b      	ldr	r0, [pc, #172]	; (800d018 <__lshift+0xdc>)
 800cf6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf70:	f000 fb64 	bl	800d63c <__assert_func>
 800cf74:	3101      	adds	r1, #1
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	e7ee      	b.n	800cf58 <__lshift+0x1c>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	f100 0114 	add.w	r1, r0, #20
 800cf80:	f100 0210 	add.w	r2, r0, #16
 800cf84:	4618      	mov	r0, r3
 800cf86:	4553      	cmp	r3, sl
 800cf88:	db37      	blt.n	800cffa <__lshift+0xbe>
 800cf8a:	6920      	ldr	r0, [r4, #16]
 800cf8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf90:	f104 0314 	add.w	r3, r4, #20
 800cf94:	f019 091f 	ands.w	r9, r9, #31
 800cf98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cfa0:	d02f      	beq.n	800d002 <__lshift+0xc6>
 800cfa2:	f1c9 0e20 	rsb	lr, r9, #32
 800cfa6:	468a      	mov	sl, r1
 800cfa8:	f04f 0c00 	mov.w	ip, #0
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	fa02 f209 	lsl.w	r2, r2, r9
 800cfb2:	ea42 020c 	orr.w	r2, r2, ip
 800cfb6:	f84a 2b04 	str.w	r2, [sl], #4
 800cfba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfbe:	4298      	cmp	r0, r3
 800cfc0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cfc4:	d8f2      	bhi.n	800cfac <__lshift+0x70>
 800cfc6:	1b03      	subs	r3, r0, r4
 800cfc8:	3b15      	subs	r3, #21
 800cfca:	f023 0303 	bic.w	r3, r3, #3
 800cfce:	3304      	adds	r3, #4
 800cfd0:	f104 0215 	add.w	r2, r4, #21
 800cfd4:	4290      	cmp	r0, r2
 800cfd6:	bf38      	it	cc
 800cfd8:	2304      	movcc	r3, #4
 800cfda:	f841 c003 	str.w	ip, [r1, r3]
 800cfde:	f1bc 0f00 	cmp.w	ip, #0
 800cfe2:	d001      	beq.n	800cfe8 <__lshift+0xac>
 800cfe4:	f108 0602 	add.w	r6, r8, #2
 800cfe8:	3e01      	subs	r6, #1
 800cfea:	4638      	mov	r0, r7
 800cfec:	612e      	str	r6, [r5, #16]
 800cfee:	4621      	mov	r1, r4
 800cff0:	f7ff fdd2 	bl	800cb98 <_Bfree>
 800cff4:	4628      	mov	r0, r5
 800cff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cffa:	f842 0f04 	str.w	r0, [r2, #4]!
 800cffe:	3301      	adds	r3, #1
 800d000:	e7c1      	b.n	800cf86 <__lshift+0x4a>
 800d002:	3904      	subs	r1, #4
 800d004:	f853 2b04 	ldr.w	r2, [r3], #4
 800d008:	f841 2f04 	str.w	r2, [r1, #4]!
 800d00c:	4298      	cmp	r0, r3
 800d00e:	d8f9      	bhi.n	800d004 <__lshift+0xc8>
 800d010:	e7ea      	b.n	800cfe8 <__lshift+0xac>
 800d012:	bf00      	nop
 800d014:	0800e1ef 	.word	0x0800e1ef
 800d018:	0800e260 	.word	0x0800e260

0800d01c <__mcmp>:
 800d01c:	b530      	push	{r4, r5, lr}
 800d01e:	6902      	ldr	r2, [r0, #16]
 800d020:	690c      	ldr	r4, [r1, #16]
 800d022:	1b12      	subs	r2, r2, r4
 800d024:	d10e      	bne.n	800d044 <__mcmp+0x28>
 800d026:	f100 0314 	add.w	r3, r0, #20
 800d02a:	3114      	adds	r1, #20
 800d02c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d030:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d034:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d038:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d03c:	42a5      	cmp	r5, r4
 800d03e:	d003      	beq.n	800d048 <__mcmp+0x2c>
 800d040:	d305      	bcc.n	800d04e <__mcmp+0x32>
 800d042:	2201      	movs	r2, #1
 800d044:	4610      	mov	r0, r2
 800d046:	bd30      	pop	{r4, r5, pc}
 800d048:	4283      	cmp	r3, r0
 800d04a:	d3f3      	bcc.n	800d034 <__mcmp+0x18>
 800d04c:	e7fa      	b.n	800d044 <__mcmp+0x28>
 800d04e:	f04f 32ff 	mov.w	r2, #4294967295
 800d052:	e7f7      	b.n	800d044 <__mcmp+0x28>

0800d054 <__mdiff>:
 800d054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d058:	460c      	mov	r4, r1
 800d05a:	4606      	mov	r6, r0
 800d05c:	4611      	mov	r1, r2
 800d05e:	4620      	mov	r0, r4
 800d060:	4690      	mov	r8, r2
 800d062:	f7ff ffdb 	bl	800d01c <__mcmp>
 800d066:	1e05      	subs	r5, r0, #0
 800d068:	d110      	bne.n	800d08c <__mdiff+0x38>
 800d06a:	4629      	mov	r1, r5
 800d06c:	4630      	mov	r0, r6
 800d06e:	f7ff fd53 	bl	800cb18 <_Balloc>
 800d072:	b930      	cbnz	r0, 800d082 <__mdiff+0x2e>
 800d074:	4b3a      	ldr	r3, [pc, #232]	; (800d160 <__mdiff+0x10c>)
 800d076:	4602      	mov	r2, r0
 800d078:	f240 2132 	movw	r1, #562	; 0x232
 800d07c:	4839      	ldr	r0, [pc, #228]	; (800d164 <__mdiff+0x110>)
 800d07e:	f000 fadd 	bl	800d63c <__assert_func>
 800d082:	2301      	movs	r3, #1
 800d084:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08c:	bfa4      	itt	ge
 800d08e:	4643      	movge	r3, r8
 800d090:	46a0      	movge	r8, r4
 800d092:	4630      	mov	r0, r6
 800d094:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d098:	bfa6      	itte	ge
 800d09a:	461c      	movge	r4, r3
 800d09c:	2500      	movge	r5, #0
 800d09e:	2501      	movlt	r5, #1
 800d0a0:	f7ff fd3a 	bl	800cb18 <_Balloc>
 800d0a4:	b920      	cbnz	r0, 800d0b0 <__mdiff+0x5c>
 800d0a6:	4b2e      	ldr	r3, [pc, #184]	; (800d160 <__mdiff+0x10c>)
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d0ae:	e7e5      	b.n	800d07c <__mdiff+0x28>
 800d0b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d0b4:	6926      	ldr	r6, [r4, #16]
 800d0b6:	60c5      	str	r5, [r0, #12]
 800d0b8:	f104 0914 	add.w	r9, r4, #20
 800d0bc:	f108 0514 	add.w	r5, r8, #20
 800d0c0:	f100 0e14 	add.w	lr, r0, #20
 800d0c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d0c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d0cc:	f108 0210 	add.w	r2, r8, #16
 800d0d0:	46f2      	mov	sl, lr
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d0dc:	fa1f f883 	uxth.w	r8, r3
 800d0e0:	fa11 f18b 	uxtah	r1, r1, fp
 800d0e4:	0c1b      	lsrs	r3, r3, #16
 800d0e6:	eba1 0808 	sub.w	r8, r1, r8
 800d0ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0f2:	fa1f f888 	uxth.w	r8, r8
 800d0f6:	1419      	asrs	r1, r3, #16
 800d0f8:	454e      	cmp	r6, r9
 800d0fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0fe:	f84a 3b04 	str.w	r3, [sl], #4
 800d102:	d8e7      	bhi.n	800d0d4 <__mdiff+0x80>
 800d104:	1b33      	subs	r3, r6, r4
 800d106:	3b15      	subs	r3, #21
 800d108:	f023 0303 	bic.w	r3, r3, #3
 800d10c:	3304      	adds	r3, #4
 800d10e:	3415      	adds	r4, #21
 800d110:	42a6      	cmp	r6, r4
 800d112:	bf38      	it	cc
 800d114:	2304      	movcc	r3, #4
 800d116:	441d      	add	r5, r3
 800d118:	4473      	add	r3, lr
 800d11a:	469e      	mov	lr, r3
 800d11c:	462e      	mov	r6, r5
 800d11e:	4566      	cmp	r6, ip
 800d120:	d30e      	bcc.n	800d140 <__mdiff+0xec>
 800d122:	f10c 0203 	add.w	r2, ip, #3
 800d126:	1b52      	subs	r2, r2, r5
 800d128:	f022 0203 	bic.w	r2, r2, #3
 800d12c:	3d03      	subs	r5, #3
 800d12e:	45ac      	cmp	ip, r5
 800d130:	bf38      	it	cc
 800d132:	2200      	movcc	r2, #0
 800d134:	441a      	add	r2, r3
 800d136:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d13a:	b17b      	cbz	r3, 800d15c <__mdiff+0x108>
 800d13c:	6107      	str	r7, [r0, #16]
 800d13e:	e7a3      	b.n	800d088 <__mdiff+0x34>
 800d140:	f856 8b04 	ldr.w	r8, [r6], #4
 800d144:	fa11 f288 	uxtah	r2, r1, r8
 800d148:	1414      	asrs	r4, r2, #16
 800d14a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d14e:	b292      	uxth	r2, r2
 800d150:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d154:	f84e 2b04 	str.w	r2, [lr], #4
 800d158:	1421      	asrs	r1, r4, #16
 800d15a:	e7e0      	b.n	800d11e <__mdiff+0xca>
 800d15c:	3f01      	subs	r7, #1
 800d15e:	e7ea      	b.n	800d136 <__mdiff+0xe2>
 800d160:	0800e1ef 	.word	0x0800e1ef
 800d164:	0800e260 	.word	0x0800e260

0800d168 <__d2b>:
 800d168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d16c:	4689      	mov	r9, r1
 800d16e:	2101      	movs	r1, #1
 800d170:	ec57 6b10 	vmov	r6, r7, d0
 800d174:	4690      	mov	r8, r2
 800d176:	f7ff fccf 	bl	800cb18 <_Balloc>
 800d17a:	4604      	mov	r4, r0
 800d17c:	b930      	cbnz	r0, 800d18c <__d2b+0x24>
 800d17e:	4602      	mov	r2, r0
 800d180:	4b25      	ldr	r3, [pc, #148]	; (800d218 <__d2b+0xb0>)
 800d182:	4826      	ldr	r0, [pc, #152]	; (800d21c <__d2b+0xb4>)
 800d184:	f240 310a 	movw	r1, #778	; 0x30a
 800d188:	f000 fa58 	bl	800d63c <__assert_func>
 800d18c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d194:	bb35      	cbnz	r5, 800d1e4 <__d2b+0x7c>
 800d196:	2e00      	cmp	r6, #0
 800d198:	9301      	str	r3, [sp, #4]
 800d19a:	d028      	beq.n	800d1ee <__d2b+0x86>
 800d19c:	4668      	mov	r0, sp
 800d19e:	9600      	str	r6, [sp, #0]
 800d1a0:	f7ff fd82 	bl	800cca8 <__lo0bits>
 800d1a4:	9900      	ldr	r1, [sp, #0]
 800d1a6:	b300      	cbz	r0, 800d1ea <__d2b+0x82>
 800d1a8:	9a01      	ldr	r2, [sp, #4]
 800d1aa:	f1c0 0320 	rsb	r3, r0, #32
 800d1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d1b2:	430b      	orrs	r3, r1
 800d1b4:	40c2      	lsrs	r2, r0
 800d1b6:	6163      	str	r3, [r4, #20]
 800d1b8:	9201      	str	r2, [sp, #4]
 800d1ba:	9b01      	ldr	r3, [sp, #4]
 800d1bc:	61a3      	str	r3, [r4, #24]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	bf14      	ite	ne
 800d1c2:	2202      	movne	r2, #2
 800d1c4:	2201      	moveq	r2, #1
 800d1c6:	6122      	str	r2, [r4, #16]
 800d1c8:	b1d5      	cbz	r5, 800d200 <__d2b+0x98>
 800d1ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d1ce:	4405      	add	r5, r0
 800d1d0:	f8c9 5000 	str.w	r5, [r9]
 800d1d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d1d8:	f8c8 0000 	str.w	r0, [r8]
 800d1dc:	4620      	mov	r0, r4
 800d1de:	b003      	add	sp, #12
 800d1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1e8:	e7d5      	b.n	800d196 <__d2b+0x2e>
 800d1ea:	6161      	str	r1, [r4, #20]
 800d1ec:	e7e5      	b.n	800d1ba <__d2b+0x52>
 800d1ee:	a801      	add	r0, sp, #4
 800d1f0:	f7ff fd5a 	bl	800cca8 <__lo0bits>
 800d1f4:	9b01      	ldr	r3, [sp, #4]
 800d1f6:	6163      	str	r3, [r4, #20]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	6122      	str	r2, [r4, #16]
 800d1fc:	3020      	adds	r0, #32
 800d1fe:	e7e3      	b.n	800d1c8 <__d2b+0x60>
 800d200:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d204:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d208:	f8c9 0000 	str.w	r0, [r9]
 800d20c:	6918      	ldr	r0, [r3, #16]
 800d20e:	f7ff fd2b 	bl	800cc68 <__hi0bits>
 800d212:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d216:	e7df      	b.n	800d1d8 <__d2b+0x70>
 800d218:	0800e1ef 	.word	0x0800e1ef
 800d21c:	0800e260 	.word	0x0800e260

0800d220 <_calloc_r>:
 800d220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d222:	fba1 2402 	umull	r2, r4, r1, r2
 800d226:	b94c      	cbnz	r4, 800d23c <_calloc_r+0x1c>
 800d228:	4611      	mov	r1, r2
 800d22a:	9201      	str	r2, [sp, #4]
 800d22c:	f7fd fd6a 	bl	800ad04 <_malloc_r>
 800d230:	9a01      	ldr	r2, [sp, #4]
 800d232:	4605      	mov	r5, r0
 800d234:	b930      	cbnz	r0, 800d244 <_calloc_r+0x24>
 800d236:	4628      	mov	r0, r5
 800d238:	b003      	add	sp, #12
 800d23a:	bd30      	pop	{r4, r5, pc}
 800d23c:	220c      	movs	r2, #12
 800d23e:	6002      	str	r2, [r0, #0]
 800d240:	2500      	movs	r5, #0
 800d242:	e7f8      	b.n	800d236 <_calloc_r+0x16>
 800d244:	4621      	mov	r1, r4
 800d246:	f7fd fce9 	bl	800ac1c <memset>
 800d24a:	e7f4      	b.n	800d236 <_calloc_r+0x16>

0800d24c <__sfputc_r>:
 800d24c:	6893      	ldr	r3, [r2, #8]
 800d24e:	3b01      	subs	r3, #1
 800d250:	2b00      	cmp	r3, #0
 800d252:	b410      	push	{r4}
 800d254:	6093      	str	r3, [r2, #8]
 800d256:	da08      	bge.n	800d26a <__sfputc_r+0x1e>
 800d258:	6994      	ldr	r4, [r2, #24]
 800d25a:	42a3      	cmp	r3, r4
 800d25c:	db01      	blt.n	800d262 <__sfputc_r+0x16>
 800d25e:	290a      	cmp	r1, #10
 800d260:	d103      	bne.n	800d26a <__sfputc_r+0x1e>
 800d262:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d266:	f7fe badf 	b.w	800b828 <__swbuf_r>
 800d26a:	6813      	ldr	r3, [r2, #0]
 800d26c:	1c58      	adds	r0, r3, #1
 800d26e:	6010      	str	r0, [r2, #0]
 800d270:	7019      	strb	r1, [r3, #0]
 800d272:	4608      	mov	r0, r1
 800d274:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d278:	4770      	bx	lr

0800d27a <__sfputs_r>:
 800d27a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27c:	4606      	mov	r6, r0
 800d27e:	460f      	mov	r7, r1
 800d280:	4614      	mov	r4, r2
 800d282:	18d5      	adds	r5, r2, r3
 800d284:	42ac      	cmp	r4, r5
 800d286:	d101      	bne.n	800d28c <__sfputs_r+0x12>
 800d288:	2000      	movs	r0, #0
 800d28a:	e007      	b.n	800d29c <__sfputs_r+0x22>
 800d28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d290:	463a      	mov	r2, r7
 800d292:	4630      	mov	r0, r6
 800d294:	f7ff ffda 	bl	800d24c <__sfputc_r>
 800d298:	1c43      	adds	r3, r0, #1
 800d29a:	d1f3      	bne.n	800d284 <__sfputs_r+0xa>
 800d29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d2a0 <_vfiprintf_r>:
 800d2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a4:	460d      	mov	r5, r1
 800d2a6:	b09d      	sub	sp, #116	; 0x74
 800d2a8:	4614      	mov	r4, r2
 800d2aa:	4698      	mov	r8, r3
 800d2ac:	4606      	mov	r6, r0
 800d2ae:	b118      	cbz	r0, 800d2b8 <_vfiprintf_r+0x18>
 800d2b0:	6983      	ldr	r3, [r0, #24]
 800d2b2:	b90b      	cbnz	r3, 800d2b8 <_vfiprintf_r+0x18>
 800d2b4:	f7ff fb0c 	bl	800c8d0 <__sinit>
 800d2b8:	4b89      	ldr	r3, [pc, #548]	; (800d4e0 <_vfiprintf_r+0x240>)
 800d2ba:	429d      	cmp	r5, r3
 800d2bc:	d11b      	bne.n	800d2f6 <_vfiprintf_r+0x56>
 800d2be:	6875      	ldr	r5, [r6, #4]
 800d2c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2c2:	07d9      	lsls	r1, r3, #31
 800d2c4:	d405      	bmi.n	800d2d2 <_vfiprintf_r+0x32>
 800d2c6:	89ab      	ldrh	r3, [r5, #12]
 800d2c8:	059a      	lsls	r2, r3, #22
 800d2ca:	d402      	bmi.n	800d2d2 <_vfiprintf_r+0x32>
 800d2cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ce:	f7ff fba2 	bl	800ca16 <__retarget_lock_acquire_recursive>
 800d2d2:	89ab      	ldrh	r3, [r5, #12]
 800d2d4:	071b      	lsls	r3, r3, #28
 800d2d6:	d501      	bpl.n	800d2dc <_vfiprintf_r+0x3c>
 800d2d8:	692b      	ldr	r3, [r5, #16]
 800d2da:	b9eb      	cbnz	r3, 800d318 <_vfiprintf_r+0x78>
 800d2dc:	4629      	mov	r1, r5
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f7fe faf4 	bl	800b8cc <__swsetup_r>
 800d2e4:	b1c0      	cbz	r0, 800d318 <_vfiprintf_r+0x78>
 800d2e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2e8:	07dc      	lsls	r4, r3, #31
 800d2ea:	d50e      	bpl.n	800d30a <_vfiprintf_r+0x6a>
 800d2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f0:	b01d      	add	sp, #116	; 0x74
 800d2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f6:	4b7b      	ldr	r3, [pc, #492]	; (800d4e4 <_vfiprintf_r+0x244>)
 800d2f8:	429d      	cmp	r5, r3
 800d2fa:	d101      	bne.n	800d300 <_vfiprintf_r+0x60>
 800d2fc:	68b5      	ldr	r5, [r6, #8]
 800d2fe:	e7df      	b.n	800d2c0 <_vfiprintf_r+0x20>
 800d300:	4b79      	ldr	r3, [pc, #484]	; (800d4e8 <_vfiprintf_r+0x248>)
 800d302:	429d      	cmp	r5, r3
 800d304:	bf08      	it	eq
 800d306:	68f5      	ldreq	r5, [r6, #12]
 800d308:	e7da      	b.n	800d2c0 <_vfiprintf_r+0x20>
 800d30a:	89ab      	ldrh	r3, [r5, #12]
 800d30c:	0598      	lsls	r0, r3, #22
 800d30e:	d4ed      	bmi.n	800d2ec <_vfiprintf_r+0x4c>
 800d310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d312:	f7ff fb81 	bl	800ca18 <__retarget_lock_release_recursive>
 800d316:	e7e9      	b.n	800d2ec <_vfiprintf_r+0x4c>
 800d318:	2300      	movs	r3, #0
 800d31a:	9309      	str	r3, [sp, #36]	; 0x24
 800d31c:	2320      	movs	r3, #32
 800d31e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d322:	f8cd 800c 	str.w	r8, [sp, #12]
 800d326:	2330      	movs	r3, #48	; 0x30
 800d328:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4ec <_vfiprintf_r+0x24c>
 800d32c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d330:	f04f 0901 	mov.w	r9, #1
 800d334:	4623      	mov	r3, r4
 800d336:	469a      	mov	sl, r3
 800d338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d33c:	b10a      	cbz	r2, 800d342 <_vfiprintf_r+0xa2>
 800d33e:	2a25      	cmp	r2, #37	; 0x25
 800d340:	d1f9      	bne.n	800d336 <_vfiprintf_r+0x96>
 800d342:	ebba 0b04 	subs.w	fp, sl, r4
 800d346:	d00b      	beq.n	800d360 <_vfiprintf_r+0xc0>
 800d348:	465b      	mov	r3, fp
 800d34a:	4622      	mov	r2, r4
 800d34c:	4629      	mov	r1, r5
 800d34e:	4630      	mov	r0, r6
 800d350:	f7ff ff93 	bl	800d27a <__sfputs_r>
 800d354:	3001      	adds	r0, #1
 800d356:	f000 80aa 	beq.w	800d4ae <_vfiprintf_r+0x20e>
 800d35a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d35c:	445a      	add	r2, fp
 800d35e:	9209      	str	r2, [sp, #36]	; 0x24
 800d360:	f89a 3000 	ldrb.w	r3, [sl]
 800d364:	2b00      	cmp	r3, #0
 800d366:	f000 80a2 	beq.w	800d4ae <_vfiprintf_r+0x20e>
 800d36a:	2300      	movs	r3, #0
 800d36c:	f04f 32ff 	mov.w	r2, #4294967295
 800d370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d374:	f10a 0a01 	add.w	sl, sl, #1
 800d378:	9304      	str	r3, [sp, #16]
 800d37a:	9307      	str	r3, [sp, #28]
 800d37c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d380:	931a      	str	r3, [sp, #104]	; 0x68
 800d382:	4654      	mov	r4, sl
 800d384:	2205      	movs	r2, #5
 800d386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d38a:	4858      	ldr	r0, [pc, #352]	; (800d4ec <_vfiprintf_r+0x24c>)
 800d38c:	f7f2 ff28 	bl	80001e0 <memchr>
 800d390:	9a04      	ldr	r2, [sp, #16]
 800d392:	b9d8      	cbnz	r0, 800d3cc <_vfiprintf_r+0x12c>
 800d394:	06d1      	lsls	r1, r2, #27
 800d396:	bf44      	itt	mi
 800d398:	2320      	movmi	r3, #32
 800d39a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d39e:	0713      	lsls	r3, r2, #28
 800d3a0:	bf44      	itt	mi
 800d3a2:	232b      	movmi	r3, #43	; 0x2b
 800d3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ae:	d015      	beq.n	800d3dc <_vfiprintf_r+0x13c>
 800d3b0:	9a07      	ldr	r2, [sp, #28]
 800d3b2:	4654      	mov	r4, sl
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	f04f 0c0a 	mov.w	ip, #10
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3c0:	3b30      	subs	r3, #48	; 0x30
 800d3c2:	2b09      	cmp	r3, #9
 800d3c4:	d94e      	bls.n	800d464 <_vfiprintf_r+0x1c4>
 800d3c6:	b1b0      	cbz	r0, 800d3f6 <_vfiprintf_r+0x156>
 800d3c8:	9207      	str	r2, [sp, #28]
 800d3ca:	e014      	b.n	800d3f6 <_vfiprintf_r+0x156>
 800d3cc:	eba0 0308 	sub.w	r3, r0, r8
 800d3d0:	fa09 f303 	lsl.w	r3, r9, r3
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	9304      	str	r3, [sp, #16]
 800d3d8:	46a2      	mov	sl, r4
 800d3da:	e7d2      	b.n	800d382 <_vfiprintf_r+0xe2>
 800d3dc:	9b03      	ldr	r3, [sp, #12]
 800d3de:	1d19      	adds	r1, r3, #4
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	9103      	str	r1, [sp, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	bfbb      	ittet	lt
 800d3e8:	425b      	neglt	r3, r3
 800d3ea:	f042 0202 	orrlt.w	r2, r2, #2
 800d3ee:	9307      	strge	r3, [sp, #28]
 800d3f0:	9307      	strlt	r3, [sp, #28]
 800d3f2:	bfb8      	it	lt
 800d3f4:	9204      	strlt	r2, [sp, #16]
 800d3f6:	7823      	ldrb	r3, [r4, #0]
 800d3f8:	2b2e      	cmp	r3, #46	; 0x2e
 800d3fa:	d10c      	bne.n	800d416 <_vfiprintf_r+0x176>
 800d3fc:	7863      	ldrb	r3, [r4, #1]
 800d3fe:	2b2a      	cmp	r3, #42	; 0x2a
 800d400:	d135      	bne.n	800d46e <_vfiprintf_r+0x1ce>
 800d402:	9b03      	ldr	r3, [sp, #12]
 800d404:	1d1a      	adds	r2, r3, #4
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	9203      	str	r2, [sp, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	bfb8      	it	lt
 800d40e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d412:	3402      	adds	r4, #2
 800d414:	9305      	str	r3, [sp, #20]
 800d416:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4fc <_vfiprintf_r+0x25c>
 800d41a:	7821      	ldrb	r1, [r4, #0]
 800d41c:	2203      	movs	r2, #3
 800d41e:	4650      	mov	r0, sl
 800d420:	f7f2 fede 	bl	80001e0 <memchr>
 800d424:	b140      	cbz	r0, 800d438 <_vfiprintf_r+0x198>
 800d426:	2340      	movs	r3, #64	; 0x40
 800d428:	eba0 000a 	sub.w	r0, r0, sl
 800d42c:	fa03 f000 	lsl.w	r0, r3, r0
 800d430:	9b04      	ldr	r3, [sp, #16]
 800d432:	4303      	orrs	r3, r0
 800d434:	3401      	adds	r4, #1
 800d436:	9304      	str	r3, [sp, #16]
 800d438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d43c:	482c      	ldr	r0, [pc, #176]	; (800d4f0 <_vfiprintf_r+0x250>)
 800d43e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d442:	2206      	movs	r2, #6
 800d444:	f7f2 fecc 	bl	80001e0 <memchr>
 800d448:	2800      	cmp	r0, #0
 800d44a:	d03f      	beq.n	800d4cc <_vfiprintf_r+0x22c>
 800d44c:	4b29      	ldr	r3, [pc, #164]	; (800d4f4 <_vfiprintf_r+0x254>)
 800d44e:	bb1b      	cbnz	r3, 800d498 <_vfiprintf_r+0x1f8>
 800d450:	9b03      	ldr	r3, [sp, #12]
 800d452:	3307      	adds	r3, #7
 800d454:	f023 0307 	bic.w	r3, r3, #7
 800d458:	3308      	adds	r3, #8
 800d45a:	9303      	str	r3, [sp, #12]
 800d45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d45e:	443b      	add	r3, r7
 800d460:	9309      	str	r3, [sp, #36]	; 0x24
 800d462:	e767      	b.n	800d334 <_vfiprintf_r+0x94>
 800d464:	fb0c 3202 	mla	r2, ip, r2, r3
 800d468:	460c      	mov	r4, r1
 800d46a:	2001      	movs	r0, #1
 800d46c:	e7a5      	b.n	800d3ba <_vfiprintf_r+0x11a>
 800d46e:	2300      	movs	r3, #0
 800d470:	3401      	adds	r4, #1
 800d472:	9305      	str	r3, [sp, #20]
 800d474:	4619      	mov	r1, r3
 800d476:	f04f 0c0a 	mov.w	ip, #10
 800d47a:	4620      	mov	r0, r4
 800d47c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d480:	3a30      	subs	r2, #48	; 0x30
 800d482:	2a09      	cmp	r2, #9
 800d484:	d903      	bls.n	800d48e <_vfiprintf_r+0x1ee>
 800d486:	2b00      	cmp	r3, #0
 800d488:	d0c5      	beq.n	800d416 <_vfiprintf_r+0x176>
 800d48a:	9105      	str	r1, [sp, #20]
 800d48c:	e7c3      	b.n	800d416 <_vfiprintf_r+0x176>
 800d48e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d492:	4604      	mov	r4, r0
 800d494:	2301      	movs	r3, #1
 800d496:	e7f0      	b.n	800d47a <_vfiprintf_r+0x1da>
 800d498:	ab03      	add	r3, sp, #12
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	462a      	mov	r2, r5
 800d49e:	4b16      	ldr	r3, [pc, #88]	; (800d4f8 <_vfiprintf_r+0x258>)
 800d4a0:	a904      	add	r1, sp, #16
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f7fd fd42 	bl	800af2c <_printf_float>
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	1c78      	adds	r0, r7, #1
 800d4ac:	d1d6      	bne.n	800d45c <_vfiprintf_r+0x1bc>
 800d4ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4b0:	07d9      	lsls	r1, r3, #31
 800d4b2:	d405      	bmi.n	800d4c0 <_vfiprintf_r+0x220>
 800d4b4:	89ab      	ldrh	r3, [r5, #12]
 800d4b6:	059a      	lsls	r2, r3, #22
 800d4b8:	d402      	bmi.n	800d4c0 <_vfiprintf_r+0x220>
 800d4ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4bc:	f7ff faac 	bl	800ca18 <__retarget_lock_release_recursive>
 800d4c0:	89ab      	ldrh	r3, [r5, #12]
 800d4c2:	065b      	lsls	r3, r3, #25
 800d4c4:	f53f af12 	bmi.w	800d2ec <_vfiprintf_r+0x4c>
 800d4c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4ca:	e711      	b.n	800d2f0 <_vfiprintf_r+0x50>
 800d4cc:	ab03      	add	r3, sp, #12
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	462a      	mov	r2, r5
 800d4d2:	4b09      	ldr	r3, [pc, #36]	; (800d4f8 <_vfiprintf_r+0x258>)
 800d4d4:	a904      	add	r1, sp, #16
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	f7fd ffcc 	bl	800b474 <_printf_i>
 800d4dc:	e7e4      	b.n	800d4a8 <_vfiprintf_r+0x208>
 800d4de:	bf00      	nop
 800d4e0:	0800e220 	.word	0x0800e220
 800d4e4:	0800e240 	.word	0x0800e240
 800d4e8:	0800e200 	.word	0x0800e200
 800d4ec:	0800e3bc 	.word	0x0800e3bc
 800d4f0:	0800e3c6 	.word	0x0800e3c6
 800d4f4:	0800af2d 	.word	0x0800af2d
 800d4f8:	0800d27b 	.word	0x0800d27b
 800d4fc:	0800e3c2 	.word	0x0800e3c2

0800d500 <_putc_r>:
 800d500:	b570      	push	{r4, r5, r6, lr}
 800d502:	460d      	mov	r5, r1
 800d504:	4614      	mov	r4, r2
 800d506:	4606      	mov	r6, r0
 800d508:	b118      	cbz	r0, 800d512 <_putc_r+0x12>
 800d50a:	6983      	ldr	r3, [r0, #24]
 800d50c:	b90b      	cbnz	r3, 800d512 <_putc_r+0x12>
 800d50e:	f7ff f9df 	bl	800c8d0 <__sinit>
 800d512:	4b1c      	ldr	r3, [pc, #112]	; (800d584 <_putc_r+0x84>)
 800d514:	429c      	cmp	r4, r3
 800d516:	d124      	bne.n	800d562 <_putc_r+0x62>
 800d518:	6874      	ldr	r4, [r6, #4]
 800d51a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d51c:	07d8      	lsls	r0, r3, #31
 800d51e:	d405      	bmi.n	800d52c <_putc_r+0x2c>
 800d520:	89a3      	ldrh	r3, [r4, #12]
 800d522:	0599      	lsls	r1, r3, #22
 800d524:	d402      	bmi.n	800d52c <_putc_r+0x2c>
 800d526:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d528:	f7ff fa75 	bl	800ca16 <__retarget_lock_acquire_recursive>
 800d52c:	68a3      	ldr	r3, [r4, #8]
 800d52e:	3b01      	subs	r3, #1
 800d530:	2b00      	cmp	r3, #0
 800d532:	60a3      	str	r3, [r4, #8]
 800d534:	da05      	bge.n	800d542 <_putc_r+0x42>
 800d536:	69a2      	ldr	r2, [r4, #24]
 800d538:	4293      	cmp	r3, r2
 800d53a:	db1c      	blt.n	800d576 <_putc_r+0x76>
 800d53c:	b2eb      	uxtb	r3, r5
 800d53e:	2b0a      	cmp	r3, #10
 800d540:	d019      	beq.n	800d576 <_putc_r+0x76>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	6022      	str	r2, [r4, #0]
 800d548:	701d      	strb	r5, [r3, #0]
 800d54a:	b2ed      	uxtb	r5, r5
 800d54c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d54e:	07da      	lsls	r2, r3, #31
 800d550:	d405      	bmi.n	800d55e <_putc_r+0x5e>
 800d552:	89a3      	ldrh	r3, [r4, #12]
 800d554:	059b      	lsls	r3, r3, #22
 800d556:	d402      	bmi.n	800d55e <_putc_r+0x5e>
 800d558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d55a:	f7ff fa5d 	bl	800ca18 <__retarget_lock_release_recursive>
 800d55e:	4628      	mov	r0, r5
 800d560:	bd70      	pop	{r4, r5, r6, pc}
 800d562:	4b09      	ldr	r3, [pc, #36]	; (800d588 <_putc_r+0x88>)
 800d564:	429c      	cmp	r4, r3
 800d566:	d101      	bne.n	800d56c <_putc_r+0x6c>
 800d568:	68b4      	ldr	r4, [r6, #8]
 800d56a:	e7d6      	b.n	800d51a <_putc_r+0x1a>
 800d56c:	4b07      	ldr	r3, [pc, #28]	; (800d58c <_putc_r+0x8c>)
 800d56e:	429c      	cmp	r4, r3
 800d570:	bf08      	it	eq
 800d572:	68f4      	ldreq	r4, [r6, #12]
 800d574:	e7d1      	b.n	800d51a <_putc_r+0x1a>
 800d576:	4629      	mov	r1, r5
 800d578:	4622      	mov	r2, r4
 800d57a:	4630      	mov	r0, r6
 800d57c:	f7fe f954 	bl	800b828 <__swbuf_r>
 800d580:	4605      	mov	r5, r0
 800d582:	e7e3      	b.n	800d54c <_putc_r+0x4c>
 800d584:	0800e220 	.word	0x0800e220
 800d588:	0800e240 	.word	0x0800e240
 800d58c:	0800e200 	.word	0x0800e200

0800d590 <__sread>:
 800d590:	b510      	push	{r4, lr}
 800d592:	460c      	mov	r4, r1
 800d594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d598:	f000 f8d6 	bl	800d748 <_read_r>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	bfab      	itete	ge
 800d5a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d5a4:	181b      	addge	r3, r3, r0
 800d5a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5aa:	bfac      	ite	ge
 800d5ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5ae:	81a3      	strhlt	r3, [r4, #12]
 800d5b0:	bd10      	pop	{r4, pc}

0800d5b2 <__swrite>:
 800d5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b6:	461f      	mov	r7, r3
 800d5b8:	898b      	ldrh	r3, [r1, #12]
 800d5ba:	05db      	lsls	r3, r3, #23
 800d5bc:	4605      	mov	r5, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	4616      	mov	r6, r2
 800d5c2:	d505      	bpl.n	800d5d0 <__swrite+0x1e>
 800d5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5c8:	2302      	movs	r3, #2
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f000 f898 	bl	800d700 <_lseek_r>
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5da:	81a3      	strh	r3, [r4, #12]
 800d5dc:	4632      	mov	r2, r6
 800d5de:	463b      	mov	r3, r7
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e6:	f000 b817 	b.w	800d618 <_write_r>

0800d5ea <__sseek>:
 800d5ea:	b510      	push	{r4, lr}
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f2:	f000 f885 	bl	800d700 <_lseek_r>
 800d5f6:	1c43      	adds	r3, r0, #1
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	bf15      	itete	ne
 800d5fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d606:	81a3      	strheq	r3, [r4, #12]
 800d608:	bf18      	it	ne
 800d60a:	81a3      	strhne	r3, [r4, #12]
 800d60c:	bd10      	pop	{r4, pc}

0800d60e <__sclose>:
 800d60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d612:	f000 b831 	b.w	800d678 <_close_r>
	...

0800d618 <_write_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4d07      	ldr	r5, [pc, #28]	; (800d638 <_write_r+0x20>)
 800d61c:	4604      	mov	r4, r0
 800d61e:	4608      	mov	r0, r1
 800d620:	4611      	mov	r1, r2
 800d622:	2200      	movs	r2, #0
 800d624:	602a      	str	r2, [r5, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	f7f5 fd53 	bl	80030d2 <_write>
 800d62c:	1c43      	adds	r3, r0, #1
 800d62e:	d102      	bne.n	800d636 <_write_r+0x1e>
 800d630:	682b      	ldr	r3, [r5, #0]
 800d632:	b103      	cbz	r3, 800d636 <_write_r+0x1e>
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	bd38      	pop	{r3, r4, r5, pc}
 800d638:	20000bc0 	.word	0x20000bc0

0800d63c <__assert_func>:
 800d63c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d63e:	4614      	mov	r4, r2
 800d640:	461a      	mov	r2, r3
 800d642:	4b09      	ldr	r3, [pc, #36]	; (800d668 <__assert_func+0x2c>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4605      	mov	r5, r0
 800d648:	68d8      	ldr	r0, [r3, #12]
 800d64a:	b14c      	cbz	r4, 800d660 <__assert_func+0x24>
 800d64c:	4b07      	ldr	r3, [pc, #28]	; (800d66c <__assert_func+0x30>)
 800d64e:	9100      	str	r1, [sp, #0]
 800d650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d654:	4906      	ldr	r1, [pc, #24]	; (800d670 <__assert_func+0x34>)
 800d656:	462b      	mov	r3, r5
 800d658:	f000 f81e 	bl	800d698 <fiprintf>
 800d65c:	f000 f893 	bl	800d786 <abort>
 800d660:	4b04      	ldr	r3, [pc, #16]	; (800d674 <__assert_func+0x38>)
 800d662:	461c      	mov	r4, r3
 800d664:	e7f3      	b.n	800d64e <__assert_func+0x12>
 800d666:	bf00      	nop
 800d668:	20000044 	.word	0x20000044
 800d66c:	0800e3cd 	.word	0x0800e3cd
 800d670:	0800e3da 	.word	0x0800e3da
 800d674:	0800e408 	.word	0x0800e408

0800d678 <_close_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4d06      	ldr	r5, [pc, #24]	; (800d694 <_close_r+0x1c>)
 800d67c:	2300      	movs	r3, #0
 800d67e:	4604      	mov	r4, r0
 800d680:	4608      	mov	r0, r1
 800d682:	602b      	str	r3, [r5, #0]
 800d684:	f7f5 fd41 	bl	800310a <_close>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	d102      	bne.n	800d692 <_close_r+0x1a>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	b103      	cbz	r3, 800d692 <_close_r+0x1a>
 800d690:	6023      	str	r3, [r4, #0]
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	20000bc0 	.word	0x20000bc0

0800d698 <fiprintf>:
 800d698:	b40e      	push	{r1, r2, r3}
 800d69a:	b503      	push	{r0, r1, lr}
 800d69c:	4601      	mov	r1, r0
 800d69e:	ab03      	add	r3, sp, #12
 800d6a0:	4805      	ldr	r0, [pc, #20]	; (800d6b8 <fiprintf+0x20>)
 800d6a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6a6:	6800      	ldr	r0, [r0, #0]
 800d6a8:	9301      	str	r3, [sp, #4]
 800d6aa:	f7ff fdf9 	bl	800d2a0 <_vfiprintf_r>
 800d6ae:	b002      	add	sp, #8
 800d6b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6b4:	b003      	add	sp, #12
 800d6b6:	4770      	bx	lr
 800d6b8:	20000044 	.word	0x20000044

0800d6bc <_fstat_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4d07      	ldr	r5, [pc, #28]	; (800d6dc <_fstat_r+0x20>)
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	4608      	mov	r0, r1
 800d6c6:	4611      	mov	r1, r2
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	f7f5 fd2a 	bl	8003122 <_fstat>
 800d6ce:	1c43      	adds	r3, r0, #1
 800d6d0:	d102      	bne.n	800d6d8 <_fstat_r+0x1c>
 800d6d2:	682b      	ldr	r3, [r5, #0]
 800d6d4:	b103      	cbz	r3, 800d6d8 <_fstat_r+0x1c>
 800d6d6:	6023      	str	r3, [r4, #0]
 800d6d8:	bd38      	pop	{r3, r4, r5, pc}
 800d6da:	bf00      	nop
 800d6dc:	20000bc0 	.word	0x20000bc0

0800d6e0 <_isatty_r>:
 800d6e0:	b538      	push	{r3, r4, r5, lr}
 800d6e2:	4d06      	ldr	r5, [pc, #24]	; (800d6fc <_isatty_r+0x1c>)
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	4608      	mov	r0, r1
 800d6ea:	602b      	str	r3, [r5, #0]
 800d6ec:	f7f5 fd29 	bl	8003142 <_isatty>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	d102      	bne.n	800d6fa <_isatty_r+0x1a>
 800d6f4:	682b      	ldr	r3, [r5, #0]
 800d6f6:	b103      	cbz	r3, 800d6fa <_isatty_r+0x1a>
 800d6f8:	6023      	str	r3, [r4, #0]
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	20000bc0 	.word	0x20000bc0

0800d700 <_lseek_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4d07      	ldr	r5, [pc, #28]	; (800d720 <_lseek_r+0x20>)
 800d704:	4604      	mov	r4, r0
 800d706:	4608      	mov	r0, r1
 800d708:	4611      	mov	r1, r2
 800d70a:	2200      	movs	r2, #0
 800d70c:	602a      	str	r2, [r5, #0]
 800d70e:	461a      	mov	r2, r3
 800d710:	f7f5 fd22 	bl	8003158 <_lseek>
 800d714:	1c43      	adds	r3, r0, #1
 800d716:	d102      	bne.n	800d71e <_lseek_r+0x1e>
 800d718:	682b      	ldr	r3, [r5, #0]
 800d71a:	b103      	cbz	r3, 800d71e <_lseek_r+0x1e>
 800d71c:	6023      	str	r3, [r4, #0]
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	20000bc0 	.word	0x20000bc0

0800d724 <__ascii_mbtowc>:
 800d724:	b082      	sub	sp, #8
 800d726:	b901      	cbnz	r1, 800d72a <__ascii_mbtowc+0x6>
 800d728:	a901      	add	r1, sp, #4
 800d72a:	b142      	cbz	r2, 800d73e <__ascii_mbtowc+0x1a>
 800d72c:	b14b      	cbz	r3, 800d742 <__ascii_mbtowc+0x1e>
 800d72e:	7813      	ldrb	r3, [r2, #0]
 800d730:	600b      	str	r3, [r1, #0]
 800d732:	7812      	ldrb	r2, [r2, #0]
 800d734:	1e10      	subs	r0, r2, #0
 800d736:	bf18      	it	ne
 800d738:	2001      	movne	r0, #1
 800d73a:	b002      	add	sp, #8
 800d73c:	4770      	bx	lr
 800d73e:	4610      	mov	r0, r2
 800d740:	e7fb      	b.n	800d73a <__ascii_mbtowc+0x16>
 800d742:	f06f 0001 	mvn.w	r0, #1
 800d746:	e7f8      	b.n	800d73a <__ascii_mbtowc+0x16>

0800d748 <_read_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4d07      	ldr	r5, [pc, #28]	; (800d768 <_read_r+0x20>)
 800d74c:	4604      	mov	r4, r0
 800d74e:	4608      	mov	r0, r1
 800d750:	4611      	mov	r1, r2
 800d752:	2200      	movs	r2, #0
 800d754:	602a      	str	r2, [r5, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	f7f5 fc9e 	bl	8003098 <_read>
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	d102      	bne.n	800d766 <_read_r+0x1e>
 800d760:	682b      	ldr	r3, [r5, #0]
 800d762:	b103      	cbz	r3, 800d766 <_read_r+0x1e>
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	bd38      	pop	{r3, r4, r5, pc}
 800d768:	20000bc0 	.word	0x20000bc0

0800d76c <__ascii_wctomb>:
 800d76c:	b149      	cbz	r1, 800d782 <__ascii_wctomb+0x16>
 800d76e:	2aff      	cmp	r2, #255	; 0xff
 800d770:	bf85      	ittet	hi
 800d772:	238a      	movhi	r3, #138	; 0x8a
 800d774:	6003      	strhi	r3, [r0, #0]
 800d776:	700a      	strbls	r2, [r1, #0]
 800d778:	f04f 30ff 	movhi.w	r0, #4294967295
 800d77c:	bf98      	it	ls
 800d77e:	2001      	movls	r0, #1
 800d780:	4770      	bx	lr
 800d782:	4608      	mov	r0, r1
 800d784:	4770      	bx	lr

0800d786 <abort>:
 800d786:	b508      	push	{r3, lr}
 800d788:	2006      	movs	r0, #6
 800d78a:	f000 f82b 	bl	800d7e4 <raise>
 800d78e:	2001      	movs	r0, #1
 800d790:	f7f5 fc78 	bl	8003084 <_exit>

0800d794 <_raise_r>:
 800d794:	291f      	cmp	r1, #31
 800d796:	b538      	push	{r3, r4, r5, lr}
 800d798:	4604      	mov	r4, r0
 800d79a:	460d      	mov	r5, r1
 800d79c:	d904      	bls.n	800d7a8 <_raise_r+0x14>
 800d79e:	2316      	movs	r3, #22
 800d7a0:	6003      	str	r3, [r0, #0]
 800d7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a6:	bd38      	pop	{r3, r4, r5, pc}
 800d7a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d7aa:	b112      	cbz	r2, 800d7b2 <_raise_r+0x1e>
 800d7ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7b0:	b94b      	cbnz	r3, 800d7c6 <_raise_r+0x32>
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f000 f830 	bl	800d818 <_getpid_r>
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	4601      	mov	r1, r0
 800d7bc:	4620      	mov	r0, r4
 800d7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7c2:	f000 b817 	b.w	800d7f4 <_kill_r>
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d00a      	beq.n	800d7e0 <_raise_r+0x4c>
 800d7ca:	1c59      	adds	r1, r3, #1
 800d7cc:	d103      	bne.n	800d7d6 <_raise_r+0x42>
 800d7ce:	2316      	movs	r3, #22
 800d7d0:	6003      	str	r3, [r0, #0]
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	e7e7      	b.n	800d7a6 <_raise_r+0x12>
 800d7d6:	2400      	movs	r4, #0
 800d7d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7dc:	4628      	mov	r0, r5
 800d7de:	4798      	blx	r3
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	e7e0      	b.n	800d7a6 <_raise_r+0x12>

0800d7e4 <raise>:
 800d7e4:	4b02      	ldr	r3, [pc, #8]	; (800d7f0 <raise+0xc>)
 800d7e6:	4601      	mov	r1, r0
 800d7e8:	6818      	ldr	r0, [r3, #0]
 800d7ea:	f7ff bfd3 	b.w	800d794 <_raise_r>
 800d7ee:	bf00      	nop
 800d7f0:	20000044 	.word	0x20000044

0800d7f4 <_kill_r>:
 800d7f4:	b538      	push	{r3, r4, r5, lr}
 800d7f6:	4d07      	ldr	r5, [pc, #28]	; (800d814 <_kill_r+0x20>)
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	4608      	mov	r0, r1
 800d7fe:	4611      	mov	r1, r2
 800d800:	602b      	str	r3, [r5, #0]
 800d802:	f7f5 fc2f 	bl	8003064 <_kill>
 800d806:	1c43      	adds	r3, r0, #1
 800d808:	d102      	bne.n	800d810 <_kill_r+0x1c>
 800d80a:	682b      	ldr	r3, [r5, #0]
 800d80c:	b103      	cbz	r3, 800d810 <_kill_r+0x1c>
 800d80e:	6023      	str	r3, [r4, #0]
 800d810:	bd38      	pop	{r3, r4, r5, pc}
 800d812:	bf00      	nop
 800d814:	20000bc0 	.word	0x20000bc0

0800d818 <_getpid_r>:
 800d818:	f7f5 bc1c 	b.w	8003054 <_getpid>

0800d81c <_init>:
 800d81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81e:	bf00      	nop
 800d820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d822:	bc08      	pop	{r3}
 800d824:	469e      	mov	lr, r3
 800d826:	4770      	bx	lr

0800d828 <_fini>:
 800d828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d82a:	bf00      	nop
 800d82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d82e:	bc08      	pop	{r3}
 800d830:	469e      	mov	lr, r3
 800d832:	4770      	bx	lr
